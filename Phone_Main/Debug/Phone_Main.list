
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004768  08004768  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004768  08004768  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b8  20000074  080047e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  2000262c  080047e4  0002262c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ca  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000262d  00000000  00000000  0002fa67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  00032098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001925c  00000000  00000000  00033cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc4f  00000000  00000000  0004cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009185d  00000000  00000000  00059b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000eb474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004628 	.word	0x08004628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004628 	.word	0x08004628

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000090 	.word	0x20000090
 800018c:	200000e4 	.word	0x200000e4

08000190 <HAL_UART_RxCpltCallback>:
te_call_state CALL_STATE = NO_CALL;
te_phone_state PHONE_STATE = IDLE;
te_sms_state SMS_STATE = NO_SMS;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	2b0a      	cmp	r3, #10
 80001a2:	d10f      	bne.n	80001c4 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_UART_RxCpltCallback+0x60>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 80001b6:	4413      	add	r3, r2
 80001b8:	2201      	movs	r2, #1
 80001ba:	4619      	mov	r1, r3
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <HAL_UART_RxCpltCallback+0x64>)
 80001be:	f002 f869 	bl	8002294 <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001c2:	e00d      	b.n	80001e0 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	4a07      	ldr	r2, [pc, #28]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001cc:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001ce:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a06      	ldr	r2, [pc, #24]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 80001d4:	4413      	add	r3, r2
 80001d6:	2201      	movs	r2, #1
 80001d8:	4619      	mov	r1, r3
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <HAL_UART_RxCpltCallback+0x64>)
 80001dc:	f002 f85a 	bl	8002294 <HAL_UART_Receive_IT>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	20002448 	.word	0x20002448
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	20002598 	.word	0x20002598

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fd53 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f867 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f8fd 	bl	8000404 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800020a:	f000 f8a7 	bl	800035c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800020e:	f000 f8cf 	bl	80003b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //pSendAtCommand("ATE0", 400);
  /* USER CODE END 2 */
  char close_echo[] = "ATE0\r\n";
 8000212:	4a28      	ldr	r2, [pc, #160]	; (80002b4 <main+0xbc>)
 8000214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021c:	6018      	str	r0, [r3, #0]
 800021e:	3304      	adds	r3, #4
 8000220:	8019      	strh	r1, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	0c0a      	lsrs	r2, r1, #16
 8000226:	701a      	strb	r2, [r3, #0]
//  char call_command[] = "ATD+905383674319i;\r\n";
//  char call_status[] = "AT+CPAS\r\n";
//  char baud_rate[] = "AT+IPR?\r\n";
  char response[64] = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2240      	movs	r2, #64	; 0x40
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fd85 	bl	8003d3e <memset>
  HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ff89 	bl	8000150 <strlen>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000246:	23c8      	movs	r3, #200	; 0xc8
 8000248:	481b      	ldr	r0, [pc, #108]	; (80002b8 <main+0xc0>)
 800024a:	f001 fef2 	bl	8002032 <HAL_UART_Transmit>
  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800024e:	4639      	mov	r1, r7
 8000250:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000254:	2240      	movs	r2, #64	; 0x40
 8000256:	4818      	ldr	r0, [pc, #96]	; (80002b8 <main+0xc0>)
 8000258:	f001 ff7d 	bl	8002156 <HAL_UART_Receive>
  memset(response, 0, sizeof(response));
 800025c:	463b      	mov	r3, r7
 800025e:	2240      	movs	r2, #64	; 0x40
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fd6b 	bl	8003d3e <memset>
////  if(DISPLAY_TO_GSM_Q == NULL)
//  {
//	  __NOP();
//  }

  if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0xc4>)
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	2303      	movs	r3, #3
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2300      	movs	r3, #0
 8000272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <main+0xc8>)
 8000278:	4812      	ldr	r0, [pc, #72]	; (80002c4 <main+0xcc>)
 800027a:	f002 fc69 	bl	8002b50 <xTaskCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	2b01      	cmp	r3, #1
 8000282:	d000      	beq.n	8000286 <main+0x8e>
  {
	  __NOP();
 8000284:	bf00      	nop
  }
  if(xTaskCreate(display_task_func, "display", 256, NULL, 3, &display_task) != pdPASS)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <main+0xd0>)
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	2303      	movs	r3, #3
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000294:	490d      	ldr	r1, [pc, #52]	; (80002cc <main+0xd4>)
 8000296:	480e      	ldr	r0, [pc, #56]	; (80002d0 <main+0xd8>)
 8000298:	f002 fc5a 	bl	8002b50 <xTaskCreate>
 800029c:	4603      	mov	r3, r0
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d000      	beq.n	80002a4 <main+0xac>
  {
	  __NOP();
 80002a2:	bf00      	nop
  }
  vTaskStartScheduler();
 80002a4:	f002 fe44 	bl	8002f30 <vTaskStartScheduler>
 80002a8:	2300      	movs	r3, #0

}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3748      	adds	r7, #72	; 0x48
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	08004658 	.word	0x08004658
 80002b8:	20002550 	.word	0x20002550
 80002bc:	200025d8 	.word	0x200025d8
 80002c0:	08004640 	.word	0x08004640
 80002c4:	08000531 	.word	0x08000531
 80002c8:	2000254c 	.word	0x2000254c
 80002cc:	08004650 	.word	0x08004650
 80002d0:	080005a5 	.word	0x080005a5

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fd2b 	bl	8003d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000312:	2300      	movs	r3, #0
 8000314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f000 ffa6 	bl	800126c <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000326:	f000 fb15 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2302      	movs	r3, #2
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fa11 	bl	800176c <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000350:	f000 fb00 	bl	8000954 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3740      	adds	r7, #64	; 0x40
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART1_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000394:	f001 fe00 	bl	8001f98 <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 fad9 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20002550 	.word	0x20002550
 80003ac:	40013800 	.word	0x40013800

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_USART2_UART_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e8:	f001 fdd6 	bl	8001f98 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003f2:	f000 faaf 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20002598 	.word	0x20002598
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_GPIO_Init+0x40>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <MX_GPIO_Init+0x40>)
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0320 	and.w	r3, r3, #32
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a07      	ldr	r2, [pc, #28]	; (8000444 <MX_GPIO_Init+0x40>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <parse_display_request>:

/* USER CODE BEGIN 4 */
void parse_display_request(char *data)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af02      	add	r7, sp, #8
 800044e:	6078      	str	r0, [r7, #4]
	if(data[1] == 0x01 && data[2] == 0x10) //call
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d11d      	bne.n	8000496 <parse_display_request+0x4e>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3302      	adds	r3, #2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b10      	cmp	r3, #16
 8000462:	d118      	bne.n	8000496 <parse_display_request+0x4e>
	{
		if(call_task != NULL)
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <parse_display_request+0xc8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <parse_display_request+0x2e>
			vTaskDelete(call_task);
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <parse_display_request+0xc8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f002 fc9b 	bl	8002dac <vTaskDelete>
		if(xTaskCreate(call_task_func, "call_task", 1024, data, 7, &call_task) != pdPASS)
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <parse_display_request+0xc8>)
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	2307      	movs	r3, #7
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000484:	4923      	ldr	r1, [pc, #140]	; (8000514 <parse_display_request+0xcc>)
 8000486:	4824      	ldr	r0, [pc, #144]	; (8000518 <parse_display_request+0xd0>)
 8000488:	f002 fb62 	bl	8002b50 <xTaskCreate>
 800048c:	4603      	mov	r3, r0
 800048e:	2b01      	cmp	r3, #1
 8000490:	d03a      	beq.n	8000508 <parse_display_request+0xc0>
		{
		  __NOP();
 8000492:	bf00      	nop
		if(xTaskCreate(call_task_func, "call_task", 1024, data, 7, &call_task) != pdPASS)
 8000494:	e038      	b.n	8000508 <parse_display_request+0xc0>
		}
//		request.op = MAKE_CALL;
//		memcpy(request.data, data, RX_SIZE);
	}
	else if(data[1] == 0x03 && data[2] == 0x02)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d108      	bne.n	80004b2 <parse_display_request+0x6a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3302      	adds	r3, #2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d103      	bne.n	80004b2 <parse_display_request+0x6a>
	{
		CALL_STATE = TERMINATE_CALL;
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <parse_display_request+0xd4>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	e02a      	b.n	8000508 <parse_display_request+0xc0>

	}
	else if(data[1] == 0x02 && data[2] == 0x39)//Send sms
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3301      	adds	r3, #1
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d125      	bne.n	8000508 <parse_display_request+0xc0>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3302      	adds	r3, #2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b39      	cmp	r3, #57	; 0x39
 80004c4:	d120      	bne.n	8000508 <parse_display_request+0xc0>
	{
		if(message_task != NULL)
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <parse_display_request+0xd8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d004      	beq.n	80004d8 <parse_display_request+0x90>
			vTaskDelete(message_task);
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <parse_display_request+0xd8>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fc6a 	bl	8002dac <vTaskDelete>
		if(xTaskCreate(message_task_func, "message_task", 1024, data, 7, &message_task) != pdPASS)
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <parse_display_request+0xd8>)
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	2307      	movs	r3, #7
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e6:	490f      	ldr	r1, [pc, #60]	; (8000524 <parse_display_request+0xdc>)
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <parse_display_request+0xe0>)
 80004ea:	f002 fb31 	bl	8002b50 <xTaskCreate>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d000      	beq.n	80004f6 <parse_display_request+0xae>
		{
		  __NOP();
 80004f4:	bf00      	nop
		}
		while(SMS_STATE != COMPLETED_SMS);
 80004f6:	bf00      	nop
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <parse_display_request+0xe4>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d1fb      	bne.n	80004f8 <parse_display_request+0xb0>
		SMS_STATE = NO_SMS;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <parse_display_request+0xe4>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	}
}
 8000506:	e7ff      	b.n	8000508 <parse_display_request+0xc0>
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20002548 	.word	0x20002548
 8000514:	08004660 	.word	0x08004660
 8000518:	08000729 	.word	0x08000729
 800051c:	200002e9 	.word	0x200002e9
 8000520:	20002590 	.word	0x20002590
 8000524:	0800466c 	.word	0x0800466c
 8000528:	080005b1 	.word	0x080005b1
 800052c:	200002ea 	.word	0x200002ea

08000530 <display_uart_task_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_display_task_func */
void display_uart_task_func(void *argument)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0c2      	sub	sp, #264	; 0x108
 8000534:	af00      	add	r7, sp, #0
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	6018      	str	r0, [r3, #0]
	char data[RX_SIZE] = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4618      	mov	r0, r3
 8000540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000544:	461a      	mov	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 fbf9 	bl	8003d3e <memset>
  /* USER CODE BEGIN 5 */
	HAL_UART_Receive_IT(DISPLAY_UART, &display_rx[display_rx_index], 1);
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <display_uart_task_func+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a11      	ldr	r2, [pc, #68]	; (8000598 <display_uart_task_func+0x68>)
 8000552:	4413      	add	r3, r2
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <display_uart_task_func+0x6c>)
 800055a:	f001 fe9b 	bl	8002294 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  if(display_rec_flag)
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <display_uart_task_func+0x70>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0fb      	beq.n	800055e <display_uart_task_func+0x2e>
	  {
		  memcpy(&data[0], &display_rx[0], RX_SIZE);
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056e:	490a      	ldr	r1, [pc, #40]	; (8000598 <display_uart_task_func+0x68>)
 8000570:	4618      	mov	r0, r3
 8000572:	f003 fbd9 	bl	8003d28 <memcpy>
		  memset(&display_rx[0], 0, RX_SIZE);
 8000576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057a:	2100      	movs	r1, #0
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <display_uart_task_func+0x68>)
 800057e:	f003 fbde 	bl	8003d3e <memset>
		  display_rec_flag = FALSE;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <display_uart_task_func+0x70>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
		  parse_display_request(&data[0]);
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff5b 	bl	8000448 <parse_display_request>
	  if(display_rec_flag)
 8000592:	e7e4      	b.n	800055e <display_uart_task_func+0x2e>
 8000594:	200002e4 	.word	0x200002e4
 8000598:	20002448 	.word	0x20002448
 800059c:	20002598 	.word	0x20002598
 80005a0:	200002e8 	.word	0x200002e8

080005a4 <display_task_func>:
  }
  /* USER CODE END 5 */
}

void display_task_func(void *argument)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  for(;;)
 80005ac:	e7fe      	b.n	80005ac <display_task_func+0x8>
	...

080005b0 <message_task_func>:
  }
  /* USER CODE END gsm_task_func */
}

void message_task_func(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	6018      	str	r0, [r3, #0]
	char data[RX_SIZE] = {0};
 80005bc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005c0:	4618      	mov	r0, r3
 80005c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c6:	461a      	mov	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 fbb8 	bl	8003d3e <memset>
	char response[128] = {0};
 80005ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80005d2:	4618      	mov	r0, r3
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f003 fbb0 	bl	8003d3e <memset>
	char text_mod[] = "AT+CMGF=1\r\n";
 80005de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80005e2:	4a4c      	ldr	r2, [pc, #304]	; (8000714 <message_task_func+0x164>)
 80005e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 80005ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ee:	4618      	mov	r0, r3
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	461a      	mov	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fba2 	bl	8003d3e <memset>
	char message_command[160] = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	461a      	mov	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f003 fb9a 	bl	8003d3e <memset>
	memcpy(&data[0], (char*)&argument[0], RX_SIZE);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8000610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	f003 fb87 	bl	8003d28 <memcpy>
	memset(&argument[0], 0, RX_SIZE);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000620:	2100      	movs	r1, #0
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	f003 fb8b 	bl	8003d3e <memset>
	SMS_STATE = SEND_SMS;
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <message_task_func+0x168>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
	char *number = strtok(&data[7], ">");
 800062e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000632:	3307      	adds	r3, #7
 8000634:	4939      	ldr	r1, [pc, #228]	; (800071c <message_task_func+0x16c>)
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fbb2 	bl	8003da0 <strtok>
 800063c:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
	char *message = strtok(NULL, ">");
 8000640:	4936      	ldr	r1, [pc, #216]	; (800071c <message_task_func+0x16c>)
 8000642:	2000      	movs	r0, #0
 8000644:	f003 fbac 	bl	8003da0 <strtok>
 8000648:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
	sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 800064c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000650:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8000654:	4932      	ldr	r1, [pc, #200]	; (8000720 <message_task_func+0x170>)
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fb7a 	bl	8003d50 <siprintf>
	sprintf(&message_command[0], "%s", message);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fb93 	bl	8003d90 <strcpy>
	message_command[strlen(message_command)-1] = 26;
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fd6e 	bl	8000150 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	3b01      	subs	r3, #1
 8000678:	f107 020c 	add.w	r2, r7, #12
 800067c:	211a      	movs	r1, #26
 800067e:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(GSM_UART, &text_mod, strlen(text_mod), 300);
 8000680:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fd63 	bl	8000150 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000692:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000696:	4823      	ldr	r0, [pc, #140]	; (8000724 <message_task_func+0x174>)
 8000698:	f001 fccb 	bl	8002032 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
 800069c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80006a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	481f      	ldr	r0, [pc, #124]	; (8000724 <message_task_func+0x174>)
 80006a8:	f001 fd55 	bl	8002156 <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, &sender_command, strlen(sender_command), 300);
 80006ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4d 	bl	8000150 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80006be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <message_task_func+0x174>)
 80006c4:	f001 fcb5 	bl	8002032 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
 80006c8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80006cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <message_task_func+0x174>)
 80006d4:	f001 fd3f 	bl	8002156 <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, &message_command, strlen(sender_command), 300);
 80006d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd37 	bl	8000150 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	f107 010c 	add.w	r1, r7, #12
 80006ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <message_task_func+0x174>)
 80006f0:	f001 fc9f 	bl	8002032 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
 80006f4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80006f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <message_task_func+0x174>)
 8000700:	f001 fd29 	bl	8002156 <HAL_UART_Receive>
	SMS_STATE = COMPLETED_SMS;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <message_task_func+0x168>)
 8000706:	2202      	movs	r2, #2
 8000708:	701a      	strb	r2, [r3, #0]
	vTaskDelete(NULL);
 800070a:	2000      	movs	r0, #0
 800070c:	f002 fb4e 	bl	8002dac <vTaskDelete>
	while(1);
 8000710:	e7fe      	b.n	8000710 <message_task_func+0x160>
 8000712:	bf00      	nop
 8000714:	08004690 	.word	0x08004690
 8000718:	200002ea 	.word	0x200002ea
 800071c:	0800467c 	.word	0x0800467c
 8000720:	08004680 	.word	0x08004680
 8000724:	20002550 	.word	0x20002550

08000728 <call_task_func>:
}

void call_task_func(void *argument)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800072e:	af00      	add	r7, sp, #0
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  char data[RX_SIZE] = {0};
 8000734:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000738:	4618      	mov	r0, r3
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	461a      	mov	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fafc 	bl	8003d3e <memset>
  char response[128] = {0};
 8000746:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800074a:	4618      	mov	r0, r3
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 faf4 	bl	8003d3e <memset>
  char custom_command[64] = {0};
 8000756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800075a:	4618      	mov	r0, r3
 800075c:	2340      	movs	r3, #64	; 0x40
 800075e:	461a      	mov	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f003 faec 	bl	8003d3e <memset>
  char check_status[] = "AT+CPAS\r\n";
 8000766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076a:	4a69      	ldr	r2, [pc, #420]	; (8000910 <call_task_func+0x1e8>)
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	c303      	stmia	r3!, {r0, r1}
 8000770:	801a      	strh	r2, [r3, #0]
  char terminate_call[] = "ATH0\r\n";
 8000772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000776:	4a67      	ldr	r2, [pc, #412]	; (8000914 <call_task_func+0x1ec>)
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	8019      	strh	r1, [r3, #0]
 8000782:	3302      	adds	r3, #2
 8000784:	0c0a      	lsrs	r2, r1, #16
 8000786:	701a      	strb	r2, [r3, #0]
  char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078c:	4a62      	ldr	r2, [pc, #392]	; (8000918 <call_task_func+0x1f0>)
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800079e:	6020      	str	r0, [r4, #0]
 80007a0:	3404      	adds	r4, #4
 80007a2:	8021      	strh	r1, [r4, #0]
  char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4a5c      	ldr	r2, [pc, #368]	; (800091c <call_task_func+0x1f4>)
 80007aa:	461c      	mov	r4, r3
 80007ac:	4615      	mov	r5, r2
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	c403      	stmia	r4!, {r0, r1}
 80007b8:	8022      	strh	r2, [r4, #0]
  const TickType_t delay = 500 / portTICK_PERIOD_MS;
 80007ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007be:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  memcpy(&data[0], (char*)&argument[0], RX_SIZE);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80007c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	f003 faab 	bl	8003d28 <memcpy>
  memset(&argument[0], 0, RX_SIZE);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d8:	2100      	movs	r1, #0
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	f003 faaf 	bl	8003d3e <memset>
  CALL_STATE = INITIATE_CALL;
 80007e0:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <call_task_func+0x1f8>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
  while(1)
  {
	  switch(CALL_STATE)
 80007e6:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <call_task_func+0x1f8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d033      	beq.n	8000856 <call_task_func+0x12e>
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d04f      	beq.n	8000892 <call_task_func+0x16a>
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d000      	beq.n	80007f8 <call_task_func+0xd0>
		  HAL_UART_Transmit(DISPLAY_UART, start_page_timer, strlen(start_page_timer), 300);
		  vTaskDelete(NULL);
		  CALL_STATE = NO_CALL;
		  break;
	  default:
		  break;
 80007f6:	e085      	b.n	8000904 <call_task_func+0x1dc>
		  data[strlen(data)-1] = '\0';
 80007f8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fca7 	bl	8000150 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	3b01      	subs	r3, #1
 8000806:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800080a:	2100      	movs	r1, #0
 800080c:	54d1      	strb	r1, [r2, r3]
		  sprintf(&custom_command[0], "ATD+%si;\r\n", &data[8]);
 800080e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000812:	f103 0208 	add.w	r2, r3, #8
 8000816:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800081a:	4942      	ldr	r1, [pc, #264]	; (8000924 <call_task_func+0x1fc>)
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fa97 	bl	8003d50 <siprintf>
		  HAL_UART_Transmit(GSM_UART, &custom_command, strlen(custom_command), 500);
 8000822:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fc92 	bl	8000150 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000834:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000838:	483b      	ldr	r0, [pc, #236]	; (8000928 <call_task_func+0x200>)
 800083a:	f001 fbfa 	bl	8002032 <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 5000);
 800083e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000842:	f241 3388 	movw	r3, #5000	; 0x1388
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	4837      	ldr	r0, [pc, #220]	; (8000928 <call_task_func+0x200>)
 800084a:	f001 fc84 	bl	8002156 <HAL_UART_Receive>
		  CALL_STATE = CHECK_CALL_STATE;
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <call_task_func+0x1f8>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
		  break;
 8000854:	e056      	b.n	8000904 <call_task_func+0x1dc>
		  HAL_UART_Transmit(GSM_UART, &check_status, strlen(check_status), 200);
 8000856:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fc78 	bl	8000150 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000868:	23c8      	movs	r3, #200	; 0xc8
 800086a:	482f      	ldr	r0, [pc, #188]	; (8000928 <call_task_func+0x200>)
 800086c:	f001 fbe1 	bl	8002032 <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
 8000870:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000874:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	482b      	ldr	r0, [pc, #172]	; (8000928 <call_task_func+0x200>)
 800087c:	f001 fc6b 	bl	8002156 <HAL_UART_Receive>
		  if(response[9] == '0')
 8000880:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000884:	7a5b      	ldrb	r3, [r3, #9]
 8000886:	2b30      	cmp	r3, #48	; 0x30
 8000888:	d13b      	bne.n	8000902 <call_task_func+0x1da>
			  CALL_STATE = TERMINATE_CALL;
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <call_task_func+0x1f8>)
 800088c:	2204      	movs	r2, #4
 800088e:	701a      	strb	r2, [r3, #0]
		  break;
 8000890:	e037      	b.n	8000902 <call_task_func+0x1da>
		  HAL_UART_Transmit(GSM_UART, &terminate_call, strlen(terminate_call), 200);
 8000892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fc5a 	bl	8000150 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80008a4:	23c8      	movs	r3, #200	; 0xc8
 80008a6:	4820      	ldr	r0, [pc, #128]	; (8000928 <call_task_func+0x200>)
 80008a8:	f001 fbc3 	bl	8002032 <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
 80008ac:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80008b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <call_task_func+0x200>)
 80008b8:	f001 fc4d 	bl	8002156 <HAL_UART_Receive>
		  HAL_UART_Transmit(DISPLAY_UART, send_call_end, strlen(send_call_end), 300);
 80008bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc45 	bl	8000150 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008d2:	4816      	ldr	r0, [pc, #88]	; (800092c <call_task_func+0x204>)
 80008d4:	f001 fbad 	bl	8002032 <HAL_UART_Transmit>
		  HAL_UART_Transmit(DISPLAY_UART, start_page_timer, strlen(start_page_timer), 300);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc37 	bl	8000150 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	f107 010c 	add.w	r1, r7, #12
 80008ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <call_task_func+0x204>)
 80008f0:	f001 fb9f 	bl	8002032 <HAL_UART_Transmit>
		  vTaskDelete(NULL);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f002 fa59 	bl	8002dac <vTaskDelete>
		  CALL_STATE = NO_CALL;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <call_task_func+0x1f8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
		  break;
 8000900:	e000      	b.n	8000904 <call_task_func+0x1dc>
		  break;
 8000902:	bf00      	nop
	  }
	  vTaskDelay(delay);
 8000904:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8000908:	f002 fade 	bl	8002ec8 <vTaskDelay>
	  switch(CALL_STATE)
 800090c:	e76b      	b.n	80007e6 <call_task_func+0xbe>
 800090e:	bf00      	nop
 8000910:	080046a8 	.word	0x080046a8
 8000914:	080046b4 	.word	0x080046b4
 8000918:	080046bc 	.word	0x080046bc
 800091c:	080046e4 	.word	0x080046e4
 8000920:	200002e9 	.word	0x200002e9
 8000924:	0800469c 	.word	0x0800469c
 8000928:	20002550 	.word	0x20002550
 800092c:	20002598 	.word	0x20002598

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 f9c7 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40012c00 	.word	0x40012c00

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095a:	e7fe      	b.n	800095a <Error_Handler+0x6>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_MspInit+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_MspInit+0x68>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_MspInit+0x68>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_MspInit+0x68>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <HAL_MspInit+0x68>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x68>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fa6c 	bl	8000e76 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x6c>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_MspInit+0x6c>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a3b      	ldr	r2, [pc, #236]	; (8000ad4 <HAL_UART_MspInit+0x108>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d132      	bne.n	8000a52 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <HAL_UART_MspInit+0x110>)
 8000a32:	f000 fac1 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4824      	ldr	r0, [pc, #144]	; (8000adc <HAL_UART_MspInit+0x110>)
 8000a4c:	f000 fab4 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	e03c      	b.n	8000acc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_UART_MspInit+0x114>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d137      	bne.n	8000acc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_UART_MspInit+0x10c>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480f      	ldr	r0, [pc, #60]	; (8000adc <HAL_UART_MspInit+0x110>)
 8000aa0:	f000 fa8a 	bl	8000fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_UART_MspInit+0x110>)
 8000ab8:	f000 fa7e 	bl	8000fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	2026      	movs	r0, #38	; 0x26
 8000ac2:	f000 f9d8 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac6:	2026      	movs	r0, #38	; 0x26
 8000ac8:	f000 f9f1 	bl	8000eae <HAL_NVIC_EnableIRQ>
}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2019      	movs	r0, #25
 8000afa:	f000 f9bc 	bl	8000e76 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 f9d5 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_InitTick+0x9c>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_InitTick+0x9c>)
 8000b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_InitTick+0x9c>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ff9e 	bl	8001a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b2c:	f000 ff88 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8000b30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_InitTick+0xa0>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_InitTick+0xa8>)
 8000b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b62:	f000 ffcf 	bl	8001b04 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d104      	bne.n	8000b76 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b6e:	f001 f821 	bl	8001bb4 <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200025dc 	.word	0x200025dc
 8000b8c:	40012c00 	.word	0x40012c00

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
	...

08000bbc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM1_UP_IRQHandler+0x10>)
 8000bc2:	f001 f849 	bl	8001c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200025dc 	.word	0x200025dc

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART2_IRQHandler+0x10>)
 8000bd6:	f001 fbb1 	bl	800233c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20002598 	.word	0x20002598

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f003 f85e 	bl	8003cd4 <__errno>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20005000 	.word	0x20005000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	200002ec 	.word	0x200002ec
 8000c4c:	20002630 	.word	0x20002630

08000c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c5e:	e003      	b.n	8000c68 <LoopCopyDataInit>

08000c60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c66:	3104      	adds	r1, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c70:	d3f6      	bcc.n	8000c60 <CopyDataInit>
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c74:	e002      	b.n	8000c7c <LoopFillZerobss>

08000c76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c78:	f842 3b04 	str.w	r3, [r2], #4

08000c7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c80:	d3f9      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c82:	f7ff ffe5 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 f82b 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff fab5 	bl	80001f8 <main>
  bx lr
 8000c8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c90:	08004770 	.word	0x08004770
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c98:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000c9c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000ca0:	2000262c 	.word	0x2000262c

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x28>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f8d1 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff10 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe4a 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20002624 	.word	0x20002624

08000cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	20002624 	.word	0x20002624

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4906      	ldr	r1, [pc, #24]	; (8000da4 <__NVIC_EnableIRQ+0x34>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff4f 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff64 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ffb2 	bl	8000dfc <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff81 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff57 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d005      	beq.n	8000eee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e051      	b.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 020e 	bic.w	r2, r2, #14
 8000efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_DMA_Abort_IT+0xd0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d029      	beq.n	8000f6c <HAL_DMA_Abort_IT+0xa0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_DMA_Abort_IT+0xd4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d022      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x9c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_DMA_Abort_IT+0xd8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d01a      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x96>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_DMA_Abort_IT+0xdc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d012      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x90>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_DMA_Abort_IT+0xe0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00a      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x8a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_DMA_Abort_IT+0xe4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d102      	bne.n	8000f50 <HAL_DMA_Abort_IT+0x84>
 8000f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f4e:	e00e      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f54:	e00b      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5a:	e008      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	e005      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	e002      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f68:	2310      	movs	r3, #16
 8000f6a:	e000      	b.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_DMA_Abort_IT+0xe8>)
 8000f70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
    } 
  }
  return status;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020008 	.word	0x40020008
 8000fa0:	4002001c 	.word	0x4002001c
 8000fa4:	40020030 	.word	0x40020030
 8000fa8:	40020044 	.word	0x40020044
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	4002006c 	.word	0x4002006c
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e127      	b.n	800121c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8116 	bne.w	8001216 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d034      	beq.n	800105c <HAL_GPIO_Init+0xa4>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d80d      	bhi.n	8001012 <HAL_GPIO_Init+0x5a>
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d02b      	beq.n	8001052 <HAL_GPIO_Init+0x9a>
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d804      	bhi.n	8001008 <HAL_GPIO_Init+0x50>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d031      	beq.n	8001066 <HAL_GPIO_Init+0xae>
 8001002:	2b01      	cmp	r3, #1
 8001004:	d01c      	beq.n	8001040 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001006:	e048      	b.n	800109a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001008:	2b03      	cmp	r3, #3
 800100a:	d043      	beq.n	8001094 <HAL_GPIO_Init+0xdc>
 800100c:	2b11      	cmp	r3, #17
 800100e:	d01b      	beq.n	8001048 <HAL_GPIO_Init+0x90>
          break;
 8001010:	e043      	b.n	800109a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001012:	4a89      	ldr	r2, [pc, #548]	; (8001238 <HAL_GPIO_Init+0x280>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d026      	beq.n	8001066 <HAL_GPIO_Init+0xae>
 8001018:	4a87      	ldr	r2, [pc, #540]	; (8001238 <HAL_GPIO_Init+0x280>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d806      	bhi.n	800102c <HAL_GPIO_Init+0x74>
 800101e:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_GPIO_Init+0x284>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d020      	beq.n	8001066 <HAL_GPIO_Init+0xae>
 8001024:	4a86      	ldr	r2, [pc, #536]	; (8001240 <HAL_GPIO_Init+0x288>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01d      	beq.n	8001066 <HAL_GPIO_Init+0xae>
          break;
 800102a:	e036      	b.n	800109a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800102c:	4a85      	ldr	r2, [pc, #532]	; (8001244 <HAL_GPIO_Init+0x28c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0xae>
 8001032:	4a85      	ldr	r2, [pc, #532]	; (8001248 <HAL_GPIO_Init+0x290>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d016      	beq.n	8001066 <HAL_GPIO_Init+0xae>
 8001038:	4a84      	ldr	r2, [pc, #528]	; (800124c <HAL_GPIO_Init+0x294>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0xae>
          break;
 800103e:	e02c      	b.n	800109a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	623b      	str	r3, [r7, #32]
          break;
 8001046:	e028      	b.n	800109a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	3304      	adds	r3, #4
 800104e:	623b      	str	r3, [r7, #32]
          break;
 8001050:	e023      	b.n	800109a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	3308      	adds	r3, #8
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e01e      	b.n	800109a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	330c      	adds	r3, #12
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e019      	b.n	800109a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106e:	2304      	movs	r3, #4
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e012      	b.n	800109a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d105      	bne.n	8001088 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	611a      	str	r2, [r3, #16]
          break;
 8001086:	e008      	b.n	800109a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	615a      	str	r2, [r3, #20]
          break;
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2bff      	cmp	r3, #255	; 0xff
 800109e:	d801      	bhi.n	80010a4 <HAL_GPIO_Init+0xec>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	e001      	b.n	80010a8 <HAL_GPIO_Init+0xf0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2bff      	cmp	r3, #255	; 0xff
 80010ae:	d802      	bhi.n	80010b6 <HAL_GPIO_Init+0xfe>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x104>
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	3b08      	subs	r3, #8
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	210f      	movs	r1, #15
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	6a39      	ldr	r1, [r7, #32]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8096 	beq.w	8001216 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_GPIO_Init+0x298>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_GPIO_Init+0x298>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_GPIO_Init+0x298>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001102:	4a54      	ldr	r2, [pc, #336]	; (8001254 <HAL_GPIO_Init+0x29c>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x19e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4a      	ldr	r2, [pc, #296]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x19a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x196>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x192>
 8001146:	2303      	movs	r3, #3
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x1a0>
 800114a:	2304      	movs	r3, #4
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x1a0>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x1a0>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x1a0>
 8001156:	2300      	movs	r3, #0
 8001158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001168:	493a      	ldr	r1, [pc, #232]	; (8001254 <HAL_GPIO_Init+0x29c>)
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
 800118e:	e006      	b.n	800119e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	43db      	mvns	r3, r3
 8001198:	4933      	ldr	r1, [pc, #204]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	492e      	ldr	r1, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	43db      	mvns	r3, r3
 80011c0:	4929      	ldr	r1, [pc, #164]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4924      	ldr	r1, [pc, #144]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	491f      	ldr	r1, [pc, #124]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	491a      	ldr	r1, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	60cb      	str	r3, [r1, #12]
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	43db      	mvns	r3, r3
 8001210:	4915      	ldr	r1, [pc, #84]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001212:	4013      	ands	r3, r2
 8001214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	f47f aed0 	bne.w	8000fcc <HAL_GPIO_Init+0x14>
  }
}
 800122c:	bf00      	nop
 800122e:	372c      	adds	r7, #44	; 0x2c
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	10210000 	.word	0x10210000
 800123c:	10110000 	.word	0x10110000
 8001240:	10120000 	.word	0x10120000
 8001244:	10310000 	.word	0x10310000
 8001248:	10320000 	.word	0x10320000
 800124c:	10220000 	.word	0x10220000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40011000 	.word	0x40011000
 8001264:	40011400 	.word	0x40011400
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e26c      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001298:	4b8f      	ldr	r3, [pc, #572]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
 80012a4:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x12c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e246      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x76>
 80012d4:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a7f      	ldr	r2, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7a      	ldr	r2, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a77      	ldr	r2, [pc, #476]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0xbc>
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a71      	ldr	r2, [pc, #452]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fcd6 	bl	8000cf8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fcd2 	bl	8000cf8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1fa      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xe4>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcc2 	bl	8000cf8 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcbe 	bl	8000cf8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1e6      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x10c>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1ba      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4939      	ldr	r1, [pc, #228]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fc77 	bl	8000cf8 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc73 	bl	8000cf8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e19b      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fc56 	bl	8000cf8 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fc52 	bl	8000cf8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e17a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03a      	beq.n	80014f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fc36 	bl	8000cf8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fc32 	bl	8000cf8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e15a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 fb0a 	bl	8001ac8 <RCC_Delay>
 80014b4:	e01c      	b.n	80014f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc1c 	bl	8000cf8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e00f      	b.n	80014e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc18 	bl	8000cf8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d908      	bls.n	80014e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e140      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	42420000 	.word	0x42420000
 80014e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e9      	bne.n	80014c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a6 	beq.w	800164a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b94      	ldr	r3, [pc, #592]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a93      	ldr	r2, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fbd9 	bl	8000cf8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fbd5 	bl	8000cf8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0fd      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001570:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e02d      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x334>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	4b73      	ldr	r3, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a72      	ldr	r2, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x356>
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a69      	ldr	r2, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a66      	ldr	r2, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb89 	bl	8000cf8 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb85 	bl	8000cf8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0ab      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x37e>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb73 	bl	8000cf8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb6f 	bl	8000cf8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e095      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a47      	ldr	r2, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8081 	beq.w	8001756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d061      	beq.n	8001724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d146      	bne.n	80016f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb43 	bl	8000cf8 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb3f 	bl	8000cf8 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e067      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a19      	ldr	r1, [r3, #32]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	430b      	orrs	r3, r1
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb13 	bl	8000cf8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb0f 	bl	8000cf8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e037      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
 80016f4:	e02f      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fafc 	bl	8000cf8 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff faf8 	bl	8000cf8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e020      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x498>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e013      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	40007000 	.word	0x40007000
 8001768:	42420060 	.word	0x42420060

0800176c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d0      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d910      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4965      	ldr	r1, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d040      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e073      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4936      	ldr	r1, [pc, #216]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff fa4c 	bl	8000cf8 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fa48 	bl	8000cf8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e053      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d210      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4922      	ldr	r1, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4601      	mov	r1, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	fa21 f303 	lsr.w	r3, r1, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1cc>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f8e2 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	0800471c 	.word	0x0800471c
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001948:	1d3c      	adds	r4, r7, #4
 800194a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 800197a:	2b08      	cmp	r3, #8
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x46>
 800197e:	e02d      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001982:	623b      	str	r3, [r7, #32]
      break;
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001992:	4413      	add	r3, r2
 8001994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c5b      	lsrs	r3, r3, #17
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b2:	4413      	add	r3, r2
 80019b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019be:	fb02 f203 	mul.w	r2, r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e004      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	623b      	str	r3, [r7, #32]
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019de:	623b      	str	r3, [r7, #32]
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	6a3b      	ldr	r3, [r7, #32]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	08004700 	.word	0x08004700
 80019f4:	08004710 	.word	0x08004710
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	4601      	mov	r1, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	0800472c 	.word	0x0800472c

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	0800472c 	.word	0x0800472c

08001a68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	220f      	movs	r2, #15
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_GetClockConfig+0x58>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCC_GetClockConfig+0x58>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_GetClockConfig+0x58>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_GetClockConfig+0x58>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0207 	and.w	r2, r3, #7
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000000 	.word	0x20000000
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e041      	b.n	8001b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f839 	bl	8001ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f000 f9b4 	bl	8001eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e03a      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_TIM_Base_Start_IT+0x98>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x58>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x58>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x58>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800

08001c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d122      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0202 	mvn.w	r2, #2
 8001c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8ed 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8e0 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8ef 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0204 	mvn.w	r2, #4
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8c3 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8b6 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8c5 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0208 	mvn.w	r2, #8
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2204      	movs	r2, #4
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f899 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f88c 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f89b 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d122      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0210 	mvn.w	r2, #16
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2208      	movs	r2, #8
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f86f 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f862 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f871 	bl	8001e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0201 	mvn.w	r2, #1
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fdaa 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b80      	cmp	r3, #128	; 0x80
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8bf 	bl	8001f86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f835 	bl	8001e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0220 	mvn.w	r2, #32
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88a 	bl	8001f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <TIM_Base_SetConfig+0xb8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <TIM_Base_SetConfig+0x30>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0x30>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <TIM_Base_SetConfig+0xbc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0x30>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <TIM_Base_SetConfig+0xc0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d108      	bne.n	8001ef2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <TIM_Base_SetConfig+0xb8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <TIM_Base_SetConfig+0x62>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0x62>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <TIM_Base_SetConfig+0xbc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0x62>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <TIM_Base_SetConfig+0xc0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <TIM_Base_SetConfig+0xb8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d103      	bne.n	8001f58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e03f      	b.n	800202a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd04 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fc21 	bl	8002824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	d17c      	bne.n	800214c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_UART_Transmit+0x2c>
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e075      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_UART_Transmit+0x3e>
 800206c:	2302      	movs	r3, #2
 800206e:	e06e      	b.n	800214e <HAL_UART_Transmit+0x11c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2221      	movs	r2, #33	; 0x21
 8002082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002086:	f7fe fe37 	bl	8000cf8 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d108      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e003      	b.n	80020bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020c4:	e02a      	b.n	800211c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa45 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e036      	b.n	800214e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3302      	adds	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e007      	b.n	800210e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1cf      	bne.n	80020c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fa15 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e006      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08a      	sub	sp, #40	; 0x28
 800215a:	af02      	add	r7, sp, #8
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 8089 	bne.w	800228a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_UART_Receive+0x2e>
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e081      	b.n	800228c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_UART_Receive+0x40>
 8002192:	2302      	movs	r3, #2
 8002194:	e07a      	b.n	800228c <HAL_UART_Receive+0x136>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2222      	movs	r2, #34	; 0x22
 80021a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fda4 	bl	8000cf8 <HAL_GetTick>
 80021b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	88fa      	ldrh	r2, [r7, #6]
 80021bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d108      	bne.n	80021da <HAL_UART_Receive+0x84>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e003      	b.n	80021e2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021ea:	e043      	b.n	8002274 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2200      	movs	r2, #0
 80021f4:	2120      	movs	r1, #32
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f9b2 	bl	8002560 <UART_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e042      	b.n	800228c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10c      	bne.n	8002226 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002218:	b29a      	uxth	r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3302      	adds	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e01f      	b.n	8002266 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d007      	beq.n	8002240 <HAL_UART_Receive+0xea>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_UART_Receive+0xf8>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e008      	b.n	8002260 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225a:	b2da      	uxtb	r2, r3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3301      	adds	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1b6      	bne.n	80021ec <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d140      	bne.n	8002330 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_UART_Receive_IT+0x26>
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e039      	b.n	8002332 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_UART_Receive_IT+0x38>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e032      	b.n	8002332 <HAL_UART_Receive_IT+0x9e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2222      	movs	r2, #34	; 0x22
 80022f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e000      	b.n	8002332 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002330:	2302      	movs	r3, #2
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_UART_IRQHandler+0x52>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f9cc 	bl	8002724 <UART_Receive_IT>
      return;
 800238c:	e0d1      	b.n	8002532 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80b0 	beq.w	80024f6 <HAL_UART_IRQHandler+0x1ba>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_UART_IRQHandler+0x70>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80a5 	beq.w	80024f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_UART_IRQHandler+0x90>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_UART_IRQHandler+0xb0>
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	f043 0202 	orr.w	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_UART_IRQHandler+0xd0>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00f      	beq.n	8002436 <HAL_UART_IRQHandler+0xfa>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_UART_IRQHandler+0xee>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d078      	beq.n	8002530 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_UART_IRQHandler+0x11c>
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f966 	bl	8002724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_UART_IRQHandler+0x144>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d031      	beq.n	80024e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8b7 	bl	80025f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_UART_IRQHandler+0x1fc>)
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fd07 	bl	8000ecc <HAL_DMA_Abort_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ce:	4610      	mov	r0, r2
 80024d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d2:	e00e      	b.n	80024f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f83a 	bl	800254e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024da:	e00a      	b.n	80024f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f836 	bl	800254e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e2:	e006      	b.n	80024f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f832 	bl	800254e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80024f0:	e01e      	b.n	8002530 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f2:	bf00      	nop
    return;
 80024f4:	e01c      	b.n	8002530 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x1d6>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f8a3 	bl	8002656 <UART_Transmit_IT>
    return;
 8002510:	e00f      	b.n	8002532 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_UART_IRQHandler+0x1f6>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8e4 	bl	80026f4 <UART_EndTransmit_IT>
    return;
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002530:	bf00      	nop
  }
}
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800262f 	.word	0x0800262f

0800253c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002570:	e02c      	b.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d028      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <UART_WaitOnFlagUntilTimeout+0x30>
 8002580:	f7fe fbba 	bl	8000cf8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	d21d      	bcs.n	80025cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800259e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e00f      	b.n	80025ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4013      	ands	r3, r2
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d0c3      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800260a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff80 	bl	800254e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b21      	cmp	r3, #33	; 0x21
 8002668:	d13e      	bne.n	80026e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d114      	bne.n	800269e <UART_Transmit_IT+0x48>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d110      	bne.n	800269e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	621a      	str	r2, [r3, #32]
 800269c:	e008      	b.n	80026b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6211      	str	r1, [r2, #32]
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff11 	bl	800253c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b22      	cmp	r3, #34	; 0x22
 8002736:	d170      	bne.n	800281a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	d117      	bne.n	8002772 <UART_Receive_IT+0x4e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d113      	bne.n	8002772 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	b29a      	uxth	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	1c9a      	adds	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
 8002770:	e026      	b.n	80027c0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d007      	beq.n	8002796 <UART_Receive_IT+0x72>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <UART_Receive_IT+0x80>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e008      	b.n	80027b6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4619      	mov	r1, r3
 80027ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d120      	bne.n	8002816 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0220 	bic.w	r2, r2, #32
 80027e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fd fcbf 	bl	8000190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e002      	b.n	800281c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800285e:	f023 030c 	bic.w	r3, r3, #12
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	430b      	orrs	r3, r1
 800286a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <UART_SetConfig+0x114>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d103      	bne.n	8002894 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800288c:	f7ff f8d8 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	e002      	b.n	800289a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002894:	f7ff f8c0 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009a      	lsls	r2, r3, #2
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <UART_SetConfig+0x118>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	0119      	lsls	r1, r3, #4
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <UART_SetConfig+0x118>)
 80028d2:	fba3 0302 	umull	r0, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2064      	movs	r0, #100	; 0x64
 80028da:	fb00 f303 	mul.w	r3, r0, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <UART_SetConfig+0x118>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f0:	4419      	add	r1, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009a      	lsls	r2, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fbb2 f2f3 	udiv	r2, r2, r3
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <UART_SetConfig+0x118>)
 800290a:	fba3 0302 	umull	r0, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2064      	movs	r0, #100	; 0x64
 8002912:	fb00 f303 	mul.w	r3, r0, r3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	3332      	adds	r3, #50	; 0x32
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <UART_SetConfig+0x118>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	440a      	add	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40013800 	.word	0x40013800
 800293c:	51eb851f 	.word	0x51eb851f

08002940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0208 	add.w	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 0208 	add.w	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f2:	d103      	bne.n	80029fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e00c      	b.n	8002a16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3308      	adds	r3, #8
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <vListInsert+0x2e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d2f6      	bcs.n	8002a04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6852      	ldr	r2, [r2, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d103      	bne.n	8002a80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08e      	sub	sp, #56	; 0x38
 8002aa2:	af04      	add	r7, sp, #16
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	e7fe      	b.n	8002ac4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <xTaskCreateStatic+0x42>
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e7fe      	b.n	8002ade <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ae0:	2354      	movs	r3, #84	; 0x54
 8002ae2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b54      	cmp	r3, #84	; 0x54
 8002ae8:	d009      	beq.n	8002afe <xTaskCreateStatic+0x60>
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e7fe      	b.n	8002afc <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01e      	beq.n	8002b42 <xTaskCreateStatic+0xa4>
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01b      	beq.n	8002b42 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f850 	bl	8002bda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b3c:	f000 f8cc 	bl	8002cd8 <prvAddNewTaskToReadyList>
 8002b40:	e001      	b.n	8002b46 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b46:	697b      	ldr	r3, [r7, #20]
	}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	; 0x30
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fee1 	bl	800392c <pvPortMalloc>
 8002b6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b72:	2054      	movs	r0, #84	; 0x54
 8002b74:	f000 feda 	bl	800392c <pvPortMalloc>
 8002b78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
 8002b86:	e005      	b.n	8002b94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b88:	6978      	ldr	r0, [r7, #20]
 8002b8a:	f000 ff91 	bl	8003ab0 <vPortFree>
 8002b8e:	e001      	b.n	8002b94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9303      	str	r3, [sp, #12]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	9302      	str	r3, [sp, #8]
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f80e 	bl	8002bda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bbe:	69f8      	ldr	r0, [r7, #28]
 8002bc0:	f000 f88a 	bl	8002cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e002      	b.n	8002bd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
	}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b088      	sub	sp, #32
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f023 0307 	bic.w	r3, r3, #7
 8002c00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <prvInitialiseNewTask+0x46>
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e7fe      	b.n	8002c1e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	e012      	b.n	8002c4c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	7819      	ldrb	r1, [r3, #0]
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	3334      	adds	r3, #52	; 0x34
 8002c36:	460a      	mov	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	d9e9      	bls.n	8002c26 <prvInitialiseNewTask+0x4c>
 8002c52:	e000      	b.n	8002c56 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002c54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d901      	bls.n	8002c68 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c64:	2306      	movs	r3, #6
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	2200      	movs	r2, #0
 8002c78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fe7d 	bl	800297e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	3318      	adds	r3, #24
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fe78 	bl	800297e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	f1c3 0207 	rsb	r2, r3, #7
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	69b8      	ldr	r0, [r7, #24]
 8002cb8:	f000 fc94 	bl	80035e4 <pxPortInitialiseStack>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ce0:	f000 fd6a 	bl	80037b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <prvAddNewTaskToReadyList+0xb8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <prvAddNewTaskToReadyList+0xb8>)
 8002cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <prvAddNewTaskToReadyList+0xbc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cf6:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <prvAddNewTaskToReadyList+0xbc>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <prvAddNewTaskToReadyList+0xb8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d110      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d04:	f000 fb4a 	bl	800339c <prvInitialiseTaskLists>
 8002d08:	e00d      	b.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <prvAddNewTaskToReadyList+0xc0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <prvAddNewTaskToReadyList+0xbc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d802      	bhi.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d20:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <prvAddNewTaskToReadyList+0xbc>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002d2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <prvAddNewTaskToReadyList+0xc8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <prvAddNewTaskToReadyList+0xc8>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <prvAddNewTaskToReadyList+0xcc>)
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f7ff fe1c 	bl	8002996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d5e:	f000 fd59 	bl	8003814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <prvAddNewTaskToReadyList+0xc0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00e      	beq.n	8002d88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <prvAddNewTaskToReadyList+0xbc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <prvAddNewTaskToReadyList+0xd0>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200003f0 	.word	0x200003f0
 8002d94:	200002f0 	.word	0x200002f0
 8002d98:	200003fc 	.word	0x200003fc
 8002d9c:	2000040c 	.word	0x2000040c
 8002da0:	200003f8 	.word	0x200003f8
 8002da4:	200002f4 	.word	0x200002f4
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002db4:	f000 fd00 	bl	80037b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <vTaskDelete+0x18>
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <vTaskDelete+0xf4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e000      	b.n	8002dc6 <vTaskDelete+0x1a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fe3d 	bl	8002a4c <uxListRemove>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4931      	ldr	r1, [pc, #196]	; (8002ea4 <vTaskDelete+0xf8>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <vTaskDelete+0x58>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2201      	movs	r2, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <vTaskDelete+0xfc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <vTaskDelete+0xfc>)
 8002e02:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3318      	adds	r3, #24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe1b 	bl	8002a4c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <vTaskDelete+0x100>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <vTaskDelete+0x100>)
 8002e1e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <vTaskDelete+0xf4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10b      	bne.n	8002e42 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	481f      	ldr	r0, [pc, #124]	; (8002eb0 <vTaskDelete+0x104>)
 8002e32:	f7ff fdb0 	bl	8002996 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <vTaskDelete+0x108>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <vTaskDelete+0x108>)
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e009      	b.n	8002e56 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <vTaskDelete+0x10c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <vTaskDelete+0x10c>)
 8002e4a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fb11 	bl	8003474 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002e52:	f000 fb3d 	bl	80034d0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002e56:	f000 fcdd 	bl	8003814 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <vTaskDelete+0x110>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01a      	beq.n	8002e98 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <vTaskDelete+0xf4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d115      	bne.n	8002e98 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <vTaskDelete+0x114>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <vTaskDelete+0xdc>
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	e7fe      	b.n	8002e86 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <vTaskDelete+0x118>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200002f0 	.word	0x200002f0
 8002ea4:	200002f4 	.word	0x200002f4
 8002ea8:	200003f8 	.word	0x200003f8
 8002eac:	2000040c 	.word	0x2000040c
 8002eb0:	200003c4 	.word	0x200003c4
 8002eb4:	200003d8 	.word	0x200003d8
 8002eb8:	200003f0 	.word	0x200003f0
 8002ebc:	200003fc 	.word	0x200003fc
 8002ec0:	20000418 	.word	0x20000418
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <vTaskDelay+0x60>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <vTaskDelay+0x2e>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	e7fe      	b.n	8002ef4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002ef6:	f000 f879 	bl	8002fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002efa:	2100      	movs	r1, #0
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb0b 	bl	8003518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f02:	f000 f881 	bl	8003008 <xTaskResumeAll>
 8002f06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <vTaskDelay+0x64>)
 8002f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000418 	.word	0x20000418
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f3e:	463a      	mov	r2, r7
 8002f40:	1d39      	adds	r1, r7, #4
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f90a 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	9202      	str	r2, [sp, #8]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	491d      	ldr	r1, [pc, #116]	; (8002fd4 <vTaskStartScheduler+0xa4>)
 8002f60:	481d      	ldr	r0, [pc, #116]	; (8002fd8 <vTaskStartScheduler+0xa8>)
 8002f62:	f7ff fd9c 	bl	8002a9e <xTaskCreateStatic>
 8002f66:	4602      	mov	r2, r0
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <vTaskStartScheduler+0xac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e001      	b.n	8002f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d115      	bne.n	8002fb0 <vTaskStartScheduler+0x80>
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <vTaskStartScheduler+0xb0>)
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <vTaskStartScheduler+0xb4>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <vTaskStartScheduler+0xb8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002faa:	f000 fb95 	bl	80036d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fae:	e00d      	b.n	8002fcc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d109      	bne.n	8002fcc <vTaskStartScheduler+0x9c>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e7fe      	b.n	8002fca <vTaskStartScheduler+0x9a>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08004714 	.word	0x08004714
 8002fd8:	0800336d 	.word	0x0800336d
 8002fdc:	20000414 	.word	0x20000414
 8002fe0:	20000410 	.word	0x20000410
 8002fe4:	200003fc 	.word	0x200003fc
 8002fe8:	200003f4 	.word	0x200003f4

08002fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000418 	.word	0x20000418

08003008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <xTaskResumeAll+0x114>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <xTaskResumeAll+0x2a>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e7fe      	b.n	8003030 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003032:	f000 fbc1 	bl	80037b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <xTaskResumeAll+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b01      	subs	r3, #1
 800303c:	4a37      	ldr	r2, [pc, #220]	; (800311c <xTaskResumeAll+0x114>)
 800303e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <xTaskResumeAll+0x114>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d161      	bne.n	800310c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <xTaskResumeAll+0x118>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05d      	beq.n	800310c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003050:	e02e      	b.n	80030b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <xTaskResumeAll+0x11c>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3318      	adds	r3, #24
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fcf4 	bl	8002a4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fcef 	bl	8002a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	2201      	movs	r2, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <xTaskResumeAll+0x120>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <xTaskResumeAll+0x120>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4a27      	ldr	r2, [pc, #156]	; (800312c <xTaskResumeAll+0x124>)
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff fc7d 	bl	8002996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <xTaskResumeAll+0x128>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <xTaskResumeAll+0x12c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <xTaskResumeAll+0x11c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1cc      	bne.n	8003052 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030be:	f000 fa07 	bl	80034d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <xTaskResumeAll+0x130>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ce:	f000 f837 	bl	8003140 <xTaskIncrementTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <xTaskResumeAll+0x12c>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f1      	bne.n	80030ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <xTaskResumeAll+0x130>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <xTaskResumeAll+0x12c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <xTaskResumeAll+0x134>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800310c:	f000 fb82 	bl	8003814 <vPortExitCritical>

	return xAlreadyYielded;
 8003110:	68bb      	ldr	r3, [r7, #8]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000418 	.word	0x20000418
 8003120:	200003f0 	.word	0x200003f0
 8003124:	200003b0 	.word	0x200003b0
 8003128:	200003f8 	.word	0x200003f8
 800312c:	200002f4 	.word	0x200002f4
 8003130:	200002f0 	.word	0x200002f0
 8003134:	20000404 	.word	0x20000404
 8003138:	20000400 	.word	0x20000400
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314a:	4b50      	ldr	r3, [pc, #320]	; (800328c <xTaskIncrementTick+0x14c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 808c 	bne.w	800326c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003154:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <xTaskIncrementTick+0x150>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800315c:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <xTaskIncrementTick+0x150>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11f      	bne.n	80031a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <xTaskIncrementTick+0x154>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <xTaskIncrementTick+0x46>
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	e7fe      	b.n	8003184 <xTaskIncrementTick+0x44>
 8003186:	4b43      	ldr	r3, [pc, #268]	; (8003294 <xTaskIncrementTick+0x154>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	4b42      	ldr	r3, [pc, #264]	; (8003298 <xTaskIncrementTick+0x158>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a40      	ldr	r2, [pc, #256]	; (8003294 <xTaskIncrementTick+0x154>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4a40      	ldr	r2, [pc, #256]	; (8003298 <xTaskIncrementTick+0x158>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b40      	ldr	r3, [pc, #256]	; (800329c <xTaskIncrementTick+0x15c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a3e      	ldr	r2, [pc, #248]	; (800329c <xTaskIncrementTick+0x15c>)
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	f000 f994 	bl	80034d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <xTaskIncrementTick+0x160>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d34d      	bcc.n	800324e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b2:	4b38      	ldr	r3, [pc, #224]	; (8003294 <xTaskIncrementTick+0x154>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <xTaskIncrementTick+0x80>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <xTaskIncrementTick+0x82>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <xTaskIncrementTick+0x160>)
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031cc:	601a      	str	r2, [r3, #0]
					break;
 80031ce:	e03e      	b.n	800324e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <xTaskIncrementTick+0x154>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d203      	bcs.n	80031f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <xTaskIncrementTick+0x160>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
						break;
 80031ee:	e02e      	b.n	800324e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fc29 	bl	8002a4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3318      	adds	r3, #24
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fc20 	bl	8002a4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <xTaskIncrementTick+0x164>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <xTaskIncrementTick+0x164>)
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <xTaskIncrementTick+0x168>)
 800322c:	441a      	add	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3304      	adds	r3, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f7ff fbae 	bl	8002996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <xTaskIncrementTick+0x16c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d3b4      	bcc.n	80031b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324c:	e7b1      	b.n	80031b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <xTaskIncrementTick+0x16c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4914      	ldr	r1, [pc, #80]	; (80032a8 <xTaskIncrementTick+0x168>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d907      	bls.n	8003276 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e004      	b.n	8003276 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <xTaskIncrementTick+0x170>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <xTaskIncrementTick+0x170>)
 8003274:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <xTaskIncrementTick+0x174>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800327e:	2301      	movs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003282:	697b      	ldr	r3, [r7, #20]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000418 	.word	0x20000418
 8003290:	200003f4 	.word	0x200003f4
 8003294:	200003a8 	.word	0x200003a8
 8003298:	200003ac 	.word	0x200003ac
 800329c:	20000408 	.word	0x20000408
 80032a0:	20000410 	.word	0x20000410
 80032a4:	200003f8 	.word	0x200003f8
 80032a8:	200002f4 	.word	0x200002f4
 80032ac:	200002f0 	.word	0x200002f0
 80032b0:	20000400 	.word	0x20000400
 80032b4:	20000404 	.word	0x20000404

080032b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <vTaskSwitchContext+0xa0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032c6:	4b25      	ldr	r3, [pc, #148]	; (800335c <vTaskSwitchContext+0xa4>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032cc:	e03e      	b.n	800334c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <vTaskSwitchContext+0xa4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <vTaskSwitchContext+0xa8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f1c3 031f 	rsb	r3, r3, #31
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	491e      	ldr	r1, [pc, #120]	; (8003364 <vTaskSwitchContext+0xac>)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <vTaskSwitchContext+0x5a>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	e7fe      	b.n	8003310 <vTaskSwitchContext+0x58>
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <vTaskSwitchContext+0xac>)
 800331e:	4413      	add	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3308      	adds	r3, #8
 8003334:	429a      	cmp	r2, r3
 8003336:	d104      	bne.n	8003342 <vTaskSwitchContext+0x8a>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a07      	ldr	r2, [pc, #28]	; (8003368 <vTaskSwitchContext+0xb0>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000418 	.word	0x20000418
 800335c:	20000404 	.word	0x20000404
 8003360:	200003f8 	.word	0x200003f8
 8003364:	200002f4 	.word	0x200002f4
 8003368:	200002f0 	.word	0x200002f0

0800336c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003374:	f000 f852 	bl	800341c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <prvIdleTask+0x28>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d9f9      	bls.n	8003374 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <prvIdleTask+0x2c>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003390:	e7f0      	b.n	8003374 <prvIdleTask+0x8>
 8003392:	bf00      	nop
 8003394:	200002f4 	.word	0x200002f4
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	e00c      	b.n	80033c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <prvInitialiseTaskLists+0x60>)
 80033b4:	4413      	add	r3, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fac2 	bl	8002940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d9ef      	bls.n	80033a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <prvInitialiseTaskLists+0x64>)
 80033ca:	f7ff fab9 	bl	8002940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033ce:	480d      	ldr	r0, [pc, #52]	; (8003404 <prvInitialiseTaskLists+0x68>)
 80033d0:	f7ff fab6 	bl	8002940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033d4:	480c      	ldr	r0, [pc, #48]	; (8003408 <prvInitialiseTaskLists+0x6c>)
 80033d6:	f7ff fab3 	bl	8002940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033da:	480c      	ldr	r0, [pc, #48]	; (800340c <prvInitialiseTaskLists+0x70>)
 80033dc:	f7ff fab0 	bl	8002940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <prvInitialiseTaskLists+0x74>)
 80033e2:	f7ff faad 	bl	8002940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <prvInitialiseTaskLists+0x78>)
 80033e8:	4a05      	ldr	r2, [pc, #20]	; (8003400 <prvInitialiseTaskLists+0x64>)
 80033ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <prvInitialiseTaskLists+0x7c>)
 80033ee:	4a05      	ldr	r2, [pc, #20]	; (8003404 <prvInitialiseTaskLists+0x68>)
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200002f4 	.word	0x200002f4
 8003400:	20000380 	.word	0x20000380
 8003404:	20000394 	.word	0x20000394
 8003408:	200003b0 	.word	0x200003b0
 800340c:	200003c4 	.word	0x200003c4
 8003410:	200003dc 	.word	0x200003dc
 8003414:	200003a8 	.word	0x200003a8
 8003418:	200003ac 	.word	0x200003ac

0800341c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003422:	e019      	b.n	8003458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003424:	f000 f9c8 	bl	80037b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <prvCheckTasksWaitingTermination+0x4c>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fb09 	bl	8002a4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <prvCheckTasksWaitingTermination+0x50>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3b01      	subs	r3, #1
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <prvCheckTasksWaitingTermination+0x50>)
 8003442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <prvCheckTasksWaitingTermination+0x54>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <prvCheckTasksWaitingTermination+0x54>)
 800344c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800344e:	f000 f9e1 	bl	8003814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f80e 	bl	8003474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <prvCheckTasksWaitingTermination+0x54>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e1      	bne.n	8003424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	200003c4 	.word	0x200003c4
 800346c:	200003f0 	.word	0x200003f0
 8003470:	200003d8 	.word	0x200003d8

08003474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb10 	bl	8003ab0 <vPortFree>
				vPortFree( pxTCB );
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb0d 	bl	8003ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003496:	e017      	b.n	80034c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d103      	bne.n	80034aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb04 	bl	8003ab0 <vPortFree>
	}
 80034a8:	e00e      	b.n	80034c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d009      	beq.n	80034c8 <prvDeleteTCB+0x54>
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e7fe      	b.n	80034c6 <prvDeleteTCB+0x52>
	}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <prvResetNextTaskUnblockTime+0x40>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <prvResetNextTaskUnblockTime+0x14>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <prvResetNextTaskUnblockTime+0x16>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <prvResetNextTaskUnblockTime+0x44>)
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034f2:	e008      	b.n	8003506 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <prvResetNextTaskUnblockTime+0x40>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <prvResetNextTaskUnblockTime+0x44>)
 8003504:	6013      	str	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	200003a8 	.word	0x200003a8
 8003514:	20000410 	.word	0x20000410

08003518 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fa8c 	bl	8002a4c <uxListRemove>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	2201      	movs	r2, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4013      	ands	r3, r2
 800354e:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003550:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003558:	d10a      	bne.n	8003570 <prvAddCurrentTaskToDelayedList+0x58>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	481a      	ldr	r0, [pc, #104]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800356a:	f7ff fa14 	bl	8002996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800356e:	e026      	b.n	80035be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d209      	bcs.n	800359c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3304      	adds	r3, #4
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7ff fa21 	bl	80029dc <vListInsert>
}
 800359a:	e010      	b.n	80035be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3304      	adds	r3, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f7ff fa17 	bl	80029dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d202      	bcs.n	80035be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035b8:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6013      	str	r3, [r2, #0]
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200003f4 	.word	0x200003f4
 80035cc:	200002f0 	.word	0x200002f0
 80035d0:	200003f8 	.word	0x200003f8
 80035d4:	200003dc 	.word	0x200003dc
 80035d8:	200003ac 	.word	0x200003ac
 80035dc:	200003a8 	.word	0x200003a8
 80035e0:	20000410 	.word	0x20000410

080035e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3b04      	subs	r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b04      	subs	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 0201 	bic.w	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3b04      	subs	r3, #4
 8003612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <pxPortInitialiseStack+0x54>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3b14      	subs	r3, #20
 800361e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b20      	subs	r3, #32
 800362a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	0800363d 	.word	0x0800363d

0800363c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <prvTaskExitError+0x4c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364e:	d009      	beq.n	8003664 <prvTaskExitError+0x28>
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e7fe      	b.n	8003662 <prvTaskExitError+0x26>
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003676:	bf00      	nop
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0fc      	beq.n	8003678 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	2000000c 	.word	0x2000000c
 800368c:	00000000 	.word	0x00000000

08003690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <pxCurrentTCBConst2>)
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800369a:	f380 8809 	msr	PSP, r0
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f380 8811 	msr	BASEPRI, r0
 80036aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80036ae:	4770      	bx	lr

080036b0 <pxCurrentTCBConst2>:
 80036b0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop

080036b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036b8:	4806      	ldr	r0, [pc, #24]	; (80036d4 <prvPortStartFirstTask+0x1c>)
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	6800      	ldr	r0, [r0, #0]
 80036be:	f380 8808 	msr	MSP, r0
 80036c2:	b662      	cpsie	i
 80036c4:	b661      	cpsie	f
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	df00      	svc	0
 80036d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036d2:	bf00      	nop
 80036d4:	e000ed08 	.word	0xe000ed08

080036d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <xPortStartScheduler+0xcc>)
 80036e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	22ff      	movs	r2, #255	; 0xff
 80036ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <xPortStartScheduler+0xd0>)
 8003704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <xPortStartScheduler+0xd4>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800370c:	e009      	b.n	8003722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <xPortStartScheduler+0xd4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <xPortStartScheduler+0xd4>)
 8003716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d0ef      	beq.n	800370e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <xPortStartScheduler+0xd4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	d009      	beq.n	800374e <xPortStartScheduler+0x76>
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	e7fe      	b.n	800374c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <xPortStartScheduler+0xd4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <xPortStartScheduler+0xd4>)
 8003756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <xPortStartScheduler+0xd4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003760:	4a12      	ldr	r2, [pc, #72]	; (80037ac <xPortStartScheduler+0xd4>)
 8003762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <xPortStartScheduler+0xd8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <xPortStartScheduler+0xd8>)
 8003772:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <xPortStartScheduler+0xd8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <xPortStartScheduler+0xd8>)
 800377e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003784:	f000 f8b0 	bl	80038e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <xPortStartScheduler+0xdc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800378e:	f7ff ff93 	bl	80036b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003792:	f7ff fd91 	bl	80032b8 <vTaskSwitchContext>
	prvTaskExitError();
 8003796:	f7ff ff51 	bl	800363c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000e400 	.word	0xe000e400
 80037a8:	2000041c 	.word	0x2000041c
 80037ac:	20000420 	.word	0x20000420
 80037b0:	e000ed20 	.word	0xe000ed20
 80037b4:	2000000c 	.word	0x2000000c

080037b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <vPortEnterCritical+0x54>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a0d      	ldr	r2, [pc, #52]	; (800380c <vPortEnterCritical+0x54>)
 80037d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <vPortEnterCritical+0x54>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10e      	bne.n	8003800 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <vPortEnterCritical+0x58>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <vPortEnterCritical+0x48>
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	e7fe      	b.n	80037fe <vPortEnterCritical+0x46>
	}
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000000c 	.word	0x2000000c
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <vPortExitCritical+0x48>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <vPortExitCritical+0x22>
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	e7fe      	b.n	8003834 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <vPortExitCritical+0x48>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <vPortExitCritical+0x48>)
 800383e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <vPortExitCritical+0x48>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <vPortExitCritical+0x3e>
 8003848:	2300      	movs	r3, #0
 800384a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	2000000c 	.word	0x2000000c

08003860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003860:	f3ef 8009 	mrs	r0, PSP
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <pxCurrentTCBConst>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003870:	6010      	str	r0, [r2, #0]
 8003872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800387a:	f380 8811 	msr	BASEPRI, r0
 800387e:	f7ff fd1b 	bl	80032b8 <vTaskSwitchContext>
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	6808      	ldr	r0, [r1, #0]
 8003892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003896:	f380 8809 	msr	PSP, r0
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	4770      	bx	lr

080038a0 <pxCurrentTCBConst>:
 80038a0:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop

080038a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038c0:	f7ff fc3e 	bl	8003140 <xTaskIncrementTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <SysTick_Handler+0x3c>)
 80038cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <vPortSetupTimerInterrupt+0x30>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <vPortSetupTimerInterrupt+0x34>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <vPortSetupTimerInterrupt+0x38>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a09      	ldr	r2, [pc, #36]	; (8003924 <vPortSetupTimerInterrupt+0x3c>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	4a08      	ldr	r2, [pc, #32]	; (8003928 <vPortSetupTimerInterrupt+0x40>)
 8003906:	3b01      	subs	r3, #1
 8003908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <vPortSetupTimerInterrupt+0x30>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	e000e010 	.word	0xe000e010
 800391c:	e000e018 	.word	0xe000e018
 8003920:	20000000 	.word	0x20000000
 8003924:	10624dd3 	.word	0x10624dd3
 8003928:	e000e014 	.word	0xe000e014

0800392c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003938:	f7ff fb58 	bl	8002fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800393c:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <pvPortMalloc+0x170>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003944:	f000 f90c 	bl	8003b60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003948:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <pvPortMalloc+0x174>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 808c 	bne.w	8003a6e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800395c:	2208      	movs	r2, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d013      	beq.n	8003996 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f023 0307 	bic.w	r3, r3, #7
 8003974:	3308      	adds	r3, #8
 8003976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <pvPortMalloc+0x6a>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e7fe      	b.n	8003994 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d068      	beq.n	8003a6e <pvPortMalloc+0x142>
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <pvPortMalloc+0x178>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d863      	bhi.n	8003a6e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <pvPortMalloc+0x17c>)
 80039a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <pvPortMalloc+0x17c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039b0:	e004      	b.n	80039bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d903      	bls.n	80039ce <pvPortMalloc+0xa2>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f1      	bne.n	80039b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <pvPortMalloc+0x170>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d04a      	beq.n	8003a6e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2208      	movs	r2, #8
 80039de:	4413      	add	r3, r2
 80039e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	2308      	movs	r3, #8
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d91e      	bls.n	8003a38 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <pvPortMalloc+0xf4>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e7fe      	b.n	8003a1e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a32:	69b8      	ldr	r0, [r7, #24]
 8003a34:	f000 f8f6 	bl	8003c24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <pvPortMalloc+0x178>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <pvPortMalloc+0x178>)
 8003a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <pvPortMalloc+0x178>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <pvPortMalloc+0x180>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d203      	bcs.n	8003a5a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <pvPortMalloc+0x178>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <pvPortMalloc+0x180>)
 8003a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <pvPortMalloc+0x174>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a6e:	f7ff facb 	bl	8003008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <pvPortMalloc+0x164>
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e7fe      	b.n	8003a8e <pvPortMalloc+0x162>
	return pvReturn;
 8003a90:	69fb      	ldr	r3, [r7, #28]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000242c 	.word	0x2000242c
 8003aa0:	20002438 	.word	0x20002438
 8003aa4:	20002430 	.word	0x20002430
 8003aa8:	20002424 	.word	0x20002424
 8003aac:	20002434 	.word	0x20002434

08003ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d046      	beq.n	8003b50 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	425b      	negs	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <vPortFree+0xa8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <vPortFree+0x42>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e7fe      	b.n	8003af0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <vPortFree+0x5e>
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	e7fe      	b.n	8003b0c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <vPortFree+0xa8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d019      	beq.n	8003b50 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d115      	bne.n	8003b50 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <vPortFree+0xa8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	401a      	ands	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b34:	f7ff fa5a 	bl	8002fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <vPortFree+0xac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	4a06      	ldr	r2, [pc, #24]	; (8003b5c <vPortFree+0xac>)
 8003b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b46:	6938      	ldr	r0, [r7, #16]
 8003b48:	f000 f86c 	bl	8003c24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b4c:	f7ff fa5c 	bl	8003008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b50:	bf00      	nop
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20002438 	.word	0x20002438
 8003b5c:	20002430 	.word	0x20002430

08003b60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <prvHeapInit+0xac>)
 8003b6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0307 	bic.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <prvHeapInit+0xac>)
 8003b90:	4413      	add	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <prvHeapInit+0xb0>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <prvHeapInit+0xb0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bac:	2208      	movs	r2, #8
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <prvHeapInit+0xb4>)
 8003bc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <prvHeapInit+0xb4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <prvHeapInit+0xb4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <prvHeapInit+0xb4>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <prvHeapInit+0xb8>)
 8003bee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <prvHeapInit+0xbc>)
 8003bf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <prvHeapInit+0xc0>)
 8003bfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000424 	.word	0x20000424
 8003c10:	20002424 	.word	0x20002424
 8003c14:	2000242c 	.word	0x2000242c
 8003c18:	20002434 	.word	0x20002434
 8003c1c:	20002430 	.word	0x20002430
 8003c20:	20002438 	.word	0x20002438

08003c24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <prvInsertBlockIntoFreeList+0xa8>)
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e002      	b.n	8003c38 <prvInsertBlockIntoFreeList+0x14>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d8f7      	bhi.n	8003c32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d108      	bne.n	8003c66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	441a      	add	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d118      	bne.n	8003cac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <prvInsertBlockIntoFreeList+0xac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d00d      	beq.n	8003ca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e008      	b.n	8003cb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvInsertBlockIntoFreeList+0xac>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e003      	b.n	8003cb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d002      	beq.n	8003cc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20002424 	.word	0x20002424
 8003cd0:	2000242c 	.word	0x2000242c

08003cd4 <__errno>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <__errno+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000010 	.word	0x20000010

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	4e0c      	ldr	r6, [pc, #48]	; (8003d18 <__libc_init_array+0x38>)
 8003ce6:	4c0d      	ldr	r4, [pc, #52]	; (8003d1c <__libc_init_array+0x3c>)
 8003ce8:	1ba4      	subs	r4, r4, r6
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	42a5      	cmp	r5, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	f000 fc9a 	bl	8004628 <_init>
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	4e0a      	ldr	r6, [pc, #40]	; (8003d20 <__libc_init_array+0x40>)
 8003cf8:	4c0a      	ldr	r4, [pc, #40]	; (8003d24 <__libc_init_array+0x44>)
 8003cfa:	1ba4      	subs	r4, r4, r6
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	42a5      	cmp	r5, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d08:	4798      	blx	r3
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d12:	4798      	blx	r3
 8003d14:	3501      	adds	r5, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08004768 	.word	0x08004768
 8003d1c:	08004768 	.word	0x08004768
 8003d20:	08004768 	.word	0x08004768
 8003d24:	0800476c 	.word	0x0800476c

08003d28 <memcpy>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	1e43      	subs	r3, r0, #1
 8003d2c:	440a      	add	r2, r1
 8003d2e:	4291      	cmp	r1, r2
 8003d30:	d100      	bne.n	8003d34 <memcpy+0xc>
 8003d32:	bd10      	pop	{r4, pc}
 8003d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d3c:	e7f7      	b.n	8003d2e <memcpy+0x6>

08003d3e <memset>:
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4402      	add	r2, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d100      	bne.n	8003d48 <memset+0xa>
 8003d46:	4770      	bx	lr
 8003d48:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4c:	e7f9      	b.n	8003d42 <memset+0x4>
	...

08003d50 <siprintf>:
 8003d50:	b40e      	push	{r1, r2, r3}
 8003d52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d56:	b500      	push	{lr}
 8003d58:	b09c      	sub	sp, #112	; 0x70
 8003d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d5c:	9002      	str	r0, [sp, #8]
 8003d5e:	9006      	str	r0, [sp, #24]
 8003d60:	9107      	str	r1, [sp, #28]
 8003d62:	9104      	str	r1, [sp, #16]
 8003d64:	4808      	ldr	r0, [pc, #32]	; (8003d88 <siprintf+0x38>)
 8003d66:	4909      	ldr	r1, [pc, #36]	; (8003d8c <siprintf+0x3c>)
 8003d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d6c:	9105      	str	r1, [sp, #20]
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	a902      	add	r1, sp, #8
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	f000 f970 	bl	8004058 <_svfiprintf_r>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	b01c      	add	sp, #112	; 0x70
 8003d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d84:	b003      	add	sp, #12
 8003d86:	4770      	bx	lr
 8003d88:	20000010 	.word	0x20000010
 8003d8c:	ffff0208 	.word	0xffff0208

08003d90 <strcpy>:
 8003d90:	4603      	mov	r3, r0
 8003d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d96:	f803 2b01 	strb.w	r2, [r3], #1
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	d1f9      	bne.n	8003d92 <strcpy+0x2>
 8003d9e:	4770      	bx	lr

08003da0 <strtok>:
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <strtok+0x50>)
 8003da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da6:	681d      	ldr	r5, [r3, #0]
 8003da8:	4606      	mov	r6, r0
 8003daa:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003dac:	460f      	mov	r7, r1
 8003dae:	b9b4      	cbnz	r4, 8003dde <strtok+0x3e>
 8003db0:	2050      	movs	r0, #80	; 0x50
 8003db2:	f000 f849 	bl	8003e48 <malloc>
 8003db6:	65a8      	str	r0, [r5, #88]	; 0x58
 8003db8:	e9c0 4400 	strd	r4, r4, [r0]
 8003dbc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003dc0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003dc4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003dc8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003dcc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003dd0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003dd4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003dd8:	6184      	str	r4, [r0, #24]
 8003dda:	7704      	strb	r4, [r0, #28]
 8003ddc:	6244      	str	r4, [r0, #36]	; 0x24
 8003dde:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003de0:	4639      	mov	r1, r7
 8003de2:	4630      	mov	r0, r6
 8003de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de8:	2301      	movs	r3, #1
 8003dea:	f000 b803 	b.w	8003df4 <__strtok_r>
 8003dee:	bf00      	nop
 8003df0:	20000010 	.word	0x20000010

08003df4 <__strtok_r>:
 8003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df6:	b918      	cbnz	r0, 8003e00 <__strtok_r+0xc>
 8003df8:	6810      	ldr	r0, [r2, #0]
 8003dfa:	b908      	cbnz	r0, 8003e00 <__strtok_r+0xc>
 8003dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4604      	mov	r4, r0
 8003e02:	460f      	mov	r7, r1
 8003e04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e08:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e0c:	b91e      	cbnz	r6, 8003e16 <__strtok_r+0x22>
 8003e0e:	b96d      	cbnz	r5, 8003e2c <__strtok_r+0x38>
 8003e10:	6015      	str	r5, [r2, #0]
 8003e12:	4628      	mov	r0, r5
 8003e14:	e7f2      	b.n	8003dfc <__strtok_r+0x8>
 8003e16:	42b5      	cmp	r5, r6
 8003e18:	d1f6      	bne.n	8003e08 <__strtok_r+0x14>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ef      	bne.n	8003dfe <__strtok_r+0xa>
 8003e1e:	6014      	str	r4, [r2, #0]
 8003e20:	7003      	strb	r3, [r0, #0]
 8003e22:	e7eb      	b.n	8003dfc <__strtok_r+0x8>
 8003e24:	462b      	mov	r3, r5
 8003e26:	e00d      	b.n	8003e44 <__strtok_r+0x50>
 8003e28:	b926      	cbnz	r6, 8003e34 <__strtok_r+0x40>
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	460f      	mov	r7, r1
 8003e30:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003e34:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e38:	42b5      	cmp	r5, r6
 8003e3a:	d1f5      	bne.n	8003e28 <__strtok_r+0x34>
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	d0f1      	beq.n	8003e24 <__strtok_r+0x30>
 8003e40:	2100      	movs	r1, #0
 8003e42:	7021      	strb	r1, [r4, #0]
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e7d9      	b.n	8003dfc <__strtok_r+0x8>

08003e48 <malloc>:
 8003e48:	4b02      	ldr	r3, [pc, #8]	; (8003e54 <malloc+0xc>)
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	f000 b84f 	b.w	8003ef0 <_malloc_r>
 8003e52:	bf00      	nop
 8003e54:	20000010 	.word	0x20000010

08003e58 <_free_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d043      	beq.n	8003ee8 <_free_r+0x90>
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f0c      	subs	r4, r1, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	18e4      	addlt	r4, r4, r3
 8003e6c:	f000 fbab 	bl	80045c6 <__malloc_lock>
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <_free_r+0x94>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	4610      	mov	r0, r2
 8003e76:	b933      	cbnz	r3, 8003e86 <_free_r+0x2e>
 8003e78:	6063      	str	r3, [r4, #4]
 8003e7a:	6014      	str	r4, [r2, #0]
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e82:	f000 bba1 	b.w	80045c8 <__malloc_unlock>
 8003e86:	42a3      	cmp	r3, r4
 8003e88:	d90b      	bls.n	8003ea2 <_free_r+0x4a>
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	1862      	adds	r2, r4, r1
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	bf01      	itttt	eq
 8003e92:	681a      	ldreq	r2, [r3, #0]
 8003e94:	685b      	ldreq	r3, [r3, #4]
 8003e96:	1852      	addeq	r2, r2, r1
 8003e98:	6022      	streq	r2, [r4, #0]
 8003e9a:	6063      	str	r3, [r4, #4]
 8003e9c:	6004      	str	r4, [r0, #0]
 8003e9e:	e7ed      	b.n	8003e7c <_free_r+0x24>
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	b10a      	cbz	r2, 8003eaa <_free_r+0x52>
 8003ea6:	42a2      	cmp	r2, r4
 8003ea8:	d9fa      	bls.n	8003ea0 <_free_r+0x48>
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	1858      	adds	r0, r3, r1
 8003eae:	42a0      	cmp	r0, r4
 8003eb0:	d10b      	bne.n	8003eca <_free_r+0x72>
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	4401      	add	r1, r0
 8003eb6:	1858      	adds	r0, r3, r1
 8003eb8:	4282      	cmp	r2, r0
 8003eba:	6019      	str	r1, [r3, #0]
 8003ebc:	d1de      	bne.n	8003e7c <_free_r+0x24>
 8003ebe:	6810      	ldr	r0, [r2, #0]
 8003ec0:	6852      	ldr	r2, [r2, #4]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	e7d8      	b.n	8003e7c <_free_r+0x24>
 8003eca:	d902      	bls.n	8003ed2 <_free_r+0x7a>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	e7d4      	b.n	8003e7c <_free_r+0x24>
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1821      	adds	r1, r4, r0
 8003ed6:	428a      	cmp	r2, r1
 8003ed8:	bf01      	itttt	eq
 8003eda:	6811      	ldreq	r1, [r2, #0]
 8003edc:	6852      	ldreq	r2, [r2, #4]
 8003ede:	1809      	addeq	r1, r1, r0
 8003ee0:	6021      	streq	r1, [r4, #0]
 8003ee2:	6062      	str	r2, [r4, #4]
 8003ee4:	605c      	str	r4, [r3, #4]
 8003ee6:	e7c9      	b.n	8003e7c <_free_r+0x24>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	2000243c 	.word	0x2000243c

08003ef0 <_malloc_r>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	1ccd      	adds	r5, r1, #3
 8003ef4:	f025 0503 	bic.w	r5, r5, #3
 8003ef8:	3508      	adds	r5, #8
 8003efa:	2d0c      	cmp	r5, #12
 8003efc:	bf38      	it	cc
 8003efe:	250c      	movcc	r5, #12
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	4606      	mov	r6, r0
 8003f04:	db01      	blt.n	8003f0a <_malloc_r+0x1a>
 8003f06:	42a9      	cmp	r1, r5
 8003f08:	d903      	bls.n	8003f12 <_malloc_r+0x22>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	f000 fb58 	bl	80045c6 <__malloc_lock>
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <_malloc_r+0xac>)
 8003f18:	6814      	ldr	r4, [r2, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	b991      	cbnz	r1, 8003f44 <_malloc_r+0x54>
 8003f1e:	4c20      	ldr	r4, [pc, #128]	; (8003fa0 <_malloc_r+0xb0>)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b91b      	cbnz	r3, 8003f2c <_malloc_r+0x3c>
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 fb17 	bl	8004558 <_sbrk_r>
 8003f2a:	6020      	str	r0, [r4, #0]
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 fb12 	bl	8004558 <_sbrk_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d124      	bne.n	8003f82 <_malloc_r+0x92>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	f000 fb43 	bl	80045c8 <__malloc_unlock>
 8003f42:	e7e4      	b.n	8003f0e <_malloc_r+0x1e>
 8003f44:	680b      	ldr	r3, [r1, #0]
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	d418      	bmi.n	8003f7c <_malloc_r+0x8c>
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	d90f      	bls.n	8003f6e <_malloc_r+0x7e>
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	18cc      	adds	r4, r1, r3
 8003f52:	50cd      	str	r5, [r1, r3]
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 fb37 	bl	80045c8 <__malloc_unlock>
 8003f5a:	f104 000b 	add.w	r0, r4, #11
 8003f5e:	1d23      	adds	r3, r4, #4
 8003f60:	f020 0007 	bic.w	r0, r0, #7
 8003f64:	1ac3      	subs	r3, r0, r3
 8003f66:	d0d3      	beq.n	8003f10 <_malloc_r+0x20>
 8003f68:	425a      	negs	r2, r3
 8003f6a:	50e2      	str	r2, [r4, r3]
 8003f6c:	e7d0      	b.n	8003f10 <_malloc_r+0x20>
 8003f6e:	684b      	ldr	r3, [r1, #4]
 8003f70:	428c      	cmp	r4, r1
 8003f72:	bf16      	itet	ne
 8003f74:	6063      	strne	r3, [r4, #4]
 8003f76:	6013      	streq	r3, [r2, #0]
 8003f78:	460c      	movne	r4, r1
 8003f7a:	e7eb      	b.n	8003f54 <_malloc_r+0x64>
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	6849      	ldr	r1, [r1, #4]
 8003f80:	e7cc      	b.n	8003f1c <_malloc_r+0x2c>
 8003f82:	1cc4      	adds	r4, r0, #3
 8003f84:	f024 0403 	bic.w	r4, r4, #3
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d005      	beq.n	8003f98 <_malloc_r+0xa8>
 8003f8c:	1a21      	subs	r1, r4, r0
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 fae2 	bl	8004558 <_sbrk_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d0cf      	beq.n	8003f38 <_malloc_r+0x48>
 8003f98:	6025      	str	r5, [r4, #0]
 8003f9a:	e7db      	b.n	8003f54 <_malloc_r+0x64>
 8003f9c:	2000243c 	.word	0x2000243c
 8003fa0:	20002440 	.word	0x20002440

08003fa4 <__ssputs_r>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	688e      	ldr	r6, [r1, #8]
 8003faa:	4682      	mov	sl, r0
 8003fac:	429e      	cmp	r6, r3
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	4699      	mov	r9, r3
 8003fb4:	d837      	bhi.n	8004026 <__ssputs_r+0x82>
 8003fb6:	898a      	ldrh	r2, [r1, #12]
 8003fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fbc:	d031      	beq.n	8004022 <__ssputs_r+0x7e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	6825      	ldr	r5, [r4, #0]
 8003fc2:	6909      	ldr	r1, [r1, #16]
 8003fc4:	1a6f      	subs	r7, r5, r1
 8003fc6:	6965      	ldr	r5, [r4, #20]
 8003fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fd0:	f109 0301 	add.w	r3, r9, #1
 8003fd4:	443b      	add	r3, r7
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	bf38      	it	cc
 8003fda:	461d      	movcc	r5, r3
 8003fdc:	0553      	lsls	r3, r2, #21
 8003fde:	d530      	bpl.n	8004042 <__ssputs_r+0x9e>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f7ff ff85 	bl	8003ef0 <_malloc_r>
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	b950      	cbnz	r0, 8004000 <__ssputs_r+0x5c>
 8003fea:	230c      	movs	r3, #12
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	463a      	mov	r2, r7
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f7ff fe90 	bl	8003d28 <memcpy>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	6126      	str	r6, [r4, #16]
 8004016:	443e      	add	r6, r7
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	464e      	mov	r6, r9
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	1bed      	subs	r5, r5, r7
 8004020:	60a5      	str	r5, [r4, #8]
 8004022:	454e      	cmp	r6, r9
 8004024:	d900      	bls.n	8004028 <__ssputs_r+0x84>
 8004026:	464e      	mov	r6, r9
 8004028:	4632      	mov	r2, r6
 800402a:	4641      	mov	r1, r8
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	f000 fab1 	bl	8004594 <memmove>
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	2000      	movs	r0, #0
 8004036:	1b9b      	subs	r3, r3, r6
 8004038:	60a3      	str	r3, [r4, #8]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	441e      	add	r6, r3
 800403e:	6026      	str	r6, [r4, #0]
 8004040:	e7dc      	b.n	8003ffc <__ssputs_r+0x58>
 8004042:	462a      	mov	r2, r5
 8004044:	f000 fac1 	bl	80045ca <_realloc_r>
 8004048:	4606      	mov	r6, r0
 800404a:	2800      	cmp	r0, #0
 800404c:	d1e2      	bne.n	8004014 <__ssputs_r+0x70>
 800404e:	6921      	ldr	r1, [r4, #16]
 8004050:	4650      	mov	r0, sl
 8004052:	f7ff ff01 	bl	8003e58 <_free_r>
 8004056:	e7c8      	b.n	8003fea <__ssputs_r+0x46>

08004058 <_svfiprintf_r>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	461d      	mov	r5, r3
 800405e:	898b      	ldrh	r3, [r1, #12]
 8004060:	b09d      	sub	sp, #116	; 0x74
 8004062:	061f      	lsls	r7, r3, #24
 8004064:	4680      	mov	r8, r0
 8004066:	460c      	mov	r4, r1
 8004068:	4616      	mov	r6, r2
 800406a:	d50f      	bpl.n	800408c <_svfiprintf_r+0x34>
 800406c:	690b      	ldr	r3, [r1, #16]
 800406e:	b96b      	cbnz	r3, 800408c <_svfiprintf_r+0x34>
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	f7ff ff3d 	bl	8003ef0 <_malloc_r>
 8004076:	6020      	str	r0, [r4, #0]
 8004078:	6120      	str	r0, [r4, #16]
 800407a:	b928      	cbnz	r0, 8004088 <_svfiprintf_r+0x30>
 800407c:	230c      	movs	r3, #12
 800407e:	f8c8 3000 	str.w	r3, [r8]
 8004082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004086:	e0c8      	b.n	800421a <_svfiprintf_r+0x1c2>
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	6163      	str	r3, [r4, #20]
 800408c:	2300      	movs	r3, #0
 800408e:	9309      	str	r3, [sp, #36]	; 0x24
 8004090:	2320      	movs	r3, #32
 8004092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004096:	2330      	movs	r3, #48	; 0x30
 8004098:	f04f 0b01 	mov.w	fp, #1
 800409c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040a0:	9503      	str	r5, [sp, #12]
 80040a2:	4637      	mov	r7, r6
 80040a4:	463d      	mov	r5, r7
 80040a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040aa:	b10b      	cbz	r3, 80040b0 <_svfiprintf_r+0x58>
 80040ac:	2b25      	cmp	r3, #37	; 0x25
 80040ae:	d13e      	bne.n	800412e <_svfiprintf_r+0xd6>
 80040b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80040b4:	d00b      	beq.n	80040ce <_svfiprintf_r+0x76>
 80040b6:	4653      	mov	r3, sl
 80040b8:	4632      	mov	r2, r6
 80040ba:	4621      	mov	r1, r4
 80040bc:	4640      	mov	r0, r8
 80040be:	f7ff ff71 	bl	8003fa4 <__ssputs_r>
 80040c2:	3001      	adds	r0, #1
 80040c4:	f000 80a4 	beq.w	8004210 <_svfiprintf_r+0x1b8>
 80040c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ca:	4453      	add	r3, sl
 80040cc:	9309      	str	r3, [sp, #36]	; 0x24
 80040ce:	783b      	ldrb	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 809d 	beq.w	8004210 <_svfiprintf_r+0x1b8>
 80040d6:	2300      	movs	r3, #0
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	9307      	str	r3, [sp, #28]
 80040e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040e8:	931a      	str	r3, [sp, #104]	; 0x68
 80040ea:	462f      	mov	r7, r5
 80040ec:	2205      	movs	r2, #5
 80040ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040f2:	4850      	ldr	r0, [pc, #320]	; (8004234 <_svfiprintf_r+0x1dc>)
 80040f4:	f000 fa40 	bl	8004578 <memchr>
 80040f8:	9b04      	ldr	r3, [sp, #16]
 80040fa:	b9d0      	cbnz	r0, 8004132 <_svfiprintf_r+0xda>
 80040fc:	06d9      	lsls	r1, r3, #27
 80040fe:	bf44      	itt	mi
 8004100:	2220      	movmi	r2, #32
 8004102:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004106:	071a      	lsls	r2, r3, #28
 8004108:	bf44      	itt	mi
 800410a:	222b      	movmi	r2, #43	; 0x2b
 800410c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004110:	782a      	ldrb	r2, [r5, #0]
 8004112:	2a2a      	cmp	r2, #42	; 0x2a
 8004114:	d015      	beq.n	8004142 <_svfiprintf_r+0xea>
 8004116:	462f      	mov	r7, r5
 8004118:	2000      	movs	r0, #0
 800411a:	250a      	movs	r5, #10
 800411c:	9a07      	ldr	r2, [sp, #28]
 800411e:	4639      	mov	r1, r7
 8004120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004124:	3b30      	subs	r3, #48	; 0x30
 8004126:	2b09      	cmp	r3, #9
 8004128:	d94d      	bls.n	80041c6 <_svfiprintf_r+0x16e>
 800412a:	b1b8      	cbz	r0, 800415c <_svfiprintf_r+0x104>
 800412c:	e00f      	b.n	800414e <_svfiprintf_r+0xf6>
 800412e:	462f      	mov	r7, r5
 8004130:	e7b8      	b.n	80040a4 <_svfiprintf_r+0x4c>
 8004132:	4a40      	ldr	r2, [pc, #256]	; (8004234 <_svfiprintf_r+0x1dc>)
 8004134:	463d      	mov	r5, r7
 8004136:	1a80      	subs	r0, r0, r2
 8004138:	fa0b f000 	lsl.w	r0, fp, r0
 800413c:	4318      	orrs	r0, r3
 800413e:	9004      	str	r0, [sp, #16]
 8004140:	e7d3      	b.n	80040ea <_svfiprintf_r+0x92>
 8004142:	9a03      	ldr	r2, [sp, #12]
 8004144:	1d11      	adds	r1, r2, #4
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	9103      	str	r1, [sp, #12]
 800414a:	2a00      	cmp	r2, #0
 800414c:	db01      	blt.n	8004152 <_svfiprintf_r+0xfa>
 800414e:	9207      	str	r2, [sp, #28]
 8004150:	e004      	b.n	800415c <_svfiprintf_r+0x104>
 8004152:	4252      	negs	r2, r2
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	9207      	str	r2, [sp, #28]
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	783b      	ldrb	r3, [r7, #0]
 800415e:	2b2e      	cmp	r3, #46	; 0x2e
 8004160:	d10c      	bne.n	800417c <_svfiprintf_r+0x124>
 8004162:	787b      	ldrb	r3, [r7, #1]
 8004164:	2b2a      	cmp	r3, #42	; 0x2a
 8004166:	d133      	bne.n	80041d0 <_svfiprintf_r+0x178>
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	3702      	adds	r7, #2
 800416c:	1d1a      	adds	r2, r3, #4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	9203      	str	r2, [sp, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	bfb8      	it	lt
 8004176:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800417a:	9305      	str	r3, [sp, #20]
 800417c:	4d2e      	ldr	r5, [pc, #184]	; (8004238 <_svfiprintf_r+0x1e0>)
 800417e:	2203      	movs	r2, #3
 8004180:	7839      	ldrb	r1, [r7, #0]
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f9f8 	bl	8004578 <memchr>
 8004188:	b138      	cbz	r0, 800419a <_svfiprintf_r+0x142>
 800418a:	2340      	movs	r3, #64	; 0x40
 800418c:	1b40      	subs	r0, r0, r5
 800418e:	fa03 f000 	lsl.w	r0, r3, r0
 8004192:	9b04      	ldr	r3, [sp, #16]
 8004194:	3701      	adds	r7, #1
 8004196:	4303      	orrs	r3, r0
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	7839      	ldrb	r1, [r7, #0]
 800419c:	2206      	movs	r2, #6
 800419e:	4827      	ldr	r0, [pc, #156]	; (800423c <_svfiprintf_r+0x1e4>)
 80041a0:	1c7e      	adds	r6, r7, #1
 80041a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a6:	f000 f9e7 	bl	8004578 <memchr>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d038      	beq.n	8004220 <_svfiprintf_r+0x1c8>
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <_svfiprintf_r+0x1e8>)
 80041b0:	bb13      	cbnz	r3, 80041f8 <_svfiprintf_r+0x1a0>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	3307      	adds	r3, #7
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	3308      	adds	r3, #8
 80041bc:	9303      	str	r3, [sp, #12]
 80041be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c0:	444b      	add	r3, r9
 80041c2:	9309      	str	r3, [sp, #36]	; 0x24
 80041c4:	e76d      	b.n	80040a2 <_svfiprintf_r+0x4a>
 80041c6:	fb05 3202 	mla	r2, r5, r2, r3
 80041ca:	2001      	movs	r0, #1
 80041cc:	460f      	mov	r7, r1
 80041ce:	e7a6      	b.n	800411e <_svfiprintf_r+0xc6>
 80041d0:	2300      	movs	r3, #0
 80041d2:	250a      	movs	r5, #10
 80041d4:	4619      	mov	r1, r3
 80041d6:	3701      	adds	r7, #1
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	4638      	mov	r0, r7
 80041dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e0:	3a30      	subs	r2, #48	; 0x30
 80041e2:	2a09      	cmp	r2, #9
 80041e4:	d903      	bls.n	80041ee <_svfiprintf_r+0x196>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0c8      	beq.n	800417c <_svfiprintf_r+0x124>
 80041ea:	9105      	str	r1, [sp, #20]
 80041ec:	e7c6      	b.n	800417c <_svfiprintf_r+0x124>
 80041ee:	fb05 2101 	mla	r1, r5, r1, r2
 80041f2:	2301      	movs	r3, #1
 80041f4:	4607      	mov	r7, r0
 80041f6:	e7f0      	b.n	80041da <_svfiprintf_r+0x182>
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4622      	mov	r2, r4
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <_svfiprintf_r+0x1ec>)
 8004200:	a904      	add	r1, sp, #16
 8004202:	4640      	mov	r0, r8
 8004204:	f3af 8000 	nop.w
 8004208:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800420c:	4681      	mov	r9, r0
 800420e:	d1d6      	bne.n	80041be <_svfiprintf_r+0x166>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	f53f af35 	bmi.w	8004082 <_svfiprintf_r+0x2a>
 8004218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800421a:	b01d      	add	sp, #116	; 0x74
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4622      	mov	r2, r4
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <_svfiprintf_r+0x1ec>)
 8004228:	a904      	add	r1, sp, #16
 800422a:	4640      	mov	r0, r8
 800422c:	f000 f882 	bl	8004334 <_printf_i>
 8004230:	e7ea      	b.n	8004208 <_svfiprintf_r+0x1b0>
 8004232:	bf00      	nop
 8004234:	08004734 	.word	0x08004734
 8004238:	0800473a 	.word	0x0800473a
 800423c:	0800473e 	.word	0x0800473e
 8004240:	00000000 	.word	0x00000000
 8004244:	08003fa5 	.word	0x08003fa5

08004248 <_printf_common>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4691      	mov	r9, r2
 800424e:	461f      	mov	r7, r3
 8004250:	688a      	ldr	r2, [r1, #8]
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4606      	mov	r6, r0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfb8      	it	lt
 800425a:	4613      	movlt	r3, r2
 800425c:	f8c9 3000 	str.w	r3, [r9]
 8004260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004264:	460c      	mov	r4, r1
 8004266:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800426a:	b112      	cbz	r2, 8004272 <_printf_common+0x2a>
 800426c:	3301      	adds	r3, #1
 800426e:	f8c9 3000 	str.w	r3, [r9]
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	0699      	lsls	r1, r3, #26
 8004276:	bf42      	ittt	mi
 8004278:	f8d9 3000 	ldrmi.w	r3, [r9]
 800427c:	3302      	addmi	r3, #2
 800427e:	f8c9 3000 	strmi.w	r3, [r9]
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	f015 0506 	ands.w	r5, r5, #6
 8004288:	d107      	bne.n	800429a <_printf_common+0x52>
 800428a:	f104 0a19 	add.w	sl, r4, #25
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	f8d9 2000 	ldr.w	r2, [r9]
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	42ab      	cmp	r3, r5
 8004298:	dc29      	bgt.n	80042ee <_printf_common+0xa6>
 800429a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	3300      	adds	r3, #0
 80042a2:	bf18      	it	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	0692      	lsls	r2, r2, #26
 80042a8:	d42e      	bmi.n	8004308 <_printf_common+0xc0>
 80042aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ae:	4639      	mov	r1, r7
 80042b0:	4630      	mov	r0, r6
 80042b2:	47c0      	blx	r8
 80042b4:	3001      	adds	r0, #1
 80042b6:	d021      	beq.n	80042fc <_printf_common+0xb4>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	68e5      	ldr	r5, [r4, #12]
 80042bc:	f003 0306 	and.w	r3, r3, #6
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	bf18      	it	ne
 80042c4:	2500      	movne	r5, #0
 80042c6:	f8d9 2000 	ldr.w	r2, [r9]
 80042ca:	f04f 0900 	mov.w	r9, #0
 80042ce:	bf08      	it	eq
 80042d0:	1aad      	subeq	r5, r5, r2
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	bf08      	it	eq
 80042d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfc4      	itt	gt
 80042e0:	1a9b      	subgt	r3, r3, r2
 80042e2:	18ed      	addgt	r5, r5, r3
 80042e4:	341a      	adds	r4, #26
 80042e6:	454d      	cmp	r5, r9
 80042e8:	d11a      	bne.n	8004320 <_printf_common+0xd8>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e008      	b.n	8004300 <_printf_common+0xb8>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	4639      	mov	r1, r7
 80042f4:	4630      	mov	r0, r6
 80042f6:	47c0      	blx	r8
 80042f8:	3001      	adds	r0, #1
 80042fa:	d103      	bne.n	8004304 <_printf_common+0xbc>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	3501      	adds	r5, #1
 8004306:	e7c2      	b.n	800428e <_printf_common+0x46>
 8004308:	2030      	movs	r0, #48	; 0x30
 800430a:	18e1      	adds	r1, r4, r3
 800430c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004316:	4422      	add	r2, r4
 8004318:	3302      	adds	r3, #2
 800431a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431e:	e7c4      	b.n	80042aa <_printf_common+0x62>
 8004320:	2301      	movs	r3, #1
 8004322:	4622      	mov	r2, r4
 8004324:	4639      	mov	r1, r7
 8004326:	4630      	mov	r0, r6
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d0e6      	beq.n	80042fc <_printf_common+0xb4>
 800432e:	f109 0901 	add.w	r9, r9, #1
 8004332:	e7d8      	b.n	80042e6 <_printf_common+0x9e>

08004334 <_printf_i>:
 8004334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004338:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800433c:	460c      	mov	r4, r1
 800433e:	7e09      	ldrb	r1, [r1, #24]
 8004340:	b085      	sub	sp, #20
 8004342:	296e      	cmp	r1, #110	; 0x6e
 8004344:	4617      	mov	r7, r2
 8004346:	4606      	mov	r6, r0
 8004348:	4698      	mov	r8, r3
 800434a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800434c:	f000 80b3 	beq.w	80044b6 <_printf_i+0x182>
 8004350:	d822      	bhi.n	8004398 <_printf_i+0x64>
 8004352:	2963      	cmp	r1, #99	; 0x63
 8004354:	d036      	beq.n	80043c4 <_printf_i+0x90>
 8004356:	d80a      	bhi.n	800436e <_printf_i+0x3a>
 8004358:	2900      	cmp	r1, #0
 800435a:	f000 80b9 	beq.w	80044d0 <_printf_i+0x19c>
 800435e:	2958      	cmp	r1, #88	; 0x58
 8004360:	f000 8083 	beq.w	800446a <_printf_i+0x136>
 8004364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004368:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800436c:	e032      	b.n	80043d4 <_printf_i+0xa0>
 800436e:	2964      	cmp	r1, #100	; 0x64
 8004370:	d001      	beq.n	8004376 <_printf_i+0x42>
 8004372:	2969      	cmp	r1, #105	; 0x69
 8004374:	d1f6      	bne.n	8004364 <_printf_i+0x30>
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	6813      	ldr	r3, [r2, #0]
 800437a:	0605      	lsls	r5, r0, #24
 800437c:	f103 0104 	add.w	r1, r3, #4
 8004380:	d52a      	bpl.n	80043d8 <_printf_i+0xa4>
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	da03      	bge.n	8004392 <_printf_i+0x5e>
 800438a:	222d      	movs	r2, #45	; 0x2d
 800438c:	425b      	negs	r3, r3
 800438e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004392:	486f      	ldr	r0, [pc, #444]	; (8004550 <_printf_i+0x21c>)
 8004394:	220a      	movs	r2, #10
 8004396:	e039      	b.n	800440c <_printf_i+0xd8>
 8004398:	2973      	cmp	r1, #115	; 0x73
 800439a:	f000 809d 	beq.w	80044d8 <_printf_i+0x1a4>
 800439e:	d808      	bhi.n	80043b2 <_printf_i+0x7e>
 80043a0:	296f      	cmp	r1, #111	; 0x6f
 80043a2:	d020      	beq.n	80043e6 <_printf_i+0xb2>
 80043a4:	2970      	cmp	r1, #112	; 0x70
 80043a6:	d1dd      	bne.n	8004364 <_printf_i+0x30>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f043 0320 	orr.w	r3, r3, #32
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	e003      	b.n	80043ba <_printf_i+0x86>
 80043b2:	2975      	cmp	r1, #117	; 0x75
 80043b4:	d017      	beq.n	80043e6 <_printf_i+0xb2>
 80043b6:	2978      	cmp	r1, #120	; 0x78
 80043b8:	d1d4      	bne.n	8004364 <_printf_i+0x30>
 80043ba:	2378      	movs	r3, #120	; 0x78
 80043bc:	4865      	ldr	r0, [pc, #404]	; (8004554 <_printf_i+0x220>)
 80043be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043c2:	e055      	b.n	8004470 <_printf_i+0x13c>
 80043c4:	6813      	ldr	r3, [r2, #0]
 80043c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ca:	1d19      	adds	r1, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6011      	str	r1, [r2, #0]
 80043d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d4:	2301      	movs	r3, #1
 80043d6:	e08c      	b.n	80044f2 <_printf_i+0x1be>
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043de:	6011      	str	r1, [r2, #0]
 80043e0:	bf18      	it	ne
 80043e2:	b21b      	sxthne	r3, r3
 80043e4:	e7cf      	b.n	8004386 <_printf_i+0x52>
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	6825      	ldr	r5, [r4, #0]
 80043ea:	1d18      	adds	r0, r3, #4
 80043ec:	6010      	str	r0, [r2, #0]
 80043ee:	0628      	lsls	r0, r5, #24
 80043f0:	d501      	bpl.n	80043f6 <_printf_i+0xc2>
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	e002      	b.n	80043fc <_printf_i+0xc8>
 80043f6:	0668      	lsls	r0, r5, #25
 80043f8:	d5fb      	bpl.n	80043f2 <_printf_i+0xbe>
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	296f      	cmp	r1, #111	; 0x6f
 80043fe:	bf14      	ite	ne
 8004400:	220a      	movne	r2, #10
 8004402:	2208      	moveq	r2, #8
 8004404:	4852      	ldr	r0, [pc, #328]	; (8004550 <_printf_i+0x21c>)
 8004406:	2100      	movs	r1, #0
 8004408:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800440c:	6865      	ldr	r5, [r4, #4]
 800440e:	2d00      	cmp	r5, #0
 8004410:	60a5      	str	r5, [r4, #8]
 8004412:	f2c0 8095 	blt.w	8004540 <_printf_i+0x20c>
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	f021 0104 	bic.w	r1, r1, #4
 800441c:	6021      	str	r1, [r4, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d13d      	bne.n	800449e <_printf_i+0x16a>
 8004422:	2d00      	cmp	r5, #0
 8004424:	f040 808e 	bne.w	8004544 <_printf_i+0x210>
 8004428:	4665      	mov	r5, ip
 800442a:	2a08      	cmp	r2, #8
 800442c:	d10b      	bne.n	8004446 <_printf_i+0x112>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	07db      	lsls	r3, r3, #31
 8004432:	d508      	bpl.n	8004446 <_printf_i+0x112>
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	bfde      	ittt	le
 800443c:	2330      	movle	r3, #48	; 0x30
 800443e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004442:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004446:	ebac 0305 	sub.w	r3, ip, r5
 800444a:	6123      	str	r3, [r4, #16]
 800444c:	f8cd 8000 	str.w	r8, [sp]
 8004450:	463b      	mov	r3, r7
 8004452:	aa03      	add	r2, sp, #12
 8004454:	4621      	mov	r1, r4
 8004456:	4630      	mov	r0, r6
 8004458:	f7ff fef6 	bl	8004248 <_printf_common>
 800445c:	3001      	adds	r0, #1
 800445e:	d14d      	bne.n	80044fc <_printf_i+0x1c8>
 8004460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004464:	b005      	add	sp, #20
 8004466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800446a:	4839      	ldr	r0, [pc, #228]	; (8004550 <_printf_i+0x21c>)
 800446c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004470:	6813      	ldr	r3, [r2, #0]
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	1d1d      	adds	r5, r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6015      	str	r5, [r2, #0]
 800447a:	060a      	lsls	r2, r1, #24
 800447c:	d50b      	bpl.n	8004496 <_printf_i+0x162>
 800447e:	07ca      	lsls	r2, r1, #31
 8004480:	bf44      	itt	mi
 8004482:	f041 0120 	orrmi.w	r1, r1, #32
 8004486:	6021      	strmi	r1, [r4, #0]
 8004488:	b91b      	cbnz	r3, 8004492 <_printf_i+0x15e>
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	f022 0220 	bic.w	r2, r2, #32
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	2210      	movs	r2, #16
 8004494:	e7b7      	b.n	8004406 <_printf_i+0xd2>
 8004496:	064d      	lsls	r5, r1, #25
 8004498:	bf48      	it	mi
 800449a:	b29b      	uxthmi	r3, r3
 800449c:	e7ef      	b.n	800447e <_printf_i+0x14a>
 800449e:	4665      	mov	r5, ip
 80044a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80044a4:	fb02 3311 	mls	r3, r2, r1, r3
 80044a8:	5cc3      	ldrb	r3, [r0, r3]
 80044aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044ae:	460b      	mov	r3, r1
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d1f5      	bne.n	80044a0 <_printf_i+0x16c>
 80044b4:	e7b9      	b.n	800442a <_printf_i+0xf6>
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	6825      	ldr	r5, [r4, #0]
 80044ba:	1d18      	adds	r0, r3, #4
 80044bc:	6961      	ldr	r1, [r4, #20]
 80044be:	6010      	str	r0, [r2, #0]
 80044c0:	0628      	lsls	r0, r5, #24
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	d501      	bpl.n	80044ca <_printf_i+0x196>
 80044c6:	6019      	str	r1, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <_printf_i+0x19c>
 80044ca:	066a      	lsls	r2, r5, #25
 80044cc:	d5fb      	bpl.n	80044c6 <_printf_i+0x192>
 80044ce:	8019      	strh	r1, [r3, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	4665      	mov	r5, ip
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	e7b9      	b.n	800444c <_printf_i+0x118>
 80044d8:	6813      	ldr	r3, [r2, #0]
 80044da:	1d19      	adds	r1, r3, #4
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	681d      	ldr	r5, [r3, #0]
 80044e0:	6862      	ldr	r2, [r4, #4]
 80044e2:	2100      	movs	r1, #0
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f847 	bl	8004578 <memchr>
 80044ea:	b108      	cbz	r0, 80044f0 <_printf_i+0x1bc>
 80044ec:	1b40      	subs	r0, r0, r5
 80044ee:	6060      	str	r0, [r4, #4]
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fa:	e7a7      	b.n	800444c <_printf_i+0x118>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	462a      	mov	r2, r5
 8004500:	4639      	mov	r1, r7
 8004502:	4630      	mov	r0, r6
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d0aa      	beq.n	8004460 <_printf_i+0x12c>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	079b      	lsls	r3, r3, #30
 800450e:	d413      	bmi.n	8004538 <_printf_i+0x204>
 8004510:	68e0      	ldr	r0, [r4, #12]
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	4298      	cmp	r0, r3
 8004516:	bfb8      	it	lt
 8004518:	4618      	movlt	r0, r3
 800451a:	e7a3      	b.n	8004464 <_printf_i+0x130>
 800451c:	2301      	movs	r3, #1
 800451e:	464a      	mov	r2, r9
 8004520:	4639      	mov	r1, r7
 8004522:	4630      	mov	r0, r6
 8004524:	47c0      	blx	r8
 8004526:	3001      	adds	r0, #1
 8004528:	d09a      	beq.n	8004460 <_printf_i+0x12c>
 800452a:	3501      	adds	r5, #1
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	9a03      	ldr	r2, [sp, #12]
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	42ab      	cmp	r3, r5
 8004534:	dcf2      	bgt.n	800451c <_printf_i+0x1e8>
 8004536:	e7eb      	b.n	8004510 <_printf_i+0x1dc>
 8004538:	2500      	movs	r5, #0
 800453a:	f104 0919 	add.w	r9, r4, #25
 800453e:	e7f5      	b.n	800452c <_printf_i+0x1f8>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ac      	bne.n	800449e <_printf_i+0x16a>
 8004544:	7803      	ldrb	r3, [r0, #0]
 8004546:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800454a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454e:	e76c      	b.n	800442a <_printf_i+0xf6>
 8004550:	08004745 	.word	0x08004745
 8004554:	08004756 	.word	0x08004756

08004558 <_sbrk_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	2300      	movs	r3, #0
 800455c:	4c05      	ldr	r4, [pc, #20]	; (8004574 <_sbrk_r+0x1c>)
 800455e:	4605      	mov	r5, r0
 8004560:	4608      	mov	r0, r1
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	f7fc fb3e 	bl	8000be4 <_sbrk>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_sbrk_r+0x1a>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	b103      	cbz	r3, 8004572 <_sbrk_r+0x1a>
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20002628 	.word	0x20002628

08004578 <memchr>:
 8004578:	b510      	push	{r4, lr}
 800457a:	b2c9      	uxtb	r1, r1
 800457c:	4402      	add	r2, r0
 800457e:	4290      	cmp	r0, r2
 8004580:	4603      	mov	r3, r0
 8004582:	d101      	bne.n	8004588 <memchr+0x10>
 8004584:	2300      	movs	r3, #0
 8004586:	e003      	b.n	8004590 <memchr+0x18>
 8004588:	781c      	ldrb	r4, [r3, #0]
 800458a:	3001      	adds	r0, #1
 800458c:	428c      	cmp	r4, r1
 800458e:	d1f6      	bne.n	800457e <memchr+0x6>
 8004590:	4618      	mov	r0, r3
 8004592:	bd10      	pop	{r4, pc}

08004594 <memmove>:
 8004594:	4288      	cmp	r0, r1
 8004596:	b510      	push	{r4, lr}
 8004598:	eb01 0302 	add.w	r3, r1, r2
 800459c:	d807      	bhi.n	80045ae <memmove+0x1a>
 800459e:	1e42      	subs	r2, r0, #1
 80045a0:	4299      	cmp	r1, r3
 80045a2:	d00a      	beq.n	80045ba <memmove+0x26>
 80045a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045ac:	e7f8      	b.n	80045a0 <memmove+0xc>
 80045ae:	4283      	cmp	r3, r0
 80045b0:	d9f5      	bls.n	800459e <memmove+0xa>
 80045b2:	1881      	adds	r1, r0, r2
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	42d3      	cmn	r3, r2
 80045b8:	d100      	bne.n	80045bc <memmove+0x28>
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045c4:	e7f7      	b.n	80045b6 <memmove+0x22>

080045c6 <__malloc_lock>:
 80045c6:	4770      	bx	lr

080045c8 <__malloc_unlock>:
 80045c8:	4770      	bx	lr

080045ca <_realloc_r>:
 80045ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045cc:	4607      	mov	r7, r0
 80045ce:	4614      	mov	r4, r2
 80045d0:	460e      	mov	r6, r1
 80045d2:	b921      	cbnz	r1, 80045de <_realloc_r+0x14>
 80045d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045d8:	4611      	mov	r1, r2
 80045da:	f7ff bc89 	b.w	8003ef0 <_malloc_r>
 80045de:	b922      	cbnz	r2, 80045ea <_realloc_r+0x20>
 80045e0:	f7ff fc3a 	bl	8003e58 <_free_r>
 80045e4:	4625      	mov	r5, r4
 80045e6:	4628      	mov	r0, r5
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ea:	f000 f814 	bl	8004616 <_malloc_usable_size_r>
 80045ee:	42a0      	cmp	r0, r4
 80045f0:	d20f      	bcs.n	8004612 <_realloc_r+0x48>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4638      	mov	r0, r7
 80045f6:	f7ff fc7b 	bl	8003ef0 <_malloc_r>
 80045fa:	4605      	mov	r5, r0
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d0f2      	beq.n	80045e6 <_realloc_r+0x1c>
 8004600:	4631      	mov	r1, r6
 8004602:	4622      	mov	r2, r4
 8004604:	f7ff fb90 	bl	8003d28 <memcpy>
 8004608:	4631      	mov	r1, r6
 800460a:	4638      	mov	r0, r7
 800460c:	f7ff fc24 	bl	8003e58 <_free_r>
 8004610:	e7e9      	b.n	80045e6 <_realloc_r+0x1c>
 8004612:	4635      	mov	r5, r6
 8004614:	e7e7      	b.n	80045e6 <_realloc_r+0x1c>

08004616 <_malloc_usable_size_r>:
 8004616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461a:	1f18      	subs	r0, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfbc      	itt	lt
 8004620:	580b      	ldrlt	r3, [r1, r0]
 8004622:	18c0      	addlt	r0, r0, r3
 8004624:	4770      	bx	lr
	...

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
