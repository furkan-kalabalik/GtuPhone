
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002924  08002924  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002924  08002924  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800292c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  08002938  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200002c8  08002938  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e02d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020eb  00000000  00000000  0002e062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b90  00000000  00000000  00031cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7e4  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000911cc  00000000  00000000  0004002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d11f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000d1274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002890 	.word	0x08002890

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002890 	.word	0x08002890

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_UART_RxCpltCallback>:
te_call_state CALL_STATE = NO_CALL;
te_phone_state PHONE_STATE = IDLE;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 8000168:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a13      	ldr	r2, [pc, #76]	; (80001bc <HAL_UART_RxCpltCallback+0x5c>)
 800016e:	5cd3      	ldrb	r3, [r2, r3]
 8000170:	2b0a      	cmp	r3, #10
 8000172:	d10f      	bne.n	8000194 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <HAL_UART_RxCpltCallback+0x60>)
 8000176:	2201      	movs	r2, #1
 8000178:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <HAL_UART_RxCpltCallback+0x5c>)
 8000186:	4413      	add	r3, r2
 8000188:	2201      	movs	r2, #1
 800018a:	4619      	mov	r1, r3
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <HAL_UART_RxCpltCallback+0x64>)
 800018e:	f001 fe17 	bl	8001dc0 <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 8000192:	e00d      	b.n	80001b0 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 800019c:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <HAL_UART_RxCpltCallback+0x5c>)
 80001a4:	4413      	add	r3, r2
 80001a6:	2201      	movs	r2, #1
 80001a8:	4619      	mov	r1, r3
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <HAL_UART_RxCpltCallback+0x64>)
 80001ac:	f001 fe08 	bl	8001dc0 <HAL_UART_Receive_IT>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	200000e8 	.word	0x200000e8
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	20000238 	.word	0x20000238

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b09e      	sub	sp, #120	; 0x78
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fadf 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f88b 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f921 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f8cb 	bl	8000374 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8f3 	bl	80003c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //pSendAtCommand("ATE0", 400);
  /* USER CODE END 2 */
  char close_echo[] = "ATE0\r\n";
 80001e2:	4a3d      	ldr	r2, [pc, #244]	; (80002d8 <main+0x110>)
 80001e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ec:	6018      	str	r0, [r3, #0]
 80001ee:	3304      	adds	r3, #4
 80001f0:	8019      	strh	r1, [r3, #0]
 80001f2:	3302      	adds	r3, #2
 80001f4:	0c0a      	lsrs	r2, r1, #16
 80001f6:	701a      	strb	r2, [r3, #0]
  char call_command[] = "ATD+905383674319i;\r\n";
 80001f8:	4b38      	ldr	r3, [pc, #224]	; (80002dc <main+0x114>)
 80001fa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000208:	6020      	str	r0, [r4, #0]
 800020a:	3404      	adds	r4, #4
 800020c:	7021      	strb	r1, [r4, #0]
  char call_status[] = "AT+CPAS\r\n";
 800020e:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <main+0x118>)
 8000210:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000214:	ca07      	ldmia	r2, {r0, r1, r2}
 8000216:	c303      	stmia	r3!, {r0, r1}
 8000218:	801a      	strh	r2, [r3, #0]
  char baud_rate[] = "AT+IPR?\r\n";
 800021a:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <main+0x11c>)
 800021c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000220:	ca07      	ldmia	r2, {r0, r1, r2}
 8000222:	c303      	stmia	r3!, {r0, r1}
 8000224:	801a      	strh	r2, [r3, #0]
  char response[64] = {0};
 8000226:	463b      	mov	r3, r7
 8000228:	2240      	movs	r2, #64	; 0x40
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f002 fb27 	bl	8002880 <memset>
  HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000232:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000236:	4618      	mov	r0, r3
 8000238:	f7ff ff8a 	bl	8000150 <strlen>
 800023c:	4603      	mov	r3, r0
 800023e:	b29a      	uxth	r2, r3
 8000240:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000244:	23c8      	movs	r3, #200	; 0xc8
 8000246:	4828      	ldr	r0, [pc, #160]	; (80002e8 <main+0x120>)
 8000248:	f001 fc89 	bl	8001b5e <HAL_UART_Transmit>
  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800024c:	4639      	mov	r1, r7
 800024e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000252:	2240      	movs	r2, #64	; 0x40
 8000254:	4824      	ldr	r0, [pc, #144]	; (80002e8 <main+0x120>)
 8000256:	f001 fd14 	bl	8001c82 <HAL_UART_Receive>
  memset(response, 0, sizeof(response));
 800025a:	463b      	mov	r3, r7
 800025c:	2240      	movs	r2, #64	; 0x40
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f002 fb0d 	bl	8002880 <memset>

  HAL_UART_Transmit(GSM_UART, (uint8_t*)&call_command[0], strlen(call_command), 200);
 8000266:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff70 	bl	8000150 <strlen>
 8000270:	4603      	mov	r3, r0
 8000272:	b29a      	uxth	r2, r3
 8000274:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000278:	23c8      	movs	r3, #200	; 0xc8
 800027a:	481b      	ldr	r0, [pc, #108]	; (80002e8 <main+0x120>)
 800027c:	f001 fc6f 	bl	8001b5e <HAL_UART_Transmit>
  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 5000);
 8000280:	4639      	mov	r1, r7
 8000282:	f241 3388 	movw	r3, #5000	; 0x1388
 8000286:	2240      	movs	r2, #64	; 0x40
 8000288:	4817      	ldr	r0, [pc, #92]	; (80002e8 <main+0x120>)
 800028a:	f001 fcfa 	bl	8001c82 <HAL_UART_Receive>
  memset(response, 0, sizeof(response));
 800028e:	463b      	mov	r3, r7
 8000290:	2240      	movs	r2, #64	; 0x40
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f002 faf3 	bl	8002880 <memset>

  while(1)
  {
    HAL_UART_Transmit(GSM_UART, (uint8_t*)&call_status[0], strlen(call_status), 200);
 800029a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff56 	bl	8000150 <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80002ac:	23c8      	movs	r3, #200	; 0xc8
 80002ae:	480e      	ldr	r0, [pc, #56]	; (80002e8 <main+0x120>)
 80002b0:	f001 fc55 	bl	8001b5e <HAL_UART_Transmit>
    HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002b4:	4639      	mov	r1, r7
 80002b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002ba:	2240      	movs	r2, #64	; 0x40
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <main+0x120>)
 80002be:	f001 fce0 	bl	8001c82 <HAL_UART_Receive>
    memset(response, 0, sizeof(response));
 80002c2:	463b      	mov	r3, r7
 80002c4:	2240      	movs	r2, #64	; 0x40
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 fad9 	bl	8002880 <memset>
    HAL_Delay(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 fa8f 	bl	80007f4 <HAL_Delay>
    HAL_UART_Transmit(GSM_UART, (uint8_t*)&call_status[0], strlen(call_status), 200);
 80002d6:	e7e0      	b.n	800029a <main+0xd2>
 80002d8:	080028a8 	.word	0x080028a8
 80002dc:	080028b0 	.word	0x080028b0
 80002e0:	080028c8 	.word	0x080028c8
 80002e4:	080028d4 	.word	0x080028d4
 80002e8:	200001f0 	.word	0x200001f0

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fac0 	bl	8002880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800032a:	2300      	movs	r3, #0
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fd30 	bl	8000d98 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800033e:	f000 f8a1 	bl	8000484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff9b 	bl	8001298 <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000368:	f000 f88c 	bl	8000484 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3740      	adds	r7, #64	; 0x40
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_USART1_UART_Init+0x50>)
 800037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003ac:	f001 fb8a 	bl	8001ac4 <HAL_UART_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003b6:	f000 f865 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200001f0 	.word	0x200001f0
 80003c4:	40013800 	.word	0x40013800

080003c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART2_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 8000400:	f001 fb60 	bl	8001ac4 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 f83b 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000238 	.word	0x20000238
 8000418:	40004400 	.word	0x40004400

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a0d      	ldr	r2, [pc, #52]	; (800045c <MX_GPIO_Init+0x40>)
 8000428:	f043 0320 	orr.w	r3, r3, #32
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0320 	and.w	r3, r3, #32
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a07      	ldr	r2, [pc, #28]	; (800045c <MX_GPIO_Init+0x40>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_GPIO_Init+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d101      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000472:	f000 f9a3 	bl	80007bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40012c00 	.word	0x40012c00

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048a:	e7fe      	b.n	800048a <Error_Handler+0x6>

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <HAL_MspInit+0x68>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <HAL_MspInit+0x68>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_MspInit+0x68>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_MspInit+0x68>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <HAL_MspInit+0x68>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x68>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	210f      	movs	r1, #15
 80004c6:	f06f 0001 	mvn.w	r0, #1
 80004ca:	f000 fa6a 	bl	80009a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_MspInit+0x6c>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_MspInit+0x6c>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <HAL_UART_MspInit+0x118>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d13a      	bne.n	8000592 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800051c:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <HAL_UART_MspInit+0x11c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a3d      	ldr	r2, [pc, #244]	; (8000618 <HAL_UART_MspInit+0x11c>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <HAL_UART_MspInit+0x11c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b38      	ldr	r3, [pc, #224]	; (8000618 <HAL_UART_MspInit+0x11c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a37      	ldr	r2, [pc, #220]	; (8000618 <HAL_UART_MspInit+0x11c>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b35      	ldr	r3, [pc, #212]	; (8000618 <HAL_UART_MspInit+0x11c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	4619      	mov	r1, r3
 8000560:	482e      	ldr	r0, [pc, #184]	; (800061c <HAL_UART_MspInit+0x120>)
 8000562:	f000 fabf 	bl	8000ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0318 	add.w	r3, r7, #24
 8000578:	4619      	mov	r1, r3
 800057a:	4828      	ldr	r0, [pc, #160]	; (800061c <HAL_UART_MspInit+0x120>)
 800057c:	f000 fab2 	bl	8000ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2105      	movs	r1, #5
 8000584:	2025      	movs	r0, #37	; 0x25
 8000586:	f000 fa0c 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800058a:	2025      	movs	r0, #37	; 0x25
 800058c:	f000 fa25 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000590:	e03c      	b.n	800060c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a22      	ldr	r2, [pc, #136]	; (8000620 <HAL_UART_MspInit+0x124>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d137      	bne.n	800060c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <HAL_UART_MspInit+0x11c>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <HAL_UART_MspInit+0x11c>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	61d3      	str	r3, [r2, #28]
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_UART_MspInit+0x11c>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_UART_MspInit+0x11c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <HAL_UART_MspInit+0x11c>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_UART_MspInit+0x11c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005cc:	2304      	movs	r3, #4
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	2303      	movs	r3, #3
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	4619      	mov	r1, r3
 80005de:	480f      	ldr	r0, [pc, #60]	; (800061c <HAL_UART_MspInit+0x120>)
 80005e0:	f000 fa80 	bl	8000ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005e4:	2308      	movs	r3, #8
 80005e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4619      	mov	r1, r3
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <HAL_UART_MspInit+0x120>)
 80005f8:	f000 fa74 	bl	8000ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2105      	movs	r1, #5
 8000600:	2026      	movs	r0, #38	; 0x26
 8000602:	f000 f9ce 	bl	80009a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000606:	2026      	movs	r0, #38	; 0x26
 8000608:	f000 f9e7 	bl	80009da <HAL_NVIC_EnableIRQ>
}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40013800 	.word	0x40013800
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800
 8000620:	40004400 	.word	0x40004400

08000624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	2019      	movs	r0, #25
 800063a:	f000 f9b2 	bl	80009a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800063e:	2019      	movs	r0, #25
 8000640:	f000 f9cb 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <HAL_InitTick+0x9c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <HAL_InitTick+0x9c>)
 800064a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <HAL_InitTick+0x9c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065c:	f107 0210 	add.w	r2, r7, #16
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ff94 	bl	8001594 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800066c:	f000 ff7e 	bl	800156c <HAL_RCC_GetPCLK2Freq>
 8000670:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <HAL_InitTick+0xa0>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	0c9b      	lsrs	r3, r3, #18
 800067c:	3b01      	subs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_InitTick+0xa4>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <HAL_InitTick+0xa8>)
 8000684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_InitTick+0xa4>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_InitTick+0xa4>)
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_InitTick+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_InitTick+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <HAL_InitTick+0xa4>)
 80006a2:	f000 ffc5 	bl	8001630 <HAL_TIM_Base_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d104      	bne.n	80006b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <HAL_InitTick+0xa4>)
 80006ae:	f001 f817 	bl	80016e0 <HAL_TIM_Base_Start_IT>
 80006b2:	4603      	mov	r3, r0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	431bde83 	.word	0x431bde83
 80006c8:	2000027c 	.word	0x2000027c
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <TIM1_UP_IRQHandler+0x10>)
 8000702:	f001 f83f 	bl	8001784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000027c 	.word	0x2000027c

08000710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <USART1_IRQHandler+0x10>)
 8000716:	f001 fba7 	bl	8001e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001f0 	.word	0x200001f0

08000724 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <USART2_IRQHandler+0x10>)
 800072a:	f001 fb9d 	bl	8001e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000238 	.word	0x20000238

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000744:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000746:	e003      	b.n	8000750 <LoopCopyDataInit>

08000748 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800074a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800074c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800074e:	3104      	adds	r1, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000754:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000756:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000758:	d3f6      	bcc.n	8000748 <CopyDataInit>
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800075c:	e002      	b.n	8000764 <LoopFillZerobss>

0800075e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000760:	f842 3b04 	str.w	r3, [r2], #4

08000764 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000766:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000768:	d3f9      	bcc.n	800075e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076a:	f7ff ffe5 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f002 f863 	bl	8002838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff fd29 	bl	80001c8 <main>
  bx lr
 8000776:	4770      	bx	lr
  ldr r3, =_sidata
 8000778:	0800292c 	.word	0x0800292c
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000780:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000784:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000788:	200002c8 	.word	0x200002c8

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f8f3 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff ff3c 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fe6e 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x1c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x20>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_IncTick+0x20>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000008 	.word	0x20000008
 80007dc:	200002c4 	.word	0x200002c4

080007e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_GetTick+0x10>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	200002c4 	.word	0x200002c4

080007f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff fff0 	bl	80007e0 <HAL_GetTick>
 8000800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800080c:	d005      	beq.n	800081a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_Delay+0x40>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800081a:	bf00      	nop
 800081c:	f7ff ffe0 	bl	80007e0 <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8f7      	bhi.n	800081c <HAL_Delay+0x28>
  {
  }
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0b      	blt.n	80008c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <__NVIC_EnableIRQ+0x34>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff4f 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff64 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ffb2 	bl	8000928 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff81 	bl	80008d4 <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff57 	bl	800089c <__NVIC_EnableIRQ>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d005      	beq.n	8000a1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2204      	movs	r2, #4
 8000a12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e051      	b.n	8000abe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020e 	bic.w	r2, r2, #14
 8000a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_DMA_Abort_IT+0xd0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d029      	beq.n	8000a98 <HAL_DMA_Abort_IT+0xa0>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <HAL_DMA_Abort_IT+0xd4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d022      	beq.n	8000a94 <HAL_DMA_Abort_IT+0x9c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_DMA_Abort_IT+0xd8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d01a      	beq.n	8000a8e <HAL_DMA_Abort_IT+0x96>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_DMA_Abort_IT+0xdc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d012      	beq.n	8000a88 <HAL_DMA_Abort_IT+0x90>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_DMA_Abort_IT+0xe0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d00a      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x8a>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <HAL_DMA_Abort_IT+0xe4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d102      	bne.n	8000a7c <HAL_DMA_Abort_IT+0x84>
 8000a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a7a:	e00e      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a80:	e00b      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a86:	e008      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	e005      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a92:	e002      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a94:	2310      	movs	r3, #16
 8000a96:	e000      	b.n	8000a9a <HAL_DMA_Abort_IT+0xa2>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <HAL_DMA_Abort_IT+0xe8>)
 8000a9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	4798      	blx	r3
    } 
  }
  return status;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020008 	.word	0x40020008
 8000acc:	4002001c 	.word	0x4002001c
 8000ad0:	40020030 	.word	0x40020030
 8000ad4:	40020044 	.word	0x40020044
 8000ad8:	40020058 	.word	0x40020058
 8000adc:	4002006c 	.word	0x4002006c
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e127      	b.n	8000d48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8116 	bne.w	8000d42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d034      	beq.n	8000b88 <HAL_GPIO_Init+0xa4>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d80d      	bhi.n	8000b3e <HAL_GPIO_Init+0x5a>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d02b      	beq.n	8000b7e <HAL_GPIO_Init+0x9a>
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d804      	bhi.n	8000b34 <HAL_GPIO_Init+0x50>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d031      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d01c      	beq.n	8000b6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b32:	e048      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d043      	beq.n	8000bc0 <HAL_GPIO_Init+0xdc>
 8000b38:	2b11      	cmp	r3, #17
 8000b3a:	d01b      	beq.n	8000b74 <HAL_GPIO_Init+0x90>
          break;
 8000b3c:	e043      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b3e:	4a89      	ldr	r2, [pc, #548]	; (8000d64 <HAL_GPIO_Init+0x280>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d026      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
 8000b44:	4a87      	ldr	r2, [pc, #540]	; (8000d64 <HAL_GPIO_Init+0x280>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d806      	bhi.n	8000b58 <HAL_GPIO_Init+0x74>
 8000b4a:	4a87      	ldr	r2, [pc, #540]	; (8000d68 <HAL_GPIO_Init+0x284>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d020      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
 8000b50:	4a86      	ldr	r2, [pc, #536]	; (8000d6c <HAL_GPIO_Init+0x288>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d01d      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
          break;
 8000b56:	e036      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b58:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <HAL_GPIO_Init+0x28c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d019      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
 8000b5e:	4a85      	ldr	r2, [pc, #532]	; (8000d74 <HAL_GPIO_Init+0x290>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d016      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
 8000b64:	4a84      	ldr	r2, [pc, #528]	; (8000d78 <HAL_GPIO_Init+0x294>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0xae>
          break;
 8000b6a:	e02c      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e028      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e023      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	3308      	adds	r3, #8
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e01e      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	330c      	adds	r3, #12
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e019      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e012      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d105      	bne.n	8000bb4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	611a      	str	r2, [r3, #16]
          break;
 8000bb2:	e008      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	615a      	str	r2, [r3, #20]
          break;
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	d801      	bhi.n	8000bd0 <HAL_GPIO_Init+0xec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	e001      	b.n	8000bd4 <HAL_GPIO_Init+0xf0>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	2bff      	cmp	r3, #255	; 0xff
 8000bda:	d802      	bhi.n	8000be2 <HAL_GPIO_Init+0xfe>
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	e002      	b.n	8000be8 <HAL_GPIO_Init+0x104>
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3b08      	subs	r3, #8
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	210f      	movs	r1, #15
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	6a39      	ldr	r1, [r7, #32]
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 8096 	beq.w	8000d42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <HAL_GPIO_Init+0x298>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <HAL_GPIO_Init+0x298>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <HAL_GPIO_Init+0x298>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c2e:	4a54      	ldr	r2, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x29c>)
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0x19e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d00d      	beq.n	8000c7e <HAL_GPIO_Init+0x19a>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d007      	beq.n	8000c7a <HAL_GPIO_Init+0x196>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_GPIO_Init+0x192>
 8000c72:	2303      	movs	r3, #3
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x1a0>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e004      	b.n	8000c84 <HAL_GPIO_Init+0x1a0>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_Init+0x1a0>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x1a0>
 8000c82:	2300      	movs	r3, #0
 8000c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c86:	f002 0203 	and.w	r2, r2, #3
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	4093      	lsls	r3, r2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c94:	493a      	ldr	r1, [pc, #232]	; (8000d80 <HAL_GPIO_Init+0x29c>)
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4938      	ldr	r1, [pc, #224]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4933      	ldr	r1, [pc, #204]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	492e      	ldr	r1, [pc, #184]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4929      	ldr	r1, [pc, #164]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d006      	beq.n	8000d0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	608b      	str	r3, [r1, #8]
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	491f      	ldr	r1, [pc, #124]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	491a      	ldr	r1, [pc, #104]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60cb      	str	r3, [r1, #12]
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4915      	ldr	r1, [pc, #84]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f47f aed0 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	372c      	adds	r7, #44	; 0x2c
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	10210000 	.word	0x10210000
 8000d68:	10110000 	.word	0x10110000
 8000d6c:	10120000 	.word	0x10120000
 8000d70:	10310000 	.word	0x10310000
 8000d74:	10320000 	.word	0x10320000
 8000d78:	10220000 	.word	0x10220000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	40010800 	.word	0x40010800
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40011400 	.word	0x40011400
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e26c      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8087 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db8:	4b92      	ldr	r3, [pc, #584]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d00c      	beq.n	8000dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc4:	4b8f      	ldr	r3, [pc, #572]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d112      	bne.n	8000df6 <HAL_RCC_OscConfig+0x5e>
 8000dd0:	4b8c      	ldr	r3, [pc, #560]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ddc:	d10b      	bne.n	8000df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	4b89      	ldr	r3, [pc, #548]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d06c      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x12c>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d168      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e246      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfe:	d106      	bne.n	8000e0e <HAL_RCC_OscConfig+0x76>
 8000e00:	4b80      	ldr	r3, [pc, #512]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a7f      	ldr	r2, [pc, #508]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e02e      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x98>
 8000e16:	4b7b      	ldr	r3, [pc, #492]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7a      	ldr	r2, [pc, #488]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b78      	ldr	r3, [pc, #480]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a77      	ldr	r2, [pc, #476]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e01d      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0xbc>
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a71      	ldr	r2, [pc, #452]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b6f      	ldr	r3, [pc, #444]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6e      	ldr	r2, [pc, #440]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e54:	4b6b      	ldr	r3, [pc, #428]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a6a      	ldr	r2, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a67      	ldr	r2, [pc, #412]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fcb4 	bl	80007e0 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fcb0 	bl	80007e0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1fa      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0xe4>
 8000e9a:	e014      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fca0 	bl	80007e0 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fc9c 	bl	80007e0 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e1e6      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	4b53      	ldr	r3, [pc, #332]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x10c>
 8000ec2:	e000      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d063      	beq.n	8000f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d11c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x18c>
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d116      	bne.n	8000f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x176>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e1ba      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4939      	ldr	r1, [pc, #228]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f22:	e03a      	b.n	8000f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d020      	beq.n	8000f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fc55 	bl	80007e0 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fc51 	bl	80007e0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e19b      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4927      	ldr	r1, [pc, #156]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
 8000f6c:	e015      	b.n	8000f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_RCC_OscConfig+0x270>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc34 	bl	80007e0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc30 	bl	80007e0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e17a      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03a      	beq.n	800101c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d019      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_RCC_OscConfig+0x274>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc14 	bl	80007e0 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc10 	bl	80007e0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e15a      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f000 fb0a 	bl	80015f4 <RCC_Delay>
 8000fe0:	e01c      	b.n	800101c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_RCC_OscConfig+0x274>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fbfa 	bl	80007e0 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fee:	e00f      	b.n	8001010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fbf6 	bl	80007e0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d908      	bls.n	8001010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e140      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	42420000 	.word	0x42420000
 800100c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	4b9e      	ldr	r3, [pc, #632]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e9      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a6 	beq.w	8001176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102e:	4b97      	ldr	r3, [pc, #604]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10d      	bne.n	8001056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b94      	ldr	r3, [pc, #592]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a93      	ldr	r2, [pc, #588]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b91      	ldr	r3, [pc, #580]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a8a      	ldr	r2, [pc, #552]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106e:	f7ff fbb7 	bl	80007e0 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001076:	f7ff fbb3 	bl	80007e0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b64      	cmp	r3, #100	; 0x64
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0fd      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	4b81      	ldr	r3, [pc, #516]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x312>
 800109c:	4b7b      	ldr	r3, [pc, #492]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a7a      	ldr	r2, [pc, #488]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e02d      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x334>
 80010b2:	4b76      	ldr	r3, [pc, #472]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a75      	ldr	r2, [pc, #468]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b73      	ldr	r3, [pc, #460]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a72      	ldr	r2, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
 80010ca:	e01c      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x356>
 80010d4:	4b6d      	ldr	r3, [pc, #436]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a6c      	ldr	r2, [pc, #432]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e00b      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a63      	ldr	r2, [pc, #396]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d015      	beq.n	800113a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb67 	bl	80007e0 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fb63 	bl	80007e0 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e0ab      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0ee      	beq.n	8001116 <HAL_RCC_OscConfig+0x37e>
 8001138:	e014      	b.n	8001164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fb51 	bl	80007e0 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001140:	e00a      	b.n	8001158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001142:	f7ff fb4d 	bl	80007e0 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001150:	4293      	cmp	r3, r2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e095      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001158:	4b4c      	ldr	r3, [pc, #304]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1ee      	bne.n	8001142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d105      	bne.n	8001176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a47      	ldr	r2, [pc, #284]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8081 	beq.w	8001282 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001180:	4b42      	ldr	r3, [pc, #264]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b08      	cmp	r3, #8
 800118a:	d061      	beq.n	8001250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d146      	bne.n	8001222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fb21 	bl	80007e0 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fb1d 	bl	80007e0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e067      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d108      	bne.n	80011dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	492d      	ldr	r1, [pc, #180]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a19      	ldr	r1, [r3, #32]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	430b      	orrs	r3, r1
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff faf1 	bl	80007e0 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff faed 	bl	80007e0 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e037      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x46a>
 8001220:	e02f      	b.n	8001282 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fada 	bl	80007e0 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fad6 	bl	80007e0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e020      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x498>
 800124e:	e018      	b.n	8001282 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420060 	.word	0x42420060

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa2a 	bl	80007e0 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa26 	bl	80007e0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4601      	mov	r1, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	fa21 f303 	lsr.w	r3, r1, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f8ec 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	0800290c 	.word	0x0800290c
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b490      	push	{r4, r7}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001474:	1d3c      	adds	r4, r7, #4
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d002      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x46>
 80014aa:	e02d      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014ae:	623b      	str	r3, [r7, #32]
      break;
 80014b0:	e02d      	b.n	800150e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014be:	4413      	add	r3, r2
 80014c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0c5b      	lsrs	r3, r3, #17
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014de:	4413      	add	r3, r2
 80014e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014ea:	fb02 f203 	mul.w	r2, r2, r3
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
 80014f6:	e004      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_RCC_GetSysClockFreq+0xc0>)
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	623b      	str	r3, [r7, #32]
      break;
 8001506:	e002      	b.n	800150e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_RCC_GetSysClockFreq+0xbc>)
 800150a:	623b      	str	r3, [r7, #32]
      break;
 800150c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150e:	6a3b      	ldr	r3, [r7, #32]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	080028f8 	.word	0x080028f8
 8001520:	08002908 	.word	0x08002908
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200
 800152c:	003d0900 	.word	0x003d0900

08001530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_RCC_GetHCLKFreq+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001548:	f7ff fff2 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 800154c:	4601      	mov	r1, r0
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	0800291c 	.word	0x0800291c

0800156c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001570:	f7ff ffde 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001574:	4601      	mov	r1, r0
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0adb      	lsrs	r3, r3, #11
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	0800291c 	.word	0x0800291c

08001594 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	220f      	movs	r2, #15
 80015a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_RCC_GetClockConfig+0x58>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_RCC_GetClockConfig+0x58>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_GetClockConfig+0x58>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_RCC_GetClockConfig+0x58>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_GetClockConfig+0x5c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0207 	and.w	r2, r3, #7
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40022000 	.word	0x40022000

080015f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <RCC_Delay+0x34>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <RCC_Delay+0x38>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001610:	bf00      	nop
  }
  while (Delay --);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	60fa      	str	r2, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <RCC_Delay+0x1c>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e041      	b.n	80016c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f839 	bl	80016ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f000 f9b4 	bl	80019dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d001      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e03a      	b.n	800176e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_TIM_Base_Start_IT+0x98>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00e      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x58>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001722:	d009      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x58>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_TIM_Base_Start_IT+0x9c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d004      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x58>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_TIM_Base_Start_IT+0xa0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d111      	bne.n	800175c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d010      	beq.n	800176c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800175a:	e007      	b.n	800176c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40000400 	.word	0x40000400
 8001780:	40000800 	.word	0x40000800

08001784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b02      	cmp	r3, #2
 8001798:	d122      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d11b      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0202 	mvn.w	r2, #2
 80017b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8ed 	bl	80019a6 <HAL_TIM_IC_CaptureCallback>
 80017cc:	e005      	b.n	80017da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8e0 	bl	8001994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f8ef 	bl	80019b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d122      	bne.n	8001834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d11b      	bne.n	8001834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0204 	mvn.w	r2, #4
 8001804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8c3 	bl	80019a6 <HAL_TIM_IC_CaptureCallback>
 8001820:	e005      	b.n	800182e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8b6 	bl	8001994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f8c5 	bl	80019b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b08      	cmp	r3, #8
 8001840:	d122      	bne.n	8001888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b08      	cmp	r3, #8
 800184e:	d11b      	bne.n	8001888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0208 	mvn.w	r2, #8
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2204      	movs	r2, #4
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f899 	bl	80019a6 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f88c 	bl	8001994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f89b 	bl	80019b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b10      	cmp	r3, #16
 8001894:	d122      	bne.n	80018dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d11b      	bne.n	80018dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0210 	mvn.w	r2, #16
 80018ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2208      	movs	r2, #8
 80018b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f86f 	bl	80019a6 <HAL_TIM_IC_CaptureCallback>
 80018c8:	e005      	b.n	80018d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f862 	bl	8001994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f871 	bl	80019b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10e      	bne.n	8001908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0201 	mvn.w	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fdac 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	d10e      	bne.n	8001934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001920:	2b80      	cmp	r3, #128	; 0x80
 8001922:	d107      	bne.n	8001934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800192c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8bf 	bl	8001ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	2b40      	cmp	r3, #64	; 0x40
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194c:	2b40      	cmp	r3, #64	; 0x40
 800194e:	d107      	bne.n	8001960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f835 	bl	80019ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b20      	cmp	r3, #32
 800196c:	d10e      	bne.n	800198c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b20      	cmp	r3, #32
 800197a:	d107      	bne.n	800198c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0220 	mvn.w	r2, #32
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f88a 	bl	8001aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <TIM_Base_SetConfig+0xb8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00b      	beq.n	8001a0c <TIM_Base_SetConfig+0x30>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d007      	beq.n	8001a0c <TIM_Base_SetConfig+0x30>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <TIM_Base_SetConfig+0xbc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d003      	beq.n	8001a0c <TIM_Base_SetConfig+0x30>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <TIM_Base_SetConfig+0xc0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d108      	bne.n	8001a1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <TIM_Base_SetConfig+0xb8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00b      	beq.n	8001a3e <TIM_Base_SetConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d007      	beq.n	8001a3e <TIM_Base_SetConfig+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <TIM_Base_SetConfig+0xbc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d003      	beq.n	8001a3e <TIM_Base_SetConfig+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <TIM_Base_SetConfig+0xc0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d108      	bne.n	8001a50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <TIM_Base_SetConfig+0xb8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d103      	bne.n	8001a84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	615a      	str	r2, [r3, #20]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800

08001aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e03f      	b.n	8001b56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fd06 	bl	80004fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fc21 	bl	8002350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08a      	sub	sp, #40	; 0x28
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d17c      	bne.n	8001c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_UART_Transmit+0x2c>
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e075      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_UART_Transmit+0x3e>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e06e      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bb2:	f7fe fe15 	bl	80007e0 <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bcc:	d108      	bne.n	8001be0 <HAL_UART_Transmit+0x82>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	e003      	b.n	8001be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001bf0:	e02a      	b.n	8001c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fa45 	bl	800208c <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e036      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	3302      	adds	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e007      	b.n	8001c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3301      	adds	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1cf      	bne.n	8001bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fa15 	bl	800208c <UART_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08a      	sub	sp, #40	; 0x28
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	f040 8089 	bne.w	8001db6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_UART_Receive+0x2e>
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e081      	b.n	8001db8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_UART_Receive+0x40>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e07a      	b.n	8001db8 <HAL_UART_Receive+0x136>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2222      	movs	r2, #34	; 0x22
 8001cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fd82 	bl	80007e0 <HAL_GetTick>
 8001cdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf2:	d108      	bne.n	8001d06 <HAL_UART_Receive+0x84>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d104      	bne.n	8001d06 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e003      	b.n	8001d0e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d16:	e043      	b.n	8001da0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2120      	movs	r1, #32
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9b2 	bl	800208c <UART_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e042      	b.n	8001db8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10c      	bne.n	8001d52 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	e01f      	b.n	8001d92 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d007      	beq.n	8001d6c <HAL_UART_Receive+0xea>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_UART_Receive+0xf8>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d106      	bne.n	8001d7a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e008      	b.n	8001d8c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1b6      	bne.n	8001d18 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d140      	bne.n	8001e5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_UART_Receive_IT+0x26>
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e039      	b.n	8001e5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_UART_Receive_IT+0x38>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e032      	b.n	8001e5e <HAL_UART_Receive_IT+0x9e>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2222      	movs	r2, #34	; 0x22
 8001e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0220 	orr.w	r2, r2, #32
 8001e56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_UART_IRQHandler+0x52>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9cc 	bl	8002250 <UART_Receive_IT>
      return;
 8001eb8:	e0d1      	b.n	800205e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80b0 	beq.w	8002022 <HAL_UART_IRQHandler+0x1ba>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_UART_IRQHandler+0x70>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80a5 	beq.w	8002022 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_UART_IRQHandler+0x90>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_UART_IRQHandler+0xb0>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_UART_IRQHandler+0xd0>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00f      	beq.n	8001f62 <HAL_UART_IRQHandler+0xfa>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_UART_IRQHandler+0xee>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	f043 0208 	orr.w	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d078      	beq.n	800205c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_UART_IRQHandler+0x11c>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f966 	bl	8002250 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_UART_IRQHandler+0x144>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d031      	beq.n	8002010 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8b7 	bl	8002120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d023      	beq.n	8002008 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <HAL_UART_IRQHandler+0x1fc>)
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fd07 	bl	80009f8 <HAL_DMA_Abort_IT>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ffe:	e00e      	b.n	800201e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f83a 	bl	800207a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002006:	e00a      	b.n	800201e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f836 	bl	800207a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200e:	e006      	b.n	800201e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f832 	bl	800207a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800201c:	e01e      	b.n	800205c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201e:	bf00      	nop
    return;
 8002020:	e01c      	b.n	800205c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_UART_IRQHandler+0x1d6>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8a3 	bl	8002182 <UART_Transmit_IT>
    return;
 800203c:	e00f      	b.n	800205e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_UART_IRQHandler+0x1f6>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8e4 	bl	8002220 <UART_EndTransmit_IT>
    return;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <HAL_UART_IRQHandler+0x1f6>
    return;
 800205c:	bf00      	nop
  }
}
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	0800215b 	.word	0x0800215b

08002068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209c:	e02c      	b.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a4:	d028      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <UART_WaitOnFlagUntilTimeout+0x30>
 80020ac:	f7fe fb98 	bl	80007e0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d21d      	bcs.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e00f      	b.n	8002118 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	429a      	cmp	r2, r3
 8002114:	d0c3      	beq.n	800209e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002136:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff ff80 	bl	800207a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b21      	cmp	r3, #33	; 0x21
 8002194:	d13e      	bne.n	8002214 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219e:	d114      	bne.n	80021ca <UART_Transmit_IT+0x48>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d110      	bne.n	80021ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	1c9a      	adds	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	621a      	str	r2, [r3, #32]
 80021c8:	e008      	b.n	80021dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6211      	str	r1, [r2, #32]
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4619      	mov	r1, r3
 80021ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002236:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff11 	bl	8002068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b22      	cmp	r3, #34	; 0x22
 8002262:	d170      	bne.n	8002346 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226c:	d117      	bne.n	800229e <UART_Receive_IT+0x4e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d113      	bne.n	800229e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	b29a      	uxth	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	1c9a      	adds	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
 800229c:	e026      	b.n	80022ec <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	d007      	beq.n	80022c2 <UART_Receive_IT+0x72>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <UART_Receive_IT+0x80>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e008      	b.n	80022e2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d120      	bne.n	8002342 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0220 	bic.w	r2, r2, #32
 800230e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800231e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fd ff11 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e002      	b.n	8002348 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800238a:	f023 030c 	bic.w	r3, r3, #12
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <UART_SetConfig+0x114>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d103      	bne.n	80023c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023b8:	f7ff f8d8 	bl	800156c <HAL_RCC_GetPCLK2Freq>
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	e002      	b.n	80023c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023c0:	f7ff f8c0 	bl	8001544 <HAL_RCC_GetPCLK1Freq>
 80023c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a22      	ldr	r2, [pc, #136]	; (8002468 <UART_SetConfig+0x118>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	0119      	lsls	r1, r3, #4
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <UART_SetConfig+0x118>)
 80023fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	3332      	adds	r3, #50	; 0x32
 8002410:	4a15      	ldr	r2, [pc, #84]	; (8002468 <UART_SetConfig+0x118>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	4419      	add	r1, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fbb2 f2f3 	udiv	r2, r2, r3
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <UART_SetConfig+0x118>)
 8002436:	fba3 0302 	umull	r0, r3, r3, r2
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	fb00 f303 	mul.w	r3, r0, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	3332      	adds	r3, #50	; 0x32
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <UART_SetConfig+0x118>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	440a      	add	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40013800 	.word	0x40013800
 8002468:	51eb851f 	.word	0x51eb851f

0800246c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6892      	ldr	r2, [r2, #8]
 80024c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6852      	ldr	r2, [r2, #4]
 80024d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d103      	bne.n	80024e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800250e:	4b50      	ldr	r3, [pc, #320]	; (8002650 <xTaskIncrementTick+0x14c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 808c 	bne.w	8002630 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002518:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <xTaskIncrementTick+0x150>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002520:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <xTaskIncrementTick+0x150>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11f      	bne.n	800256c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800252c:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <xTaskIncrementTick+0x154>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	e7fe      	b.n	8002548 <xTaskIncrementTick+0x44>
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <xTaskIncrementTick+0x154>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <xTaskIncrementTick+0x158>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a40      	ldr	r2, [pc, #256]	; (8002658 <xTaskIncrementTick+0x154>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4a40      	ldr	r2, [pc, #256]	; (800265c <xTaskIncrementTick+0x158>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <xTaskIncrementTick+0x15c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <xTaskIncrementTick+0x15c>)
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	f000 f8e2 	bl	8002730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <xTaskIncrementTick+0x160>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	429a      	cmp	r2, r3
 8002574:	d34d      	bcc.n	8002612 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <xTaskIncrementTick+0x154>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <xTaskIncrementTick+0x80>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <xTaskIncrementTick+0x82>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <xTaskIncrementTick+0x160>)
 800258c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002590:	601a      	str	r2, [r3, #0]
					break;
 8002592:	e03e      	b.n	8002612 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <xTaskIncrementTick+0x154>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d203      	bcs.n	80025b4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80025ac:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <xTaskIncrementTick+0x160>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
						break;
 80025b2:	e02e      	b.n	8002612 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff7a 	bl	80024b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3318      	adds	r3, #24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff71 	bl	80024b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <xTaskIncrementTick+0x164>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	4a22      	ldr	r2, [pc, #136]	; (8002668 <xTaskIncrementTick+0x164>)
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <xTaskIncrementTick+0x168>)
 80025f0:	441a      	add	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3304      	adds	r3, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f7ff ff37 	bl	800246c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <xTaskIncrementTick+0x16c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	429a      	cmp	r2, r3
 800260a:	d3b4      	bcc.n	8002576 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800260c:	2301      	movs	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002610:	e7b1      	b.n	8002576 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <xTaskIncrementTick+0x16c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	4914      	ldr	r1, [pc, #80]	; (800266c <xTaskIncrementTick+0x168>)
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d907      	bls.n	800263a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800262a:	2301      	movs	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e004      	b.n	800263a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <xTaskIncrementTick+0x170>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <xTaskIncrementTick+0x170>)
 8002638:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <xTaskIncrementTick+0x174>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002642:	2301      	movs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002646:	697b      	ldr	r3, [r7, #20]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200000e0 	.word	0x200000e0
 8002654:	200000c8 	.word	0x200000c8
 8002658:	200000c0 	.word	0x200000c0
 800265c:	200000c4 	.word	0x200000c4
 8002660:	200000d8 	.word	0x200000d8
 8002664:	200000dc 	.word	0x200000dc
 8002668:	200000cc 	.word	0x200000cc
 800266c:	20000034 	.word	0x20000034
 8002670:	20000030 	.word	0x20000030
 8002674:	200000d0 	.word	0x200000d0
 8002678:	200000d4 	.word	0x200000d4

0800267c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <vTaskSwitchContext+0xa0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <vTaskSwitchContext+0xa4>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002690:	e03e      	b.n	8002710 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <vTaskSwitchContext+0xa4>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <vTaskSwitchContext+0xa8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	f1c3 031f 	rsb	r3, r3, #31
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	491e      	ldr	r1, [pc, #120]	; (8002728 <vTaskSwitchContext+0xac>)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	e7fe      	b.n	80026d4 <vTaskSwitchContext+0x58>
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <vTaskSwitchContext+0xac>)
 80026e2:	4413      	add	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	3308      	adds	r3, #8
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d104      	bne.n	8002706 <vTaskSwitchContext+0x8a>
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <vTaskSwitchContext+0xb0>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200000e0 	.word	0x200000e0
 8002720:	200000d4 	.word	0x200000d4
 8002724:	200000cc 	.word	0x200000cc
 8002728:	20000034 	.word	0x20000034
 800272c:	20000030 	.word	0x20000030

08002730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <prvResetNextTaskUnblockTime+0x40>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <prvResetNextTaskUnblockTime+0x14>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <prvResetNextTaskUnblockTime+0x16>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <prvResetNextTaskUnblockTime+0x44>)
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002750:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002752:	e008      	b.n	8002766 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <prvResetNextTaskUnblockTime+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <prvResetNextTaskUnblockTime+0x44>)
 8002764:	6013      	str	r3, [r2, #0]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	200000c0 	.word	0x200000c0
 8002774:	200000dc 	.word	0x200000dc
	...

08002780 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <pxCurrentTCBConst2>)
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	6808      	ldr	r0, [r1, #0]
 8002786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800278a:	f380 8809 	msr	PSP, r0
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f380 8811 	msr	BASEPRI, r0
 800279a:	f04e 0e0d 	orr.w	lr, lr, #13
 800279e:	4770      	bx	lr

080027a0 <pxCurrentTCBConst2>:
 80027a0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
	...

080027b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027b0:	f3ef 8009 	mrs	r0, PSP
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <pxCurrentTCBConst>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027c0:	6010      	str	r0, [r2, #0]
 80027c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80027c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027ca:	f380 8811 	msr	BASEPRI, r0
 80027ce:	f7ff ff55 	bl	800267c <vTaskSwitchContext>
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	6808      	ldr	r0, [r1, #0]
 80027e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027e6:	f380 8809 	msr	PSP, r0
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	4770      	bx	lr

080027f0 <pxCurrentTCBConst>:
 80027f0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop

080027f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002810:	f7ff fe78 	bl	8002504 <xTaskIncrementTick>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <SysTick_Handler+0x3c>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <__libc_init_array>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	2500      	movs	r5, #0
 800283c:	4e0c      	ldr	r6, [pc, #48]	; (8002870 <__libc_init_array+0x38>)
 800283e:	4c0d      	ldr	r4, [pc, #52]	; (8002874 <__libc_init_array+0x3c>)
 8002840:	1ba4      	subs	r4, r4, r6
 8002842:	10a4      	asrs	r4, r4, #2
 8002844:	42a5      	cmp	r5, r4
 8002846:	d109      	bne.n	800285c <__libc_init_array+0x24>
 8002848:	f000 f822 	bl	8002890 <_init>
 800284c:	2500      	movs	r5, #0
 800284e:	4e0a      	ldr	r6, [pc, #40]	; (8002878 <__libc_init_array+0x40>)
 8002850:	4c0a      	ldr	r4, [pc, #40]	; (800287c <__libc_init_array+0x44>)
 8002852:	1ba4      	subs	r4, r4, r6
 8002854:	10a4      	asrs	r4, r4, #2
 8002856:	42a5      	cmp	r5, r4
 8002858:	d105      	bne.n	8002866 <__libc_init_array+0x2e>
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002860:	4798      	blx	r3
 8002862:	3501      	adds	r5, #1
 8002864:	e7ee      	b.n	8002844 <__libc_init_array+0xc>
 8002866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800286a:	4798      	blx	r3
 800286c:	3501      	adds	r5, #1
 800286e:	e7f2      	b.n	8002856 <__libc_init_array+0x1e>
 8002870:	08002924 	.word	0x08002924
 8002874:	08002924 	.word	0x08002924
 8002878:	08002924 	.word	0x08002924
 800287c:	08002928 	.word	0x08002928

08002880 <memset>:
 8002880:	4603      	mov	r3, r0
 8002882:	4402      	add	r2, r0
 8002884:	4293      	cmp	r3, r2
 8002886:	d100      	bne.n	800288a <memset+0xa>
 8002888:	4770      	bx	lr
 800288a:	f803 1b01 	strb.w	r1, [r3], #1
 800288e:	e7f9      	b.n	8002884 <memset+0x4>

08002890 <_init>:
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	bf00      	nop
 8002894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002896:	bc08      	pop	{r3}
 8002898:	469e      	mov	lr, r3
 800289a:	4770      	bx	lr

0800289c <_fini>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr
