
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005660  08005660  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005660  08005660  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  20000078  080056e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20003234  080056e0  00023234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001002e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000268b  00000000  00000000  000300cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019266  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce30  00000000  00000000  0004d67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091a94  00000000  00000000  0005a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebf42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  000ebfc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080052e8 	.word	0x080052e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080052e8 	.word	0x080052e8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000094 	.word	0x20000094
 80001a0:	200000e8 	.word	0x200000e8

080001a4 <HAL_UART_RxCpltCallback>:
ts_phonebook_entry phonebook[25];
ts_rec_message messages[50];
int phonebook_index = 0;
int message_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b0a      	cmp	r3, #10
 80001b6:	d10f      	bne.n	80001d8 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x60>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001ca:	4413      	add	r3, r2
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001d2:	f002 ff25 	bl	8003020 <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001d6:	e00d      	b.n	80001f4 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001e8:	4413      	add	r3, r2
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	f002 ff16 	bl	8003020 <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200003e8 	.word	0x200003e8
 8000200:	200002e8 	.word	0x200002e8
 8000204:	200006ec 	.word	0x200006ec
 8000208:	2000319c 	.word	0x2000319c

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b5b0      	push	{r4, r5, r7, lr}
 800020e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8000212:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000214:	f001 fbec 	bl	80019f0 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8000218:	f000 fb12 	bl	8000840 <MX_GPIO_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021c:	f000 fa78 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000220:	f000 fb0e 	bl	8000840 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000224:	f000 fab8 	bl	8000798 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000228:	f000 fae0 	bl	80007ec <MX_USART2_UART_Init>


	char close_echo[] = "ATE0\r\n";
 800022c:	4acf      	ldr	r2, [pc, #828]	; (800056c <main+0x360>)
 800022e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000236:	6018      	str	r0, [r3, #0]
 8000238:	3304      	adds	r3, #4
 800023a:	8019      	strh	r1, [r3, #0]
 800023c:	3302      	adds	r3, #2
 800023e:	0c0a      	lsrs	r2, r1, #16
 8000240:	701a      	strb	r2, [r3, #0]
	char text_mode[] = "AT+CMGF=1\r\n";
 8000242:	4acb      	ldr	r2, [pc, #812]	; (8000570 <main+0x364>)
 8000244:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000248:	ca07      	ldmia	r2, {r0, r1, r2}
 800024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char message_buf[176] = {0};
 800024e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000252:	22b0      	movs	r2, #176	; 0xb0
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fba9 	bl	80049ae <memset>
	char response[256] = {0};
 800025c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000260:	4618      	mov	r0, r3
 8000262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000266:	461a      	mov	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f004 fba0 	bl	80049ae <memset>
	char get_entry[64] = {0};
 800026e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000272:	4618      	mov	r0, r3
 8000274:	2340      	movs	r3, #64	; 0x40
 8000276:	461a      	mov	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f004 fb98 	bl	80049ae <memset>
	char *p1;
	char *p2;
	int index = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000284:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff6b 	bl	8000164 <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8000296:	23c8      	movs	r3, #200	; 0xc8
 8000298:	48b6      	ldr	r0, [pc, #728]	; (8000574 <main+0x368>)
 800029a:	f002 fd90 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800029e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80002a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002aa:	48b2      	ldr	r0, [pc, #712]	; (8000574 <main+0x368>)
 80002ac:	f002 fe19 	bl	8002ee2 <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&text_mode[0], strlen(text_mode), 200);
 80002b0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29a      	uxth	r2, r3
 80002be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80002c2:	23c8      	movs	r3, #200	; 0xc8
 80002c4:	48ab      	ldr	r0, [pc, #684]	; (8000574 <main+0x368>)
 80002c6:	f002 fd7a 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002ca:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80002ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d6:	48a7      	ldr	r0, [pc, #668]	; (8000574 <main+0x368>)
 80002d8:	f002 fe03 	bl	8002ee2 <HAL_UART_Receive>

	memset(response, 0, sizeof(response));
 80002dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80002e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 fb61 	bl	80049ae <memset>
	for(int i = 1; i < 251; i++)
 80002ec:	2301      	movs	r3, #1
 80002ee:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80002f2:	e0ae      	b.n	8000452 <main+0x246>
	{
		sprintf(get_entry, "AT+CPBR=%d\r\n", i);
 80002f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002f8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80002fc:	499e      	ldr	r1, [pc, #632]	; (8000578 <main+0x36c>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fb5e 	bl	80049c0 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 8000304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff2b 	bl	8000164 <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000316:	23c8      	movs	r3, #200	; 0xc8
 8000318:	4896      	ldr	r0, [pc, #600]	; (8000574 <main+0x368>)
 800031a:	f002 fd50 	bl	8002dbe <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800031e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000322:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032a:	4892      	ldr	r0, [pc, #584]	; (8000574 <main+0x368>)
 800032c:	f002 fdd9 	bl	8002ee2 <HAL_UART_Receive>
		if(strcmp(response, "\r\nOK\r\n") == 0)
 8000330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000334:	4991      	ldr	r1, [pc, #580]	; (800057c <main+0x370>)
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff0a 	bl	8000150 <strcmp>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	f000 808d 	beq.w	800045e <main+0x252>
			break;
		p1 = strstr(response, "\"");
 8000344:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000348:	2122      	movs	r1, #34	; 0x22
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fb58 	bl	8004a00 <strchr>
 8000350:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 8000354:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000358:	3301      	adds	r3, #1
 800035a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 800035e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000362:	2b00      	cmp	r3, #0
 8000364:	d01e      	beq.n	80003a4 <main+0x198>
		  p2 = strstr(p1,"\"");
 8000366:	2122      	movs	r1, #34	; 0x22
 8000368:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800036c:	f004 fb48 	bl	8004a00 <strchr>
 8000370:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		while(p1 != p2)
 8000374:	e016      	b.n	80003a4 <main+0x198>
		{
		  phonebook[i-1].number[index++] = *p1;
 8000376:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800037a:	1e5a      	subs	r2, r3, #1
 800037c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000380:	1c59      	adds	r1, r3, #1
 8000382:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8000386:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800038a:	7808      	ldrb	r0, [r1, #0]
 800038c:	497c      	ldr	r1, [pc, #496]	; (8000580 <main+0x374>)
 800038e:	0152      	lsls	r2, r2, #5
 8000390:	440a      	add	r2, r1
 8000392:	4413      	add	r3, r2
 8000394:	3310      	adds	r3, #16
 8000396:	4602      	mov	r2, r0
 8000398:	701a      	strb	r2, [r3, #0]
		  p1++;
 800039a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800039e:	3301      	adds	r3, #1
 80003a0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 80003a4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80003a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d1e2      	bne.n	8000376 <main+0x16a>
		}
		p2++;
 80003b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003b4:	3301      	adds	r3, #1
 80003b6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		p1 = strstr(p2, "\"");
 80003ba:	2122      	movs	r1, #34	; 0x22
 80003bc:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 80003c0:	f004 fb1e 	bl	8004a00 <strchr>
 80003c4:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 80003c8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80003cc:	3301      	adds	r3, #1
 80003ce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 80003d2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <main+0x1dc>
		  p2 = strstr(p1,"\"");
 80003da:	2122      	movs	r1, #34	; 0x22
 80003dc:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80003e0:	f004 fb0e 	bl	8004a00 <strchr>
 80003e4:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		index = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		while(p1 != p2)
 80003ee:	e015      	b.n	800041c <main+0x210>
		{
		  phonebook[i-1].name[index++] = *p1;
 80003f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80003fa:	1c59      	adds	r1, r3, #1
 80003fc:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8000400:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000404:	7808      	ldrb	r0, [r1, #0]
 8000406:	495e      	ldr	r1, [pc, #376]	; (8000580 <main+0x374>)
 8000408:	0152      	lsls	r2, r2, #5
 800040a:	440a      	add	r2, r1
 800040c:	4413      	add	r3, r2
 800040e:	4602      	mov	r2, r0
 8000410:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000412:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000416:	3301      	adds	r3, #1
 8000418:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 800041c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000420:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000424:	429a      	cmp	r2, r3
 8000426:	d1e3      	bne.n	80003f0 <main+0x1e4>
		}
		memset(response, 0, sizeof(response));
 8000428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800042c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fabb 	bl	80049ae <memset>
		index = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		phonebook_index++;
 800043e:	4b51      	ldr	r3, [pc, #324]	; (8000584 <main+0x378>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	4a4f      	ldr	r2, [pc, #316]	; (8000584 <main+0x378>)
 8000446:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 8000448:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800044c:	3301      	adds	r3, #1
 800044e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000452:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000456:	2bfa      	cmp	r3, #250	; 0xfa
 8000458:	f77f af4c 	ble.w	80002f4 <main+0xe8>
 800045c:	e000      	b.n	8000460 <main+0x254>
			break;
 800045e:	bf00      	nop
	}
	index = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for(int i = 1; i < 251; i++)
 8000466:	2301      	movs	r3, #1
 8000468:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800046c:	e0c6      	b.n	80005fc <main+0x3f0>
	{
		sprintf(get_entry, "AT+CMGR=%d\r\n", i);
 800046e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000472:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8000476:	4944      	ldr	r1, [pc, #272]	; (8000588 <main+0x37c>)
 8000478:	4618      	mov	r0, r3
 800047a:	f004 faa1 	bl	80049c0 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 800047e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe6e 	bl	8000164 <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000490:	23c8      	movs	r3, #200	; 0xc8
 8000492:	4838      	ldr	r0, [pc, #224]	; (8000574 <main+0x368>)
 8000494:	f002 fc93 	bl	8002dbe <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 8000498:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800049c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a0:	22b0      	movs	r2, #176	; 0xb0
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <main+0x368>)
 80004a4:	f002 fd1d 	bl	8002ee2 <HAL_UART_Receive>
		if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 80004a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80004ac:	4933      	ldr	r1, [pc, #204]	; (800057c <main+0x370>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe4e 	bl	8000150 <strcmp>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	f000 80a6 	beq.w	8000608 <main+0x3fc>
			break;
		p1 = strstr(message_buf, "\"+");
 80004bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80004c0:	4932      	ldr	r1, [pc, #200]	; (800058c <main+0x380>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f004 fab1 	bl	8004a2a <strstr>
 80004c8:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 80004cc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80004d0:	3301      	adds	r3, #1
 80004d2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 80004d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d020      	beq.n	8000520 <main+0x314>
		  p2 = strstr(p1,"\"");
 80004de:	2122      	movs	r1, #34	; 0x22
 80004e0:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80004e4:	f004 fa8c 	bl	8004a00 <strchr>
 80004e8:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		while(p1 != p2)
 80004ec:	e018      	b.n	8000520 <main+0x314>
		{
		  messages[i-1].sender[index++] = *p1;
 80004ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80004f2:	1e59      	subs	r1, r3, #1
 80004f4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80004f8:	1c53      	adds	r3, r2, #1
 80004fa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80004fe:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000502:	781c      	ldrb	r4, [r3, #0]
 8000504:	4822      	ldr	r0, [pc, #136]	; (8000590 <main+0x384>)
 8000506:	460b      	mov	r3, r1
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	1a5b      	subs	r3, r3, r1
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4403      	add	r3, r0
 8000510:	4413      	add	r3, r2
 8000512:	4622      	mov	r2, r4
 8000514:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000516:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800051a:	3301      	adds	r3, #1
 800051c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 8000520:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000524:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000528:	429a      	cmp	r2, r3
 800052a:	d1e0      	bne.n	80004ee <main+0x2e2>
		}
		p2++;
 800052c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000530:	3301      	adds	r3, #1
 8000532:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		p1 = strstr(p2, "\n");
 8000536:	210a      	movs	r1, #10
 8000538:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800053c:	f004 fa60 	bl	8004a00 <strchr>
 8000540:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 8000544:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000548:	3301      	adds	r3, #1
 800054a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 800054e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <main+0x358>
		  p2 = strstr(p1,"\r");
 8000556:	210d      	movs	r1, #13
 8000558:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800055c:	f004 fa50 	bl	8004a00 <strchr>
 8000560:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		index = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		while(p1 != p2)
 800056a:	e02d      	b.n	80005c8 <main+0x3bc>
 800056c:	08005354 	.word	0x08005354
 8000570:	0800535c 	.word	0x0800535c
 8000574:	20001b78 	.word	0x20001b78
 8000578:	08005300 	.word	0x08005300
 800057c:	08005310 	.word	0x08005310
 8000580:	20001850 	.word	0x20001850
 8000584:	200006f0 	.word	0x200006f0
 8000588:	08005318 	.word	0x08005318
 800058c:	08005328 	.word	0x08005328
 8000590:	20001bbc 	.word	0x20001bbc
		{
		  messages[i-1].message[index++] = *p1;
 8000594:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000598:	1e59      	subs	r1, r3, #1
 800059a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800059e:	1c53      	adds	r3, r2, #1
 80005a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80005a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80005a8:	781c      	ldrb	r4, [r3, #0]
 80005aa:	484b      	ldr	r0, [pc, #300]	; (80006d8 <main+0x4cc>)
 80005ac:	460b      	mov	r3, r1
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a5b      	subs	r3, r3, r1
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4403      	add	r3, r0
 80005b6:	4413      	add	r3, r2
 80005b8:	3310      	adds	r3, #16
 80005ba:	4622      	mov	r2, r4
 80005bc:	701a      	strb	r2, [r3, #0]
		  p1++;
 80005be:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 80005c8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80005cc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d1df      	bne.n	8000594 <main+0x388>
		}
		memset(message_buf, 0, sizeof(message_buf));
 80005d4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80005d8:	22b0      	movs	r2, #176	; 0xb0
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f9e6 	bl	80049ae <memset>
		index = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		message_index++;
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <main+0x4d0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <main+0x4d0>)
 80005f0:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 80005f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80005f6:	3301      	adds	r3, #1
 80005f8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80005fc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000600:	2bfa      	cmp	r3, #250	; 0xfa
 8000602:	f77f af34 	ble.w	800046e <main+0x262>
 8000606:	e000      	b.n	800060a <main+0x3fe>
			break;
 8000608:	bf00      	nop
	}
	if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <main+0x4d4>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2303      	movs	r3, #3
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	4932      	ldr	r1, [pc, #200]	; (80006e4 <main+0x4d8>)
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <main+0x4dc>)
 800061c:	f003 f95e 	bl	80038dc <xTaskCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d000      	beq.n	8000628 <main+0x41c>
	{
		__NOP();
 8000626:	bf00      	nop
	}
	if(xTaskCreate(message_task_func, "sms_task", 256, NULL, 3, &sms_task) != pdPASS)
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <main+0x4e0>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2303      	movs	r3, #3
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000636:	492e      	ldr	r1, [pc, #184]	; (80006f0 <main+0x4e4>)
 8000638:	482e      	ldr	r0, [pc, #184]	; (80006f4 <main+0x4e8>)
 800063a:	f003 f94f 	bl	80038dc <xTaskCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d000      	beq.n	8000646 <main+0x43a>
	{
		__NOP();
 8000644:	bf00      	nop
	}

	if(xTaskCreate(call_task_func, "call_task", 256, NULL, 7, &call_task) != pdPASS)
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x4ec>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2307      	movs	r3, #7
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	4929      	ldr	r1, [pc, #164]	; (80006fc <main+0x4f0>)
 8000656:	482a      	ldr	r0, [pc, #168]	; (8000700 <main+0x4f4>)
 8000658:	f003 f940 	bl	80038dc <xTaskCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d000      	beq.n	8000664 <main+0x458>
	{
		__NOP();
 8000662:	bf00      	nop
	}
	char ready[]="main_page.t0.txt=\"Phone is ready!\"\xFF\xFF\xFF";
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	4a26      	ldr	r2, [pc, #152]	; (8000704 <main+0x4f8>)
 800066a:	461c      	mov	r4, r3
 800066c:	4615      	mov	r5, r2
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0003 	ldmia.w	r5, {r0, r1}
 800067a:	6020      	str	r0, [r4, #0]
 800067c:	3404      	adds	r4, #4
 800067e:	8021      	strh	r1, [r4, #0]
	char start_time[]="main_page.tm0.en=1\xFF\xFF\xFF";
 8000680:	463b      	mov	r3, r7
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <main+0x4fc>)
 8000684:	461c      	mov	r4, r3
 8000686:	4615      	mov	r5, r2
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000690:	6020      	str	r0, [r4, #0]
 8000692:	3404      	adds	r4, #4
 8000694:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)ready, strlen(ready), 200);
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd62 	bl	8000164 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f107 0118 	add.w	r1, r7, #24
 80006a8:	23c8      	movs	r3, #200	; 0xc8
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <main+0x500>)
 80006ac:	f002 fb87 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_time, strlen(start_time), 200);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd56 	bl	8000164 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4639      	mov	r1, r7
 80006be:	23c8      	movs	r3, #200	; 0xc8
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <main+0x500>)
 80006c2:	f002 fb7c 	bl	8002dbe <HAL_UART_Transmit>
	vTaskStartScheduler();
 80006c6:	f003 fa6b 	bl	8003ba0 <vTaskStartScheduler>
 80006ca:	2300      	movs	r3, #0

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001bbc 	.word	0x20001bbc
 80006dc:	200006f4 	.word	0x200006f4
 80006e0:	200031dc 	.word	0x200031dc
 80006e4:	0800532c 	.word	0x0800532c
 80006e8:	08000d59 	.word	0x08000d59
 80006ec:	20001bb8 	.word	0x20001bb8
 80006f0:	0800533c 	.word	0x0800533c
 80006f4:	08000d99 	.word	0x08000d99
 80006f8:	20001b70 	.word	0x20001b70
 80006fc:	08005348 	.word	0x08005348
 8000700:	08000f01 	.word	0x08000f01
 8000704:	08005368 	.word	0x08005368
 8000708:	08005390 	.word	0x08005390
 800070c:	2000319c 	.word	0x2000319c

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b090      	sub	sp, #64	; 0x40
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2228      	movs	r2, #40	; 0x28
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f945 	bl	80049ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800074e:	2300      	movs	r3, #0
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc4e 	bl	8001ff8 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000762:	f000 ff93 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f001 feb9 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800078c:	f000 ff7e 	bl	800168c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3740      	adds	r7, #64	; 0x40
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f002 faa8 	bl	8002d24 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 ff57 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20001b78 	.word	0x20001b78
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f002 fa7e 	bl	8002d24 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 ff2d 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000319c 	.word	0x2000319c
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0x8c>)
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_GPIO_Init+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_GPIO_Init+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x8c>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x90>)
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_GPIO_Init+0x94>)
 80008b0:	f001 fa26 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2006      	movs	r0, #6
 80008ba:	f001 f980 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008be:	2006      	movs	r0, #6
 80008c0:	f001 f999 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	10210000 	.word	0x10210000
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <show_subscriber_with_index>:

void show_subscriber_with_index(int index)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a8      	sub	sp, #160	; 0xa0
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char name[64] = {0};
 80008e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008e4:	2240      	movs	r2, #64	; 0x40
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 f860 	bl	80049ae <memset>
	char number[64] = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 f859 	bl	80049ae <memset>
	char active_button1[] = "vis b2,1\xFF\xFF\xFF";
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <show_subscriber_with_index+0x100>)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	ca07      	ldmia	r2, {r0, r1, r2}
 8000904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char active_button2[] = "vis b3,1\xFF\xFF\xFF";
 8000908:	4a34      	ldr	r2, [pc, #208]	; (80009dc <show_subscriber_with_index+0x104>)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(index < phonebook_index)
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <show_subscriber_with_index+0x108>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	da15      	bge.n	800094a <show_subscriber_with_index+0x72>
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].name);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <show_subscriber_with_index+0x10c>)
 8000924:	441a      	add	r2, r3
 8000926:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800092a:	492f      	ldr	r1, [pc, #188]	; (80009e8 <show_subscriber_with_index+0x110>)
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f847 	bl	80049c0 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].number);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	015b      	lsls	r3, r3, #5
 8000936:	3310      	adds	r3, #16
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <show_subscriber_with_index+0x10c>)
 800093a:	441a      	add	r2, r3
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	492a      	ldr	r1, [pc, #168]	; (80009ec <show_subscriber_with_index+0x114>)
 8000942:	4618      	mov	r0, r3
 8000944:	f004 f83c 	bl	80049c0 <siprintf>
 8000948:	e00d      	b.n	8000966 <show_subscriber_with_index+0x8e>
	}
	else
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", "empty");
 800094a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <show_subscriber_with_index+0x118>)
 8000950:	4925      	ldr	r1, [pc, #148]	; (80009e8 <show_subscriber_with_index+0x110>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f834 	bl	80049c0 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF",  "empty");
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <show_subscriber_with_index+0x118>)
 800095e:	4923      	ldr	r1, [pc, #140]	; (80009ec <show_subscriber_with_index+0x114>)
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f82d 	bl	80049c0 <siprintf>
	}
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)name, strlen(name), 200);
 8000966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fbfa 	bl	8000164 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000978:	23c8      	movs	r3, #200	; 0xc8
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <show_subscriber_with_index+0x11c>)
 800097c:	f002 fa1f 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)number, strlen(number), 200);
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fbed 	bl	8000164 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	f107 0120 	add.w	r1, r7, #32
 8000992:	23c8      	movs	r3, #200	; 0xc8
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <show_subscriber_with_index+0x11c>)
 8000996:	f002 fa12 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button1, strlen(active_button1), 100);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fbe0 	bl	8000164 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f107 0114 	add.w	r1, r7, #20
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <show_subscriber_with_index+0x11c>)
 80009b0:	f002 fa05 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button2, strlen(active_button2), 100);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fbd3 	bl	8000164 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f107 0108 	add.w	r1, r7, #8
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <show_subscriber_with_index+0x11c>)
 80009ca:	f002 f9f8 	bl	8002dbe <HAL_UART_Transmit>
}
 80009ce:	bf00      	nop
 80009d0:	37a0      	adds	r7, #160	; 0xa0
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	080053f0 	.word	0x080053f0
 80009dc:	080053fc 	.word	0x080053fc
 80009e0:	200006f0 	.word	0x200006f0
 80009e4:	20001850 	.word	0x20001850
 80009e8:	080053a8 	.word	0x080053a8
 80009ec:	080053c8 	.word	0x080053c8
 80009f0:	080053e8 	.word	0x080053e8
 80009f4:	2000319c 	.word	0x2000319c

080009f8 <add_subscriber>:

void add_subscriber(char *data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	char *name = strtok(data, ">");
 8000a00:	4925      	ldr	r1, [pc, #148]	; (8000a98 <add_subscriber+0xa0>)
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f004 f82c 	bl	8004a60 <strtok>
 8000a08:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *number = strtok(NULL, ">");
 8000a0a:	4923      	ldr	r1, [pc, #140]	; (8000a98 <add_subscriber+0xa0>)
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f004 f827 	bl	8004a60 <strtok>
 8000a12:	64b8      	str	r0, [r7, #72]	; 0x48
	number[strlen(number)-1] = '\0';
 8000a14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000a16:	f7ff fba5 	bl	8000164 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
	char sim_write_command[64] = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 ffbd 	bl	80049ae <memset>
	sprintf(sim_write_command, "AT+CPBW=,\"%s\",145,\"%s\"", number, name);
 8000a34:	f107 0008 	add.w	r0, r7, #8
 8000a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a3c:	4917      	ldr	r1, [pc, #92]	; (8000a9c <add_subscriber+0xa4>)
 8000a3e:	f003 ffbf 	bl	80049c0 <siprintf>
	strcpy(phonebook[phonebook_index].name, name);
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <add_subscriber+0xa8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <add_subscriber+0xac>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 ffe3 	bl	8004a1a <strcpy>
	strcpy(phonebook[phonebook_index].number, number);
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <add_subscriber+0xa8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	015b      	lsls	r3, r3, #5
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <add_subscriber+0xac>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 ffd9 	bl	8004a1a <strcpy>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)sim_write_command, strlen(sim_write_command), 300);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fb79 	bl	8000164 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f107 0108 	add.w	r1, r7, #8
 8000a7a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <add_subscriber+0xb0>)
 8000a80:	f002 f99d 	bl	8002dbe <HAL_UART_Transmit>
	phonebook_index++;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <add_subscriber+0xa8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <add_subscriber+0xa8>)
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08005408 	.word	0x08005408
 8000a9c:	0800540c 	.word	0x0800540c
 8000aa0:	200006f0 	.word	0x200006f0
 8000aa4:	20001850 	.word	0x20001850
 8000aa8:	20001b78 	.word	0x20001b78

08000aac <show_text_message_index>:

void show_text_message_index(int index)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0bc      	sub	sp, #240	; 0xf0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	index = (-1)*(index - (message_index-1));
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <show_text_message_index+0x108>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	607b      	str	r3, [r7, #4]
	char sender[64] = {0};
 8000ac0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 ff70 	bl	80049ae <memset>
	char message[128];
	char visible_buton_1[] = "vis b1,1\xFF\xFF\xFF";
 8000ace:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <show_text_message_index+0x10c>)
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_0[] = "vis b0,1\xFF\xFF\xFF";
 8000ada:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <show_text_message_index+0x110>)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_3[] = "vis b3,1\xFF\xFF\xFF";
 8000ae6:	4a36      	ldr	r2, [pc, #216]	; (8000bc0 <show_text_message_index+0x114>)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sprintf(sender, "messages.t0.txt=\"%s\"\xFF\xFF\xFF", messages[index].sender);
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	1a9b      	subs	r3, r3, r2
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <show_text_message_index+0x118>)
 8000afe:	441a      	add	r2, r3
 8000b00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b04:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <show_text_message_index+0x11c>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 ff5a 	bl	80049c0 <siprintf>
	sprintf(message, "messages.t1.txt=\"%s\"\xFF\xFF\xFF", messages[index].message);
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	3310      	adds	r3, #16
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <show_text_message_index+0x118>)
 8000b1a:	441a      	add	r2, r3
 8000b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b20:	492a      	ldr	r1, [pc, #168]	; (8000bcc <show_text_message_index+0x120>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 ff4c 	bl	80049c0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)sender, strlen(sender), 200);
 8000b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb19 	bl	8000164 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b3a:	23c8      	movs	r3, #200	; 0xc8
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <show_text_message_index+0x124>)
 8000b3e:	f002 f93e 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)message, strlen(message), 400);
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb0c 	bl	8000164 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b58:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <show_text_message_index+0x124>)
 8000b5a:	f002 f930 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_1, strlen(visible_buton_1), 100);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fafe 	bl	8000164 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <show_text_message_index+0x124>)
 8000b74:	f002 f923 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_0, strlen(visible_buton_0), 100);
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff faf1 	bl	8000164 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f107 0118 	add.w	r1, r7, #24
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <show_text_message_index+0x124>)
 8000b8e:	f002 f916 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_3, strlen(visible_buton_3), 100);
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fae4 	bl	8000164 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f107 010c 	add.w	r1, r7, #12
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <show_text_message_index+0x124>)
 8000ba8:	f002 f909 	bl	8002dbe <HAL_UART_Transmit>
}
 8000bac:	bf00      	nop
 8000bae:	37f0      	adds	r7, #240	; 0xf0
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200006f4 	.word	0x200006f4
 8000bb8:	08005454 	.word	0x08005454
 8000bbc:	08005460 	.word	0x08005460
 8000bc0:	080053fc 	.word	0x080053fc
 8000bc4:	20001bbc 	.word	0x20001bbc
 8000bc8:	08005424 	.word	0x08005424
 8000bcc:	0800543c 	.word	0x0800543c
 8000bd0:	2000319c 	.word	0x2000319c

08000bd4 <parse_display_request>:

void parse_display_request()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	if((display_rx[1] == 0x01 && display_rx[2] == 0x10) || (display_rx[1] == 0x05 && display_rx[2] == 0x05)) //call
 8000bd8:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <parse_display_request+0x164>)
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d103      	bne.n	8000be8 <parse_display_request+0x14>
 8000be0:	4b55      	ldr	r3, [pc, #340]	; (8000d38 <parse_display_request+0x164>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	d007      	beq.n	8000bf8 <parse_display_request+0x24>
 8000be8:	4b53      	ldr	r3, [pc, #332]	; (8000d38 <parse_display_request+0x164>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d116      	bne.n	8000c1e <parse_display_request+0x4a>
 8000bf0:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <parse_display_request+0x164>)
 8000bf2:	789b      	ldrb	r3, [r3, #2]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d112      	bne.n	8000c1e <parse_display_request+0x4a>
	{
		memcpy(call_task_data, display_rx, RX_SIZE);
 8000bf8:	4a50      	ldr	r2, [pc, #320]	; (8000d3c <parse_display_request+0x168>)
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <parse_display_request+0x164>)
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	461a      	mov	r2, r3
 8000c06:	f003 fec7 	bl	8004998 <memcpy>
		PHONE_STATE = BUSY;
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <parse_display_request+0x16c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MO;
 8000c10:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <parse_display_request+0x170>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <parse_display_request+0x174>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e083      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if((display_rx[1] == 0x03 && display_rx[2] == 0x02) || (display_rx[1] == 0x04 && display_rx[2] == 0x02)) //Terminate call by user
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <parse_display_request+0x164>)
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d103      	bne.n	8000c2e <parse_display_request+0x5a>
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <parse_display_request+0x164>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d007      	beq.n	8000c3e <parse_display_request+0x6a>
 8000c2e:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <parse_display_request+0x164>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d107      	bne.n	8000c46 <parse_display_request+0x72>
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <parse_display_request+0x164>)
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d103      	bne.n	8000c46 <parse_display_request+0x72>
	{
		CALL_STATE = TERMINATE_CALL;
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <parse_display_request+0x174>)
 8000c40:	2206      	movs	r2, #6
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e06f      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if(display_rx[1] == 0x04 && display_rx[2] == 0x03) //Terminate call by user
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <parse_display_request+0x164>)
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d107      	bne.n	8000c5e <parse_display_request+0x8a>
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <parse_display_request+0x164>)
 8000c50:	789b      	ldrb	r3, [r3, #2]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d103      	bne.n	8000c5e <parse_display_request+0x8a>
	{
		CALL_STATE = ACCEPT_CALL;
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <parse_display_request+0x174>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e063      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if((display_rx[1] == 0x06 && display_rx[2] == 0x05)) //Add subscriber to phone book
 8000c5e:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <parse_display_request+0x164>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d107      	bne.n	8000c76 <parse_display_request+0xa2>
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <parse_display_request+0x164>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d103      	bne.n	8000c76 <parse_display_request+0xa2>
	{
		add_subscriber(&display_rx[7]);
 8000c6e:	4837      	ldr	r0, [pc, #220]	; (8000d4c <parse_display_request+0x178>)
 8000c70:	f7ff fec2 	bl	80009f8 <add_subscriber>
 8000c74:	e057      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if((display_rx[1] == 0x05 && display_rx[2] == 0x06) || (display_rx[1] == 0x05 && display_rx[2] == 0x03) //Get phonebook entry
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <parse_display_request+0x164>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d103      	bne.n	8000c86 <parse_display_request+0xb2>
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <parse_display_request+0x164>)
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d00f      	beq.n	8000ca6 <parse_display_request+0xd2>
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <parse_display_request+0x164>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	d103      	bne.n	8000c96 <parse_display_request+0xc2>
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <parse_display_request+0x164>)
 8000c90:	789b      	ldrb	r3, [r3, #2]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d007      	beq.n	8000ca6 <parse_display_request+0xd2>
			|| (display_rx[1] == 0x05 && display_rx[2] == 0x07))
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <parse_display_request+0x164>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	2b05      	cmp	r3, #5
 8000c9c:	d109      	bne.n	8000cb2 <parse_display_request+0xde>
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <parse_display_request+0x164>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	d105      	bne.n	8000cb2 <parse_display_request+0xde>
	{
		show_subscriber_with_index(display_rx[7]);
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <parse_display_request+0x164>)
 8000ca8:	79db      	ldrb	r3, [r3, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fe14 	bl	80008d8 <show_subscriber_with_index>
 8000cb0:	e039      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if(display_rx[1] == 0x02 && display_rx[2] == 0x37)//Send sms
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <parse_display_request+0x164>)
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d110      	bne.n	8000cdc <parse_display_request+0x108>
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <parse_display_request+0x164>)
 8000cbc:	789b      	ldrb	r3, [r3, #2]
 8000cbe:	2b37      	cmp	r3, #55	; 0x37
 8000cc0:	d10c      	bne.n	8000cdc <parse_display_request+0x108>
	{
		memcpy(sms_task_data, display_rx, RX_SIZE);
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <parse_display_request+0x17c>)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <parse_display_request+0x164>)
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f003 fe62 	bl	8004998 <memcpy>
		SMS_STATE = SEND_SMS;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <parse_display_request+0x180>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e024      	b.n	8000d26 <parse_display_request+0x152>
	}
	else if((display_rx[1] == 0x09 && display_rx[2] == 0x02) || (display_rx[1] == 0x09 && display_rx[2] == 0x03) //Get message
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <parse_display_request+0x164>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d103      	bne.n	8000cec <parse_display_request+0x118>
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <parse_display_request+0x164>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d017      	beq.n	8000d1c <parse_display_request+0x148>
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <parse_display_request+0x164>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	d103      	bne.n	8000cfc <parse_display_request+0x128>
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <parse_display_request+0x164>)
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d00f      	beq.n	8000d1c <parse_display_request+0x148>
			|| (display_rx[1] == 0x08 && display_rx[2] == 0x03) || (display_rx[1] == 0x00 && display_rx[2] == 0x06))
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <parse_display_request+0x164>)
 8000cfe:	785b      	ldrb	r3, [r3, #1]
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d103      	bne.n	8000d0c <parse_display_request+0x138>
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <parse_display_request+0x164>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d007      	beq.n	8000d1c <parse_display_request+0x148>
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <parse_display_request+0x164>)
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d108      	bne.n	8000d26 <parse_display_request+0x152>
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <parse_display_request+0x164>)
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	2b06      	cmp	r3, #6
 8000d1a:	d104      	bne.n	8000d26 <parse_display_request+0x152>
	{
		show_text_message_index(display_rx[7]);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <parse_display_request+0x164>)
 8000d1e:	79db      	ldrb	r3, [r3, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fec3 	bl	8000aac <show_text_message_index>
	}
	memset(display_rx, 0, RX_SIZE);
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <parse_display_request+0x164>)
 8000d2e:	f003 fe3e 	bl	80049ae <memset>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200002e8 	.word	0x200002e8
 8000d3c:	200004ec 	.word	0x200004ec
 8000d40:	20000000 	.word	0x20000000
 8000d44:	200031e0 	.word	0x200031e0
 8000d48:	200006ed 	.word	0x200006ed
 8000d4c:	200002ef 	.word	0x200002ef
 8000d50:	200003ec 	.word	0x200003ec
 8000d54:	200006ee 	.word	0x200006ee

08000d58 <display_uart_task_func>:

void display_uart_task_func(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <display_uart_task_func+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <display_uart_task_func+0x34>)
 8000d66:	4413      	add	r3, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <display_uart_task_func+0x38>)
 8000d6e:	f002 f957 	bl	8003020 <HAL_UART_Receive_IT>
	while(1)
	{
		if(display_rec_flag)
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <display_uart_task_func+0x3c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0fb      	beq.n	8000d72 <display_uart_task_func+0x1a>
		{
			display_rec_flag = FALSE;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <display_uart_task_func+0x3c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			parse_display_request();
 8000d80:	f7ff ff28 	bl	8000bd4 <parse_display_request>
		if(display_rec_flag)
 8000d84:	e7f5      	b.n	8000d72 <display_uart_task_func+0x1a>
 8000d86:	bf00      	nop
 8000d88:	200003e8 	.word	0x200003e8
 8000d8c:	200002e8 	.word	0x200002e8
 8000d90:	2000319c 	.word	0x2000319c
 8000d94:	200006ec 	.word	0x200006ec

08000d98 <message_task_func>:
		}
	}
}

void message_task_func(void *argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0c0      	sub	sp, #256	; 0x100
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	char text_mod[] = "AT+CMGF=1\r\n";
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <message_task_func+0x148>)
 8000da2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 8000dac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fdfa 	bl	80049ae <memset>
	char message_command[160] = {0};
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	22a0      	movs	r2, #160	; 0xa0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fdf3 	bl	80049ae <memset>
	char *number;
	char *message;
	while(1)
	{
		switch (SMS_STATE) {
 8000dc8:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <message_task_func+0x14c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d002      	beq.n	8000dd6 <message_task_func+0x3e>
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d074      	beq.n	8000ebe <message_task_func+0x126>
 8000dd4:	e07d      	b.n	8000ed2 <message_task_func+0x13a>
			case SEND_SMS:
				memset(at_response, 0, RX_SIZE);
 8000dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4842      	ldr	r0, [pc, #264]	; (8000ee8 <message_task_func+0x150>)
 8000dde:	f003 fde6 	bl	80049ae <memset>
				number = strtok(&sms_task_data[7], ">");
 8000de2:	4942      	ldr	r1, [pc, #264]	; (8000eec <message_task_func+0x154>)
 8000de4:	4842      	ldr	r0, [pc, #264]	; (8000ef0 <message_task_func+0x158>)
 8000de6:	f003 fe3b 	bl	8004a60 <strtok>
 8000dea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				message = strtok(NULL, ">");
 8000dee:	493f      	ldr	r1, [pc, #252]	; (8000eec <message_task_func+0x154>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f003 fe35 	bl	8004a60 <strtok>
 8000df6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 8000dfa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dfe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000e02:	493c      	ldr	r1, [pc, #240]	; (8000ef4 <message_task_func+0x15c>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fddb 	bl	80049c0 <siprintf>
				sprintf(&message_command[0], "%s", message);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fe01 	bl	8004a1a <strcpy>
				message_command[strlen(message_command)-1] = 26;
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9a1 	bl	8000164 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	3b01      	subs	r3, #1
 8000e26:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000e2a:	4413      	add	r3, r2
 8000e2c:	221a      	movs	r2, #26
 8000e2e:	f803 2cf4 	strb.w	r2, [r3, #-244]
				HAL_UART_Transmit(GSM_UART, (uint8_t*)text_mod, strlen(text_mod), 300);
 8000e32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f994 	bl	8000164 <strlen>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000e44:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <message_task_func+0x160>)
 8000e4a:	f001 ffb8 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000e4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	4924      	ldr	r1, [pc, #144]	; (8000ee8 <message_task_func+0x150>)
 8000e58:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <message_task_func+0x160>)
 8000e5a:	f002 f842 	bl	8002ee2 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)sender_command, strlen(sender_command), 300);
 8000e5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff f97e 	bl	8000164 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000e70:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <message_task_func+0x160>)
 8000e76:	f001 ffa2 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000e7a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e82:	4919      	ldr	r1, [pc, #100]	; (8000ee8 <message_task_func+0x150>)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <message_task_func+0x160>)
 8000e86:	f002 f82c 	bl	8002ee2 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)message_command, strlen(sender_command), 300);
 8000e8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f968 	bl	8000164 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 010c 	add.w	r1, r7, #12
 8000e9c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ea0:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <message_task_func+0x160>)
 8000ea2:	f001 ff8c 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000ea6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <message_task_func+0x150>)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <message_task_func+0x160>)
 8000eb2:	f002 f816 	bl	8002ee2 <HAL_UART_Receive>
				SMS_STATE = COMPLETED_SMS;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <message_task_func+0x14c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	701a      	strb	r2, [r3, #0]
			break;
 8000ebc:	e00e      	b.n	8000edc <message_task_func+0x144>
			case COMPLETED_SMS:
				memset(sms_task_data, 0, RX_SIZE);
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <message_task_func+0x164>)
 8000ec6:	f003 fd72 	bl	80049ae <memset>
				SMS_STATE = NO_SMS;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <message_task_func+0x14c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			break;
 8000ed0:	e004      	b.n	8000edc <message_task_func+0x144>
			default:
				vTaskDelay(500 / portTICK_PERIOD_MS);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f002 fe2f 	bl	8003b38 <vTaskDelay>
			break;
 8000eda:	bf00      	nop
		switch (SMS_STATE) {
 8000edc:	e774      	b.n	8000dc8 <message_task_func+0x30>
 8000ede:	bf00      	nop
 8000ee0:	0800535c 	.word	0x0800535c
 8000ee4:	200006ee 	.word	0x200006ee
 8000ee8:	200005ec 	.word	0x200005ec
 8000eec:	08005408 	.word	0x08005408
 8000ef0:	200003f3 	.word	0x200003f3
 8000ef4:	0800546c 	.word	0x0800546c
 8000ef8:	20001b78 	.word	0x20001b78
 8000efc:	200003ec 	.word	0x200003ec

08000f00 <call_task_func>:
		}
	}
}

void call_task_func(void *argument)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b0d6      	sub	sp, #344	; 0x158
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	6018      	str	r0, [r3, #0]
	char custom_command[64] = {0};
 8000f0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fd4b 	bl	80049ae <memset>
	char check_status[] = "AT+CLCC\r\n";
 8000f18:	4aba      	ldr	r2, [pc, #744]	; (8001204 <call_task_func+0x304>)
 8000f1a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f20:	c303      	stmia	r3!, {r0, r1}
 8000f22:	801a      	strh	r2, [r3, #0]
	char terminate_call[] = "ATH0\r\n";
 8000f24:	4ab8      	ldr	r2, [pc, #736]	; (8001208 <call_task_func+0x308>)
 8000f26:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2e:	6018      	str	r0, [r3, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	8019      	strh	r1, [r3, #0]
 8000f34:	3302      	adds	r3, #2
 8000f36:	0c0a      	lsrs	r2, r1, #16
 8000f38:	701a      	strb	r2, [r3, #0]
	char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000f3a:	4bb4      	ldr	r3, [pc, #720]	; (800120c <call_task_func+0x30c>)
 8000f3c:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000f40:	461d      	mov	r5, r3
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f4e:	6020      	str	r0, [r4, #0]
 8000f50:	3404      	adds	r4, #4
 8000f52:	8021      	strh	r1, [r4, #0]
	char send_call_start[] = "call_progress.t1.txt=\"Call Active!!\"\xFF\xFF\xFF";
 8000f54:	4bae      	ldr	r3, [pc, #696]	; (8001210 <call_task_func+0x310>)
 8000f56:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000f5a:	461d      	mov	r5, r3
 8000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f68:	e884 0003 	stmia.w	r4, {r0, r1}
	char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 8000f6c:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <call_task_func+0x314>)
 8000f6e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7c:	c403      	stmia	r4!, {r0, r1}
 8000f7e:	8022      	strh	r2, [r4, #0]
	char send_call_start_incoming[] = "incoming_call.t2.txt=\"Call Active!\"\xFF\xFF\xFF";
 8000f80:	4ba5      	ldr	r3, [pc, #660]	; (8001218 <call_task_func+0x318>)
 8000f82:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f94:	6020      	str	r0, [r4, #0]
 8000f96:	3404      	adds	r4, #4
 8000f98:	8021      	strh	r1, [r4, #0]
 8000f9a:	3402      	adds	r4, #2
 8000f9c:	0c0b      	lsrs	r3, r1, #16
 8000f9e:	7023      	strb	r3, [r4, #0]
	char send_call_end_incoming[] = "incoming_call.t2.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000fa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fa4:	4a9d      	ldr	r2, [pc, #628]	; (800121c <call_task_func+0x31c>)
 8000fa6:	461c      	mov	r4, r3
 8000fa8:	4615      	mov	r5, r2
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb6:	6020      	str	r0, [r4, #0]
 8000fb8:	3404      	adds	r4, #4
 8000fba:	8021      	strh	r1, [r4, #0]
	char answer_call[] = "ATA\r\n";
 8000fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc0:	4a97      	ldr	r2, [pc, #604]	; (8001220 <call_task_func+0x320>)
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	6018      	str	r0, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	8019      	strh	r1, [r3, #0]
	char incoming_page[] = "page incoming_call\xFF\xFF\xFF";
 8000fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd0:	4a94      	ldr	r2, [pc, #592]	; (8001224 <call_task_func+0x324>)
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	4615      	mov	r5, r2
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fde:	6020      	str	r0, [r4, #0]
 8000fe0:	3404      	adds	r4, #4
 8000fe2:	8021      	strh	r1, [r4, #0]
	char start_page_timer_incoming[] = "incoming_call.tm0.en=1\xFF\xFF\xFF";
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4a8f      	ldr	r2, [pc, #572]	; (8001228 <call_task_func+0x328>)
 8000fea:	461c      	mov	r4, r3
 8000fec:	4615      	mov	r5, r2
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	c403      	stmia	r4!, {r0, r1}
 8000ff8:	8022      	strh	r2, [r4, #0]
	while(1)
	{
		switch(CALL_STATE)
 8000ffa:	4b8c      	ldr	r3, [pc, #560]	; (800122c <call_task_func+0x32c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	2b06      	cmp	r3, #6
 8001002:	f200 8190 	bhi.w	8001326 <call_task_func+0x426>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <call_task_func+0x10c>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001029 	.word	0x08001029
 8001010:	08001327 	.word	0x08001327
 8001014:	08001327 	.word	0x08001327
 8001018:	080010fd 	.word	0x080010fd
 800101c:	080011b7 	.word	0x080011b7
 8001020:	08001255 	.word	0x08001255
 8001024:	08001177 	.word	0x08001177
		{
			case INITIATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8001028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102c:	2100      	movs	r1, #0
 800102e:	4880      	ldr	r0, [pc, #512]	; (8001230 <call_task_func+0x330>)
 8001030:	f003 fcbd 	bl	80049ae <memset>
				call_task_data[strlen(call_task_data)-1] = '\0';
 8001034:	487f      	ldr	r0, [pc, #508]	; (8001234 <call_task_func+0x334>)
 8001036:	f7ff f895 	bl	8000164 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	3b01      	subs	r3, #1
 800103e:	4a7d      	ldr	r2, [pc, #500]	; (8001234 <call_task_func+0x334>)
 8001040:	2100      	movs	r1, #0
 8001042:	54d1      	strb	r1, [r2, r3]
				if(CALL_TYPE == MO)
 8001044:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <call_task_func+0x338>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12b      	bne.n	80010a4 <call_task_func+0x1a4>
				{
					sprintf(&custom_command[0], "ATD+%si;\r\n", &call_task_data[8]);
 800104c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001050:	4a7a      	ldr	r2, [pc, #488]	; (800123c <call_task_func+0x33c>)
 8001052:	497b      	ldr	r1, [pc, #492]	; (8001240 <call_task_func+0x340>)
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fcb3 	bl	80049c0 <siprintf>
					HAL_UART_Transmit(GSM_UART, (uint8_t*)&custom_command[0], strlen(custom_command), 500);
 800105a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f880 	bl	8000164 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800106c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001070:	4874      	ldr	r0, [pc, #464]	; (8001244 <call_task_func+0x344>)
 8001072:	f001 fea4 	bl	8002dbe <HAL_UART_Transmit>
					HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 5000);
 8001076:	f241 3388 	movw	r3, #5000	; 0x1388
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	496c      	ldr	r1, [pc, #432]	; (8001230 <call_task_func+0x330>)
 8001080:	4870      	ldr	r0, [pc, #448]	; (8001244 <call_task_func+0x344>)
 8001082:	f001 ff2e 	bl	8002ee2 <HAL_UART_Receive>
					if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8001086:	4970      	ldr	r1, [pc, #448]	; (8001248 <call_task_func+0x348>)
 8001088:	4869      	ldr	r0, [pc, #420]	; (8001230 <call_task_func+0x330>)
 800108a:	f7ff f861 	bl	8000150 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <call_task_func+0x19c>
						CALL_STATE = DIALING;
 8001094:	4b65      	ldr	r3, [pc, #404]	; (800122c <call_task_func+0x32c>)
 8001096:	2204      	movs	r2, #4
 8001098:	701a      	strb	r2, [r3, #0]
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
					CALL_STATE = CHECK_CALL_STATE;
				}
			break;
 800109a:	e146      	b.n	800132a <call_task_func+0x42a>
						CALL_STATE = TERMINATE_CALL;
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <call_task_func+0x32c>)
 800109e:	2206      	movs	r2, #6
 80010a0:	701a      	strb	r2, [r3, #0]
			break;
 80010a2:	e142      	b.n	800132a <call_task_func+0x42a>
				else if(CALL_TYPE == MT)
 80010a4:	4b64      	ldr	r3, [pc, #400]	; (8001238 <call_task_func+0x338>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 813e 	bne.w	800132a <call_task_func+0x42a>
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
 80010ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010b2:	4a60      	ldr	r2, [pc, #384]	; (8001234 <call_task_func+0x334>)
 80010b4:	4965      	ldr	r1, [pc, #404]	; (800124c <call_task_func+0x34c>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fc82 	bl	80049c0 <siprintf>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
 80010bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f84f 	bl	8000164 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010d2:	485f      	ldr	r0, [pc, #380]	; (8001250 <call_task_func+0x350>)
 80010d4:	f001 fe73 	bl	8002dbe <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
 80010d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f841 	bl	8000164 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80010ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010ee:	4858      	ldr	r0, [pc, #352]	; (8001250 <call_task_func+0x350>)
 80010f0:	f001 fe65 	bl	8002dbe <HAL_UART_Transmit>
					CALL_STATE = CHECK_CALL_STATE;
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <call_task_func+0x32c>)
 80010f6:	2205      	movs	r2, #5
 80010f8:	701a      	strb	r2, [r3, #0]
			break;
 80010fa:	e116      	b.n	800132a <call_task_func+0x42a>
			case DIALING:
				memset(at_response, 0, RX_SIZE);
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	2100      	movs	r1, #0
 8001102:	484b      	ldr	r0, [pc, #300]	; (8001230 <call_task_func+0x330>)
 8001104:	f003 fc53 	bl	80049ae <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8001108:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f829 	bl	8000164 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800111a:	23c8      	movs	r3, #200	; 0xc8
 800111c:	4849      	ldr	r0, [pc, #292]	; (8001244 <call_task_func+0x344>)
 800111e:	f001 fe4e 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8001122:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	4941      	ldr	r1, [pc, #260]	; (8001230 <call_task_func+0x330>)
 800112c:	4845      	ldr	r0, [pc, #276]	; (8001244 <call_task_func+0x344>)
 800112e:	f001 fed8 	bl	8002ee2 <HAL_UART_Receive>
				if(at_response[13] == '0')
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <call_task_func+0x330>)
 8001134:	7b5b      	ldrb	r3, [r3, #13]
 8001136:	2b30      	cmp	r3, #48	; 0x30
 8001138:	d111      	bne.n	800115e <call_task_func+0x25e>
				{
					CALL_STATE = CHECK_CALL_STATE;
 800113a:	4b3c      	ldr	r3, [pc, #240]	; (800122c <call_task_func+0x32c>)
 800113c:	2205      	movs	r2, #5
 800113e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start, strlen(send_call_start), 300);
 8001140:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f80d 	bl	8000164 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001152:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001156:	483e      	ldr	r0, [pc, #248]	; (8001250 <call_task_func+0x350>)
 8001158:	f001 fe31 	bl	8002dbe <HAL_UART_Transmit>
				}
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
					CALL_STATE = TERMINATE_CALL;
			break;
 800115c:	e0e7      	b.n	800132e <call_task_func+0x42e>
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
 800115e:	493a      	ldr	r1, [pc, #232]	; (8001248 <call_task_func+0x348>)
 8001160:	4833      	ldr	r0, [pc, #204]	; (8001230 <call_task_func+0x330>)
 8001162:	f7fe fff5 	bl	8000150 <strcmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	f040 80e0 	bne.w	800132e <call_task_func+0x42e>
					CALL_STATE = TERMINATE_CALL;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <call_task_func+0x32c>)
 8001170:	2206      	movs	r2, #6
 8001172:	701a      	strb	r2, [r3, #0]
			break;
 8001174:	e0db      	b.n	800132e <call_task_func+0x42e>
			case ACCEPT_CALL:
				HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start_incoming, strlen(send_call_start_incoming), 300);
 8001176:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800117a:	4618      	mov	r0, r3
 800117c:	f7fe fff2 	bl	8000164 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001188:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800118c:	4830      	ldr	r0, [pc, #192]	; (8001250 <call_task_func+0x350>)
 800118e:	f001 fe16 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)answer_call, strlen(answer_call), 300);
 8001192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001196:	4618      	mov	r0, r3
 8001198:	f7fe ffe4 	bl	8000164 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80011a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011a8:	4826      	ldr	r0, [pc, #152]	; (8001244 <call_task_func+0x344>)
 80011aa:	f001 fe08 	bl	8002dbe <HAL_UART_Transmit>
				CALL_STATE = CHECK_CALL_STATE;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <call_task_func+0x32c>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
			break;
 80011b4:	e0be      	b.n	8001334 <call_task_func+0x434>
			case CHECK_CALL_STATE:
				memset(at_response, 0, RX_SIZE);
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	2100      	movs	r1, #0
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <call_task_func+0x330>)
 80011be:	f003 fbf6 	bl	80049ae <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 80011c2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7fe ffcc 	bl	8000164 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80011d4:	23c8      	movs	r3, #200	; 0xc8
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <call_task_func+0x344>)
 80011d8:	f001 fdf1 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80011dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	4912      	ldr	r1, [pc, #72]	; (8001230 <call_task_func+0x330>)
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <call_task_func+0x344>)
 80011e8:	f001 fe7b 	bl	8002ee2 <HAL_UART_Receive>
				if(strcmp(at_response,"\r\nOK\r\n") == 0)
 80011ec:	4916      	ldr	r1, [pc, #88]	; (8001248 <call_task_func+0x348>)
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <call_task_func+0x330>)
 80011f0:	f7fe ffae 	bl	8000150 <strcmp>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 809b 	bne.w	8001332 <call_task_func+0x432>
					CALL_STATE = TERMINATE_CALL;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <call_task_func+0x32c>)
 80011fe:	2206      	movs	r2, #6
 8001200:	701a      	strb	r2, [r3, #0]
			break;
 8001202:	e096      	b.n	8001332 <call_task_func+0x432>
 8001204:	080054a8 	.word	0x080054a8
 8001208:	080054b4 	.word	0x080054b4
 800120c:	080054bc 	.word	0x080054bc
 8001210:	080054e4 	.word	0x080054e4
 8001214:	0800550c 	.word	0x0800550c
 8001218:	08005528 	.word	0x08005528
 800121c:	08005550 	.word	0x08005550
 8001220:	08005578 	.word	0x08005578
 8001224:	08005580 	.word	0x08005580
 8001228:	08005598 	.word	0x08005598
 800122c:	200006ed 	.word	0x200006ed
 8001230:	200005ec 	.word	0x200005ec
 8001234:	200004ec 	.word	0x200004ec
 8001238:	200031e0 	.word	0x200031e0
 800123c:	200004f4 	.word	0x200004f4
 8001240:	0800547c 	.word	0x0800547c
 8001244:	20001b78 	.word	0x20001b78
 8001248:	08005310 	.word	0x08005310
 800124c:	08005488 	.word	0x08005488
 8001250:	2000319c 	.word	0x2000319c
			case TERMINATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	2100      	movs	r1, #0
 800125a:	4839      	ldr	r0, [pc, #228]	; (8001340 <call_task_func+0x440>)
 800125c:	f003 fba7 	bl	80049ae <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)terminate_call, strlen(terminate_call), 200);
 8001260:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff7d 	bl	8000164 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001272:	23c8      	movs	r3, #200	; 0xc8
 8001274:	4833      	ldr	r0, [pc, #204]	; (8001344 <call_task_func+0x444>)
 8001276:	f001 fda2 	bl	8002dbe <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 800127a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800127e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001282:	492f      	ldr	r1, [pc, #188]	; (8001340 <call_task_func+0x440>)
 8001284:	482f      	ldr	r0, [pc, #188]	; (8001344 <call_task_func+0x444>)
 8001286:	f001 fe2c 	bl	8002ee2 <HAL_UART_Receive>
				if(CALL_TYPE == MO)
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <call_task_func+0x448>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11c      	bne.n	80012cc <call_task_func+0x3cc>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end, strlen(send_call_end), 300);
 8001292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001296:	4618      	mov	r0, r3
 8001298:	f7fe ff64 	bl	8000164 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80012a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <call_task_func+0x44c>)
 80012aa:	f001 fd88 	bl	8002dbe <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer, strlen(start_page_timer), 300);
 80012ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff56 	bl	8000164 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012c4:	4821      	ldr	r0, [pc, #132]	; (800134c <call_task_func+0x44c>)
 80012c6:	f001 fd7a 	bl	8002dbe <HAL_UART_Transmit>
 80012ca:	e01f      	b.n	800130c <call_task_func+0x40c>
				}
				else if(CALL_TYPE == MT)
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <call_task_func+0x448>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d11b      	bne.n	800130c <call_task_func+0x40c>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end_incoming, strlen(send_call_end_incoming), 300);
 80012d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ff43 	bl	8000164 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012ea:	4818      	ldr	r0, [pc, #96]	; (800134c <call_task_func+0x44c>)
 80012ec:	f001 fd67 	bl	8002dbe <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer_incoming, strlen(start_page_timer_incoming), 300);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff35 	bl	8000164 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <call_task_func+0x44c>)
 8001308:	f001 fd59 	bl	8002dbe <HAL_UART_Transmit>
				}
				memset(call_task_data, 0, RX_SIZE);
 800130c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001310:	2100      	movs	r1, #0
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <call_task_func+0x450>)
 8001314:	f003 fb4b 	bl	80049ae <memset>
				PHONE_STATE = IDLE;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <call_task_func+0x454>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
				CALL_STATE = NO_CALL;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <call_task_func+0x458>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
			break;
 8001324:	e006      	b.n	8001334 <call_task_func+0x434>
			default:
			break;
 8001326:	bf00      	nop
 8001328:	e004      	b.n	8001334 <call_task_func+0x434>
			break;
 800132a:	bf00      	nop
 800132c:	e002      	b.n	8001334 <call_task_func+0x434>
			break;
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <call_task_func+0x434>
			break;
 8001332:	bf00      	nop
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f002 fbfe 	bl	8003b38 <vTaskDelay>
		switch(CALL_STATE)
 800133c:	e65d      	b.n	8000ffa <call_task_func+0xfa>
 800133e:	bf00      	nop
 8001340:	200005ec 	.word	0x200005ec
 8001344:	20001b78 	.word	0x20001b78
 8001348:	200031e0 	.word	0x200031e0
 800134c:	2000319c 	.word	0x2000319c
 8001350:	200004ec 	.word	0x200004ec
 8001354:	20000000 	.word	0x20000000
 8001358:	200006ed 	.word	0x200006ed

0800135c <call_detected>:
	}
}

static void call_detected()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
	char check_call[] = "AT+CLCC\r\n";
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <call_detected+0xb8>)
 8001364:	463b      	mov	r3, r7
 8001366:	ca07      	ldmia	r2, {r0, r1, r2}
 8001368:	c303      	stmia	r3!, {r0, r1}
 800136a:	801a      	strh	r2, [r3, #0]
	int index;
	char *p1, *p2;
	memset(at_response, 0, sizeof(at_response));
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	2100      	movs	r1, #0
 8001372:	4829      	ldr	r0, [pc, #164]	; (8001418 <call_detected+0xbc>)
 8001374:	f003 fb1b 	bl	80049ae <memset>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)check_call, strlen(check_call), 200);
 8001378:	463b      	mov	r3, r7
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fef2 	bl	8000164 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	4639      	mov	r1, r7
 8001386:	23c8      	movs	r3, #200	; 0xc8
 8001388:	4824      	ldr	r0, [pc, #144]	; (800141c <call_detected+0xc0>)
 800138a:	f001 fd18 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 800138e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001396:	4920      	ldr	r1, [pc, #128]	; (8001418 <call_detected+0xbc>)
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <call_detected+0xc0>)
 800139a:	f001 fda2 	bl	8002ee2 <HAL_UART_Receive>
	if(at_response[13] == '4' && PHONE_STATE == IDLE)
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <call_detected+0xbc>)
 80013a0:	7b5b      	ldrb	r3, [r3, #13]
 80013a2:	2b34      	cmp	r3, #52	; 0x34
 80013a4:	d132      	bne.n	800140c <call_detected+0xb0>
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <call_detected+0xc4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d12e      	bne.n	800140c <call_detected+0xb0>
	{
		index = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
		p1 = strstr(at_response, "\"");
 80013b2:	2122      	movs	r1, #34	; 0x22
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <call_detected+0xbc>)
 80013b6:	f003 fb23 	bl	8004a00 <strchr>
 80013ba:	6138      	str	r0, [r7, #16]
		p1++;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	3301      	adds	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
		if(p1)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00f      	beq.n	80013e8 <call_detected+0x8c>
			p2 = strstr(p1,"\"");
 80013c8:	2122      	movs	r1, #34	; 0x22
 80013ca:	6938      	ldr	r0, [r7, #16]
 80013cc:	f003 fb18 	bl	8004a00 <strchr>
 80013d0:	60f8      	str	r0, [r7, #12]
		while(p1 != p2)
 80013d2:	e009      	b.n	80013e8 <call_detected+0x8c>
		{
			call_task_data[index++] = *p1;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	617a      	str	r2, [r7, #20]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	7811      	ldrb	r1, [r2, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <call_detected+0xc8>)
 80013e0:	54d1      	strb	r1, [r2, r3]
			p1++;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
		while(p1 != p2)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d1f1      	bne.n	80013d4 <call_detected+0x78>
		}
		call_task_data[index] = '\n';
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <call_detected+0xc8>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	220a      	movs	r2, #10
 80013f8:	701a      	strb	r2, [r3, #0]
		PHONE_STATE = BUSY;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <call_detected+0xc4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MT;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <call_detected+0xcc>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <call_detected+0xd0>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
	}
}
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	080054a8 	.word	0x080054a8
 8001418:	200005ec 	.word	0x200005ec
 800141c:	20001b78 	.word	0x20001b78
 8001420:	20000000 	.word	0x20000000
 8001424:	200004ec 	.word	0x200004ec
 8001428:	200031e0 	.word	0x200031e0
 800142c:	200006ed 	.word	0x200006ed

08001430 <sms_detected>:

static void sms_detected()
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b0ac      	sub	sp, #176	; 0xb0
 8001434:	af00      	add	r7, sp, #0
	char message_buf[96] = {0};
 8001436:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800143a:	2260      	movs	r2, #96	; 0x60
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fab5 	bl	80049ae <memset>
	char get_entry[20] ={0};
 8001444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
	char new_mess[]="main_page.t1.txt=\"New message! Tap to read!\"\xFF\xFF\xFF";
 8001454:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <sms_detected+0x1a8>)
 8001456:	463c      	mov	r4, r7
 8001458:	461d      	mov	r5, r3
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *p1, *p2;
	int index = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sprintf(get_entry, "AT+CMGR=%d\r\n", message_index+1);
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <sms_detected+0x1ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147a:	4959      	ldr	r1, [pc, #356]	; (80015e0 <sms_detected+0x1b0>)
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fa9f 	bl	80049c0 <siprintf>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 8001482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fe6c 	bl	8000164 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001494:	23c8      	movs	r3, #200	; 0xc8
 8001496:	4853      	ldr	r0, [pc, #332]	; (80015e4 <sms_detected+0x1b4>)
 8001498:	f001 fc91 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 800149c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80014a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a4:	2260      	movs	r2, #96	; 0x60
 80014a6:	484f      	ldr	r0, [pc, #316]	; (80015e4 <sms_detected+0x1b4>)
 80014a8:	f001 fd1b 	bl	8002ee2 <HAL_UART_Receive>
	if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 80014ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014b0:	494d      	ldr	r1, [pc, #308]	; (80015e8 <sms_detected+0x1b8>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe4c 	bl	8000150 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8088 	beq.w	80015d0 <sms_detected+0x1a0>
		return;
	p1 = strstr(message_buf, "\"+");
 80014c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014c4:	4949      	ldr	r1, [pc, #292]	; (80015ec <sms_detected+0x1bc>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 faaf 	bl	8004a2a <strstr>
 80014cc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 80014d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d4:	3301      	adds	r3, #1
 80014d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 80014da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <sms_detected+0xf2>
	  p2 = strstr(p1,"\"");
 80014e2:	2122      	movs	r1, #34	; 0x22
 80014e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80014e8:	f003 fa8a 	bl	8004a00 <strchr>
 80014ec:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	while(p1 != p2)
 80014f0:	e017      	b.n	8001522 <sms_detected+0xf2>
	{
	  messages[message_index].sender[index++] = *p1;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <sms_detected+0x1ac>)
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014fa:	1c53      	adds	r3, r2, #1
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001504:	781c      	ldrb	r4, [r3, #0]
 8001506:	483a      	ldr	r0, [pc, #232]	; (80015f0 <sms_detected+0x1c0>)
 8001508:	460b      	mov	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	1a5b      	subs	r3, r3, r1
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4403      	add	r3, r0
 8001512:	4413      	add	r3, r2
 8001514:	4622      	mov	r2, r4
 8001516:	701a      	strb	r2, [r3, #0]
	  p1++;
 8001518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800151c:	3301      	adds	r3, #1
 800151e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 8001522:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800152a:	429a      	cmp	r2, r3
 800152c:	d1e1      	bne.n	80014f2 <sms_detected+0xc2>
	}
	p2++;
 800152e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001532:	3301      	adds	r3, #1
 8001534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	p1 = strstr(p2, "\n");
 8001538:	210a      	movs	r1, #10
 800153a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800153e:	f003 fa5f 	bl	8004a00 <strchr>
 8001542:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 8001546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 8001550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <sms_detected+0x136>
	  p2 = strstr(p1,"\r");
 8001558:	210d      	movs	r1, #13
 800155a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800155e:	f003 fa4f 	bl	8004a00 <strchr>
 8001562:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	index = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while(p1 != p2)
 800156c:	e018      	b.n	80015a0 <sms_detected+0x170>
	{
	  messages[message_index].message[index++] = *p1;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <sms_detected+0x1ac>)
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001576:	1c53      	adds	r3, r2, #1
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001580:	781c      	ldrb	r4, [r3, #0]
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <sms_detected+0x1c0>)
 8001584:	460b      	mov	r3, r1
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a5b      	subs	r3, r3, r1
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4403      	add	r3, r0
 800158e:	4413      	add	r3, r2
 8001590:	3310      	adds	r3, #16
 8001592:	4622      	mov	r2, r4
 8001594:	701a      	strb	r2, [r3, #0]
	  p1++;
 8001596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800159a:	3301      	adds	r3, #1
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 80015a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80015a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1e0      	bne.n	800156e <sms_detected+0x13e>
	}
	message_index++;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <sms_detected+0x1ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <sms_detected+0x1ac>)
 80015b4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)new_mess, strlen(new_mess), 300);
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fdd3 	bl	8000164 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4639      	mov	r1, r7
 80015c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <sms_detected+0x1c4>)
 80015ca:	f001 fbf8 	bl	8002dbe <HAL_UART_Transmit>
 80015ce:	e000      	b.n	80015d2 <sms_detected+0x1a2>
		return;
 80015d0:	bf00      	nop
}
 80015d2:	37b0      	adds	r7, #176	; 0xb0
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	080055b4 	.word	0x080055b4
 80015dc:	200006f4 	.word	0x200006f4
 80015e0:	08005318 	.word	0x08005318
 80015e4:	20001b78 	.word	0x20001b78
 80015e8:	08005310 	.word	0x08005310
 80015ec:	08005328 	.word	0x08005328
 80015f0:	20001bbc 	.word	0x20001bbc
 80015f4:	2000319c 	.word	0x2000319c

080015f8 <ring_int_handler>:

void ring_int_handler()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
	char phone_state[] = "AT+CPAS\r\n";
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <ring_int_handler+0x60>)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	ca07      	ldmia	r2, {r0, r1, r2}
 8001604:	c303      	stmia	r3!, {r0, r1}
 8001606:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(GSM_UART, (uint8_t*)phone_state, strlen(phone_state), 200);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fdaa 	bl	8000164 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	1d39      	adds	r1, r7, #4
 8001616:	23c8      	movs	r3, #200	; 0xc8
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <ring_int_handler+0x64>)
 800161a:	f001 fbd0 	bl	8002dbe <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 500);
 800161e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <ring_int_handler+0x68>)
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <ring_int_handler+0x64>)
 800162a:	f001 fc5a 	bl	8002ee2 <HAL_UART_Receive>
	if(strstr(at_response, "RING") != NULL)
 800162e:	490d      	ldr	r1, [pc, #52]	; (8001664 <ring_int_handler+0x6c>)
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <ring_int_handler+0x68>)
 8001632:	f003 f9fa 	bl	8004a2a <strstr>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <ring_int_handler+0x4a>
	{
		call_detected();
 800163c:	f7ff fe8e 	bl	800135c <call_detected>
	}
	else if(at_response[9] == '0')
	{
		sms_detected();
	}
}
 8001640:	e005      	b.n	800164e <ring_int_handler+0x56>
	else if(at_response[9] == '0')
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <ring_int_handler+0x68>)
 8001644:	7a5b      	ldrb	r3, [r3, #9]
 8001646:	2b30      	cmp	r3, #48	; 0x30
 8001648:	d101      	bne.n	800164e <ring_int_handler+0x56>
		sms_detected();
 800164a:	f7ff fef1 	bl	8001430 <sms_detected>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	080055ec 	.word	0x080055ec
 800165c:	20001b78 	.word	0x20001b78
 8001660:	200005ec 	.word	0x200005ec
 8001664:	080055e4 	.word	0x080055e4

08001668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800167a:	f000 f9cf 	bl	8001a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40012c00 	.word	0x40012c00

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001692:	e7fe      	b.n	8001692 <Error_Handler+0x6>

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_MspInit+0x68>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_MspInit+0x68>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_MspInit+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_MspInit+0x68>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_MspInit+0x68>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x68>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	210f      	movs	r1, #15
 80016ce:	f06f 0001 	mvn.w	r0, #1
 80016d2:	f000 fa74 	bl	8001bbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_MspInit+0x6c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_MspInit+0x6c>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3b      	ldr	r2, [pc, #236]	; (800180c <HAL_UART_MspInit+0x108>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d132      	bne.n	800178a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001724:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_UART_MspInit+0x10c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a39      	ldr	r2, [pc, #228]	; (8001810 <HAL_UART_MspInit+0x10c>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_UART_MspInit+0x10c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_UART_MspInit+0x10c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a33      	ldr	r2, [pc, #204]	; (8001810 <HAL_UART_MspInit+0x10c>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_UART_MspInit+0x10c>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4619      	mov	r1, r3
 8001768:	482a      	ldr	r0, [pc, #168]	; (8001814 <HAL_UART_MspInit+0x110>)
 800176a:	f000 fac9 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0318 	add.w	r3, r7, #24
 8001780:	4619      	mov	r1, r3
 8001782:	4824      	ldr	r0, [pc, #144]	; (8001814 <HAL_UART_MspInit+0x110>)
 8001784:	f000 fabc 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001788:	e03c      	b.n	8001804 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a22      	ldr	r2, [pc, #136]	; (8001818 <HAL_UART_MspInit+0x114>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d137      	bne.n	8001804 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_UART_MspInit+0x10c>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_UART_MspInit+0x10c>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179e:	61d3      	str	r3, [r2, #28]
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_UART_MspInit+0x10c>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0x10c>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x10c>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x10c>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c4:	2304      	movs	r3, #4
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	4619      	mov	r1, r3
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <HAL_UART_MspInit+0x110>)
 80017d8:	f000 fa92 	bl	8001d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017dc:	2308      	movs	r3, #8
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <HAL_UART_MspInit+0x110>)
 80017f0:	f000 fa86 	bl	8001d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2105      	movs	r1, #5
 80017f8:	2026      	movs	r0, #38	; 0x26
 80017fa:	f000 f9e0 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017fe:	2026      	movs	r0, #38	; 0x26
 8001800:	f000 f9f9 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013800 	.word	0x40013800
 8001810:	40021000 	.word	0x40021000
 8001814:	40010800 	.word	0x40010800
 8001818:	40004400 	.word	0x40004400

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2019      	movs	r0, #25
 8001832:	f000 f9c4 	bl	8001bbe <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001836:	2019      	movs	r0, #25
 8001838:	f000 f9dd 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_InitTick+0x9c>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_InitTick+0x9c>)
 8001842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_InitTick+0x9c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001854:	f107 0210 	add.w	r2, r7, #16
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f000 ffc8 	bl	80027f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001864:	f000 ffb2 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8001868:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <HAL_InitTick+0xa0>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	3b01      	subs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_InitTick+0xa4>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_InitTick+0xa8>)
 800187c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_InitTick+0xa4>)
 8001880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_InitTick+0xa4>)
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_InitTick+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_InitTick+0xa4>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <HAL_InitTick+0xa4>)
 800189a:	f000 fff9 	bl	8002890 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d104      	bne.n	80018ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_InitTick+0xa4>)
 80018a6:	f001 f84b 	bl	8002940 <HAL_TIM_Base_Start_IT>
 80018aa:	4603      	mov	r3, r0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3730      	adds	r7, #48	; 0x30
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	200031e4 	.word	0x200031e4
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <NMI_Handler>:
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <DebugMon_Handler>:
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <EXTI0_IRQHandler>:
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	f7ff fe7f 	bl	80015f8 <ring_int_handler>
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fb5a 	bl	8001fb4 <HAL_GPIO_EXTI_IRQHandler>
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <TIM1_UP_IRQHandler>:
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM1_UP_IRQHandler+0x10>)
 800190a:	f001 f86b 	bl	80029e4 <HAL_TIM_IRQHandler>
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200031e4 	.word	0x200031e4

08001918 <USART2_IRQHandler>:
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <USART2_IRQHandler+0x10>)
 800191e:	f001 fbd3 	bl	80030c8 <HAL_UART_IRQHandler>
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000319c 	.word	0x2000319c

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f002 fff2 	bl	8004944 <__errno>
 8001960:	4602      	mov	r2, r0
 8001962:	230c      	movs	r3, #12
 8001964:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20005000 	.word	0x20005000
 800198c:	00000400 	.word	0x00000400
 8001990:	200006f8 	.word	0x200006f8
 8001994:	20003238 	.word	0x20003238

08001998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019a6:	e003      	b.n	80019b0 <LoopCopyDataInit>

080019a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019ae:	3104      	adds	r1, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019b0:	480a      	ldr	r0, [pc, #40]	; (80019dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019b8:	d3f6      	bcc.n	80019a8 <CopyDataInit>
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019bc:	e002      	b.n	80019c4 <LoopFillZerobss>

080019be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019c0:	f842 3b04 	str.w	r3, [r2], #4

080019c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019c8:	d3f9      	bcc.n	80019be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ca:	f7ff ffe5 	bl	8001998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f002 ffbf 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d2:	f7fe fc1b 	bl	800020c <main>
  bx lr
 80019d6:	4770      	bx	lr
  ldr r3, =_sidata
 80019d8:	08005668 	.word	0x08005668
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019e0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80019e4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80019e8:	20003234 	.word	0x20003234

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x28>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x28>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f8d1 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff ff08 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fe42 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000

08001a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x1c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_IncTick+0x20>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x20>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	2000322c 	.word	0x2000322c

08001a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_GetTick+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	2000322c 	.word	0x2000322c

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4906      	ldr	r1, [pc, #24]	; (8001aec <__NVIC_EnableIRQ+0x34>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff4f 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff64 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ffb2 	bl	8001b44 <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff81 	bl	8001af0 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff57 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d005      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e051      	b.n	8001cda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 020e 	bic.w	r2, r2, #14
 8001c44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_DMA_Abort_IT+0xd0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d029      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0xa0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_DMA_Abort_IT+0xd4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d022      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x9c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_DMA_Abort_IT+0xd8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d01a      	beq.n	8001caa <HAL_DMA_Abort_IT+0x96>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_DMA_Abort_IT+0xdc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d012      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x90>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HAL_DMA_Abort_IT+0xe0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00a      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x8a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_DMA_Abort_IT+0xe4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d102      	bne.n	8001c98 <HAL_DMA_Abort_IT+0x84>
 8001c92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c96:	e00e      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9c:	e00b      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca2:	e008      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	e005      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cae:	e002      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	e000      	b.n	8001cb6 <HAL_DMA_Abort_IT+0xa2>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_DMA_Abort_IT+0xe8>)
 8001cb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
    } 
  }
  return status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020008 	.word	0x40020008
 8001ce8:	4002001c 	.word	0x4002001c
 8001cec:	40020030 	.word	0x40020030
 8001cf0:	40020044 	.word	0x40020044
 8001cf4:	40020058 	.word	0x40020058
 8001cf8:	4002006c 	.word	0x4002006c
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e127      	b.n	8001f64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d14:	2201      	movs	r2, #1
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 8116 	bne.w	8001f5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d034      	beq.n	8001da4 <HAL_GPIO_Init+0xa4>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d80d      	bhi.n	8001d5a <HAL_GPIO_Init+0x5a>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x9a>
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d804      	bhi.n	8001d50 <HAL_GPIO_Init+0x50>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d01c      	beq.n	8001d88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d4e:	e048      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d043      	beq.n	8001ddc <HAL_GPIO_Init+0xdc>
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d01b      	beq.n	8001d90 <HAL_GPIO_Init+0x90>
          break;
 8001d58:	e043      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d5a:	4a89      	ldr	r2, [pc, #548]	; (8001f80 <HAL_GPIO_Init+0x280>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d026      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d60:	4a87      	ldr	r2, [pc, #540]	; (8001f80 <HAL_GPIO_Init+0x280>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d806      	bhi.n	8001d74 <HAL_GPIO_Init+0x74>
 8001d66:	4a87      	ldr	r2, [pc, #540]	; (8001f84 <HAL_GPIO_Init+0x284>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d020      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d6c:	4a86      	ldr	r2, [pc, #536]	; (8001f88 <HAL_GPIO_Init+0x288>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_GPIO_Init+0xae>
          break;
 8001d72:	e036      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d74:	4a85      	ldr	r2, [pc, #532]	; (8001f8c <HAL_GPIO_Init+0x28c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d7a:	4a85      	ldr	r2, [pc, #532]	; (8001f90 <HAL_GPIO_Init+0x290>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d016      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d80:	4a84      	ldr	r2, [pc, #528]	; (8001f94 <HAL_GPIO_Init+0x294>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0xae>
          break;
 8001d86:	e02c      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e028      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e023      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e01e      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	330c      	adds	r3, #12
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e019      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db6:	2304      	movs	r3, #4
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e012      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
          break;
 8001dce:	e008      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
          break;
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2bff      	cmp	r3, #255	; 0xff
 8001de6:	d801      	bhi.n	8001dec <HAL_GPIO_Init+0xec>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	e001      	b.n	8001df0 <HAL_GPIO_Init+0xf0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2bff      	cmp	r3, #255	; 0xff
 8001df6:	d802      	bhi.n	8001dfe <HAL_GPIO_Init+0xfe>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x104>
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3b08      	subs	r3, #8
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8096 	beq.w	8001f5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e4a:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_GPIO_Init+0x2a0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x19e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x2a4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x19a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2a8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x196>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2ac>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x192>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb0:	493a      	ldr	r1, [pc, #232]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4938      	ldr	r1, [pc, #224]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4933      	ldr	r1, [pc, #204]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	492e      	ldr	r1, [pc, #184]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4929      	ldr	r1, [pc, #164]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4924      	ldr	r1, [pc, #144]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	491f      	ldr	r1, [pc, #124]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4915      	ldr	r1, [pc, #84]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f aed0 	bne.w	8001d14 <HAL_GPIO_Init+0x14>
  }
}
 8001f74:	bf00      	nop
 8001f76:	372c      	adds	r7, #44	; 0x2c
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	10210000 	.word	0x10210000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	10120000 	.word	0x10120000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10320000 	.word	0x10320000
 8001f94:	10220000 	.word	0x10220000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f806 	bl	8001fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e26c      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8087 	beq.w	8002126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002018:	4b92      	ldr	r3, [pc, #584]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00c      	beq.n	800203e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002024:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d112      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
 8002030:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d10b      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203e:	4b89      	ldr	r3, [pc, #548]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06c      	beq.n	8002124 <HAL_RCC_OscConfig+0x12c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d168      	bne.n	8002124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e246      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x76>
 8002060:	4b80      	ldr	r3, [pc, #512]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e02e      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b78      	ldr	r3, [pc, #480]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a77      	ldr	r2, [pc, #476]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0xbc>
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a71      	ldr	r2, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 80020b4:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a67      	ldr	r2, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fcb4 	bl	8001a40 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fcb0 	bl	8001a40 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1fa      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xe4>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fca0 	bl	8001a40 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc9c 	bl	8001a40 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1e6      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x10c>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800213e:	4b49      	ldr	r3, [pc, #292]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1ba      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4939      	ldr	r1, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x270>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff fc55 	bl	8001a40 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fc51 	bl	8001a40 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e19b      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4927      	ldr	r1, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x270>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fc34 	bl	8001a40 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc30 	bl	8001a40 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e17a      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03a      	beq.n	800227c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_RCC_OscConfig+0x274>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7ff fc14 	bl	8001a40 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fc10 	bl	8001a40 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e15a      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800223a:	2001      	movs	r0, #1
 800223c:	f000 fb0a 	bl	8002854 <RCC_Delay>
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_OscConfig+0x274>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff fbfa 	bl	8001a40 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00f      	b.n	8002270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fbf6 	bl	8001a40 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d908      	bls.n	8002270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e140      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	42420000 	.word	0x42420000
 800226c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e9      	bne.n	8002250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a6 	beq.w	80023d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b97      	ldr	r3, [pc, #604]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b94      	ldr	r3, [pc, #592]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a93      	ldr	r2, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b91      	ldr	r3, [pc, #580]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a8a      	ldr	r2, [pc, #552]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fbb7 	bl	8001a40 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fbb3 	bl	8001a40 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0fd      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <HAL_RCC_OscConfig+0x4f8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x312>
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e02d      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x334>
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	e01c      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x356>
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb67 	bl	8001a40 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fb63 	bl	8001a40 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0ab      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ee      	beq.n	8002376 <HAL_RCC_OscConfig+0x37e>
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff fb51 	bl	8001a40 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7ff fb4d 	bl	8001a40 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e095      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8081 	beq.w	80024e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d061      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d146      	bne.n	8002482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fb21 	bl	8001a40 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff fb1d 	bl	8001a40 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e067      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d108      	bne.n	800243c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242a:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	492d      	ldr	r1, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a19      	ldr	r1, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	430b      	orrs	r3, r1
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff faf1 	bl	8001a40 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff faed 	bl	8001a40 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e037      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x46a>
 8002480:	e02f      	b.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_RCC_OscConfig+0x4fc>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fada 	bl	8001a40 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff fad6 	bl	8001a40 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e020      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x498>
 80024ae:	e018      	b.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e013      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x4f4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d0      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d910      	bls.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4965      	ldr	r1, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d040      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e073      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4936      	ldr	r1, [pc, #216]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fa2a 	bl	8001a40 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7ff fa26 	bl	8001a40 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e053      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d210      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4922      	ldr	r1, [pc, #136]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4601      	mov	r1, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	fa21 f303 	lsr.w	r3, r1, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1cc>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f8b8 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08005614 	.word	0x08005614
 80026c4:	20000004 	.word	0x20000004
 80026c8:	20000008 	.word	0x20000008

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b490      	push	{r4, r7}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	1d3c      	adds	r4, r7, #4
 80026d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026dc:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x40>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x46>
 800270a:	e02d      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_GetSysClockFreq+0xbc>)
 800270e:	623b      	str	r3, [r7, #32]
      break;
 8002710:	e02d      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800271e:	4413      	add	r3, r2
 8002720:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002724:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0c5b      	lsrs	r3, r3, #17
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273e:	4413      	add	r3, r2
 8002740:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002744:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <HAL_RCC_GetSysClockFreq+0xbc>)
 800274a:	fb02 f203 	mul.w	r2, r2, r3
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e004      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_GetSysClockFreq+0xc0>)
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	623b      	str	r3, [r7, #32]
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_RCC_GetSysClockFreq+0xbc>)
 800276a:	623b      	str	r3, [r7, #32]
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6a3b      	ldr	r3, [r7, #32]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc90      	pop	{r4, r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	080055f8 	.word	0x080055f8
 8002780:	08005608 	.word	0x08005608
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	003d0900 	.word	0x003d0900

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff2 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027ac:	4601      	mov	r1, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08005624 	.word	0x08005624

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffde 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027d4:	4601      	mov	r1, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0adb      	lsrs	r3, r3, #11
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08005624 	.word	0x08005624

080027f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	220f      	movs	r2, #15
 8002802:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_RCC_GetClockConfig+0x58>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_GetClockConfig+0x58>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetClockConfig+0x58>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_GetClockConfig+0x58>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetClockConfig+0x5c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0207 	and.w	r2, r3, #7
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000
 8002850:	40022000 	.word	0x40022000

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000004 	.word	0x20000004
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e041      	b.n	8002926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f839 	bl	800292e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f9b4 	bl	8002c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e03a      	b.n	80029ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d009      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <HAL_TIM_Base_Start_IT+0x9c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d010      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	e007      	b.n	80029cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8ed 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8e0 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8ef 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8c3 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8b6 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8c5 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f899 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f88c 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f89b 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f86f 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f862 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f871 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe fd80 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8bf 	bl	8002d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f835 	bl	8002c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f88a 	bl	8002d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <TIM_Base_SetConfig+0xb8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <TIM_Base_SetConfig+0xbc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0x30>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <TIM_Base_SetConfig+0xc0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d108      	bne.n	8002c7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <TIM_Base_SetConfig+0xb8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0x62>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0x62>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <TIM_Base_SetConfig+0xbc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0x62>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <TIM_Base_SetConfig+0xc0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <TIM_Base_SetConfig+0xb8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d103      	bne.n	8002ce4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	615a      	str	r2, [r3, #20]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800

08002d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e03f      	b.n	8002db6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fcda 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fc21 	bl	80035b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	; 0x28
 8002dc2:	af02      	add	r7, sp, #8
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d17c      	bne.n	8002ed8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_Transmit+0x2c>
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e075      	b.n	8002eda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_UART_Transmit+0x3e>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e06e      	b.n	8002eda <HAL_UART_Transmit+0x11c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2221      	movs	r2, #33	; 0x21
 8002e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e12:	f7fe fe15 	bl	8001a40 <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d108      	bne.n	8002e40 <HAL_UART_Transmit+0x82>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e50:	e02a      	b.n	8002ea8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fa45 	bl	80032ec <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e036      	b.n	8002eda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	3302      	adds	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e007      	b.n	8002e9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3301      	adds	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1cf      	bne.n	8002e52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fa15 	bl	80032ec <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e006      	b.n	8002eda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	; 0x28
 8002ee6:	af02      	add	r7, sp, #8
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	f040 8089 	bne.w	8003016 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_UART_Receive+0x2e>
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e081      	b.n	8003018 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Receive+0x40>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e07a      	b.n	8003018 <HAL_UART_Receive+0x136>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2222      	movs	r2, #34	; 0x22
 8002f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f38:	f7fe fd82 	bl	8001a40 <HAL_GetTick>
 8002f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	d108      	bne.n	8002f66 <HAL_UART_Receive+0x84>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e003      	b.n	8002f6e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f76:	e043      	b.n	8003000 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2120      	movs	r1, #32
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f9b2 	bl	80032ec <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e042      	b.n	8003018 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10c      	bne.n	8002fb2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3302      	adds	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e01f      	b.n	8002ff2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d007      	beq.n	8002fcc <HAL_UART_Receive+0xea>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_UART_Receive+0xf8>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e008      	b.n	8002fec <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1b6      	bne.n	8002f78 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d140      	bne.n	80030bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_Receive_IT+0x26>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e039      	b.n	80030be <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UART_Receive_IT+0x38>
 8003054:	2302      	movs	r3, #2
 8003056:	e032      	b.n	80030be <HAL_UART_Receive_IT+0x9e>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2222      	movs	r2, #34	; 0x22
 800307c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_UART_IRQHandler+0x52>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9cc 	bl	80034b0 <UART_Receive_IT>
      return;
 8003118:	e0d1      	b.n	80032be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80b0 	beq.w	8003282 <HAL_UART_IRQHandler+0x1ba>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_UART_IRQHandler+0x70>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a5 	beq.w	8003282 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_UART_IRQHandler+0x90>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_UART_IRQHandler+0xb0>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	f043 0202 	orr.w	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_UART_IRQHandler+0xd0>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00f      	beq.n	80031c2 <HAL_UART_IRQHandler+0xfa>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_UART_IRQHandler+0xee>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d078      	beq.n	80032bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_UART_IRQHandler+0x11c>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f966 	bl	80034b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_UART_IRQHandler+0x144>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d031      	beq.n	8003270 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8b7 	bl	8003380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_UART_IRQHandler+0x1fc>)
 800323e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fce5 	bl	8001c14 <HAL_DMA_Abort_IT>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800325a:	4610      	mov	r0, r2
 800325c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325e:	e00e      	b.n	800327e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f83a 	bl	80032da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003266:	e00a      	b.n	800327e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f836 	bl	80032da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326e:	e006      	b.n	800327e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f832 	bl	80032da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800327c:	e01e      	b.n	80032bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327e:	bf00      	nop
    return;
 8003280:	e01c      	b.n	80032bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x1d6>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8a3 	bl	80033e2 <UART_Transmit_IT>
    return;
 800329c:	e00f      	b.n	80032be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_UART_IRQHandler+0x1f6>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8e4 	bl	8003480 <UART_EndTransmit_IT>
    return;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_UART_IRQHandler+0x1f6>
    return;
 80032bc:	bf00      	nop
  }
}
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	080033bb 	.word	0x080033bb

080032c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fc:	e02c      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003304:	d028      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <UART_WaitOnFlagUntilTimeout+0x30>
 800330c:	f7fe fb98 	bl	8001a40 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	429a      	cmp	r2, r3
 800331a:	d21d      	bcs.n	8003358 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800332a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00f      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d0c3      	beq.n	80032fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003396:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ff80 	bl	80032da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b21      	cmp	r3, #33	; 0x21
 80033f4:	d13e      	bne.n	8003474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fe:	d114      	bne.n	800342a <UART_Transmit_IT+0x48>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d110      	bne.n	800342a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1c9a      	adds	r2, r3, #2
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	621a      	str	r2, [r3, #32]
 8003428:	e008      	b.n	800343c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6211      	str	r1, [r2, #32]
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4619      	mov	r1, r3
 800344a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff11 	bl	80032c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b22      	cmp	r3, #34	; 0x22
 80034c2:	d170      	bne.n	80035a6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d117      	bne.n	80034fe <UART_Receive_IT+0x4e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d113      	bne.n	80034fe <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
 80034fc:	e026      	b.n	800354c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d007      	beq.n	8003522 <UART_Receive_IT+0x72>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <UART_Receive_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e008      	b.n	8003542 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4619      	mov	r1, r3
 800355a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800355c:	2b00      	cmp	r3, #0
 800355e:	d120      	bne.n	80035a2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0220 	bic.w	r2, r2, #32
 800356e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fc fe03 	bl	80001a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e002      	b.n	80035a8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035ea:	f023 030c 	bic.w	r3, r3, #12
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <UART_SetConfig+0x114>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7ff f8d8 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	e002      	b.n	8003626 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7ff f8c0 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009a      	lsls	r2, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	0119      	lsls	r1, r3, #4
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fbb2 f2f3 	udiv	r2, r2, r3
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <UART_SetConfig+0x118>)
 800365e:	fba3 0302 	umull	r0, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2064      	movs	r0, #100	; 0x64
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <UART_SetConfig+0x118>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367c:	4419      	add	r1, r3
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fbb2 f2f3 	udiv	r2, r2, r3
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <UART_SetConfig+0x118>)
 8003696:	fba3 0302 	umull	r0, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2064      	movs	r0, #100	; 0x64
 800369e:	fb00 f303 	mul.w	r3, r0, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	440a      	add	r2, r1
 80036ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40013800 	.word	0x40013800
 80036c8:	51eb851f 	.word	0x51eb851f

080036cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f103 0208 	add.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f103 0208 	add.w	r2, r3, #8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0208 	add.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377e:	d103      	bne.n	8003788 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e00c      	b.n	80037a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3308      	adds	r3, #8
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e002      	b.n	8003796 <vListInsert+0x2e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d2f6      	bcs.n	8003790 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6852      	ldr	r2, [r2, #4]
 80037f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d103      	bne.n	800380c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08e      	sub	sp, #56	; 0x38
 800382e:	af04      	add	r7, sp, #16
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	e7fe      	b.n	8003850 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <xTaskCreateStatic+0x42>
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e7fe      	b.n	800386a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800386c:	2354      	movs	r3, #84	; 0x54
 800386e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b54      	cmp	r3, #84	; 0x54
 8003874:	d009      	beq.n	800388a <xTaskCreateStatic+0x60>
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e7fe      	b.n	8003888 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01e      	beq.n	80038ce <xTaskCreateStatic+0xa4>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01b      	beq.n	80038ce <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a8:	2300      	movs	r3, #0
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f850 	bl	8003966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c8:	f000 f8cc 	bl	8003a64 <prvAddNewTaskToReadyList>
 80038cc:	e001      	b.n	80038d2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038d2:	697b      	ldr	r3, [r7, #20]
	}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af04      	add	r7, sp, #16
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe53 	bl	800459c <pvPortMalloc>
 80038f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038fe:	2054      	movs	r0, #84	; 0x54
 8003900:	f000 fe4c 	bl	800459c <pvPortMalloc>
 8003904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
 8003912:	e005      	b.n	8003920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f000 ff03 	bl	8004720 <vPortFree>
 800391a:	e001      	b.n	8003920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d017      	beq.n	8003956 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	2300      	movs	r3, #0
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f80e 	bl	8003966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394a:	69f8      	ldr	r0, [r7, #28]
 800394c:	f000 f88a 	bl	8003a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e002      	b.n	800395c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800395a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800395c:	69bb      	ldr	r3, [r7, #24]
	}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800397e:	3b01      	subs	r3, #1
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f023 0307 	bic.w	r3, r3, #7
 800398c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <prvInitialiseNewTask+0x46>
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e7fe      	b.n	80039aa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e012      	b.n	80039d8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	7819      	ldrb	r1, [r3, #0]
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	3334      	adds	r3, #52	; 0x34
 80039c2:	460a      	mov	r2, r1
 80039c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d9e9      	bls.n	80039b2 <prvInitialiseNewTask+0x4c>
 80039de:	e000      	b.n	80039e2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80039e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d901      	bls.n	80039f4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f0:	2306      	movs	r3, #6
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fe7d 	bl	800370a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fe78 	bl	800370a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f1c3 0207 	rsb	r2, r3, #7
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	69b8      	ldr	r0, [r7, #24]
 8003a44:	f000 fc06 	bl	8004254 <pxPortInitialiseStack>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a5a:	bf00      	nop
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a6c:	f000 fcdc 	bl	8004428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a82:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <prvAddNewTaskToReadyList+0xb8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d110      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a90:	f000 fabc 	bl	800400c <prvInitialiseTaskLists>
 8003a94:	e00d      	b.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <prvAddNewTaskToReadyList+0xc0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d802      	bhi.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <prvAddNewTaskToReadyList+0xc4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <prvAddNewTaskToReadyList+0xc4>)
 8003aba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <prvAddNewTaskToReadyList+0xc8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <prvAddNewTaskToReadyList+0xcc>)
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7ff fe1c 	bl	8003722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aea:	f000 fccb 	bl	8004484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <prvAddNewTaskToReadyList+0xc0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00e      	beq.n	8003b14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvAddNewTaskToReadyList+0xbc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d207      	bcs.n	8003b14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvAddNewTaskToReadyList+0xd0>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200007fc 	.word	0x200007fc
 8003b20:	200006fc 	.word	0x200006fc
 8003b24:	20000808 	.word	0x20000808
 8003b28:	20000818 	.word	0x20000818
 8003b2c:	20000804 	.word	0x20000804
 8003b30:	20000700 	.word	0x20000700
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <vTaskDelay+0x60>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <vTaskDelay+0x2e>
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	e7fe      	b.n	8003b64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003b66:	f000 f879 	bl	8003c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb0b 	bl	8004188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b72:	f000 f881 	bl	8003c78 <xTaskResumeAll>
 8003b76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <vTaskDelay+0x64>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000824 	.word	0x20000824
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bae:	463a      	mov	r2, r7
 8003bb0:	1d39      	adds	r1, r7, #4
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fadc 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	460a      	mov	r2, r1
 8003bce:	491d      	ldr	r1, [pc, #116]	; (8003c44 <vTaskStartScheduler+0xa4>)
 8003bd0:	481d      	ldr	r0, [pc, #116]	; (8003c48 <vTaskStartScheduler+0xa8>)
 8003bd2:	f7ff fe2a 	bl	800382a <xTaskCreateStatic>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <vTaskStartScheduler+0xac>)
 8003bda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <vTaskStartScheduler+0xac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e001      	b.n	8003bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d115      	bne.n	8003c20 <vTaskStartScheduler+0x80>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <vTaskStartScheduler+0xb0>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <vTaskStartScheduler+0xb4>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <vTaskStartScheduler+0xb8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c1a:	f000 fb95 	bl	8004348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c1e:	e00d      	b.n	8003c3c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c26:	d109      	bne.n	8003c3c <vTaskStartScheduler+0x9c>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e7fe      	b.n	8003c3a <vTaskStartScheduler+0x9a>
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	0800560c 	.word	0x0800560c
 8003c48:	08003fdd 	.word	0x08003fdd
 8003c4c:	20000820 	.word	0x20000820
 8003c50:	2000081c 	.word	0x2000081c
 8003c54:	20000808 	.word	0x20000808
 8003c58:	20000800 	.word	0x20000800

08003c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <vTaskSuspendAll+0x18>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <vTaskSuspendAll+0x18>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000824 	.word	0x20000824

08003c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <xTaskResumeAll+0x114>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <xTaskResumeAll+0x2a>
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	e7fe      	b.n	8003ca0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca2:	f000 fbc1 	bl	8004428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <xTaskResumeAll+0x114>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <xTaskResumeAll+0x114>)
 8003cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb0:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <xTaskResumeAll+0x114>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d161      	bne.n	8003d7c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <xTaskResumeAll+0x118>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05d      	beq.n	8003d7c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc0:	e02e      	b.n	8003d20 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <xTaskResumeAll+0x11c>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fd82 	bl	80037d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fd7d 	bl	80037d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <xTaskResumeAll+0x120>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <xTaskResumeAll+0x120>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <xTaskResumeAll+0x124>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7ff fd0b 	bl	8003722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <xTaskResumeAll+0x128>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <xTaskResumeAll+0x11c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1cc      	bne.n	8003cc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d2e:	f000 fa07 	bl	8004140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <xTaskResumeAll+0x130>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d3e:	f000 f837 	bl	8003db0 <xTaskIncrementTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f1      	bne.n	8003d3e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <xTaskResumeAll+0x130>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTaskResumeAll+0x134>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d7c:	f000 fb82 	bl	8004484 <vPortExitCritical>

	return xAlreadyYielded;
 8003d80:	68bb      	ldr	r3, [r7, #8]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000824 	.word	0x20000824
 8003d90:	200007fc 	.word	0x200007fc
 8003d94:	200007bc 	.word	0x200007bc
 8003d98:	20000804 	.word	0x20000804
 8003d9c:	20000700 	.word	0x20000700
 8003da0:	200006fc 	.word	0x200006fc
 8003da4:	20000810 	.word	0x20000810
 8003da8:	2000080c 	.word	0x2000080c
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <xTaskIncrementTick+0x14c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 808c 	bne.w	8003edc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <xTaskIncrementTick+0x150>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <xTaskIncrementTick+0x150>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11f      	bne.n	8003e18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <xTaskIncrementTick+0x154>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <xTaskIncrementTick+0x46>
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	e7fe      	b.n	8003df4 <xTaskIncrementTick+0x44>
 8003df6:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <xTaskIncrementTick+0x154>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <xTaskIncrementTick+0x158>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a40      	ldr	r2, [pc, #256]	; (8003f04 <xTaskIncrementTick+0x154>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <xTaskIncrementTick+0x158>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <xTaskIncrementTick+0x15c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	4a3e      	ldr	r2, [pc, #248]	; (8003f0c <xTaskIncrementTick+0x15c>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	f000 f994 	bl	8004140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <xTaskIncrementTick+0x160>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d34d      	bcc.n	8003ebe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e22:	4b38      	ldr	r3, [pc, #224]	; (8003f04 <xTaskIncrementTick+0x154>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <xTaskIncrementTick+0x80>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <xTaskIncrementTick+0x82>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <xTaskIncrementTick+0x160>)
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e3c:	601a      	str	r2, [r3, #0]
					break;
 8003e3e:	e03e      	b.n	8003ebe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e40:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <xTaskIncrementTick+0x154>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d203      	bcs.n	8003e60 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e58:	4a2d      	ldr	r2, [pc, #180]	; (8003f10 <xTaskIncrementTick+0x160>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
						break;
 8003e5e:	e02e      	b.n	8003ebe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fcb7 	bl	80037d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3318      	adds	r3, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fcae 	bl	80037d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <xTaskIncrementTick+0x164>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <xTaskIncrementTick+0x164>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <xTaskIncrementTick+0x168>)
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff fc3c 	bl	8003722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <xTaskIncrementTick+0x16c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3b4      	bcc.n	8003e22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebc:	e7b1      	b.n	8003e22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <xTaskIncrementTick+0x16c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	4914      	ldr	r1, [pc, #80]	; (8003f18 <xTaskIncrementTick+0x168>)
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d907      	bls.n	8003ee6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e004      	b.n	8003ee6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskIncrementTick+0x170>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <xTaskIncrementTick+0x170>)
 8003ee4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <xTaskIncrementTick+0x174>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ef2:	697b      	ldr	r3, [r7, #20]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000824 	.word	0x20000824
 8003f00:	20000800 	.word	0x20000800
 8003f04:	200007b4 	.word	0x200007b4
 8003f08:	200007b8 	.word	0x200007b8
 8003f0c:	20000814 	.word	0x20000814
 8003f10:	2000081c 	.word	0x2000081c
 8003f14:	20000804 	.word	0x20000804
 8003f18:	20000700 	.word	0x20000700
 8003f1c:	200006fc 	.word	0x200006fc
 8003f20:	2000080c 	.word	0x2000080c
 8003f24:	20000810 	.word	0x20000810

08003f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <vTaskSwitchContext+0xa0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f36:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <vTaskSwitchContext+0xa4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f3c:	e03e      	b.n	8003fbc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003f3e:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <vTaskSwitchContext+0xa4>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <vTaskSwitchContext+0xa8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	f1c3 031f 	rsb	r3, r3, #31
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	491e      	ldr	r1, [pc, #120]	; (8003fd4 <vTaskSwitchContext+0xac>)
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e7fe      	b.n	8003f80 <vTaskSwitchContext+0x58>
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <vTaskSwitchContext+0xac>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d104      	bne.n	8003fb2 <vTaskSwitchContext+0x8a>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <vTaskSwitchContext+0xb0>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000824 	.word	0x20000824
 8003fcc:	20000810 	.word	0x20000810
 8003fd0:	20000804 	.word	0x20000804
 8003fd4:	20000700 	.word	0x20000700
 8003fd8:	200006fc 	.word	0x200006fc

08003fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fe4:	f000 f852 	bl	800408c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <prvIdleTask+0x28>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d9f9      	bls.n	8003fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <prvIdleTask+0x2c>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004000:	e7f0      	b.n	8003fe4 <prvIdleTask+0x8>
 8004002:	bf00      	nop
 8004004:	20000700 	.word	0x20000700
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	e00c      	b.n	8004032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <prvInitialiseTaskLists+0x60>)
 8004024:	4413      	add	r3, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fb50 	bl	80036cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3301      	adds	r3, #1
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d9ef      	bls.n	8004018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004038:	480d      	ldr	r0, [pc, #52]	; (8004070 <prvInitialiseTaskLists+0x64>)
 800403a:	f7ff fb47 	bl	80036cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800403e:	480d      	ldr	r0, [pc, #52]	; (8004074 <prvInitialiseTaskLists+0x68>)
 8004040:	f7ff fb44 	bl	80036cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <prvInitialiseTaskLists+0x6c>)
 8004046:	f7ff fb41 	bl	80036cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800404a:	480c      	ldr	r0, [pc, #48]	; (800407c <prvInitialiseTaskLists+0x70>)
 800404c:	f7ff fb3e 	bl	80036cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004050:	480b      	ldr	r0, [pc, #44]	; (8004080 <prvInitialiseTaskLists+0x74>)
 8004052:	f7ff fb3b 	bl	80036cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <prvInitialiseTaskLists+0x78>)
 8004058:	4a05      	ldr	r2, [pc, #20]	; (8004070 <prvInitialiseTaskLists+0x64>)
 800405a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <prvInitialiseTaskLists+0x7c>)
 800405e:	4a05      	ldr	r2, [pc, #20]	; (8004074 <prvInitialiseTaskLists+0x68>)
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000700 	.word	0x20000700
 8004070:	2000078c 	.word	0x2000078c
 8004074:	200007a0 	.word	0x200007a0
 8004078:	200007bc 	.word	0x200007bc
 800407c:	200007d0 	.word	0x200007d0
 8004080:	200007e8 	.word	0x200007e8
 8004084:	200007b4 	.word	0x200007b4
 8004088:	200007b8 	.word	0x200007b8

0800408c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004092:	e019      	b.n	80040c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004094:	f000 f9c8 	bl	8004428 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <prvCheckTasksWaitingTermination+0x4c>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fb97 	bl	80037d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <prvCheckTasksWaitingTermination+0x50>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <prvCheckTasksWaitingTermination+0x50>)
 80040b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <prvCheckTasksWaitingTermination+0x54>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <prvCheckTasksWaitingTermination+0x54>)
 80040bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040be:	f000 f9e1 	bl	8004484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f80e 	bl	80040e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <prvCheckTasksWaitingTermination+0x54>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e1      	bne.n	8004094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200007d0 	.word	0x200007d0
 80040dc:	200007fc 	.word	0x200007fc
 80040e0:	200007e4 	.word	0x200007e4

080040e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d108      	bne.n	8004108 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb10 	bl	8004720 <vPortFree>
				vPortFree( pxTCB );
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb0d 	bl	8004720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004106:	e017      	b.n	8004138 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800410e:	2b01      	cmp	r3, #1
 8004110:	d103      	bne.n	800411a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fb04 	bl	8004720 <vPortFree>
	}
 8004118:	e00e      	b.n	8004138 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004120:	2b02      	cmp	r3, #2
 8004122:	d009      	beq.n	8004138 <prvDeleteTCB+0x54>
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e7fe      	b.n	8004136 <prvDeleteTCB+0x52>
	}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <prvResetNextTaskUnblockTime+0x40>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <prvResetNextTaskUnblockTime+0x14>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <prvResetNextTaskUnblockTime+0x16>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvResetNextTaskUnblockTime+0x44>)
 800415c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004160:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004162:	e008      	b.n	8004176 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <prvResetNextTaskUnblockTime+0x40>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <prvResetNextTaskUnblockTime+0x44>)
 8004174:	6013      	str	r3, [r2, #0]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	200007b4 	.word	0x200007b4
 8004184:	2000081c 	.word	0x2000081c

08004188 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004198:	4b28      	ldr	r3, [pc, #160]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fb1a 	bl	80037d8 <uxListRemove>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2201      	movs	r2, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4013      	ands	r3, r2
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c8:	d10a      	bne.n	80041e0 <prvAddCurrentTaskToDelayedList+0x58>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d0:	4b1a      	ldr	r3, [pc, #104]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	481a      	ldr	r0, [pc, #104]	; (8004244 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041da:	f7ff faa2 	bl	8003722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041de:	e026      	b.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d209      	bcs.n	800420c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7ff faaf 	bl	8003768 <vListInsert>
}
 800420a:	e010      	b.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <prvAddCurrentTaskToDelayedList+0xc4>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7ff faa5 	bl	8003768 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d202      	bcs.n	800422e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000800 	.word	0x20000800
 800423c:	200006fc 	.word	0x200006fc
 8004240:	20000804 	.word	0x20000804
 8004244:	200007e8 	.word	0x200007e8
 8004248:	200007b8 	.word	0x200007b8
 800424c:	200007b4 	.word	0x200007b4
 8004250:	2000081c 	.word	0x2000081c

08004254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b04      	subs	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <pxPortInitialiseStack+0x54>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b14      	subs	r3, #20
 800428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b20      	subs	r3, #32
 800429a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	080042ad 	.word	0x080042ad

080042ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <prvTaskExitError+0x4c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042be:	d009      	beq.n	80042d4 <prvTaskExitError+0x28>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e7fe      	b.n	80042d2 <prvTaskExitError+0x26>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042e6:	bf00      	nop
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0fc      	beq.n	80042e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	20000010 	.word	0x20000010
 80042fc:	00000000 	.word	0x00000000

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	f04e 0e0d 	orr.w	lr, lr, #13
 800431e:	4770      	bx	lr

08004320 <pxCurrentTCBConst2>:
 8004320:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <prvPortStartFirstTask+0x1c>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	b662      	cpsie	i
 8004334:	b661      	cpsie	f
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	df00      	svc	0
 8004340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004342:	bf00      	nop
 8004344:	e000ed08 	.word	0xe000ed08

08004348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <xPortStartScheduler+0xcc>)
 8004350:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <xPortStartScheduler+0xd0>)
 8004374:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <xPortStartScheduler+0xd4>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437c:	e009      	b.n	8004392 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800437e:	4b27      	ldr	r3, [pc, #156]	; (800441c <xPortStartScheduler+0xd4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3b01      	subs	r3, #1
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <xPortStartScheduler+0xd4>)
 8004386:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d0ef      	beq.n	800437e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439e:	4b1f      	ldr	r3, [pc, #124]	; (800441c <xPortStartScheduler+0xd4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d009      	beq.n	80043be <xPortStartScheduler+0x76>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	e7fe      	b.n	80043bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <xPortStartScheduler+0xd4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <xPortStartScheduler+0xd4>)
 80043c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <xPortStartScheduler+0xd4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d0:	4a12      	ldr	r2, [pc, #72]	; (800441c <xPortStartScheduler+0xd4>)
 80043d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <xPortStartScheduler+0xd8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <xPortStartScheduler+0xd8>)
 80043e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <xPortStartScheduler+0xd8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <xPortStartScheduler+0xd8>)
 80043ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043f4:	f000 f8b0 	bl	8004558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <xPortStartScheduler+0xdc>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043fe:	f7ff ff93 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004402:	f7ff fd91 	bl	8003f28 <vTaskSwitchContext>
	prvTaskExitError();
 8004406:	f7ff ff51 	bl	80042ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	e000e400 	.word	0xe000e400
 8004418:	20000828 	.word	0x20000828
 800441c:	2000082c 	.word	0x2000082c
 8004420:	e000ed20 	.word	0xe000ed20
 8004424:	20000010 	.word	0x20000010

08004428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <vPortEnterCritical+0x54>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	4a0d      	ldr	r2, [pc, #52]	; (800447c <vPortEnterCritical+0x54>)
 8004448:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <vPortEnterCritical+0x54>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10e      	bne.n	8004470 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <vPortEnterCritical+0x58>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <vPortEnterCritical+0x48>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	e7fe      	b.n	800446e <vPortEnterCritical+0x46>
	}
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000010 	.word	0x20000010
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <vPortExitCritical+0x48>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <vPortExitCritical+0x22>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	e7fe      	b.n	80044a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <vPortExitCritical+0x48>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4a07      	ldr	r2, [pc, #28]	; (80044cc <vPortExitCritical+0x48>)
 80044ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <vPortExitCritical+0x48>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <vPortExitCritical+0x3e>
 80044b8:	2300      	movs	r3, #0
 80044ba:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000010 	.word	0x20000010

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e0:	6010      	str	r0, [r2, #0]
 80044e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ea:	f380 8811 	msr	BASEPRI, r0
 80044ee:	f7ff fd1b 	bl	8003f28 <vTaskSwitchContext>
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8811 	msr	BASEPRI, r0
 80044fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004506:	f380 8809 	msr	PSP, r0
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	4770      	bx	lr

08004510 <pxCurrentTCBConst>:
 8004510:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004530:	f7ff fc3e 	bl	8003db0 <xTaskIncrementTick>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <SysTick_Handler+0x3c>)
 800453c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x30>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <vPortSetupTimerInterrupt+0x34>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <vPortSetupTimerInterrupt+0x38>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a09      	ldr	r2, [pc, #36]	; (8004594 <vPortSetupTimerInterrupt+0x3c>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	4a08      	ldr	r2, [pc, #32]	; (8004598 <vPortSetupTimerInterrupt+0x40>)
 8004576:	3b01      	subs	r3, #1
 8004578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457a:	4b03      	ldr	r3, [pc, #12]	; (8004588 <vPortSetupTimerInterrupt+0x30>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	e000e010 	.word	0xe000e010
 800458c:	e000e018 	.word	0xe000e018
 8004590:	20000004 	.word	0x20000004
 8004594:	10624dd3 	.word	0x10624dd3
 8004598:	e000e014 	.word	0xe000e014

0800459c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045a8:	f7ff fb58 	bl	8003c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045ac:	4b57      	ldr	r3, [pc, #348]	; (800470c <pvPortMalloc+0x170>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045b4:	f000 f90c 	bl	80047d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b8:	4b55      	ldr	r3, [pc, #340]	; (8004710 <pvPortMalloc+0x174>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 808c 	bne.w	80046de <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01c      	beq.n	8004606 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80045cc:	2208      	movs	r2, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d013      	beq.n	8004606 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f023 0307 	bic.w	r3, r3, #7
 80045e4:	3308      	adds	r3, #8
 80045e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <pvPortMalloc+0x6a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e7fe      	b.n	8004604 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d068      	beq.n	80046de <pvPortMalloc+0x142>
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <pvPortMalloc+0x178>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d863      	bhi.n	80046de <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004616:	4b40      	ldr	r3, [pc, #256]	; (8004718 <pvPortMalloc+0x17c>)
 8004618:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <pvPortMalloc+0x17c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004620:	e004      	b.n	800462c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d903      	bls.n	800463e <pvPortMalloc+0xa2>
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f1      	bne.n	8004622 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <pvPortMalloc+0x170>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	429a      	cmp	r2, r3
 8004646:	d04a      	beq.n	80046de <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2208      	movs	r2, #8
 800464e:	4413      	add	r3, r2
 8004650:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	2308      	movs	r3, #8
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	429a      	cmp	r2, r3
 8004668:	d91e      	bls.n	80046a8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <pvPortMalloc+0xf4>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e7fe      	b.n	800468e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046a2:	69b8      	ldr	r0, [r7, #24]
 80046a4:	f000 f8f6 	bl	8004894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <pvPortMalloc+0x178>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <pvPortMalloc+0x178>)
 80046b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <pvPortMalloc+0x178>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <pvPortMalloc+0x180>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d203      	bcs.n	80046ca <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <pvPortMalloc+0x178>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <pvPortMalloc+0x180>)
 80046c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <pvPortMalloc+0x174>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046de:	f7ff facb 	bl	8003c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <pvPortMalloc+0x164>
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e7fe      	b.n	80046fe <pvPortMalloc+0x162>
	return pvReturn;
 8004700:	69fb      	ldr	r3, [r7, #28]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3728      	adds	r7, #40	; 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20001838 	.word	0x20001838
 8004710:	20001844 	.word	0x20001844
 8004714:	2000183c 	.word	0x2000183c
 8004718:	20001830 	.word	0x20001830
 800471c:	20001840 	.word	0x20001840

08004720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d046      	beq.n	80047c0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004732:	2308      	movs	r3, #8
 8004734:	425b      	negs	r3, r3
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <vPortFree+0xa8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <vPortFree+0x42>
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e7fe      	b.n	8004760 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <vPortFree+0x5e>
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	e7fe      	b.n	800477c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <vPortFree+0xa8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <vPortFree+0xa8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047a4:	f7ff fa5a 	bl	8003c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <vPortFree+0xac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a06      	ldr	r2, [pc, #24]	; (80047cc <vPortFree+0xac>)
 80047b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f000 f86c 	bl	8004894 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047bc:	f7ff fa5c 	bl	8003c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047c0:	bf00      	nop
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20001844 	.word	0x20001844
 80047cc:	2000183c 	.word	0x2000183c

080047d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <prvHeapInit+0xac>)
 80047de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3307      	adds	r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <prvHeapInit+0xac>)
 8004800:	4413      	add	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <prvHeapInit+0xb0>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <prvHeapInit+0xb0>)
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4413      	add	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800481c:	2208      	movs	r2, #8
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <prvHeapInit+0xb4>)
 8004830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <prvHeapInit+0xb4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <prvHeapInit+0xb4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <prvHeapInit+0xb4>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <prvHeapInit+0xb8>)
 800485e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a09      	ldr	r2, [pc, #36]	; (800488c <prvHeapInit+0xbc>)
 8004866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <prvHeapInit+0xc0>)
 800486a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000830 	.word	0x20000830
 8004880:	20001830 	.word	0x20001830
 8004884:	20001838 	.word	0x20001838
 8004888:	20001840 	.word	0x20001840
 800488c:	2000183c 	.word	0x2000183c
 8004890:	20001844 	.word	0x20001844

08004894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <prvInsertBlockIntoFreeList+0xa8>)
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e002      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x14>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d8f7      	bhi.n	80048a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d108      	bne.n	80048d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	441a      	add	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d118      	bne.n	800491c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <prvInsertBlockIntoFreeList+0xac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d00d      	beq.n	8004912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e008      	b.n	8004924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <prvInsertBlockIntoFreeList+0xac>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e003      	b.n	8004924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d002      	beq.n	8004932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	20001830 	.word	0x20001830
 8004940:	20001838 	.word	0x20001838

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000014 	.word	0x20000014

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	2500      	movs	r5, #0
 8004954:	4e0c      	ldr	r6, [pc, #48]	; (8004988 <__libc_init_array+0x38>)
 8004956:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004958:	1ba4      	subs	r4, r4, r6
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	42a5      	cmp	r5, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	f000 fcc2 	bl	80052e8 <_init>
 8004964:	2500      	movs	r5, #0
 8004966:	4e0a      	ldr	r6, [pc, #40]	; (8004990 <__libc_init_array+0x40>)
 8004968:	4c0a      	ldr	r4, [pc, #40]	; (8004994 <__libc_init_array+0x44>)
 800496a:	1ba4      	subs	r4, r4, r6
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	42a5      	cmp	r5, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004978:	4798      	blx	r3
 800497a:	3501      	adds	r5, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004982:	4798      	blx	r3
 8004984:	3501      	adds	r5, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08005660 	.word	0x08005660
 800498c:	08005660 	.word	0x08005660
 8004990:	08005660 	.word	0x08005660
 8004994:	08005664 	.word	0x08005664

08004998 <memcpy>:
 8004998:	b510      	push	{r4, lr}
 800499a:	1e43      	subs	r3, r0, #1
 800499c:	440a      	add	r2, r1
 800499e:	4291      	cmp	r1, r2
 80049a0:	d100      	bne.n	80049a4 <memcpy+0xc>
 80049a2:	bd10      	pop	{r4, pc}
 80049a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ac:	e7f7      	b.n	800499e <memcpy+0x6>

080049ae <memset>:
 80049ae:	4603      	mov	r3, r0
 80049b0:	4402      	add	r2, r0
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d100      	bne.n	80049b8 <memset+0xa>
 80049b6:	4770      	bx	lr
 80049b8:	f803 1b01 	strb.w	r1, [r3], #1
 80049bc:	e7f9      	b.n	80049b2 <memset+0x4>
	...

080049c0 <siprintf>:
 80049c0:	b40e      	push	{r1, r2, r3}
 80049c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c6:	b500      	push	{lr}
 80049c8:	b09c      	sub	sp, #112	; 0x70
 80049ca:	ab1d      	add	r3, sp, #116	; 0x74
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	9107      	str	r1, [sp, #28]
 80049d2:	9104      	str	r1, [sp, #16]
 80049d4:	4808      	ldr	r0, [pc, #32]	; (80049f8 <siprintf+0x38>)
 80049d6:	4909      	ldr	r1, [pc, #36]	; (80049fc <siprintf+0x3c>)
 80049d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049dc:	9105      	str	r1, [sp, #20]
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	a902      	add	r1, sp, #8
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f000 f998 	bl	8004d18 <_svfiprintf_r>
 80049e8:	2200      	movs	r2, #0
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	b01c      	add	sp, #112	; 0x70
 80049f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f4:	b003      	add	sp, #12
 80049f6:	4770      	bx	lr
 80049f8:	20000014 	.word	0x20000014
 80049fc:	ffff0208 	.word	0xffff0208

08004a00 <strchr>:
 8004a00:	b2c9      	uxtb	r1, r1
 8004a02:	4603      	mov	r3, r0
 8004a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a08:	b11a      	cbz	r2, 8004a12 <strchr+0x12>
 8004a0a:	428a      	cmp	r2, r1
 8004a0c:	d1f9      	bne.n	8004a02 <strchr+0x2>
 8004a0e:	4618      	mov	r0, r3
 8004a10:	4770      	bx	lr
 8004a12:	2900      	cmp	r1, #0
 8004a14:	bf18      	it	ne
 8004a16:	2300      	movne	r3, #0
 8004a18:	e7f9      	b.n	8004a0e <strchr+0xe>

08004a1a <strcpy>:
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a20:	f803 2b01 	strb.w	r2, [r3], #1
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	d1f9      	bne.n	8004a1c <strcpy+0x2>
 8004a28:	4770      	bx	lr

08004a2a <strstr>:
 8004a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2c:	7803      	ldrb	r3, [r0, #0]
 8004a2e:	b17b      	cbz	r3, 8004a50 <strstr+0x26>
 8004a30:	4604      	mov	r4, r0
 8004a32:	7823      	ldrb	r3, [r4, #0]
 8004a34:	4620      	mov	r0, r4
 8004a36:	1c66      	adds	r6, r4, #1
 8004a38:	b17b      	cbz	r3, 8004a5a <strstr+0x30>
 8004a3a:	1e4a      	subs	r2, r1, #1
 8004a3c:	1e63      	subs	r3, r4, #1
 8004a3e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004a42:	b14d      	cbz	r5, 8004a58 <strstr+0x2e>
 8004a44:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a48:	4634      	mov	r4, r6
 8004a4a:	42af      	cmp	r7, r5
 8004a4c:	d0f7      	beq.n	8004a3e <strstr+0x14>
 8004a4e:	e7f0      	b.n	8004a32 <strstr+0x8>
 8004a50:	780b      	ldrb	r3, [r1, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf18      	it	ne
 8004a56:	2000      	movne	r0, #0
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	e7fc      	b.n	8004a58 <strstr+0x2e>
	...

08004a60 <strtok>:
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <strtok+0x50>)
 8004a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a66:	681d      	ldr	r5, [r3, #0]
 8004a68:	4606      	mov	r6, r0
 8004a6a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	b9b4      	cbnz	r4, 8004a9e <strtok+0x3e>
 8004a70:	2050      	movs	r0, #80	; 0x50
 8004a72:	f000 f849 	bl	8004b08 <malloc>
 8004a76:	65a8      	str	r0, [r5, #88]	; 0x58
 8004a78:	e9c0 4400 	strd	r4, r4, [r0]
 8004a7c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004a80:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004a84:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004a88:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004a8c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004a90:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004a94:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004a98:	6184      	str	r4, [r0, #24]
 8004a9a:	7704      	strb	r4, [r0, #28]
 8004a9c:	6244      	str	r4, [r0, #36]	; 0x24
 8004a9e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f000 b803 	b.w	8004ab4 <__strtok_r>
 8004aae:	bf00      	nop
 8004ab0:	20000014 	.word	0x20000014

08004ab4 <__strtok_r>:
 8004ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab6:	b918      	cbnz	r0, 8004ac0 <__strtok_r+0xc>
 8004ab8:	6810      	ldr	r0, [r2, #0]
 8004aba:	b908      	cbnz	r0, 8004ac0 <__strtok_r+0xc>
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ac8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004acc:	b91e      	cbnz	r6, 8004ad6 <__strtok_r+0x22>
 8004ace:	b96d      	cbnz	r5, 8004aec <__strtok_r+0x38>
 8004ad0:	6015      	str	r5, [r2, #0]
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	e7f2      	b.n	8004abc <__strtok_r+0x8>
 8004ad6:	42b5      	cmp	r5, r6
 8004ad8:	d1f6      	bne.n	8004ac8 <__strtok_r+0x14>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ef      	bne.n	8004abe <__strtok_r+0xa>
 8004ade:	6014      	str	r4, [r2, #0]
 8004ae0:	7003      	strb	r3, [r0, #0]
 8004ae2:	e7eb      	b.n	8004abc <__strtok_r+0x8>
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	e00d      	b.n	8004b04 <__strtok_r+0x50>
 8004ae8:	b926      	cbnz	r6, 8004af4 <__strtok_r+0x40>
 8004aea:	461c      	mov	r4, r3
 8004aec:	4623      	mov	r3, r4
 8004aee:	460f      	mov	r7, r1
 8004af0:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004af4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004af8:	42b5      	cmp	r5, r6
 8004afa:	d1f5      	bne.n	8004ae8 <__strtok_r+0x34>
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d0f1      	beq.n	8004ae4 <__strtok_r+0x30>
 8004b00:	2100      	movs	r1, #0
 8004b02:	7021      	strb	r1, [r4, #0]
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e7d9      	b.n	8004abc <__strtok_r+0x8>

08004b08 <malloc>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <malloc+0xc>)
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f000 b84f 	b.w	8004bb0 <_malloc_r>
 8004b12:	bf00      	nop
 8004b14:	20000014 	.word	0x20000014

08004b18 <_free_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d043      	beq.n	8004ba8 <_free_r+0x90>
 8004b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b24:	1f0c      	subs	r4, r1, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bfb8      	it	lt
 8004b2a:	18e4      	addlt	r4, r4, r3
 8004b2c:	f000 fbab 	bl	8005286 <__malloc_lock>
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <_free_r+0x94>)
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	4610      	mov	r0, r2
 8004b36:	b933      	cbnz	r3, 8004b46 <_free_r+0x2e>
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	6014      	str	r4, [r2, #0]
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b42:	f000 bba1 	b.w	8005288 <__malloc_unlock>
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	d90b      	bls.n	8004b62 <_free_r+0x4a>
 8004b4a:	6821      	ldr	r1, [r4, #0]
 8004b4c:	1862      	adds	r2, r4, r1
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bf01      	itttt	eq
 8004b52:	681a      	ldreq	r2, [r3, #0]
 8004b54:	685b      	ldreq	r3, [r3, #4]
 8004b56:	1852      	addeq	r2, r2, r1
 8004b58:	6022      	streq	r2, [r4, #0]
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6004      	str	r4, [r0, #0]
 8004b5e:	e7ed      	b.n	8004b3c <_free_r+0x24>
 8004b60:	4613      	mov	r3, r2
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	b10a      	cbz	r2, 8004b6a <_free_r+0x52>
 8004b66:	42a2      	cmp	r2, r4
 8004b68:	d9fa      	bls.n	8004b60 <_free_r+0x48>
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	1858      	adds	r0, r3, r1
 8004b6e:	42a0      	cmp	r0, r4
 8004b70:	d10b      	bne.n	8004b8a <_free_r+0x72>
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	4401      	add	r1, r0
 8004b76:	1858      	adds	r0, r3, r1
 8004b78:	4282      	cmp	r2, r0
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	d1de      	bne.n	8004b3c <_free_r+0x24>
 8004b7e:	6810      	ldr	r0, [r2, #0]
 8004b80:	6852      	ldr	r2, [r2, #4]
 8004b82:	4401      	add	r1, r0
 8004b84:	6019      	str	r1, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	e7d8      	b.n	8004b3c <_free_r+0x24>
 8004b8a:	d902      	bls.n	8004b92 <_free_r+0x7a>
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	e7d4      	b.n	8004b3c <_free_r+0x24>
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1821      	adds	r1, r4, r0
 8004b96:	428a      	cmp	r2, r1
 8004b98:	bf01      	itttt	eq
 8004b9a:	6811      	ldreq	r1, [r2, #0]
 8004b9c:	6852      	ldreq	r2, [r2, #4]
 8004b9e:	1809      	addeq	r1, r1, r0
 8004ba0:	6021      	streq	r1, [r4, #0]
 8004ba2:	6062      	str	r2, [r4, #4]
 8004ba4:	605c      	str	r4, [r3, #4]
 8004ba6:	e7c9      	b.n	8004b3c <_free_r+0x24>
 8004ba8:	bd38      	pop	{r3, r4, r5, pc}
 8004baa:	bf00      	nop
 8004bac:	20001848 	.word	0x20001848

08004bb0 <_malloc_r>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	1ccd      	adds	r5, r1, #3
 8004bb4:	f025 0503 	bic.w	r5, r5, #3
 8004bb8:	3508      	adds	r5, #8
 8004bba:	2d0c      	cmp	r5, #12
 8004bbc:	bf38      	it	cc
 8004bbe:	250c      	movcc	r5, #12
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	db01      	blt.n	8004bca <_malloc_r+0x1a>
 8004bc6:	42a9      	cmp	r1, r5
 8004bc8:	d903      	bls.n	8004bd2 <_malloc_r+0x22>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	2000      	movs	r0, #0
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	f000 fb58 	bl	8005286 <__malloc_lock>
 8004bd6:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <_malloc_r+0xac>)
 8004bd8:	6814      	ldr	r4, [r2, #0]
 8004bda:	4621      	mov	r1, r4
 8004bdc:	b991      	cbnz	r1, 8004c04 <_malloc_r+0x54>
 8004bde:	4c20      	ldr	r4, [pc, #128]	; (8004c60 <_malloc_r+0xb0>)
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	b91b      	cbnz	r3, 8004bec <_malloc_r+0x3c>
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 fb17 	bl	8005218 <_sbrk_r>
 8004bea:	6020      	str	r0, [r4, #0]
 8004bec:	4629      	mov	r1, r5
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 fb12 	bl	8005218 <_sbrk_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d124      	bne.n	8004c42 <_malloc_r+0x92>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	f000 fb43 	bl	8005288 <__malloc_unlock>
 8004c02:	e7e4      	b.n	8004bce <_malloc_r+0x1e>
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	1b5b      	subs	r3, r3, r5
 8004c08:	d418      	bmi.n	8004c3c <_malloc_r+0x8c>
 8004c0a:	2b0b      	cmp	r3, #11
 8004c0c:	d90f      	bls.n	8004c2e <_malloc_r+0x7e>
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	18cc      	adds	r4, r1, r3
 8004c12:	50cd      	str	r5, [r1, r3]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 fb37 	bl	8005288 <__malloc_unlock>
 8004c1a:	f104 000b 	add.w	r0, r4, #11
 8004c1e:	1d23      	adds	r3, r4, #4
 8004c20:	f020 0007 	bic.w	r0, r0, #7
 8004c24:	1ac3      	subs	r3, r0, r3
 8004c26:	d0d3      	beq.n	8004bd0 <_malloc_r+0x20>
 8004c28:	425a      	negs	r2, r3
 8004c2a:	50e2      	str	r2, [r4, r3]
 8004c2c:	e7d0      	b.n	8004bd0 <_malloc_r+0x20>
 8004c2e:	684b      	ldr	r3, [r1, #4]
 8004c30:	428c      	cmp	r4, r1
 8004c32:	bf16      	itet	ne
 8004c34:	6063      	strne	r3, [r4, #4]
 8004c36:	6013      	streq	r3, [r2, #0]
 8004c38:	460c      	movne	r4, r1
 8004c3a:	e7eb      	b.n	8004c14 <_malloc_r+0x64>
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	6849      	ldr	r1, [r1, #4]
 8004c40:	e7cc      	b.n	8004bdc <_malloc_r+0x2c>
 8004c42:	1cc4      	adds	r4, r0, #3
 8004c44:	f024 0403 	bic.w	r4, r4, #3
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d005      	beq.n	8004c58 <_malloc_r+0xa8>
 8004c4c:	1a21      	subs	r1, r4, r0
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 fae2 	bl	8005218 <_sbrk_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0cf      	beq.n	8004bf8 <_malloc_r+0x48>
 8004c58:	6025      	str	r5, [r4, #0]
 8004c5a:	e7db      	b.n	8004c14 <_malloc_r+0x64>
 8004c5c:	20001848 	.word	0x20001848
 8004c60:	2000184c 	.word	0x2000184c

08004c64 <__ssputs_r>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	688e      	ldr	r6, [r1, #8]
 8004c6a:	4682      	mov	sl, r0
 8004c6c:	429e      	cmp	r6, r3
 8004c6e:	460c      	mov	r4, r1
 8004c70:	4690      	mov	r8, r2
 8004c72:	4699      	mov	r9, r3
 8004c74:	d837      	bhi.n	8004ce6 <__ssputs_r+0x82>
 8004c76:	898a      	ldrh	r2, [r1, #12]
 8004c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c7c:	d031      	beq.n	8004ce2 <__ssputs_r+0x7e>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	6909      	ldr	r1, [r1, #16]
 8004c84:	1a6f      	subs	r7, r5, r1
 8004c86:	6965      	ldr	r5, [r4, #20]
 8004c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c90:	f109 0301 	add.w	r3, r9, #1
 8004c94:	443b      	add	r3, r7
 8004c96:	429d      	cmp	r5, r3
 8004c98:	bf38      	it	cc
 8004c9a:	461d      	movcc	r5, r3
 8004c9c:	0553      	lsls	r3, r2, #21
 8004c9e:	d530      	bpl.n	8004d02 <__ssputs_r+0x9e>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7ff ff85 	bl	8004bb0 <_malloc_r>
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	b950      	cbnz	r0, 8004cc0 <__ssputs_r+0x5c>
 8004caa:	230c      	movs	r3, #12
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb0:	f8ca 3000 	str.w	r3, [sl]
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	463a      	mov	r2, r7
 8004cc2:	6921      	ldr	r1, [r4, #16]
 8004cc4:	f7ff fe68 	bl	8004998 <memcpy>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	6126      	str	r6, [r4, #16]
 8004cd6:	443e      	add	r6, r7
 8004cd8:	6026      	str	r6, [r4, #0]
 8004cda:	464e      	mov	r6, r9
 8004cdc:	6165      	str	r5, [r4, #20]
 8004cde:	1bed      	subs	r5, r5, r7
 8004ce0:	60a5      	str	r5, [r4, #8]
 8004ce2:	454e      	cmp	r6, r9
 8004ce4:	d900      	bls.n	8004ce8 <__ssputs_r+0x84>
 8004ce6:	464e      	mov	r6, r9
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4641      	mov	r1, r8
 8004cec:	6820      	ldr	r0, [r4, #0]
 8004cee:	f000 fab1 	bl	8005254 <memmove>
 8004cf2:	68a3      	ldr	r3, [r4, #8]
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	1b9b      	subs	r3, r3, r6
 8004cf8:	60a3      	str	r3, [r4, #8]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	441e      	add	r6, r3
 8004cfe:	6026      	str	r6, [r4, #0]
 8004d00:	e7dc      	b.n	8004cbc <__ssputs_r+0x58>
 8004d02:	462a      	mov	r2, r5
 8004d04:	f000 fac1 	bl	800528a <_realloc_r>
 8004d08:	4606      	mov	r6, r0
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d1e2      	bne.n	8004cd4 <__ssputs_r+0x70>
 8004d0e:	6921      	ldr	r1, [r4, #16]
 8004d10:	4650      	mov	r0, sl
 8004d12:	f7ff ff01 	bl	8004b18 <_free_r>
 8004d16:	e7c8      	b.n	8004caa <__ssputs_r+0x46>

08004d18 <_svfiprintf_r>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	898b      	ldrh	r3, [r1, #12]
 8004d20:	b09d      	sub	sp, #116	; 0x74
 8004d22:	061f      	lsls	r7, r3, #24
 8004d24:	4680      	mov	r8, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4616      	mov	r6, r2
 8004d2a:	d50f      	bpl.n	8004d4c <_svfiprintf_r+0x34>
 8004d2c:	690b      	ldr	r3, [r1, #16]
 8004d2e:	b96b      	cbnz	r3, 8004d4c <_svfiprintf_r+0x34>
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	f7ff ff3d 	bl	8004bb0 <_malloc_r>
 8004d36:	6020      	str	r0, [r4, #0]
 8004d38:	6120      	str	r0, [r4, #16]
 8004d3a:	b928      	cbnz	r0, 8004d48 <_svfiprintf_r+0x30>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	f8c8 3000 	str.w	r3, [r8]
 8004d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d46:	e0c8      	b.n	8004eda <_svfiprintf_r+0x1c2>
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	6163      	str	r3, [r4, #20]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d50:	2320      	movs	r3, #32
 8004d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d56:	2330      	movs	r3, #48	; 0x30
 8004d58:	f04f 0b01 	mov.w	fp, #1
 8004d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d60:	9503      	str	r5, [sp, #12]
 8004d62:	4637      	mov	r7, r6
 8004d64:	463d      	mov	r5, r7
 8004d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d6a:	b10b      	cbz	r3, 8004d70 <_svfiprintf_r+0x58>
 8004d6c:	2b25      	cmp	r3, #37	; 0x25
 8004d6e:	d13e      	bne.n	8004dee <_svfiprintf_r+0xd6>
 8004d70:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d74:	d00b      	beq.n	8004d8e <_svfiprintf_r+0x76>
 8004d76:	4653      	mov	r3, sl
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	f7ff ff71 	bl	8004c64 <__ssputs_r>
 8004d82:	3001      	adds	r0, #1
 8004d84:	f000 80a4 	beq.w	8004ed0 <_svfiprintf_r+0x1b8>
 8004d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8a:	4453      	add	r3, sl
 8004d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8e:	783b      	ldrb	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 809d 	beq.w	8004ed0 <_svfiprintf_r+0x1b8>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da8:	931a      	str	r3, [sp, #104]	; 0x68
 8004daa:	462f      	mov	r7, r5
 8004dac:	2205      	movs	r2, #5
 8004dae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004db2:	4850      	ldr	r0, [pc, #320]	; (8004ef4 <_svfiprintf_r+0x1dc>)
 8004db4:	f000 fa40 	bl	8005238 <memchr>
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	b9d0      	cbnz	r0, 8004df2 <_svfiprintf_r+0xda>
 8004dbc:	06d9      	lsls	r1, r3, #27
 8004dbe:	bf44      	itt	mi
 8004dc0:	2220      	movmi	r2, #32
 8004dc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dc6:	071a      	lsls	r2, r3, #28
 8004dc8:	bf44      	itt	mi
 8004dca:	222b      	movmi	r2, #43	; 0x2b
 8004dcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dd0:	782a      	ldrb	r2, [r5, #0]
 8004dd2:	2a2a      	cmp	r2, #42	; 0x2a
 8004dd4:	d015      	beq.n	8004e02 <_svfiprintf_r+0xea>
 8004dd6:	462f      	mov	r7, r5
 8004dd8:	2000      	movs	r0, #0
 8004dda:	250a      	movs	r5, #10
 8004ddc:	9a07      	ldr	r2, [sp, #28]
 8004dde:	4639      	mov	r1, r7
 8004de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de4:	3b30      	subs	r3, #48	; 0x30
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d94d      	bls.n	8004e86 <_svfiprintf_r+0x16e>
 8004dea:	b1b8      	cbz	r0, 8004e1c <_svfiprintf_r+0x104>
 8004dec:	e00f      	b.n	8004e0e <_svfiprintf_r+0xf6>
 8004dee:	462f      	mov	r7, r5
 8004df0:	e7b8      	b.n	8004d64 <_svfiprintf_r+0x4c>
 8004df2:	4a40      	ldr	r2, [pc, #256]	; (8004ef4 <_svfiprintf_r+0x1dc>)
 8004df4:	463d      	mov	r5, r7
 8004df6:	1a80      	subs	r0, r0, r2
 8004df8:	fa0b f000 	lsl.w	r0, fp, r0
 8004dfc:	4318      	orrs	r0, r3
 8004dfe:	9004      	str	r0, [sp, #16]
 8004e00:	e7d3      	b.n	8004daa <_svfiprintf_r+0x92>
 8004e02:	9a03      	ldr	r2, [sp, #12]
 8004e04:	1d11      	adds	r1, r2, #4
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	9103      	str	r1, [sp, #12]
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	db01      	blt.n	8004e12 <_svfiprintf_r+0xfa>
 8004e0e:	9207      	str	r2, [sp, #28]
 8004e10:	e004      	b.n	8004e1c <_svfiprintf_r+0x104>
 8004e12:	4252      	negs	r2, r2
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	9207      	str	r2, [sp, #28]
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	783b      	ldrb	r3, [r7, #0]
 8004e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e20:	d10c      	bne.n	8004e3c <_svfiprintf_r+0x124>
 8004e22:	787b      	ldrb	r3, [r7, #1]
 8004e24:	2b2a      	cmp	r3, #42	; 0x2a
 8004e26:	d133      	bne.n	8004e90 <_svfiprintf_r+0x178>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	3702      	adds	r7, #2
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	9203      	str	r2, [sp, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bfb8      	it	lt
 8004e36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e3a:	9305      	str	r3, [sp, #20]
 8004e3c:	4d2e      	ldr	r5, [pc, #184]	; (8004ef8 <_svfiprintf_r+0x1e0>)
 8004e3e:	2203      	movs	r2, #3
 8004e40:	7839      	ldrb	r1, [r7, #0]
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f9f8 	bl	8005238 <memchr>
 8004e48:	b138      	cbz	r0, 8004e5a <_svfiprintf_r+0x142>
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	1b40      	subs	r0, r0, r5
 8004e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	3701      	adds	r7, #1
 8004e56:	4303      	orrs	r3, r0
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	7839      	ldrb	r1, [r7, #0]
 8004e5c:	2206      	movs	r2, #6
 8004e5e:	4827      	ldr	r0, [pc, #156]	; (8004efc <_svfiprintf_r+0x1e4>)
 8004e60:	1c7e      	adds	r6, r7, #1
 8004e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e66:	f000 f9e7 	bl	8005238 <memchr>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d038      	beq.n	8004ee0 <_svfiprintf_r+0x1c8>
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <_svfiprintf_r+0x1e8>)
 8004e70:	bb13      	cbnz	r3, 8004eb8 <_svfiprintf_r+0x1a0>
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	3307      	adds	r3, #7
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	444b      	add	r3, r9
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
 8004e84:	e76d      	b.n	8004d62 <_svfiprintf_r+0x4a>
 8004e86:	fb05 3202 	mla	r2, r5, r2, r3
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	e7a6      	b.n	8004dde <_svfiprintf_r+0xc6>
 8004e90:	2300      	movs	r3, #0
 8004e92:	250a      	movs	r5, #10
 8004e94:	4619      	mov	r1, r3
 8004e96:	3701      	adds	r7, #1
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea0:	3a30      	subs	r2, #48	; 0x30
 8004ea2:	2a09      	cmp	r2, #9
 8004ea4:	d903      	bls.n	8004eae <_svfiprintf_r+0x196>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0c8      	beq.n	8004e3c <_svfiprintf_r+0x124>
 8004eaa:	9105      	str	r1, [sp, #20]
 8004eac:	e7c6      	b.n	8004e3c <_svfiprintf_r+0x124>
 8004eae:	fb05 2101 	mla	r1, r5, r1, r2
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	e7f0      	b.n	8004e9a <_svfiprintf_r+0x182>
 8004eb8:	ab03      	add	r3, sp, #12
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <_svfiprintf_r+0x1ec>)
 8004ec0:	a904      	add	r1, sp, #16
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ecc:	4681      	mov	r9, r0
 8004ece:	d1d6      	bne.n	8004e7e <_svfiprintf_r+0x166>
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	065b      	lsls	r3, r3, #25
 8004ed4:	f53f af35 	bmi.w	8004d42 <_svfiprintf_r+0x2a>
 8004ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eda:	b01d      	add	sp, #116	; 0x74
 8004edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <_svfiprintf_r+0x1ec>)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	4640      	mov	r0, r8
 8004eec:	f000 f882 	bl	8004ff4 <_printf_i>
 8004ef0:	e7ea      	b.n	8004ec8 <_svfiprintf_r+0x1b0>
 8004ef2:	bf00      	nop
 8004ef4:	0800562c 	.word	0x0800562c
 8004ef8:	08005632 	.word	0x08005632
 8004efc:	08005636 	.word	0x08005636
 8004f00:	00000000 	.word	0x00000000
 8004f04:	08004c65 	.word	0x08004c65

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4691      	mov	r9, r2
 8004f0e:	461f      	mov	r7, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	4606      	mov	r6, r0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	bfb8      	it	lt
 8004f1a:	4613      	movlt	r3, r2
 8004f1c:	f8c9 3000 	str.w	r3, [r9]
 8004f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f24:	460c      	mov	r4, r1
 8004f26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f2a:	b112      	cbz	r2, 8004f32 <_printf_common+0x2a>
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f8c9 3000 	str.w	r3, [r9]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f3c:	3302      	addmi	r3, #2
 8004f3e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f42:	6825      	ldr	r5, [r4, #0]
 8004f44:	f015 0506 	ands.w	r5, r5, #6
 8004f48:	d107      	bne.n	8004f5a <_printf_common+0x52>
 8004f4a:	f104 0a19 	add.w	sl, r4, #25
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	f8d9 2000 	ldr.w	r2, [r9]
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	42ab      	cmp	r3, r5
 8004f58:	dc29      	bgt.n	8004fae <_printf_common+0xa6>
 8004f5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	3300      	adds	r3, #0
 8004f62:	bf18      	it	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	0692      	lsls	r2, r2, #26
 8004f68:	d42e      	bmi.n	8004fc8 <_printf_common+0xc0>
 8004f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f6e:	4639      	mov	r1, r7
 8004f70:	4630      	mov	r0, r6
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d021      	beq.n	8004fbc <_printf_common+0xb4>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	68e5      	ldr	r5, [r4, #12]
 8004f7c:	f003 0306 	and.w	r3, r3, #6
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	bf18      	it	ne
 8004f84:	2500      	movne	r5, #0
 8004f86:	f8d9 2000 	ldr.w	r2, [r9]
 8004f8a:	f04f 0900 	mov.w	r9, #0
 8004f8e:	bf08      	it	eq
 8004f90:	1aad      	subeq	r5, r5, r2
 8004f92:	68a3      	ldr	r3, [r4, #8]
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	bf08      	it	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfc4      	itt	gt
 8004fa0:	1a9b      	subgt	r3, r3, r2
 8004fa2:	18ed      	addgt	r5, r5, r3
 8004fa4:	341a      	adds	r4, #26
 8004fa6:	454d      	cmp	r5, r9
 8004fa8:	d11a      	bne.n	8004fe0 <_printf_common+0xd8>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e008      	b.n	8004fc0 <_printf_common+0xb8>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	47c0      	blx	r8
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_printf_common+0xbc>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7c2      	b.n	8004f4e <_printf_common+0x46>
 8004fc8:	2030      	movs	r0, #48	; 0x30
 8004fca:	18e1      	adds	r1, r4, r3
 8004fcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd6:	4422      	add	r2, r4
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fde:	e7c4      	b.n	8004f6a <_printf_common+0x62>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xb4>
 8004fee:	f109 0901 	add.w	r9, r9, #1
 8004ff2:	e7d8      	b.n	8004fa6 <_printf_common+0x9e>

08004ff4 <_printf_i>:
 8004ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	7e09      	ldrb	r1, [r1, #24]
 8005000:	b085      	sub	sp, #20
 8005002:	296e      	cmp	r1, #110	; 0x6e
 8005004:	4617      	mov	r7, r2
 8005006:	4606      	mov	r6, r0
 8005008:	4698      	mov	r8, r3
 800500a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800500c:	f000 80b3 	beq.w	8005176 <_printf_i+0x182>
 8005010:	d822      	bhi.n	8005058 <_printf_i+0x64>
 8005012:	2963      	cmp	r1, #99	; 0x63
 8005014:	d036      	beq.n	8005084 <_printf_i+0x90>
 8005016:	d80a      	bhi.n	800502e <_printf_i+0x3a>
 8005018:	2900      	cmp	r1, #0
 800501a:	f000 80b9 	beq.w	8005190 <_printf_i+0x19c>
 800501e:	2958      	cmp	r1, #88	; 0x58
 8005020:	f000 8083 	beq.w	800512a <_printf_i+0x136>
 8005024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005028:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800502c:	e032      	b.n	8005094 <_printf_i+0xa0>
 800502e:	2964      	cmp	r1, #100	; 0x64
 8005030:	d001      	beq.n	8005036 <_printf_i+0x42>
 8005032:	2969      	cmp	r1, #105	; 0x69
 8005034:	d1f6      	bne.n	8005024 <_printf_i+0x30>
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	6813      	ldr	r3, [r2, #0]
 800503a:	0605      	lsls	r5, r0, #24
 800503c:	f103 0104 	add.w	r1, r3, #4
 8005040:	d52a      	bpl.n	8005098 <_printf_i+0xa4>
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6011      	str	r1, [r2, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da03      	bge.n	8005052 <_printf_i+0x5e>
 800504a:	222d      	movs	r2, #45	; 0x2d
 800504c:	425b      	negs	r3, r3
 800504e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005052:	486f      	ldr	r0, [pc, #444]	; (8005210 <_printf_i+0x21c>)
 8005054:	220a      	movs	r2, #10
 8005056:	e039      	b.n	80050cc <_printf_i+0xd8>
 8005058:	2973      	cmp	r1, #115	; 0x73
 800505a:	f000 809d 	beq.w	8005198 <_printf_i+0x1a4>
 800505e:	d808      	bhi.n	8005072 <_printf_i+0x7e>
 8005060:	296f      	cmp	r1, #111	; 0x6f
 8005062:	d020      	beq.n	80050a6 <_printf_i+0xb2>
 8005064:	2970      	cmp	r1, #112	; 0x70
 8005066:	d1dd      	bne.n	8005024 <_printf_i+0x30>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f043 0320 	orr.w	r3, r3, #32
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	e003      	b.n	800507a <_printf_i+0x86>
 8005072:	2975      	cmp	r1, #117	; 0x75
 8005074:	d017      	beq.n	80050a6 <_printf_i+0xb2>
 8005076:	2978      	cmp	r1, #120	; 0x78
 8005078:	d1d4      	bne.n	8005024 <_printf_i+0x30>
 800507a:	2378      	movs	r3, #120	; 0x78
 800507c:	4865      	ldr	r0, [pc, #404]	; (8005214 <_printf_i+0x220>)
 800507e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005082:	e055      	b.n	8005130 <_printf_i+0x13c>
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508a:	1d19      	adds	r1, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6011      	str	r1, [r2, #0]
 8005090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005094:	2301      	movs	r3, #1
 8005096:	e08c      	b.n	80051b2 <_printf_i+0x1be>
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800509e:	6011      	str	r1, [r2, #0]
 80050a0:	bf18      	it	ne
 80050a2:	b21b      	sxthne	r3, r3
 80050a4:	e7cf      	b.n	8005046 <_printf_i+0x52>
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	6825      	ldr	r5, [r4, #0]
 80050aa:	1d18      	adds	r0, r3, #4
 80050ac:	6010      	str	r0, [r2, #0]
 80050ae:	0628      	lsls	r0, r5, #24
 80050b0:	d501      	bpl.n	80050b6 <_printf_i+0xc2>
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	e002      	b.n	80050bc <_printf_i+0xc8>
 80050b6:	0668      	lsls	r0, r5, #25
 80050b8:	d5fb      	bpl.n	80050b2 <_printf_i+0xbe>
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	296f      	cmp	r1, #111	; 0x6f
 80050be:	bf14      	ite	ne
 80050c0:	220a      	movne	r2, #10
 80050c2:	2208      	moveq	r2, #8
 80050c4:	4852      	ldr	r0, [pc, #328]	; (8005210 <_printf_i+0x21c>)
 80050c6:	2100      	movs	r1, #0
 80050c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050cc:	6865      	ldr	r5, [r4, #4]
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	60a5      	str	r5, [r4, #8]
 80050d2:	f2c0 8095 	blt.w	8005200 <_printf_i+0x20c>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	f021 0104 	bic.w	r1, r1, #4
 80050dc:	6021      	str	r1, [r4, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d13d      	bne.n	800515e <_printf_i+0x16a>
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	f040 808e 	bne.w	8005204 <_printf_i+0x210>
 80050e8:	4665      	mov	r5, ip
 80050ea:	2a08      	cmp	r2, #8
 80050ec:	d10b      	bne.n	8005106 <_printf_i+0x112>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	07db      	lsls	r3, r3, #31
 80050f2:	d508      	bpl.n	8005106 <_printf_i+0x112>
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	6862      	ldr	r2, [r4, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	bfde      	ittt	le
 80050fc:	2330      	movle	r3, #48	; 0x30
 80050fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005102:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005106:	ebac 0305 	sub.w	r3, ip, r5
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	f8cd 8000 	str.w	r8, [sp]
 8005110:	463b      	mov	r3, r7
 8005112:	aa03      	add	r2, sp, #12
 8005114:	4621      	mov	r1, r4
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff fef6 	bl	8004f08 <_printf_common>
 800511c:	3001      	adds	r0, #1
 800511e:	d14d      	bne.n	80051bc <_printf_i+0x1c8>
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005124:	b005      	add	sp, #20
 8005126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800512a:	4839      	ldr	r0, [pc, #228]	; (8005210 <_printf_i+0x21c>)
 800512c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	6821      	ldr	r1, [r4, #0]
 8005134:	1d1d      	adds	r5, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6015      	str	r5, [r2, #0]
 800513a:	060a      	lsls	r2, r1, #24
 800513c:	d50b      	bpl.n	8005156 <_printf_i+0x162>
 800513e:	07ca      	lsls	r2, r1, #31
 8005140:	bf44      	itt	mi
 8005142:	f041 0120 	orrmi.w	r1, r1, #32
 8005146:	6021      	strmi	r1, [r4, #0]
 8005148:	b91b      	cbnz	r3, 8005152 <_printf_i+0x15e>
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	f022 0220 	bic.w	r2, r2, #32
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	2210      	movs	r2, #16
 8005154:	e7b7      	b.n	80050c6 <_printf_i+0xd2>
 8005156:	064d      	lsls	r5, r1, #25
 8005158:	bf48      	it	mi
 800515a:	b29b      	uxthmi	r3, r3
 800515c:	e7ef      	b.n	800513e <_printf_i+0x14a>
 800515e:	4665      	mov	r5, ip
 8005160:	fbb3 f1f2 	udiv	r1, r3, r2
 8005164:	fb02 3311 	mls	r3, r2, r1, r3
 8005168:	5cc3      	ldrb	r3, [r0, r3]
 800516a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800516e:	460b      	mov	r3, r1
 8005170:	2900      	cmp	r1, #0
 8005172:	d1f5      	bne.n	8005160 <_printf_i+0x16c>
 8005174:	e7b9      	b.n	80050ea <_printf_i+0xf6>
 8005176:	6813      	ldr	r3, [r2, #0]
 8005178:	6825      	ldr	r5, [r4, #0]
 800517a:	1d18      	adds	r0, r3, #4
 800517c:	6961      	ldr	r1, [r4, #20]
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	0628      	lsls	r0, r5, #24
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	d501      	bpl.n	800518a <_printf_i+0x196>
 8005186:	6019      	str	r1, [r3, #0]
 8005188:	e002      	b.n	8005190 <_printf_i+0x19c>
 800518a:	066a      	lsls	r2, r5, #25
 800518c:	d5fb      	bpl.n	8005186 <_printf_i+0x192>
 800518e:	8019      	strh	r1, [r3, #0]
 8005190:	2300      	movs	r3, #0
 8005192:	4665      	mov	r5, ip
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	e7b9      	b.n	800510c <_printf_i+0x118>
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	1d19      	adds	r1, r3, #4
 800519c:	6011      	str	r1, [r2, #0]
 800519e:	681d      	ldr	r5, [r3, #0]
 80051a0:	6862      	ldr	r2, [r4, #4]
 80051a2:	2100      	movs	r1, #0
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f847 	bl	8005238 <memchr>
 80051aa:	b108      	cbz	r0, 80051b0 <_printf_i+0x1bc>
 80051ac:	1b40      	subs	r0, r0, r5
 80051ae:	6060      	str	r0, [r4, #4]
 80051b0:	6863      	ldr	r3, [r4, #4]
 80051b2:	6123      	str	r3, [r4, #16]
 80051b4:	2300      	movs	r3, #0
 80051b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ba:	e7a7      	b.n	800510c <_printf_i+0x118>
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	462a      	mov	r2, r5
 80051c0:	4639      	mov	r1, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0aa      	beq.n	8005120 <_printf_i+0x12c>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	079b      	lsls	r3, r3, #30
 80051ce:	d413      	bmi.n	80051f8 <_printf_i+0x204>
 80051d0:	68e0      	ldr	r0, [r4, #12]
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	4298      	cmp	r0, r3
 80051d6:	bfb8      	it	lt
 80051d8:	4618      	movlt	r0, r3
 80051da:	e7a3      	b.n	8005124 <_printf_i+0x130>
 80051dc:	2301      	movs	r3, #1
 80051de:	464a      	mov	r2, r9
 80051e0:	4639      	mov	r1, r7
 80051e2:	4630      	mov	r0, r6
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d09a      	beq.n	8005120 <_printf_i+0x12c>
 80051ea:	3501      	adds	r5, #1
 80051ec:	68e3      	ldr	r3, [r4, #12]
 80051ee:	9a03      	ldr	r2, [sp, #12]
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	42ab      	cmp	r3, r5
 80051f4:	dcf2      	bgt.n	80051dc <_printf_i+0x1e8>
 80051f6:	e7eb      	b.n	80051d0 <_printf_i+0x1dc>
 80051f8:	2500      	movs	r5, #0
 80051fa:	f104 0919 	add.w	r9, r4, #25
 80051fe:	e7f5      	b.n	80051ec <_printf_i+0x1f8>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ac      	bne.n	800515e <_printf_i+0x16a>
 8005204:	7803      	ldrb	r3, [r0, #0]
 8005206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800520a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800520e:	e76c      	b.n	80050ea <_printf_i+0xf6>
 8005210:	0800563d 	.word	0x0800563d
 8005214:	0800564e 	.word	0x0800564e

08005218 <_sbrk_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	2300      	movs	r3, #0
 800521c:	4c05      	ldr	r4, [pc, #20]	; (8005234 <_sbrk_r+0x1c>)
 800521e:	4605      	mov	r5, r0
 8005220:	4608      	mov	r0, r1
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	f7fc fb82 	bl	800192c <_sbrk>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_sbrk_r+0x1a>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	b103      	cbz	r3, 8005232 <_sbrk_r+0x1a>
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20003230 	.word	0x20003230

08005238 <memchr>:
 8005238:	b510      	push	{r4, lr}
 800523a:	b2c9      	uxtb	r1, r1
 800523c:	4402      	add	r2, r0
 800523e:	4290      	cmp	r0, r2
 8005240:	4603      	mov	r3, r0
 8005242:	d101      	bne.n	8005248 <memchr+0x10>
 8005244:	2300      	movs	r3, #0
 8005246:	e003      	b.n	8005250 <memchr+0x18>
 8005248:	781c      	ldrb	r4, [r3, #0]
 800524a:	3001      	adds	r0, #1
 800524c:	428c      	cmp	r4, r1
 800524e:	d1f6      	bne.n	800523e <memchr+0x6>
 8005250:	4618      	mov	r0, r3
 8005252:	bd10      	pop	{r4, pc}

08005254 <memmove>:
 8005254:	4288      	cmp	r0, r1
 8005256:	b510      	push	{r4, lr}
 8005258:	eb01 0302 	add.w	r3, r1, r2
 800525c:	d807      	bhi.n	800526e <memmove+0x1a>
 800525e:	1e42      	subs	r2, r0, #1
 8005260:	4299      	cmp	r1, r3
 8005262:	d00a      	beq.n	800527a <memmove+0x26>
 8005264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005268:	f802 4f01 	strb.w	r4, [r2, #1]!
 800526c:	e7f8      	b.n	8005260 <memmove+0xc>
 800526e:	4283      	cmp	r3, r0
 8005270:	d9f5      	bls.n	800525e <memmove+0xa>
 8005272:	1881      	adds	r1, r0, r2
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	42d3      	cmn	r3, r2
 8005278:	d100      	bne.n	800527c <memmove+0x28>
 800527a:	bd10      	pop	{r4, pc}
 800527c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005280:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005284:	e7f7      	b.n	8005276 <memmove+0x22>

08005286 <__malloc_lock>:
 8005286:	4770      	bx	lr

08005288 <__malloc_unlock>:
 8005288:	4770      	bx	lr

0800528a <_realloc_r>:
 800528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528c:	4607      	mov	r7, r0
 800528e:	4614      	mov	r4, r2
 8005290:	460e      	mov	r6, r1
 8005292:	b921      	cbnz	r1, 800529e <_realloc_r+0x14>
 8005294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005298:	4611      	mov	r1, r2
 800529a:	f7ff bc89 	b.w	8004bb0 <_malloc_r>
 800529e:	b922      	cbnz	r2, 80052aa <_realloc_r+0x20>
 80052a0:	f7ff fc3a 	bl	8004b18 <_free_r>
 80052a4:	4625      	mov	r5, r4
 80052a6:	4628      	mov	r0, r5
 80052a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052aa:	f000 f814 	bl	80052d6 <_malloc_usable_size_r>
 80052ae:	42a0      	cmp	r0, r4
 80052b0:	d20f      	bcs.n	80052d2 <_realloc_r+0x48>
 80052b2:	4621      	mov	r1, r4
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7ff fc7b 	bl	8004bb0 <_malloc_r>
 80052ba:	4605      	mov	r5, r0
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0f2      	beq.n	80052a6 <_realloc_r+0x1c>
 80052c0:	4631      	mov	r1, r6
 80052c2:	4622      	mov	r2, r4
 80052c4:	f7ff fb68 	bl	8004998 <memcpy>
 80052c8:	4631      	mov	r1, r6
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7ff fc24 	bl	8004b18 <_free_r>
 80052d0:	e7e9      	b.n	80052a6 <_realloc_r+0x1c>
 80052d2:	4635      	mov	r5, r6
 80052d4:	e7e7      	b.n	80052a6 <_realloc_r+0x1c>

080052d6 <_malloc_usable_size_r>:
 80052d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052da:	1f18      	subs	r0, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfbc      	itt	lt
 80052e0:	580b      	ldrlt	r3, [r1, r0]
 80052e2:	18c0      	addlt	r0, r0, r3
 80052e4:	4770      	bx	lr
	...

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
