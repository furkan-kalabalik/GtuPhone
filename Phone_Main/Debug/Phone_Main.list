
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006638  08006638  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006638  08006638  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002804  200001e4  08006824  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200029e8  08006824  000229e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101a7  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002691  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019266  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cea8  00000000  00000000  0004d976  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ad5  00000000  00000000  0005a81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec2f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  000ec370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006048 	.word	0x08006048

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006048 	.word	0x08006048

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000200 	.word	0x20000200
 80001a0:	20000254 	.word	0x20000254

080001a4 <HAL_UART_RxCpltCallback>:
ts_rec_message messages[20];
int phonebook_index = 0;
int sim_message_index = 0;
int running_message_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b0a      	cmp	r3, #10
 80001b6:	d10f      	bne.n	80001d8 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x60>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001ca:	4413      	add	r3, r2
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001d2:	f003 f8f7 	bl	80033c4 <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001d6:	e00d      	b.n	80001f4 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001e8:	4413      	add	r3, r2
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	f003 f8e8 	bl	80033c4 <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000558 	.word	0x20000558
 8000200:	20000458 	.word	0x20000458
 8000204:	2000085c 	.word	0x2000085c
 8000208:	20002950 	.word	0x20002950

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b5b0      	push	{r4, r5, r7, lr}
 800020e:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8000212:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000214:	f001 fdbe 	bl	8001d94 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8000218:	f000 fb66 	bl	80008e8 <MX_GPIO_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021c:	f000 facc 	bl	80007b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000220:	f000 fb62 	bl	80008e8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000224:	f000 fb0c 	bl	8000840 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000228:	f000 fb34 	bl	8000894 <MX_USART2_UART_Init>


	char close_echo[] = "ATE0\r\n";
 800022c:	4ac6      	ldr	r2, [pc, #792]	; (8000548 <main+0x33c>)
 800022e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000236:	6018      	str	r0, [r3, #0]
 8000238:	3304      	adds	r3, #4
 800023a:	8019      	strh	r1, [r3, #0]
 800023c:	3302      	adds	r3, #2
 800023e:	0c0a      	lsrs	r2, r1, #16
 8000240:	701a      	strb	r2, [r3, #0]
	char ringtone[] = "AT+CALS=10\r\n";
 8000242:	4bc2      	ldr	r3, [pc, #776]	; (800054c <main+0x340>)
 8000244:	f507 7410 	add.w	r4, r7, #576	; 0x240
 8000248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024a:	c407      	stmia	r4!, {r0, r1, r2}
 800024c:	7023      	strb	r3, [r4, #0]
	char text_mode[] = "AT+CMGF=1\r\n";
 800024e:	4ac0      	ldr	r2, [pc, #768]	; (8000550 <main+0x344>)
 8000250:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8000254:	ca07      	ldmia	r2, {r0, r1, r2}
 8000256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char message_buf[176] = {0};
 800025a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800025e:	22b0      	movs	r2, #176	; 0xb0
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 fd73 	bl	8004d4e <memset>
	char response[256] = {0};
 8000268:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800026c:	4618      	mov	r0, r3
 800026e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000272:	461a      	mov	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f004 fd6a 	bl	8004d4e <memset>
	char get_entry[64] = {0};
 800027a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800027e:	4618      	mov	r0, r3
 8000280:	2340      	movs	r3, #64	; 0x40
 8000282:	461a      	mov	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f004 fd62 	bl	8004d4e <memset>
	char *p1;
	char *p2;
	int index = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	int done = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000296:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff62 	bl	8000164 <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80002a8:	23c8      	movs	r3, #200	; 0xc8
 80002aa:	48aa      	ldr	r0, [pc, #680]	; (8000554 <main+0x348>)
 80002ac:	f002 ff59 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002b0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80002b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002bc:	48a5      	ldr	r0, [pc, #660]	; (8000554 <main+0x348>)
 80002be:	f002 ffe2 	bl	8003286 <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&ringtone[0], strlen(ringtone), 200);
 80002c2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	f507 7110 	add.w	r1, r7, #576	; 0x240
 80002d4:	23c8      	movs	r3, #200	; 0xc8
 80002d6:	489f      	ldr	r0, [pc, #636]	; (8000554 <main+0x348>)
 80002d8:	f002 ff43 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002dc:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80002e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e8:	489a      	ldr	r0, [pc, #616]	; (8000554 <main+0x348>)
 80002ea:	f002 ffcc 	bl	8003286 <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&text_mode[0], strlen(text_mode), 200);
 80002ee:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff36 	bl	8000164 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8000300:	23c8      	movs	r3, #200	; 0xc8
 8000302:	4894      	ldr	r0, [pc, #592]	; (8000554 <main+0x348>)
 8000304:	f002 ff2d 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 8000308:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800030c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000314:	488f      	ldr	r0, [pc, #572]	; (8000554 <main+0x348>)
 8000316:	f002 ffb6 	bl	8003286 <HAL_UART_Receive>

	memset(response, 0, sizeof(response));
 800031a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800031e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f004 fd12 	bl	8004d4e <memset>
	for(int i = 1; i < 20; i++)
 800032a:	2301      	movs	r3, #1
 800032c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8000330:	e0ae      	b.n	8000490 <main+0x284>
	{
		sprintf(get_entry, "AT+CPBR=%d\r\n", i);
 8000332:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000336:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800033a:	4987      	ldr	r1, [pc, #540]	; (8000558 <main+0x34c>)
 800033c:	4618      	mov	r0, r3
 800033e:	f004 fd0f 	bl	8004d60 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 8000342:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff0c 	bl	8000164 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	b29a      	uxth	r2, r3
 8000350:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000354:	23c8      	movs	r3, #200	; 0xc8
 8000356:	487f      	ldr	r0, [pc, #508]	; (8000554 <main+0x348>)
 8000358:	f002 ff03 	bl	8003162 <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800035c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000360:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000368:	487a      	ldr	r0, [pc, #488]	; (8000554 <main+0x348>)
 800036a:	f002 ff8c 	bl	8003286 <HAL_UART_Receive>
		if(strcmp(response, "\r\nOK\r\n") == 0)
 800036e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000372:	497a      	ldr	r1, [pc, #488]	; (800055c <main+0x350>)
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff feeb 	bl	8000150 <strcmp>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	f000 808d 	beq.w	800049c <main+0x290>
			break;
		p1 = strstr(response, "\"");
 8000382:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000386:	2122      	movs	r1, #34	; 0x22
 8000388:	4618      	mov	r0, r3
 800038a:	f004 fd35 	bl	8004df8 <strchr>
 800038e:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		p1++;
 8000392:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000396:	3301      	adds	r3, #1
 8000398:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		if(p1)
 800039c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d01e      	beq.n	80003e2 <main+0x1d6>
		  p2 = strstr(p1,"\"");
 80003a4:	2122      	movs	r1, #34	; 0x22
 80003a6:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80003aa:	f004 fd25 	bl	8004df8 <strchr>
 80003ae:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		while(p1 != p2)
 80003b2:	e016      	b.n	80003e2 <main+0x1d6>
		{
		  phonebook[i-1].number[index++] = *p1;
 80003b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80003be:	1c59      	adds	r1, r3, #1
 80003c0:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80003c4:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80003c8:	7808      	ldrb	r0, [r1, #0]
 80003ca:	4965      	ldr	r1, [pc, #404]	; (8000560 <main+0x354>)
 80003cc:	0152      	lsls	r2, r2, #5
 80003ce:	440a      	add	r2, r1
 80003d0:	4413      	add	r3, r2
 80003d2:	3310      	adds	r3, #16
 80003d4:	4602      	mov	r2, r0
 80003d6:	701a      	strb	r2, [r3, #0]
		  p1++;
 80003d8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80003dc:	3301      	adds	r3, #1
 80003de:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		while(p1 != p2)
 80003e2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80003e6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d1e2      	bne.n	80003b4 <main+0x1a8>
		}
		p2++;
 80003ee:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80003f2:	3301      	adds	r3, #1
 80003f4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
		p1 = strstr(p2, "\"");
 80003f8:	2122      	movs	r1, #34	; 0x22
 80003fa:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80003fe:	f004 fcfb 	bl	8004df8 <strchr>
 8000402:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		p1++;
 8000406:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800040a:	3301      	adds	r3, #1
 800040c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		if(p1)
 8000410:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000414:	2b00      	cmp	r3, #0
 8000416:	d006      	beq.n	8000426 <main+0x21a>
		  p2 = strstr(p1,"\"");
 8000418:	2122      	movs	r1, #34	; 0x22
 800041a:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800041e:	f004 fceb 	bl	8004df8 <strchr>
 8000422:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		index = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
		while(p1 != p2)
 800042c:	e015      	b.n	800045a <main+0x24e>
		{
		  phonebook[i-1].name[index++] = *p1;
 800042e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000432:	1e5a      	subs	r2, r3, #1
 8000434:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000438:	1c59      	adds	r1, r3, #1
 800043a:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 800043e:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8000442:	7808      	ldrb	r0, [r1, #0]
 8000444:	4946      	ldr	r1, [pc, #280]	; (8000560 <main+0x354>)
 8000446:	0152      	lsls	r2, r2, #5
 8000448:	440a      	add	r2, r1
 800044a:	4413      	add	r3, r2
 800044c:	4602      	mov	r2, r0
 800044e:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000450:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000454:	3301      	adds	r3, #1
 8000456:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		while(p1 != p2)
 800045a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800045e:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8000462:	429a      	cmp	r2, r3
 8000464:	d1e3      	bne.n	800042e <main+0x222>
		}
		memset(response, 0, sizeof(response));
 8000466:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800046a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f004 fc6c 	bl	8004d4e <memset>
		index = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
		phonebook_index++;
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <main+0x358>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	4a38      	ldr	r2, [pc, #224]	; (8000564 <main+0x358>)
 8000484:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 20; i++)
 8000486:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800048a:	3301      	adds	r3, #1
 800048c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8000490:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000494:	2b13      	cmp	r3, #19
 8000496:	f77f af4c 	ble.w	8000332 <main+0x126>
 800049a:	e000      	b.n	800049e <main+0x292>
			break;
 800049c:	bf00      	nop
	}
	index = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	for(int i = 1; i < 251; i++)
 80004a4:	2301      	movs	r3, #1
 80004a6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80004aa:	e0e4      	b.n	8000676 <main+0x46a>
	{
		sprintf(get_entry, "AT+CMGR=%d\r\n", sim_message_index+1);
 80004ac:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <main+0x35c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004b6:	492d      	ldr	r1, [pc, #180]	; (800056c <main+0x360>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f004 fc51 	bl	8004d60 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 80004be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe4e 	bl	8000164 <strlen>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80004d0:	23c8      	movs	r3, #200	; 0xc8
 80004d2:	4820      	ldr	r0, [pc, #128]	; (8000554 <main+0x348>)
 80004d4:	f002 fe45 	bl	8003162 <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 80004d8:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 80004dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e0:	22b0      	movs	r2, #176	; 0xb0
 80004e2:	481c      	ldr	r0, [pc, #112]	; (8000554 <main+0x348>)
 80004e4:	f002 fecf 	bl	8003286 <HAL_UART_Receive>
		if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 80004e8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80004ec:	491b      	ldr	r1, [pc, #108]	; (800055c <main+0x350>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe2e 	bl	8000150 <strcmp>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	f000 80c3 	beq.w	8000682 <main+0x476>
		{
			break;
		}
		memset(&messages[running_message_index], 0, sizeof(ts_rec_message));
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <main+0x364>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4613      	mov	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <main+0x368>)
 800050a:	4413      	add	r3, r2
 800050c:	2270      	movs	r2, #112	; 0x70
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f004 fc1c 	bl	8004d4e <memset>
		p1 = strstr(message_buf, "\"+");
 8000516:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800051a:	4917      	ldr	r1, [pc, #92]	; (8000578 <main+0x36c>)
 800051c:	4618      	mov	r0, r3
 800051e:	f004 fc80 	bl	8004e22 <strstr>
 8000522:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		p1++;
 8000526:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800052a:	3301      	adds	r3, #1
 800052c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		if(p1)
 8000530:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000534:	2b00      	cmp	r3, #0
 8000536:	d039      	beq.n	80005ac <main+0x3a0>
		  p2 = strstr(p1,"\"");
 8000538:	2122      	movs	r1, #34	; 0x22
 800053a:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800053e:	f004 fc5b 	bl	8004df8 <strchr>
 8000542:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		while(p1 != p2)
 8000546:	e031      	b.n	80005ac <main+0x3a0>
 8000548:	080060c4 	.word	0x080060c4
 800054c:	080060cc 	.word	0x080060cc
 8000550:	080060dc 	.word	0x080060dc
 8000554:	2000204c 	.word	0x2000204c
 8000558:	08006060 	.word	0x08006060
 800055c:	08006070 	.word	0x08006070
 8000560:	20001dc8 	.word	0x20001dc8
 8000564:	20000860 	.word	0x20000860
 8000568:	20000864 	.word	0x20000864
 800056c:	08006078 	.word	0x08006078
 8000570:	20000868 	.word	0x20000868
 8000574:	20002090 	.word	0x20002090
 8000578:	08006088 	.word	0x08006088
		{
		  messages[running_message_index].sender[index++] = *p1;
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <main+0x564>)
 800057e:	6819      	ldr	r1, [r3, #0]
 8000580:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8000584:	1c53      	adds	r3, r2, #1
 8000586:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800058a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800058e:	781c      	ldrb	r4, [r3, #0]
 8000590:	4878      	ldr	r0, [pc, #480]	; (8000774 <main+0x568>)
 8000592:	460b      	mov	r3, r1
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	1a5b      	subs	r3, r3, r1
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	4403      	add	r3, r0
 800059c:	4413      	add	r3, r2
 800059e:	4622      	mov	r2, r4
 80005a0:	701a      	strb	r2, [r3, #0]
		  p1++;
 80005a2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80005a6:	3301      	adds	r3, #1
 80005a8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		while(p1 != p2)
 80005ac:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80005b0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d1e1      	bne.n	800057c <main+0x370>
		}
		p2++;
 80005b8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80005bc:	3301      	adds	r3, #1
 80005be:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
		p1 = strstr(p2, "\n");
 80005c2:	210a      	movs	r1, #10
 80005c4:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80005c8:	f004 fc16 	bl	8004df8 <strchr>
 80005cc:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		p1++;
 80005d0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80005d4:	3301      	adds	r3, #1
 80005d6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		if(p1)
 80005da:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <main+0x3e4>
		  p2 = strstr(p1,"\r");
 80005e2:	210d      	movs	r1, #13
 80005e4:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80005e8:	f004 fc06 	bl	8004df8 <strchr>
 80005ec:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		index = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
		while(p1 != p2)
 80005f6:	e018      	b.n	800062a <main+0x41e>
		{
		  messages[running_message_index].message[index++] = *p1;
 80005f8:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <main+0x564>)
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8000600:	1c53      	adds	r3, r2, #1
 8000602:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8000606:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800060a:	781c      	ldrb	r4, [r3, #0]
 800060c:	4859      	ldr	r0, [pc, #356]	; (8000774 <main+0x568>)
 800060e:	460b      	mov	r3, r1
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	1a5b      	subs	r3, r3, r1
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	4403      	add	r3, r0
 8000618:	4413      	add	r3, r2
 800061a:	3310      	adds	r3, #16
 800061c:	4622      	mov	r2, r4
 800061e:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000620:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000624:	3301      	adds	r3, #1
 8000626:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
		while(p1 != p2)
 800062a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800062e:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8000632:	429a      	cmp	r2, r3
 8000634:	d1e0      	bne.n	80005f8 <main+0x3ec>
		}
		memset(message_buf, 0, sizeof(message_buf));
 8000636:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800063a:	22b0      	movs	r2, #176	; 0xb0
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fb85 	bl	8004d4e <memset>
		index = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
		sim_message_index++;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x56c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a49      	ldr	r2, [pc, #292]	; (8000778 <main+0x56c>)
 8000652:	6013      	str	r3, [r2, #0]
		running_message_index++;
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <main+0x564>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a45      	ldr	r2, [pc, #276]	; (8000770 <main+0x564>)
 800065c:	6013      	str	r3, [r2, #0]
		if(running_message_index == 20)
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <main+0x564>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b14      	cmp	r3, #20
 8000664:	d102      	bne.n	800066c <main+0x460>
		{
			running_message_index = 0;
 8000666:	4b42      	ldr	r3, [pc, #264]	; (8000770 <main+0x564>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 251; i++)
 800066c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000670:	3301      	adds	r3, #1
 8000672:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8000676:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800067a:	2bfa      	cmp	r3, #250	; 0xfa
 800067c:	f77f af16 	ble.w	80004ac <main+0x2a0>
 8000680:	e000      	b.n	8000684 <main+0x478>
			break;
 8000682:	bf00      	nop
		}
	}
	if(xTaskCreate(display_uart_task_func, "display_uart", 384, NULL, 3, &display_uart_task) != pdPASS)
 8000684:	4b3d      	ldr	r3, [pc, #244]	; (800077c <main+0x570>)
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2303      	movs	r3, #3
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000692:	493b      	ldr	r1, [pc, #236]	; (8000780 <main+0x574>)
 8000694:	483b      	ldr	r0, [pc, #236]	; (8000784 <main+0x578>)
 8000696:	f003 faf3 	bl	8003c80 <xTaskCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d000      	beq.n	80006a2 <main+0x496>
	{
		__NOP();
 80006a0:	bf00      	nop
	}
	if(xTaskCreate(message_task_func, "sms_task", 256, NULL, 3, &sms_task) != pdPASS)
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <main+0x57c>)
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2303      	movs	r3, #3
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b0:	4936      	ldr	r1, [pc, #216]	; (800078c <main+0x580>)
 80006b2:	4837      	ldr	r0, [pc, #220]	; (8000790 <main+0x584>)
 80006b4:	f003 fae4 	bl	8003c80 <xTaskCreate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d000      	beq.n	80006c0 <main+0x4b4>
	{
		__NOP();
 80006be:	bf00      	nop
	}

	if(xTaskCreate(call_task_func, "call_task", 256, NULL, 7, &call_task) != pdPASS)
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <main+0x588>)
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2307      	movs	r3, #7
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	4932      	ldr	r1, [pc, #200]	; (8000798 <main+0x58c>)
 80006d0:	4832      	ldr	r0, [pc, #200]	; (800079c <main+0x590>)
 80006d2:	f003 fad5 	bl	8003c80 <xTaskCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d000      	beq.n	80006de <main+0x4d2>
	{
		__NOP();
 80006dc:	bf00      	nop
	}

	if(xTaskCreate(interrupt_task_func, "interrupt_task", 256, NULL, 7, &interrupt_task) != pdPASS)
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <main+0x594>)
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2307      	movs	r3, #7
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ec:	492d      	ldr	r1, [pc, #180]	; (80007a4 <main+0x598>)
 80006ee:	482e      	ldr	r0, [pc, #184]	; (80007a8 <main+0x59c>)
 80006f0:	f003 fac6 	bl	8003c80 <xTaskCreate>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d000      	beq.n	80006fc <main+0x4f0>
	{
		__NOP();
 80006fa:	bf00      	nop
	}
	char ready[]="main_page.t0.txt=\"Phone is ready!\"\xFF\xFF\xFF";
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <main+0x5a0>)
 8000702:	461c      	mov	r4, r3
 8000704:	4615      	mov	r5, r2
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000712:	6020      	str	r0, [r4, #0]
 8000714:	3404      	adds	r4, #4
 8000716:	8021      	strh	r1, [r4, #0]
	char start_time[]="main_page.tm0.en=1\xFF\xFF\xFF";
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <main+0x5a4>)
 800071c:	461c      	mov	r4, r3
 800071e:	4615      	mov	r5, r2
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000728:	6020      	str	r0, [r4, #0]
 800072a:	3404      	adds	r4, #4
 800072c:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)ready, strlen(ready), 200);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd16 	bl	8000164 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	f107 011c 	add.w	r1, r7, #28
 8000740:	23c8      	movs	r3, #200	; 0xc8
 8000742:	481c      	ldr	r0, [pc, #112]	; (80007b4 <main+0x5a8>)
 8000744:	f002 fd0d 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_time, strlen(start_time), 200);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd0a 	bl	8000164 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	1d39      	adds	r1, r7, #4
 8000756:	23c8      	movs	r3, #200	; 0xc8
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <main+0x5a8>)
 800075a:	f002 fd02 	bl	8003162 <HAL_UART_Transmit>
	vTaskStartScheduler();
 800075e:	f003 fbf1 	bl	8003f44 <vTaskStartScheduler>
 8000762:	2300      	movs	r3, #0

}
 8000764:	4618      	mov	r0, r3
 8000766:	f507 771c 	add.w	r7, r7, #624	; 0x270
 800076a:	46bd      	mov	sp, r7
 800076c:	bdb0      	pop	{r4, r5, r7, pc}
 800076e:	bf00      	nop
 8000770:	20000868 	.word	0x20000868
 8000774:	20002090 	.word	0x20002090
 8000778:	20000864 	.word	0x20000864
 800077c:	20002990 	.word	0x20002990
 8000780:	0800608c 	.word	0x0800608c
 8000784:	080010c1 	.word	0x080010c1
 8000788:	2000208c 	.word	0x2000208c
 800078c:	0800609c 	.word	0x0800609c
 8000790:	08001109 	.word	0x08001109
 8000794:	20002048 	.word	0x20002048
 8000798:	080060a8 	.word	0x080060a8
 800079c:	08001275 	.word	0x08001275
 80007a0:	20001dc4 	.word	0x20001dc4
 80007a4:	080060b4 	.word	0x080060b4
 80007a8:	08001039 	.word	0x08001039
 80007ac:	080060e8 	.word	0x080060e8
 80007b0:	08006110 	.word	0x08006110
 80007b4:	20002950 	.word	0x20002950

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b090      	sub	sp, #64	; 0x40
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fac1 	bl	8004d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fdcc 	bl	800239c <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800080a:	f001 f90d 	bl	8001a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 f837 	bl	800289c <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000834:	f001 f8f8 	bl	8001a28 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3740      	adds	r7, #64	; 0x40
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_USART1_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000878:	f002 fc26 	bl	80030c8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f001 f8d1 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000204c 	.word	0x2000204c
 8000890:	40013800 	.word	0x40013800

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f002 fbfc 	bl	80030c8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f001 f8a7 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20002950 	.word	0x20002950
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_GPIO_Init+0x8c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_GPIO_Init+0x8c>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_GPIO_Init+0x8c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_GPIO_Init+0x8c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a16      	ldr	r2, [pc, #88]	; (8000974 <MX_GPIO_Init+0x8c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_GPIO_Init+0x8c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_GPIO_Init+0x8c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a10      	ldr	r2, [pc, #64]	; (8000974 <MX_GPIO_Init+0x8c>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_GPIO_Init+0x8c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_GPIO_Init+0x90>)
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_GPIO_Init+0x94>)
 8000958:	f001 fba4 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2006      	movs	r0, #6
 8000962:	f001 fafe 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000966:	2006      	movs	r0, #6
 8000968:	f001 fb17 	bl	8001f9a <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	10210000 	.word	0x10210000
 800097c:	40010c00 	.word	0x40010c00

08000980 <show_subscriber_with_index>:

void show_subscriber_with_index(int index)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0a8      	sub	sp, #160	; 0xa0
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	char name[64] = {0};
 8000988:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f004 f9dc 	bl	8004d4e <memset>
	char number[64] = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f9d5 	bl	8004d4e <memset>
	char active_button1[] = "vis b2,1\xFF\xFF\xFF";
 80009a4:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <show_subscriber_with_index+0x100>)
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char active_button2[] = "vis b3,1\xFF\xFF\xFF";
 80009b0:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <show_subscriber_with_index+0x104>)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(index < phonebook_index)
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <show_subscriber_with_index+0x108>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	da15      	bge.n	80009f2 <show_subscriber_with_index+0x72>
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].name);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	015b      	lsls	r3, r3, #5
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <show_subscriber_with_index+0x10c>)
 80009cc:	441a      	add	r2, r3
 80009ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009d2:	492f      	ldr	r1, [pc, #188]	; (8000a90 <show_subscriber_with_index+0x110>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 f9c3 	bl	8004d60 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].number);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	015b      	lsls	r3, r3, #5
 80009de:	3310      	adds	r3, #16
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <show_subscriber_with_index+0x10c>)
 80009e2:	441a      	add	r2, r3
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	492a      	ldr	r1, [pc, #168]	; (8000a94 <show_subscriber_with_index+0x114>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 f9b8 	bl	8004d60 <siprintf>
 80009f0:	e00d      	b.n	8000a0e <show_subscriber_with_index+0x8e>
	}
	else
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", "empty");
 80009f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <show_subscriber_with_index+0x118>)
 80009f8:	4925      	ldr	r1, [pc, #148]	; (8000a90 <show_subscriber_with_index+0x110>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f9b0 	bl	8004d60 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF",  "empty");
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <show_subscriber_with_index+0x118>)
 8000a06:	4923      	ldr	r1, [pc, #140]	; (8000a94 <show_subscriber_with_index+0x114>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f9a9 	bl	8004d60 <siprintf>
	}
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)name, strlen(name), 200);
 8000a0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fba6 	bl	8000164 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a20:	23c8      	movs	r3, #200	; 0xc8
 8000a22:	481e      	ldr	r0, [pc, #120]	; (8000a9c <show_subscriber_with_index+0x11c>)
 8000a24:	f002 fb9d 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)number, strlen(number), 200);
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fb99 	bl	8000164 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f107 0120 	add.w	r1, r7, #32
 8000a3a:	23c8      	movs	r3, #200	; 0xc8
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <show_subscriber_with_index+0x11c>)
 8000a3e:	f002 fb90 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button1, strlen(active_button1), 100);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fb8c 	bl	8000164 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	f107 0114 	add.w	r1, r7, #20
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <show_subscriber_with_index+0x11c>)
 8000a58:	f002 fb83 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button2, strlen(active_button2), 100);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fb7f 	bl	8000164 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f107 0108 	add.w	r1, r7, #8
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <show_subscriber_with_index+0x11c>)
 8000a72:	f002 fb76 	bl	8003162 <HAL_UART_Transmit>
}
 8000a76:	bf00      	nop
 8000a78:	37a0      	adds	r7, #160	; 0xa0
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08006170 	.word	0x08006170
 8000a84:	0800617c 	.word	0x0800617c
 8000a88:	20000860 	.word	0x20000860
 8000a8c:	20001dc8 	.word	0x20001dc8
 8000a90:	08006128 	.word	0x08006128
 8000a94:	08006148 	.word	0x08006148
 8000a98:	08006168 	.word	0x08006168
 8000a9c:	20002950 	.word	0x20002950

08000aa0 <add_subscriber>:

void add_subscriber(char *data)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	char *name = strtok(data, ">");
 8000aa8:	4925      	ldr	r1, [pc, #148]	; (8000b40 <add_subscriber+0xa0>)
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f004 f9d4 	bl	8004e58 <strtok>
 8000ab0:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *number = strtok(NULL, ">");
 8000ab2:	4923      	ldr	r1, [pc, #140]	; (8000b40 <add_subscriber+0xa0>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f004 f9cf 	bl	8004e58 <strtok>
 8000aba:	64b8      	str	r0, [r7, #72]	; 0x48
	number[strlen(number)-1] = '\0';
 8000abc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000abe:	f7ff fb51 	bl	8000164 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	char sim_write_command[64] = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 f939 	bl	8004d4e <memset>
	sprintf(sim_write_command, "AT+CPBW=,\"%s\",145,\"%s\"\r\n", number, name);
 8000adc:	f107 0008 	add.w	r0, r7, #8
 8000ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ae4:	4917      	ldr	r1, [pc, #92]	; (8000b44 <add_subscriber+0xa4>)
 8000ae6:	f004 f93b 	bl	8004d60 <siprintf>
	strcpy(phonebook[phonebook_index].name, name);
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <add_subscriber+0xa8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <add_subscriber+0xac>)
 8000af2:	4413      	add	r3, r2
 8000af4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 f98b 	bl	8004e12 <strcpy>
	strcpy(phonebook[phonebook_index].number, number);
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <add_subscriber+0xa8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	015b      	lsls	r3, r3, #5
 8000b02:	3310      	adds	r3, #16
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <add_subscriber+0xac>)
 8000b06:	4413      	add	r3, r2
 8000b08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f981 	bl	8004e12 <strcpy>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)sim_write_command, strlen(sim_write_command), 400);
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb25 	bl	8000164 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f107 0108 	add.w	r1, r7, #8
 8000b22:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <add_subscriber+0xb0>)
 8000b28:	f002 fb1b 	bl	8003162 <HAL_UART_Transmit>
	phonebook_index++;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <add_subscriber+0xa8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <add_subscriber+0xa8>)
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08006188 	.word	0x08006188
 8000b44:	0800618c 	.word	0x0800618c
 8000b48:	20000860 	.word	0x20000860
 8000b4c:	20001dc8 	.word	0x20001dc8
 8000b50:	2000204c 	.word	0x2000204c

08000b54 <show_text_message_index>:

void show_text_message_index(int index)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0bc      	sub	sp, #240	; 0xf0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	index = running_message_index-1-index;
 8000b5c:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <show_text_message_index+0x114>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	1e5a      	subs	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	607b      	str	r3, [r7, #4]
	if(index < 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da02      	bge.n	8000b74 <show_text_message_index+0x20>
		index += 20;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3314      	adds	r3, #20
 8000b72:	607b      	str	r3, [r7, #4]
	char sender[64] = {0};
 8000b74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b78:	2240      	movs	r2, #64	; 0x40
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 f8e6 	bl	8004d4e <memset>
	char message[128];
	char visible_buton_1[] = "vis b1,1\xFF\xFF\xFF";
 8000b82:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <show_text_message_index+0x118>)
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_0[] = "vis b0,1\xFF\xFF\xFF";
 8000b8e:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <show_text_message_index+0x11c>)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_3[] = "vis b3,1\xFF\xFF\xFF";
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <show_text_message_index+0x120>)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sprintf(sender, "messages.t0.txt=\"%s\"\xFF\xFF\xFF", messages[index].sender);
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	4a31      	ldr	r2, [pc, #196]	; (8000c78 <show_text_message_index+0x124>)
 8000bb2:	441a      	add	r2, r3
 8000bb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bb8:	4930      	ldr	r1, [pc, #192]	; (8000c7c <show_text_message_index+0x128>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f8d0 	bl	8004d60 <siprintf>
	sprintf(message, "messages.t1.txt=\"%s\"\xFF\xFF\xFF", messages[index].message);
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	3310      	adds	r3, #16
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <show_text_message_index+0x124>)
 8000bce:	441a      	add	r2, r3
 8000bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd4:	492a      	ldr	r1, [pc, #168]	; (8000c80 <show_text_message_index+0x12c>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 f8c2 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)sender, strlen(sender), 200);
 8000bdc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fabf 	bl	8000164 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000bee:	23c8      	movs	r3, #200	; 0xc8
 8000bf0:	4824      	ldr	r0, [pc, #144]	; (8000c84 <show_text_message_index+0x130>)
 8000bf2:	f002 fab6 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)message, strlen(message), 400);
 8000bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fab2 	bl	8000164 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <show_text_message_index+0x130>)
 8000c0e:	f002 faa8 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_1, strlen(visible_buton_1), 100);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff faa4 	bl	8000164 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <show_text_message_index+0x130>)
 8000c28:	f002 fa9b 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_0, strlen(visible_buton_0), 100);
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fa97 	bl	8000164 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f107 0118 	add.w	r1, r7, #24
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <show_text_message_index+0x130>)
 8000c42:	f002 fa8e 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_3, strlen(visible_buton_3), 100);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fa8a 	bl	8000164 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f107 010c 	add.w	r1, r7, #12
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <show_text_message_index+0x130>)
 8000c5c:	f002 fa81 	bl	8003162 <HAL_UART_Transmit>
}
 8000c60:	bf00      	nop
 8000c62:	37f0      	adds	r7, #240	; 0xf0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000868 	.word	0x20000868
 8000c6c:	080061d8 	.word	0x080061d8
 8000c70:	080061e4 	.word	0x080061e4
 8000c74:	0800617c 	.word	0x0800617c
 8000c78:	20002090 	.word	0x20002090
 8000c7c:	080061a8 	.word	0x080061a8
 8000c80:	080061c0 	.word	0x080061c0
 8000c84:	20002950 	.word	0x20002950

08000c88 <send_date_and_time>:

void send_date_and_time()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0a8      	sub	sp, #160	; 0xa0
 8000c8c:	af04      	add	r7, sp, #16
	char date_command[] = "AT+CCLK?\r\n";
 8000c8e:	4a79      	ldr	r2, [pc, #484]	; (8000e74 <send_date_and_time+0x1ec>)
 8000c90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c96:	c303      	stmia	r3!, {r0, r1}
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	0c12      	lsrs	r2, r2, #16
 8000c9e:	701a      	strb	r2, [r3, #0]
	char response[64] = {0};
 8000ca0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f850 	bl	8004d4e <memset>
	char command[32] = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 f849 	bl	8004d4e <memset>
	char *p1, *p2;
	int index = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int hour,minute,second,day,month,year;
	HAL_UART_Transmit(GSM_UART, (uint8_t*)date_command, strlen(date_command), 200);
 8000cc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa4c 	bl	8000164 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000cd4:	23c8      	movs	r3, #200	; 0xc8
 8000cd6:	4868      	ldr	r0, [pc, #416]	; (8000e78 <send_date_and_time+0x1f0>)
 8000cd8:	f002 fa43 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000cdc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce4:	4965      	ldr	r1, [pc, #404]	; (8000e7c <send_date_and_time+0x1f4>)
 8000ce6:	4864      	ldr	r0, [pc, #400]	; (8000e78 <send_date_and_time+0x1f0>)
 8000ce8:	f002 facd 	bl	8003286 <HAL_UART_Receive>
	p1 = strstr(at_response, "\"");
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	4863      	ldr	r0, [pc, #396]	; (8000e7c <send_date_and_time+0x1f4>)
 8000cf0:	f004 f882 	bl	8004df8 <strchr>
 8000cf4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	p1++;
 8000cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(p1)
 8000d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d019      	beq.n	8000d3e <send_date_and_time+0xb6>
	  p2 = strstr(p1,"\"");
 8000d0a:	2122      	movs	r1, #34	; 0x22
 8000d0c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d10:	f004 f872 	bl	8004df8 <strchr>
 8000d14:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	while(p1 != p2)
 8000d18:	e011      	b.n	8000d3e <send_date_and_time+0xb6>
	{
	  response[index++] = *p1;
 8000d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000d24:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000d2e:	440b      	add	r3, r1
 8000d30:	f803 2c58 	strb.w	r2, [r3, #-88]
	  p1++;
 8000d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(p1 != p2)
 8000d3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d1e7      	bne.n	8000d1a <send_date_and_time+0x92>
	}
	sscanf(response,"%d/%d/%d,%d:%d:%d", &year, &month, &day, &hour, &minute, &second);
 8000d4a:	1d39      	adds	r1, r7, #4
 8000d4c:	463a      	mov	r2, r7
 8000d4e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	9303      	str	r3, [sp, #12]
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4944      	ldr	r1, [pc, #272]	; (8000e80 <send_date_and_time+0x1f8>)
 8000d6e:	f004 f817 	bl	8004da0 <siscanf>
	year += 2000;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000d78:	603b      	str	r3, [r7, #0]
	sprintf(command, "main_page.n5.val=%d\xFF\xFF\xFF", second);
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4940      	ldr	r1, [pc, #256]	; (8000e84 <send_date_and_time+0x1fc>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 ffec 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff f9e9 	bl	8000164 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f107 0118 	add.w	r1, r7, #24
 8000d9a:	23c8      	movs	r3, #200	; 0xc8
 8000d9c:	483a      	ldr	r0, [pc, #232]	; (8000e88 <send_date_and_time+0x200>)
 8000d9e:	f002 f9e0 	bl	8003162 <HAL_UART_Transmit>
	sprintf(command, "main_page.n1.val=%d\xFF\xFF\xFF", minute);
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4938      	ldr	r1, [pc, #224]	; (8000e8c <send_date_and_time+0x204>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 ffd8 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff f9d5 	bl	8000164 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f107 0118 	add.w	r1, r7, #24
 8000dc2:	23c8      	movs	r3, #200	; 0xc8
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <send_date_and_time+0x200>)
 8000dc6:	f002 f9cc 	bl	8003162 <HAL_UART_Transmit>
	sprintf(command, "main_page.n0.val=%d\xFF\xFF\xFF", hour);
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	492f      	ldr	r1, [pc, #188]	; (8000e90 <send_date_and_time+0x208>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 ffc4 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9c1 	bl	8000164 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f107 0118 	add.w	r1, r7, #24
 8000dea:	23c8      	movs	r3, #200	; 0xc8
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <send_date_and_time+0x200>)
 8000dee:	f002 f9b8 	bl	8003162 <HAL_UART_Transmit>
	sprintf(command, "main_page.n2.val=%d\xFF\xFF\xFF", day);
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4926      	ldr	r1, [pc, #152]	; (8000e94 <send_date_and_time+0x20c>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 ffb0 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff f9ad 	bl	8000164 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f107 0118 	add.w	r1, r7, #24
 8000e12:	23c8      	movs	r3, #200	; 0xc8
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <send_date_and_time+0x200>)
 8000e16:	f002 f9a4 	bl	8003162 <HAL_UART_Transmit>
	sprintf(command, "main_page.n3.val=%d\xFF\xFF\xFF", month);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	491d      	ldr	r1, [pc, #116]	; (8000e98 <send_date_and_time+0x210>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 ff9c 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f999 	bl	8000164 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0118 	add.w	r1, r7, #24
 8000e3a:	23c8      	movs	r3, #200	; 0xc8
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <send_date_and_time+0x200>)
 8000e3e:	f002 f990 	bl	8003162 <HAL_UART_Transmit>
	sprintf(command, "main_page.n4.val=%d\xFF\xFF\xFF", year);
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4914      	ldr	r1, [pc, #80]	; (8000e9c <send_date_and_time+0x214>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 ff88 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f985 	bl	8000164 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f107 0118 	add.w	r1, r7, #24
 8000e62:	23c8      	movs	r3, #200	; 0xc8
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <send_date_and_time+0x200>)
 8000e66:	f002 f97c 	bl	8003162 <HAL_UART_Transmit>
}
 8000e6a:	bf00      	nop
 8000e6c:	3790      	adds	r7, #144	; 0x90
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	08006294 	.word	0x08006294
 8000e78:	2000204c 	.word	0x2000204c
 8000e7c:	2000075c 	.word	0x2000075c
 8000e80:	080061f0 	.word	0x080061f0
 8000e84:	08006204 	.word	0x08006204
 8000e88:	20002950 	.word	0x20002950
 8000e8c:	0800621c 	.word	0x0800621c
 8000e90:	08006234 	.word	0x08006234
 8000e94:	0800624c 	.word	0x0800624c
 8000e98:	08006264 	.word	0x08006264
 8000e9c:	0800627c 	.word	0x0800627c

08000ea0 <parse_display_request>:

void parse_display_request()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	if((display_rx[1] == 0x01 && display_rx[2] == 0x10) || (display_rx[1] == 0x05 && display_rx[2] == 0x05)) //call
 8000ea4:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <parse_display_request+0x178>)
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d103      	bne.n	8000eb4 <parse_display_request+0x14>
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <parse_display_request+0x178>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d007      	beq.n	8000ec4 <parse_display_request+0x24>
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <parse_display_request+0x178>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d116      	bne.n	8000eea <parse_display_request+0x4a>
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <parse_display_request+0x178>)
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d112      	bne.n	8000eea <parse_display_request+0x4a>
	{
		memcpy(call_task_data, display_rx, RX_SIZE);
 8000ec4:	4a55      	ldr	r2, [pc, #340]	; (800101c <parse_display_request+0x17c>)
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <parse_display_request+0x178>)
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f003 ff31 	bl	8004d38 <memcpy>
		PHONE_STATE = BUSY;
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <parse_display_request+0x180>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MO;
 8000edc:	4b51      	ldr	r3, [pc, #324]	; (8001024 <parse_display_request+0x184>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <parse_display_request+0x188>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e08e      	b.n	8001008 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x03 && display_rx[2] == 0x02) || (display_rx[1] == 0x04 && display_rx[2] == 0x02)) //Terminate call by user
 8000eea:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <parse_display_request+0x178>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d103      	bne.n	8000efa <parse_display_request+0x5a>
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <parse_display_request+0x178>)
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d007      	beq.n	8000f0a <parse_display_request+0x6a>
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <parse_display_request+0x178>)
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d107      	bne.n	8000f12 <parse_display_request+0x72>
 8000f02:	4b45      	ldr	r3, [pc, #276]	; (8001018 <parse_display_request+0x178>)
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d103      	bne.n	8000f12 <parse_display_request+0x72>
	{
		CALL_STATE = TERMINATE_CALL;
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <parse_display_request+0x188>)
 8000f0c:	2206      	movs	r2, #6
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e07a      	b.n	8001008 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x04 && display_rx[2] == 0x03) //Terminate call by user
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <parse_display_request+0x178>)
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d107      	bne.n	8000f2a <parse_display_request+0x8a>
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <parse_display_request+0x178>)
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d103      	bne.n	8000f2a <parse_display_request+0x8a>
	{
		CALL_STATE = ACCEPT_CALL;
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <parse_display_request+0x188>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e06e      	b.n	8001008 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x06 && display_rx[2] == 0x03)) //Add subscriber to phone book
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <parse_display_request+0x178>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d107      	bne.n	8000f42 <parse_display_request+0xa2>
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <parse_display_request+0x178>)
 8000f34:	789b      	ldrb	r3, [r3, #2]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d103      	bne.n	8000f42 <parse_display_request+0xa2>
	{
		add_subscriber(&display_rx[7]);
 8000f3a:	483c      	ldr	r0, [pc, #240]	; (800102c <parse_display_request+0x18c>)
 8000f3c:	f7ff fdb0 	bl	8000aa0 <add_subscriber>
 8000f40:	e062      	b.n	8001008 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x05 && display_rx[2] == 0x06) || (display_rx[1] == 0x05 && display_rx[2] == 0x03) //Get phonebook entry
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <parse_display_request+0x178>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d103      	bne.n	8000f52 <parse_display_request+0xb2>
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <parse_display_request+0x178>)
 8000f4c:	789b      	ldrb	r3, [r3, #2]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d00f      	beq.n	8000f72 <parse_display_request+0xd2>
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <parse_display_request+0x178>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d103      	bne.n	8000f62 <parse_display_request+0xc2>
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <parse_display_request+0x178>)
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d007      	beq.n	8000f72 <parse_display_request+0xd2>
			|| (display_rx[1] == 0x05 && display_rx[2] == 0x07))
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <parse_display_request+0x178>)
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d109      	bne.n	8000f7e <parse_display_request+0xde>
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <parse_display_request+0x178>)
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	2b07      	cmp	r3, #7
 8000f70:	d105      	bne.n	8000f7e <parse_display_request+0xde>
	{
		show_subscriber_with_index(display_rx[7]);
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <parse_display_request+0x178>)
 8000f74:	79db      	ldrb	r3, [r3, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fd02 	bl	8000980 <show_subscriber_with_index>
 8000f7c:	e044      	b.n	8001008 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x02 && display_rx[2] == 0x37)//Send sms
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <parse_display_request+0x178>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d110      	bne.n	8000fa8 <parse_display_request+0x108>
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <parse_display_request+0x178>)
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	2b37      	cmp	r3, #55	; 0x37
 8000f8c:	d10c      	bne.n	8000fa8 <parse_display_request+0x108>
	{
		memcpy(sms_task_data, display_rx, RX_SIZE);
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <parse_display_request+0x190>)
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <parse_display_request+0x178>)
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f003 fecc 	bl	8004d38 <memcpy>
		SMS_STATE = SEND_SMS;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <parse_display_request+0x194>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e02f      	b.n	8001008 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x09 && display_rx[2] == 0x02) || (display_rx[1] == 0x09 && display_rx[2] == 0x03) //Get message
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <parse_display_request+0x178>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d103      	bne.n	8000fb8 <parse_display_request+0x118>
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <parse_display_request+0x178>)
 8000fb2:	789b      	ldrb	r3, [r3, #2]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d017      	beq.n	8000fe8 <parse_display_request+0x148>
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <parse_display_request+0x178>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d103      	bne.n	8000fc8 <parse_display_request+0x128>
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <parse_display_request+0x178>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d00f      	beq.n	8000fe8 <parse_display_request+0x148>
			|| (display_rx[1] == 0x08 && display_rx[2] == 0x03) || (display_rx[1] == 0x00 && display_rx[2] == 0x06))
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <parse_display_request+0x178>)
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d103      	bne.n	8000fd8 <parse_display_request+0x138>
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <parse_display_request+0x178>)
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d007      	beq.n	8000fe8 <parse_display_request+0x148>
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <parse_display_request+0x178>)
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <parse_display_request+0x154>
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <parse_display_request+0x178>)
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d105      	bne.n	8000ff4 <parse_display_request+0x154>
	{
		show_text_message_index(display_rx[7]);
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <parse_display_request+0x178>)
 8000fea:	79db      	ldrb	r3, [r3, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fdb1 	bl	8000b54 <show_text_message_index>
 8000ff2:	e009      	b.n	8001008 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x00 && display_rx[2] == 0x12)//Send time
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <parse_display_request+0x178>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <parse_display_request+0x168>
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <parse_display_request+0x178>)
 8000ffe:	789b      	ldrb	r3, [r3, #2]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d101      	bne.n	8001008 <parse_display_request+0x168>
	{
		send_date_and_time();
 8001004:	f7ff fe40 	bl	8000c88 <send_date_and_time>
	}
	memset(display_rx, 0, RX_SIZE);
 8001008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100c:	2100      	movs	r1, #0
 800100e:	4802      	ldr	r0, [pc, #8]	; (8001018 <parse_display_request+0x178>)
 8001010:	f003 fe9d 	bl	8004d4e <memset>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000458 	.word	0x20000458
 800101c:	2000065c 	.word	0x2000065c
 8001020:	20000000 	.word	0x20000000
 8001024:	20002994 	.word	0x20002994
 8001028:	2000085d 	.word	0x2000085d
 800102c:	2000045f 	.word	0x2000045f
 8001030:	2000055c 	.word	0x2000055c
 8001034:	2000085e 	.word	0x2000085e

08001038 <interrupt_task_func>:

void interrupt_task_func(void *arg)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	char phone_state[] = "AT+CPAS\r\n";
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <interrupt_task_func+0x78>)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	ca07      	ldmia	r2, {r0, r1, r2}
 8001048:	c303      	stmia	r3!, {r0, r1}
 800104a:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(interruptHandle)
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <interrupt_task_func+0x7c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d028      	beq.n	80010a6 <interrupt_task_func+0x6e>
		{
			interruptHandle = 0;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <interrupt_task_func+0x7c>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(GSM_UART, (uint8_t*)phone_state, strlen(phone_state), 200);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f880 	bl	8000164 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f107 010c 	add.w	r1, r7, #12
 800106c:	23c8      	movs	r3, #200	; 0xc8
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <interrupt_task_func+0x80>)
 8001070:	f002 f877 	bl	8003162 <HAL_UART_Transmit>
			HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 500);
 8001074:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	490f      	ldr	r1, [pc, #60]	; (80010bc <interrupt_task_func+0x84>)
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <interrupt_task_func+0x80>)
 8001080:	f002 f901 	bl	8003286 <HAL_UART_Receive>
			if(at_response[10] == '3')
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <interrupt_task_func+0x84>)
 8001086:	7a9b      	ldrb	r3, [r3, #10]
 8001088:	2b33      	cmp	r3, #51	; 0x33
 800108a:	d102      	bne.n	8001092 <interrupt_task_func+0x5a>
			{
				call_detected();
 800108c:	f000 fb58 	bl	8001740 <call_detected>
 8001090:	e005      	b.n	800109e <interrupt_task_func+0x66>
			}
			else if(at_response[10] == '0')
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <interrupt_task_func+0x84>)
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	2b30      	cmp	r3, #48	; 0x30
 8001098:	d101      	bne.n	800109e <interrupt_task_func+0x66>
			{
				sms_detected();
 800109a:	f000 fbc1 	bl	8001820 <sms_detected>
			}
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800109e:	2006      	movs	r0, #6
 80010a0:	f000 ff7b 	bl	8001f9a <HAL_NVIC_EnableIRQ>
 80010a4:	e7d2      	b.n	800104c <interrupt_task_func+0x14>
		}
		else
			vTaskDelay(500 / portTICK_PERIOD_MS);
 80010a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010aa:	f002 ff17 	bl	8003edc <vTaskDelay>
		if(interruptHandle)
 80010ae:	e7cd      	b.n	800104c <interrupt_task_func+0x14>
 80010b0:	080062a0 	.word	0x080062a0
 80010b4:	20000454 	.word	0x20000454
 80010b8:	2000204c 	.word	0x2000204c
 80010bc:	2000075c 	.word	0x2000075c

080010c0 <display_uart_task_func>:
	}
}

void display_uart_task_func(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <display_uart_task_func+0x38>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <display_uart_task_func+0x3c>)
 80010ce:	4413      	add	r3, r2
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <display_uart_task_func+0x40>)
 80010d6:	f002 f975 	bl	80033c4 <HAL_UART_Receive_IT>
	while(1)
	{
		if(display_rec_flag)
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <display_uart_task_func+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <display_uart_task_func+0x2e>
		{
			display_rec_flag = FALSE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <display_uart_task_func+0x44>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
			parse_display_request();
 80010e8:	f7ff feda 	bl	8000ea0 <parse_display_request>
 80010ec:	e7f5      	b.n	80010da <display_uart_task_func+0x1a>
		}
		else
			vTaskDelay(500 / portTICK_PERIOD_MS);
 80010ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f2:	f002 fef3 	bl	8003edc <vTaskDelay>
		if(display_rec_flag)
 80010f6:	e7f0      	b.n	80010da <display_uart_task_func+0x1a>
 80010f8:	20000558 	.word	0x20000558
 80010fc:	20000458 	.word	0x20000458
 8001100:	20002950 	.word	0x20002950
 8001104:	2000085c 	.word	0x2000085c

08001108 <message_task_func>:
	}
}

void message_task_func(void *argument)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0c0      	sub	sp, #256	; 0x100
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	char text_mod[] = "AT+CMGF=1\r\n";
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <message_task_func+0x14c>)
 8001112:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001116:	ca07      	ldmia	r2, {r0, r1, r2}
 8001118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 800111c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fe12 	bl	8004d4e <memset>
	char message_command[160] = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	22a0      	movs	r2, #160	; 0xa0
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fe0b 	bl	8004d4e <memset>
	char *number;
	char *message;
	while(1)
	{
		switch (SMS_STATE) {
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <message_task_func+0x150>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d004      	beq.n	800114a <message_task_func+0x42>
 8001140:	2b02      	cmp	r3, #2
 8001142:	d076      	beq.n	8001232 <message_task_func+0x12a>
 8001144:	2b00      	cmp	r3, #0
 8001146:	d07e      	beq.n	8001246 <message_task_func+0x13e>
			break;
			case NO_SMS:
				vTaskDelay(500 / portTICK_PERIOD_MS);
			break;
			default:
			break;
 8001148:	e082      	b.n	8001250 <message_task_func+0x148>
				memset(at_response, 0, RX_SIZE);
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	2100      	movs	r1, #0
 8001150:	4842      	ldr	r0, [pc, #264]	; (800125c <message_task_func+0x154>)
 8001152:	f003 fdfc 	bl	8004d4e <memset>
				number = strtok(&sms_task_data[7], ">");
 8001156:	4942      	ldr	r1, [pc, #264]	; (8001260 <message_task_func+0x158>)
 8001158:	4842      	ldr	r0, [pc, #264]	; (8001264 <message_task_func+0x15c>)
 800115a:	f003 fe7d 	bl	8004e58 <strtok>
 800115e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				message = strtok(NULL, ">");
 8001162:	493f      	ldr	r1, [pc, #252]	; (8001260 <message_task_func+0x158>)
 8001164:	2000      	movs	r0, #0
 8001166:	f003 fe77 	bl	8004e58 <strtok>
 800116a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 800116e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001172:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001176:	493c      	ldr	r1, [pc, #240]	; (8001268 <message_task_func+0x160>)
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fdf1 	bl	8004d60 <siprintf>
				sprintf(&message_command[0], "%s", message);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fe43 	bl	8004e12 <strcpy>
				message_command[strlen(message_command)-1] = 26;
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4618      	mov	r0, r3
 8001192:	f7fe ffe7 	bl	8000164 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	3b01      	subs	r3, #1
 800119a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800119e:	4413      	add	r3, r2
 80011a0:	221a      	movs	r2, #26
 80011a2:	f803 2cf4 	strb.w	r2, [r3, #-244]
				HAL_UART_Transmit(GSM_UART, (uint8_t*)text_mod, strlen(text_mod), 400);
 80011a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7fe ffda 	bl	8000164 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80011b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011bc:	482b      	ldr	r0, [pc, #172]	; (800126c <message_task_func+0x164>)
 80011be:	f001 ffd0 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80011c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	4924      	ldr	r1, [pc, #144]	; (800125c <message_task_func+0x154>)
 80011cc:	4827      	ldr	r0, [pc, #156]	; (800126c <message_task_func+0x164>)
 80011ce:	f002 f85a 	bl	8003286 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)sender_command, strlen(sender_command), 400);
 80011d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7fe ffc4 	bl	8000164 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80011e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <message_task_func+0x164>)
 80011ea:	f001 ffba 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80011ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	4919      	ldr	r1, [pc, #100]	; (800125c <message_task_func+0x154>)
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <message_task_func+0x164>)
 80011fa:	f002 f844 	bl	8003286 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)message_command, strlen(sender_command), 400);
 80011fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffae 	bl	8000164 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 010c 	add.w	r1, r7, #12
 8001210:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001214:	4815      	ldr	r0, [pc, #84]	; (800126c <message_task_func+0x164>)
 8001216:	f001 ffa4 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 800121a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <message_task_func+0x154>)
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <message_task_func+0x164>)
 8001226:	f002 f82e 	bl	8003286 <HAL_UART_Receive>
				SMS_STATE = COMPLETED_SMS;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <message_task_func+0x150>)
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]
			break;
 8001230:	e00e      	b.n	8001250 <message_task_func+0x148>
				memset(sms_task_data, 0, RX_SIZE);
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	2100      	movs	r1, #0
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <message_task_func+0x168>)
 800123a:	f003 fd88 	bl	8004d4e <memset>
				SMS_STATE = NO_SMS;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <message_task_func+0x150>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
			break;
 8001244:	e004      	b.n	8001250 <message_task_func+0x148>
				vTaskDelay(500 / portTICK_PERIOD_MS);
 8001246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124a:	f002 fe47 	bl	8003edc <vTaskDelay>
			break;
 800124e:	bf00      	nop
		switch (SMS_STATE) {
 8001250:	e772      	b.n	8001138 <message_task_func+0x30>
 8001252:	bf00      	nop
 8001254:	080060dc 	.word	0x080060dc
 8001258:	2000085e 	.word	0x2000085e
 800125c:	2000075c 	.word	0x2000075c
 8001260:	08006188 	.word	0x08006188
 8001264:	20000563 	.word	0x20000563
 8001268:	080062ac 	.word	0x080062ac
 800126c:	2000204c 	.word	0x2000204c
 8001270:	2000055c 	.word	0x2000055c

08001274 <call_task_func>:
		}
	}
}

void call_task_func(void *argument)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b0d6      	sub	sp, #344	; 0x158
 8001278:	af00      	add	r7, sp, #0
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	6018      	str	r0, [r3, #0]
	char custom_command[64] = {0};
 800127e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fd61 	bl	8004d4e <memset>
	char check_status[] = "AT+CLCC\r\n";
 800128c:	4ab2      	ldr	r2, [pc, #712]	; (8001558 <call_task_func+0x2e4>)
 800128e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001292:	ca07      	ldmia	r2, {r0, r1, r2}
 8001294:	c303      	stmia	r3!, {r0, r1}
 8001296:	801a      	strh	r2, [r3, #0]
	char terminate_call[] = "ATH0\r\n";
 8001298:	4ab0      	ldr	r2, [pc, #704]	; (800155c <call_task_func+0x2e8>)
 800129a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	8019      	strh	r1, [r3, #0]
 80012a8:	3302      	adds	r3, #2
 80012aa:	0c0a      	lsrs	r2, r1, #16
 80012ac:	701a      	strb	r2, [r3, #0]
	char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 80012ae:	4bac      	ldr	r3, [pc, #688]	; (8001560 <call_task_func+0x2ec>)
 80012b0:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80012b4:	461d      	mov	r5, r3
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c2:	6020      	str	r0, [r4, #0]
 80012c4:	3404      	adds	r4, #4
 80012c6:	8021      	strh	r1, [r4, #0]
	char send_call_start[] = "call_progress.t1.txt=\"Call Active!!\"\xFF\xFF\xFF";
 80012c8:	4ba6      	ldr	r3, [pc, #664]	; (8001564 <call_task_func+0x2f0>)
 80012ca:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80012ce:	461d      	mov	r5, r3
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012dc:	e884 0003 	stmia.w	r4, {r0, r1}
	char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 80012e0:	4ba1      	ldr	r3, [pc, #644]	; (8001568 <call_task_func+0x2f4>)
 80012e2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f0:	c403      	stmia	r4!, {r0, r1}
 80012f2:	8022      	strh	r2, [r4, #0]
	char send_call_start_incoming[] = "incoming_call.t2.txt=\"Call Active!\"\xFF\xFF\xFF";
 80012f4:	4b9d      	ldr	r3, [pc, #628]	; (800156c <call_task_func+0x2f8>)
 80012f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012fa:	461d      	mov	r5, r3
 80012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001304:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001308:	6020      	str	r0, [r4, #0]
 800130a:	3404      	adds	r4, #4
 800130c:	8021      	strh	r1, [r4, #0]
 800130e:	3402      	adds	r4, #2
 8001310:	0c0b      	lsrs	r3, r1, #16
 8001312:	7023      	strb	r3, [r4, #0]
	char send_call_end_incoming[] = "incoming_call.t2.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8001314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001318:	4a95      	ldr	r2, [pc, #596]	; (8001570 <call_task_func+0x2fc>)
 800131a:	461c      	mov	r4, r3
 800131c:	4615      	mov	r5, r2
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001326:	e895 0003 	ldmia.w	r5, {r0, r1}
 800132a:	6020      	str	r0, [r4, #0]
 800132c:	3404      	adds	r4, #4
 800132e:	8021      	strh	r1, [r4, #0]
	char answer_call[] = "ATA\r\n";
 8001330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001334:	4a8f      	ldr	r2, [pc, #572]	; (8001574 <call_task_func+0x300>)
 8001336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133a:	6018      	str	r0, [r3, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	8019      	strh	r1, [r3, #0]
	char incoming_page[] = "page incoming_call\xFF\xFF\xFF";
 8001340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001344:	4a8c      	ldr	r2, [pc, #560]	; (8001578 <call_task_func+0x304>)
 8001346:	461c      	mov	r4, r3
 8001348:	4615      	mov	r5, r2
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001352:	6020      	str	r0, [r4, #0]
 8001354:	3404      	adds	r4, #4
 8001356:	8021      	strh	r1, [r4, #0]
	char start_page_timer_incoming[] = "incoming_call.tm0.en=1\xFF\xFF\xFF";
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4a87      	ldr	r2, [pc, #540]	; (800157c <call_task_func+0x308>)
 800135e:	461c      	mov	r4, r3
 8001360:	4615      	mov	r5, r2
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136a:	c403      	stmia	r4!, {r0, r1}
 800136c:	8022      	strh	r2, [r4, #0]
	while(1)
	{
		switch(CALL_STATE)
 800136e:	4b84      	ldr	r3, [pc, #528]	; (8001580 <call_task_func+0x30c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b07      	cmp	r3, #7
 8001374:	f200 81cc 	bhi.w	8001710 <call_task_func+0x49c>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <call_task_func+0x10c>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001707 	.word	0x08001707
 8001384:	080013a1 	.word	0x080013a1
 8001388:	08001711 	.word	0x08001711
 800138c:	08001711 	.word	0x08001711
 8001390:	08001485 	.word	0x08001485
 8001394:	080015ad 	.word	0x080015ad
 8001398:	08001635 	.word	0x08001635
 800139c:	08001517 	.word	0x08001517
		{
			case INITIATE_CALL:
				memset(at_response, 0, RX_SIZE);
 80013a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a4:	2100      	movs	r1, #0
 80013a6:	4877      	ldr	r0, [pc, #476]	; (8001584 <call_task_func+0x310>)
 80013a8:	f003 fcd1 	bl	8004d4e <memset>
				call_task_data[strlen(call_task_data)-1] = '\0';
 80013ac:	4876      	ldr	r0, [pc, #472]	; (8001588 <call_task_func+0x314>)
 80013ae:	f7fe fed9 	bl	8000164 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a74      	ldr	r2, [pc, #464]	; (8001588 <call_task_func+0x314>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	54d1      	strb	r1, [r2, r3]
				if(CALL_TYPE == MO)
 80013bc:	4b73      	ldr	r3, [pc, #460]	; (800158c <call_task_func+0x318>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d133      	bne.n	800142c <call_task_func+0x1b8>
				{
					sprintf(&custom_command[0], "ATD+%si;\r\n", &call_task_data[8]);
 80013c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013c8:	4a71      	ldr	r2, [pc, #452]	; (8001590 <call_task_func+0x31c>)
 80013ca:	4972      	ldr	r1, [pc, #456]	; (8001594 <call_task_func+0x320>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fcc7 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(GSM_UART, (uint8_t*)&custom_command[0], strlen(custom_command), 500);
 80013d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe fec4 	bl	8000164 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80013e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e8:	486b      	ldr	r0, [pc, #428]	; (8001598 <call_task_func+0x324>)
 80013ea:	f001 feba 	bl	8003162 <HAL_UART_Transmit>
					HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 5000);
 80013ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	4963      	ldr	r1, [pc, #396]	; (8001584 <call_task_func+0x310>)
 80013f8:	4867      	ldr	r0, [pc, #412]	; (8001598 <call_task_func+0x324>)
 80013fa:	f001 ff44 	bl	8003286 <HAL_UART_Receive>
					if(strstr(at_response,"OK") != NULL && (at_response[2] == 'O' || at_response[3] == 'O'))
 80013fe:	4967      	ldr	r1, [pc, #412]	; (800159c <call_task_func+0x328>)
 8001400:	4860      	ldr	r0, [pc, #384]	; (8001584 <call_task_func+0x310>)
 8001402:	f003 fd0e 	bl	8004e22 <strstr>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00b      	beq.n	8001424 <call_task_func+0x1b0>
 800140c:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <call_task_func+0x310>)
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	2b4f      	cmp	r3, #79	; 0x4f
 8001412:	d003      	beq.n	800141c <call_task_func+0x1a8>
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <call_task_func+0x310>)
 8001416:	78db      	ldrb	r3, [r3, #3]
 8001418:	2b4f      	cmp	r3, #79	; 0x4f
 800141a:	d103      	bne.n	8001424 <call_task_func+0x1b0>
						CALL_STATE = DIALING;
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <call_task_func+0x30c>)
 800141e:	2204      	movs	r2, #4
 8001420:	701a      	strb	r2, [r3, #0]
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
					CALL_STATE = CHECK_CALL_STATE;
				}
			break;
 8001422:	e177      	b.n	8001714 <call_task_func+0x4a0>
						CALL_STATE = TERMINATE_CALL;
 8001424:	4b56      	ldr	r3, [pc, #344]	; (8001580 <call_task_func+0x30c>)
 8001426:	2206      	movs	r2, #6
 8001428:	701a      	strb	r2, [r3, #0]
			break;
 800142a:	e173      	b.n	8001714 <call_task_func+0x4a0>
				else if(CALL_TYPE == MT)
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <call_task_func+0x318>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 816f 	bne.w	8001714 <call_task_func+0x4a0>
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
 8001436:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800143a:	4a53      	ldr	r2, [pc, #332]	; (8001588 <call_task_func+0x314>)
 800143c:	4958      	ldr	r1, [pc, #352]	; (80015a0 <call_task_func+0x32c>)
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fc8e 	bl	8004d60 <siprintf>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe fe8b 	bl	8000164 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001456:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800145a:	4852      	ldr	r0, [pc, #328]	; (80015a4 <call_task_func+0x330>)
 800145c:	f001 fe81 	bl	8003162 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
 8001460:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe fe7d 	bl	8000164 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001472:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001476:	484b      	ldr	r0, [pc, #300]	; (80015a4 <call_task_func+0x330>)
 8001478:	f001 fe73 	bl	8003162 <HAL_UART_Transmit>
					CALL_STATE = CHECK_CALL_STATE;
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <call_task_func+0x30c>)
 800147e:	2205      	movs	r2, #5
 8001480:	701a      	strb	r2, [r3, #0]
			break;
 8001482:	e147      	b.n	8001714 <call_task_func+0x4a0>
			case DIALING:
				memset(at_response, 0, RX_SIZE);
 8001484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001488:	2100      	movs	r1, #0
 800148a:	483e      	ldr	r0, [pc, #248]	; (8001584 <call_task_func+0x310>)
 800148c:	f003 fc5f 	bl	8004d4e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8001490:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fe65 	bl	8000164 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80014a2:	23c8      	movs	r3, #200	; 0xc8
 80014a4:	483c      	ldr	r0, [pc, #240]	; (8001598 <call_task_func+0x324>)
 80014a6:	f001 fe5c 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80014aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	4934      	ldr	r1, [pc, #208]	; (8001584 <call_task_func+0x310>)
 80014b4:	4838      	ldr	r0, [pc, #224]	; (8001598 <call_task_func+0x324>)
 80014b6:	f001 fee6 	bl	8003286 <HAL_UART_Receive>
				if(strstr(at_response,"1,0,0") != NULL)
 80014ba:	493b      	ldr	r1, [pc, #236]	; (80015a8 <call_task_func+0x334>)
 80014bc:	4831      	ldr	r0, [pc, #196]	; (8001584 <call_task_func+0x310>)
 80014be:	f003 fcb0 	bl	8004e22 <strstr>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d011      	beq.n	80014ec <call_task_func+0x278>
				{
					CALL_STATE = CHECK_CALL_STATE;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <call_task_func+0x30c>)
 80014ca:	2205      	movs	r2, #5
 80014cc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start, strlen(send_call_start), 300);
 80014ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe46 	bl	8000164 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80014e0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014e4:	482f      	ldr	r0, [pc, #188]	; (80015a4 <call_task_func+0x330>)
 80014e6:	f001 fe3c 	bl	8003162 <HAL_UART_Transmit>
				}
				else if(strstr(at_response,"OK") != NULL && (at_response[2] == 'O' || at_response[3] == 'O'))
					CALL_STATE = TERMINATE_CALL;
			break;
 80014ea:	e115      	b.n	8001718 <call_task_func+0x4a4>
				else if(strstr(at_response,"OK") != NULL && (at_response[2] == 'O' || at_response[3] == 'O'))
 80014ec:	492b      	ldr	r1, [pc, #172]	; (800159c <call_task_func+0x328>)
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <call_task_func+0x310>)
 80014f0:	f003 fc97 	bl	8004e22 <strstr>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 810e 	beq.w	8001718 <call_task_func+0x4a4>
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <call_task_func+0x310>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	2b4f      	cmp	r3, #79	; 0x4f
 8001502:	d004      	beq.n	800150e <call_task_func+0x29a>
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <call_task_func+0x310>)
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	2b4f      	cmp	r3, #79	; 0x4f
 800150a:	f040 8105 	bne.w	8001718 <call_task_func+0x4a4>
					CALL_STATE = TERMINATE_CALL;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <call_task_func+0x30c>)
 8001510:	2206      	movs	r2, #6
 8001512:	701a      	strb	r2, [r3, #0]
			break;
 8001514:	e100      	b.n	8001718 <call_task_func+0x4a4>
			case ACCEPT_CALL:
				HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start_incoming, strlen(send_call_start_incoming), 300);
 8001516:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe fe22 	bl	8000164 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001528:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800152c:	481d      	ldr	r0, [pc, #116]	; (80015a4 <call_task_func+0x330>)
 800152e:	f001 fe18 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)answer_call, strlen(answer_call), 300);
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fe14 	bl	8000164 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001544:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001548:	4813      	ldr	r0, [pc, #76]	; (8001598 <call_task_func+0x324>)
 800154a:	f001 fe0a 	bl	8003162 <HAL_UART_Transmit>
				CALL_STATE = CHECK_CALL_STATE;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <call_task_func+0x30c>)
 8001550:	2205      	movs	r2, #5
 8001552:	701a      	strb	r2, [r3, #0]
			break;
 8001554:	e0e1      	b.n	800171a <call_task_func+0x4a6>
 8001556:	bf00      	nop
 8001558:	080062f8 	.word	0x080062f8
 800155c:	08006304 	.word	0x08006304
 8001560:	0800630c 	.word	0x0800630c
 8001564:	08006334 	.word	0x08006334
 8001568:	0800635c 	.word	0x0800635c
 800156c:	08006378 	.word	0x08006378
 8001570:	080063a0 	.word	0x080063a0
 8001574:	080063c8 	.word	0x080063c8
 8001578:	080063d0 	.word	0x080063d0
 800157c:	080063e8 	.word	0x080063e8
 8001580:	2000085d 	.word	0x2000085d
 8001584:	2000075c 	.word	0x2000075c
 8001588:	2000065c 	.word	0x2000065c
 800158c:	20002994 	.word	0x20002994
 8001590:	20000664 	.word	0x20000664
 8001594:	080062bc 	.word	0x080062bc
 8001598:	2000204c 	.word	0x2000204c
 800159c:	080062c8 	.word	0x080062c8
 80015a0:	080062cc 	.word	0x080062cc
 80015a4:	20002950 	.word	0x20002950
 80015a8:	080062ec 	.word	0x080062ec
			case CHECK_CALL_STATE:
				memset(at_response, 0, RX_SIZE);
 80015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b0:	2100      	movs	r1, #0
 80015b2:	485a      	ldr	r0, [pc, #360]	; (800171c <call_task_func+0x4a8>)
 80015b4:	f003 fbcb 	bl	8004d4e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 80015b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fdd1 	bl	8000164 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80015ca:	23c8      	movs	r3, #200	; 0xc8
 80015cc:	4854      	ldr	r0, [pc, #336]	; (8001720 <call_task_func+0x4ac>)
 80015ce:	f001 fdc8 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80015d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	4950      	ldr	r1, [pc, #320]	; (800171c <call_task_func+0x4a8>)
 80015dc:	4850      	ldr	r0, [pc, #320]	; (8001720 <call_task_func+0x4ac>)
 80015de:	f001 fe52 	bl	8003286 <HAL_UART_Receive>
				if(CALL_TYPE == MT && ((strstr(at_response,"1,1") == NULL) || (strstr(at_response,"1,1") == NULL)))
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <call_task_func+0x4b0>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <call_task_func+0x39a>
 80015ea:	494f      	ldr	r1, [pc, #316]	; (8001728 <call_task_func+0x4b4>)
 80015ec:	484b      	ldr	r0, [pc, #300]	; (800171c <call_task_func+0x4a8>)
 80015ee:	f003 fc18 	bl	8004e22 <strstr>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <call_task_func+0x392>
 80015f8:	494b      	ldr	r1, [pc, #300]	; (8001728 <call_task_func+0x4b4>)
 80015fa:	4848      	ldr	r0, [pc, #288]	; (800171c <call_task_func+0x4a8>)
 80015fc:	f003 fc11 	bl	8004e22 <strstr>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <call_task_func+0x39a>
					CALL_STATE = TERMINATE_CALL;
 8001606:	4b49      	ldr	r3, [pc, #292]	; (800172c <call_task_func+0x4b8>)
 8001608:	2206      	movs	r2, #6
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	e00d      	b.n	800162a <call_task_func+0x3b6>
				else if(CALL_TYPE == MO && strstr(at_response,"1,0,0") == NULL)
 800160e:	4b45      	ldr	r3, [pc, #276]	; (8001724 <call_task_func+0x4b0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <call_task_func+0x3b6>
 8001616:	4946      	ldr	r1, [pc, #280]	; (8001730 <call_task_func+0x4bc>)
 8001618:	4840      	ldr	r0, [pc, #256]	; (800171c <call_task_func+0x4a8>)
 800161a:	f003 fc02 	bl	8004e22 <strstr>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <call_task_func+0x3b6>
					CALL_STATE = TERMINATE_CALL;
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <call_task_func+0x4b8>)
 8001626:	2206      	movs	r2, #6
 8001628:	701a      	strb	r2, [r3, #0]

				vTaskDelay(500 / portTICK_PERIOD_MS);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f002 fc55 	bl	8003edc <vTaskDelay>
			break;
 8001632:	e072      	b.n	800171a <call_task_func+0x4a6>
			case TERMINATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	2100      	movs	r1, #0
 800163a:	4838      	ldr	r0, [pc, #224]	; (800171c <call_task_func+0x4a8>)
 800163c:	f003 fb87 	bl	8004d4e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)terminate_call, strlen(terminate_call), 200);
 8001640:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fd8d 	bl	8000164 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001652:	23c8      	movs	r3, #200	; 0xc8
 8001654:	4832      	ldr	r0, [pc, #200]	; (8001720 <call_task_func+0x4ac>)
 8001656:	f001 fd84 	bl	8003162 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 800165a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800165e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001662:	492e      	ldr	r1, [pc, #184]	; (800171c <call_task_func+0x4a8>)
 8001664:	482e      	ldr	r0, [pc, #184]	; (8001720 <call_task_func+0x4ac>)
 8001666:	f001 fe0e 	bl	8003286 <HAL_UART_Receive>
				if(CALL_TYPE == MO)
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <call_task_func+0x4b0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11c      	bne.n	80016ac <call_task_func+0x438>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end, strlen(send_call_end), 300);
 8001672:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fd74 	bl	8000164 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8001684:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001688:	482a      	ldr	r0, [pc, #168]	; (8001734 <call_task_func+0x4c0>)
 800168a:	f001 fd6a 	bl	8003162 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer, strlen(start_page_timer), 300);
 800168e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fd66 	bl	8000164 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80016a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016a4:	4823      	ldr	r0, [pc, #140]	; (8001734 <call_task_func+0x4c0>)
 80016a6:	f001 fd5c 	bl	8003162 <HAL_UART_Transmit>
 80016aa:	e01f      	b.n	80016ec <call_task_func+0x478>
				}
				else if(CALL_TYPE == MT)
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <call_task_func+0x4b0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11b      	bne.n	80016ec <call_task_func+0x478>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end_incoming, strlen(send_call_end_incoming), 300);
 80016b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fd53 	bl	8000164 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80016c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <call_task_func+0x4c0>)
 80016cc:	f001 fd49 	bl	8003162 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer_incoming, strlen(start_page_timer_incoming), 300);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd45 	bl	8000164 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 010c 	add.w	r1, r7, #12
 80016e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016e6:	4813      	ldr	r0, [pc, #76]	; (8001734 <call_task_func+0x4c0>)
 80016e8:	f001 fd3b 	bl	8003162 <HAL_UART_Transmit>
				}
				memset(call_task_data, 0, RX_SIZE);
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	2100      	movs	r1, #0
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <call_task_func+0x4c4>)
 80016f4:	f003 fb2b 	bl	8004d4e <memset>
				PHONE_STATE = IDLE;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <call_task_func+0x4c8>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
				CALL_STATE = NO_CALL;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <call_task_func+0x4b8>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
			break;
 8001704:	e009      	b.n	800171a <call_task_func+0x4a6>
			case NO_CALL:
				vTaskDelay(500 / portTICK_PERIOD_MS);
 8001706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800170a:	f002 fbe7 	bl	8003edc <vTaskDelay>
			break;
 800170e:	e004      	b.n	800171a <call_task_func+0x4a6>
			default:
			break;
 8001710:	bf00      	nop
 8001712:	e62c      	b.n	800136e <call_task_func+0xfa>
			break;
 8001714:	bf00      	nop
 8001716:	e62a      	b.n	800136e <call_task_func+0xfa>
			break;
 8001718:	bf00      	nop
		switch(CALL_STATE)
 800171a:	e628      	b.n	800136e <call_task_func+0xfa>
 800171c:	2000075c 	.word	0x2000075c
 8001720:	2000204c 	.word	0x2000204c
 8001724:	20002994 	.word	0x20002994
 8001728:	080062f4 	.word	0x080062f4
 800172c:	2000085d 	.word	0x2000085d
 8001730:	080062ec 	.word	0x080062ec
 8001734:	20002950 	.word	0x20002950
 8001738:	2000065c 	.word	0x2000065c
 800173c:	20000000 	.word	0x20000000

08001740 <call_detected>:

	}
}

void call_detected()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
	char check_call[] = "AT+CLCC\r\n";
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <call_detected+0xc0>)
 8001748:	463b      	mov	r3, r7
 800174a:	ca07      	ldmia	r2, {r0, r1, r2}
 800174c:	c303      	stmia	r3!, {r0, r1}
 800174e:	801a      	strh	r2, [r3, #0]
	int index;
	char *p1, *p2;
	memset(at_response, 0, sizeof(at_response));
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	2100      	movs	r1, #0
 8001756:	482b      	ldr	r0, [pc, #172]	; (8001804 <call_detected+0xc4>)
 8001758:	f003 faf9 	bl	8004d4e <memset>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)check_call, strlen(check_call), 200);
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd00 	bl	8000164 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4639      	mov	r1, r7
 800176a:	23c8      	movs	r3, #200	; 0xc8
 800176c:	4826      	ldr	r0, [pc, #152]	; (8001808 <call_detected+0xc8>)
 800176e:	f001 fcf8 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8001772:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177a:	4922      	ldr	r1, [pc, #136]	; (8001804 <call_detected+0xc4>)
 800177c:	4822      	ldr	r0, [pc, #136]	; (8001808 <call_detected+0xc8>)
 800177e:	f001 fd82 	bl	8003286 <HAL_UART_Receive>
	if(strstr(at_response, "1,1,4") && PHONE_STATE == IDLE)
 8001782:	4922      	ldr	r1, [pc, #136]	; (800180c <call_detected+0xcc>)
 8001784:	481f      	ldr	r0, [pc, #124]	; (8001804 <call_detected+0xc4>)
 8001786:	f003 fb4c 	bl	8004e22 <strstr>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d032      	beq.n	80017f6 <call_detected+0xb6>
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <call_detected+0xd0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d12e      	bne.n	80017f6 <call_detected+0xb6>
	{
		index = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
		p1 = strstr(at_response, "\"");
 800179c:	2122      	movs	r1, #34	; 0x22
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <call_detected+0xc4>)
 80017a0:	f003 fb2a 	bl	8004df8 <strchr>
 80017a4:	6138      	str	r0, [r7, #16]
		p1++;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3301      	adds	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
		if(p1)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00f      	beq.n	80017d2 <call_detected+0x92>
			p2 = strstr(p1,"\"");
 80017b2:	2122      	movs	r1, #34	; 0x22
 80017b4:	6938      	ldr	r0, [r7, #16]
 80017b6:	f003 fb1f 	bl	8004df8 <strchr>
 80017ba:	60f8      	str	r0, [r7, #12]
		while(p1 != p2)
 80017bc:	e009      	b.n	80017d2 <call_detected+0x92>
		{
			call_task_data[index++] = *p1;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	617a      	str	r2, [r7, #20]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	7811      	ldrb	r1, [r2, #0]
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <call_detected+0xd4>)
 80017ca:	54d1      	strb	r1, [r2, r3]
			p1++;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	3301      	adds	r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
		while(p1 != p2)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d1f1      	bne.n	80017be <call_detected+0x7e>
		}
		call_task_data[index] = '\n';
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <call_detected+0xd4>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4413      	add	r3, r2
 80017e0:	220a      	movs	r2, #10
 80017e2:	701a      	strb	r2, [r3, #0]
		PHONE_STATE = BUSY;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <call_detected+0xd0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MT;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <call_detected+0xd8>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <call_detected+0xdc>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
	}
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	080062f8 	.word	0x080062f8
 8001804:	2000075c 	.word	0x2000075c
 8001808:	2000204c 	.word	0x2000204c
 800180c:	08006404 	.word	0x08006404
 8001810:	20000000 	.word	0x20000000
 8001814:	2000065c 	.word	0x2000065c
 8001818:	20002994 	.word	0x20002994
 800181c:	2000085d 	.word	0x2000085d

08001820 <sms_detected>:

void sms_detected()
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b0ac      	sub	sp, #176	; 0xb0
 8001824:	af00      	add	r7, sp, #0
	char message_buf[96] = {0};
 8001826:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800182a:	2260      	movs	r2, #96	; 0x60
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fa8d 	bl	8004d4e <memset>
	char get_entry[20] ={0};
 8001834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
	char new_mess[]="main_page.t1.txt=\"New message! Tap to read!\"\xFF\xFF\xFF";
 8001844:	4b66      	ldr	r3, [pc, #408]	; (80019e0 <sms_detected+0x1c0>)
 8001846:	463c      	mov	r4, r7
 8001848:	461d      	mov	r5, r3
 800184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *p1, *p2;
	int index = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sprintf(get_entry, "AT+CMGR=%d\r\n", sim_message_index+1);
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <sms_detected+0x1c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186a:	495f      	ldr	r1, [pc, #380]	; (80019e8 <sms_detected+0x1c8>)
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fa77 	bl	8004d60 <siprintf>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 8001872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fc74 	bl	8000164 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001884:	23c8      	movs	r3, #200	; 0xc8
 8001886:	4859      	ldr	r0, [pc, #356]	; (80019ec <sms_detected+0x1cc>)
 8001888:	f001 fc6b 	bl	8003162 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 800188c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001894:	2260      	movs	r2, #96	; 0x60
 8001896:	4855      	ldr	r0, [pc, #340]	; (80019ec <sms_detected+0x1cc>)
 8001898:	f001 fcf5 	bl	8003286 <HAL_UART_Receive>
	if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 800189c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a0:	4953      	ldr	r1, [pc, #332]	; (80019f0 <sms_detected+0x1d0>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fc54 	bl	8000150 <strcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8094 	beq.w	80019d8 <sms_detected+0x1b8>
		return;
	p1 = strstr(message_buf, "\"+");
 80018b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b4:	494f      	ldr	r1, [pc, #316]	; (80019f4 <sms_detected+0x1d4>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fab3 	bl	8004e22 <strstr>
 80018bc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 80018c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c4:	3301      	adds	r3, #1
 80018c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 80018ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01f      	beq.n	8001912 <sms_detected+0xf2>
	  p2 = strstr(p1,"\"");
 80018d2:	2122      	movs	r1, #34	; 0x22
 80018d4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80018d8:	f003 fa8e 	bl	8004df8 <strchr>
 80018dc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	while(p1 != p2)
 80018e0:	e017      	b.n	8001912 <sms_detected+0xf2>
	{
	  messages[running_message_index].sender[index++] = *p1;
 80018e2:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <sms_detected+0x1d8>)
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018ea:	1c53      	adds	r3, r2, #1
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f4:	781c      	ldrb	r4, [r3, #0]
 80018f6:	4841      	ldr	r0, [pc, #260]	; (80019fc <sms_detected+0x1dc>)
 80018f8:	460b      	mov	r3, r1
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a5b      	subs	r3, r3, r1
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4403      	add	r3, r0
 8001902:	4413      	add	r3, r2
 8001904:	4622      	mov	r2, r4
 8001906:	701a      	strb	r2, [r3, #0]
	  p1++;
 8001908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190c:	3301      	adds	r3, #1
 800190e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 8001912:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800191a:	429a      	cmp	r2, r3
 800191c:	d1e1      	bne.n	80018e2 <sms_detected+0xc2>
	}
	p2++;
 800191e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	p1 = strstr(p2, "\n");
 8001928:	210a      	movs	r1, #10
 800192a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800192e:	f003 fa63 	bl	8004df8 <strchr>
 8001932:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 8001936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 8001940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <sms_detected+0x136>
	  p2 = strstr(p1,"\r");
 8001948:	210d      	movs	r1, #13
 800194a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800194e:	f003 fa53 	bl	8004df8 <strchr>
 8001952:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	index = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while(p1 != p2)
 800195c:	e018      	b.n	8001990 <sms_detected+0x170>
	{
	  messages[running_message_index].message[index++] = *p1;
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <sms_detected+0x1d8>)
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001966:	1c53      	adds	r3, r2, #1
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800196c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001970:	781c      	ldrb	r4, [r3, #0]
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <sms_detected+0x1dc>)
 8001974:	460b      	mov	r3, r1
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a5b      	subs	r3, r3, r1
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4403      	add	r3, r0
 800197e:	4413      	add	r3, r2
 8001980:	3310      	adds	r3, #16
 8001982:	4622      	mov	r2, r4
 8001984:	701a      	strb	r2, [r3, #0]
	  p1++;
 8001986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800198a:	3301      	adds	r3, #1
 800198c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 8001990:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001998:	429a      	cmp	r2, r3
 800199a:	d1e0      	bne.n	800195e <sms_detected+0x13e>
	}
	running_message_index++;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <sms_detected+0x1d8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <sms_detected+0x1d8>)
 80019a4:	6013      	str	r3, [r2, #0]
	sim_message_index++;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <sms_detected+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <sms_detected+0x1c4>)
 80019ae:	6013      	str	r3, [r2, #0]
	if(running_message_index == 20)
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <sms_detected+0x1d8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b14      	cmp	r3, #20
 80019b6:	d102      	bne.n	80019be <sms_detected+0x19e>
		running_message_index = 0;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <sms_detected+0x1d8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)new_mess, strlen(new_mess), 300);
 80019be:	463b      	mov	r3, r7
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fbcf 	bl	8000164 <strlen>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4639      	mov	r1, r7
 80019cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <sms_detected+0x1e0>)
 80019d2:	f001 fbc6 	bl	8003162 <HAL_UART_Transmit>
 80019d6:	e000      	b.n	80019da <sms_detected+0x1ba>
		return;
 80019d8:	bf00      	nop
}
 80019da:	37b0      	adds	r7, #176	; 0xb0
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdb0      	pop	{r4, r5, r7, pc}
 80019e0:	0800640c 	.word	0x0800640c
 80019e4:	20000864 	.word	0x20000864
 80019e8:	08006078 	.word	0x08006078
 80019ec:	2000204c 	.word	0x2000204c
 80019f0:	08006070 	.word	0x08006070
 80019f4:	08006088 	.word	0x08006088
 80019f8:	20000868 	.word	0x20000868
 80019fc:	20002090 	.word	0x20002090
 8001a00:	20002950 	.word	0x20002950

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a16:	f000 f9d3 	bl	8001dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <Error_Handler+0x6>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_MspInit+0x68>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_MspInit+0x68>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_MspInit+0x68>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x68>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_MspInit+0x68>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x68>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	210f      	movs	r1, #15
 8001a6a:	f06f 0001 	mvn.w	r0, #1
 8001a6e:	f000 fa78 	bl	8001f62 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MspInit+0x6c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_MspInit+0x6c>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d132      	bne.n	8001b26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	4619      	mov	r1, r3
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <HAL_UART_MspInit+0x110>)
 8001b06:	f000 facd 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <HAL_UART_MspInit+0x110>)
 8001b20:	f000 fac0 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b24:	e03c      	b.n	8001ba0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_UART_MspInit+0x114>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d137      	bne.n	8001ba0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b60:	2304      	movs	r3, #4
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <HAL_UART_MspInit+0x110>)
 8001b74:	f000 fa96 	bl	80020a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <HAL_UART_MspInit+0x110>)
 8001b8c:	f000 fa8a 	bl	80020a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2105      	movs	r1, #5
 8001b94:	2026      	movs	r0, #38	; 0x26
 8001b96:	f000 f9e4 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9a:	2026      	movs	r0, #38	; 0x26
 8001b9c:	f000 f9fd 	bl	8001f9a <HAL_NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2019      	movs	r0, #25
 8001bce:	f000 f9c8 	bl	8001f62 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f000 f9e1 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_InitTick+0x9c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_InitTick+0x9c>)
 8001bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_InitTick+0x9c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf0:	f107 0210 	add.w	r2, r7, #16
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 ffcc 	bl	8002b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c00:	f000 ffb6 	bl	8002b70 <HAL_RCC_GetPCLK2Freq>
 8001c04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_InitTick+0xa0>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	3b01      	subs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_InitTick+0xa8>)
 8001c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c36:	f000 fffd 	bl	8002c34 <HAL_TIM_Base_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c40:	4806      	ldr	r0, [pc, #24]	; (8001c5c <HAL_InitTick+0xa4>)
 8001c42:	f001 f84f 	bl	8002ce4 <HAL_TIM_Base_Start_IT>
 8001c46:	4603      	mov	r3, r0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	20002998 	.word	0x20002998
 8001c60:	40012c00 	.word	0x40012c00

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
	...

08001c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fb5f 	bl	8002358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	interruptHandle = 1;
 8001c9a:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <EXTI0_IRQHandler+0x14>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 1 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000454 	.word	0x20000454

08001ca8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM1_UP_IRQHandler+0x10>)
 8001cae:	f001 f86b 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20002998 	.word	0x20002998

08001cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <USART2_IRQHandler+0x10>)
 8001cc2:	f001 fbd3 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20002950 	.word	0x20002950

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f002 fff0 	bl	8004ce4 <__errno>
 8001d04:	4602      	mov	r2, r0
 8001d06:	230c      	movs	r3, #12
 8001d08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20005000 	.word	0x20005000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	2000086c 	.word	0x2000086c
 8001d38:	200029e8 	.word	0x200029e8

08001d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d4a:	e003      	b.n	8001d54 <LoopCopyDataInit>

08001d4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d52:	3104      	adds	r1, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d5c:	d3f6      	bcc.n	8001d4c <CopyDataInit>
  ldr r2, =_sbss
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d60:	e002      	b.n	8001d68 <LoopFillZerobss>

08001d62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d64:	f842 3b04 	str.w	r3, [r2], #4

08001d68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d6c:	d3f9      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6e:	f7ff ffe5 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f002 ffbd 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d76:	f7fe fa49 	bl	800020c <main>
  bx lr
 8001d7a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d7c:	08006640 	.word	0x08006640
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d84:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001d88:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001d8c:	200029e8 	.word	0x200029e8

08001d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC1_2_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x28>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x28>)
 8001d9e:	f043 0310 	orr.w	r3, r3, #16
 8001da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f8d1 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff ff04 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fe3e 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x1c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_IncTick+0x20>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_IncTick+0x20>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	2000000c 	.word	0x2000000c
 8001de0:	200029e0 	.word	0x200029e0

08001de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_GetTick+0x10>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	200029e0 	.word	0x200029e0

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <__NVIC_EnableIRQ+0x34>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff4f 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff64 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ffb2 	bl	8001ee8 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff81 	bl	8001e94 <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff57 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d005      	beq.n	8001fda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e051      	b.n	800207e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 020e 	bic.w	r2, r2, #14
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_DMA_Abort_IT+0xd0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d029      	beq.n	8002058 <HAL_DMA_Abort_IT+0xa0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_DMA_Abort_IT+0xd4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_Abort_IT+0x9c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_DMA_Abort_IT+0xd8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01a      	beq.n	800204e <HAL_DMA_Abort_IT+0x96>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_DMA_Abort_IT+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d012      	beq.n	8002048 <HAL_DMA_Abort_IT+0x90>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_DMA_Abort_IT+0xe0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00a      	beq.n	8002042 <HAL_DMA_Abort_IT+0x8a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_DMA_Abort_IT+0xe4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d102      	bne.n	800203c <HAL_DMA_Abort_IT+0x84>
 8002036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800203a:	e00e      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 800203c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002040:	e00b      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002046:	e008      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204c:	e005      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	e002      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002054:	2310      	movs	r3, #16
 8002056:	e000      	b.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002058:	2301      	movs	r3, #1
 800205a:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_DMA_Abort_IT+0xe8>)
 800205c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
    } 
  }
  return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40020008 	.word	0x40020008
 800208c:	4002001c 	.word	0x4002001c
 8002090:	40020030 	.word	0x40020030
 8002094:	40020044 	.word	0x40020044
 8002098:	40020058 	.word	0x40020058
 800209c:	4002006c 	.word	0x4002006c
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e127      	b.n	8002308 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b8:	2201      	movs	r2, #1
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8116 	bne.w	8002302 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d034      	beq.n	8002148 <HAL_GPIO_Init+0xa4>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d80d      	bhi.n	80020fe <HAL_GPIO_Init+0x5a>
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d02b      	beq.n	800213e <HAL_GPIO_Init+0x9a>
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d804      	bhi.n	80020f4 <HAL_GPIO_Init+0x50>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d031      	beq.n	8002152 <HAL_GPIO_Init+0xae>
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d01c      	beq.n	800212c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020f2:	e048      	b.n	8002186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d043      	beq.n	8002180 <HAL_GPIO_Init+0xdc>
 80020f8:	2b11      	cmp	r3, #17
 80020fa:	d01b      	beq.n	8002134 <HAL_GPIO_Init+0x90>
          break;
 80020fc:	e043      	b.n	8002186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020fe:	4a89      	ldr	r2, [pc, #548]	; (8002324 <HAL_GPIO_Init+0x280>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d026      	beq.n	8002152 <HAL_GPIO_Init+0xae>
 8002104:	4a87      	ldr	r2, [pc, #540]	; (8002324 <HAL_GPIO_Init+0x280>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d806      	bhi.n	8002118 <HAL_GPIO_Init+0x74>
 800210a:	4a87      	ldr	r2, [pc, #540]	; (8002328 <HAL_GPIO_Init+0x284>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d020      	beq.n	8002152 <HAL_GPIO_Init+0xae>
 8002110:	4a86      	ldr	r2, [pc, #536]	; (800232c <HAL_GPIO_Init+0x288>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01d      	beq.n	8002152 <HAL_GPIO_Init+0xae>
          break;
 8002116:	e036      	b.n	8002186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002118:	4a85      	ldr	r2, [pc, #532]	; (8002330 <HAL_GPIO_Init+0x28c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d019      	beq.n	8002152 <HAL_GPIO_Init+0xae>
 800211e:	4a85      	ldr	r2, [pc, #532]	; (8002334 <HAL_GPIO_Init+0x290>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d016      	beq.n	8002152 <HAL_GPIO_Init+0xae>
 8002124:	4a84      	ldr	r2, [pc, #528]	; (8002338 <HAL_GPIO_Init+0x294>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0xae>
          break;
 800212a:	e02c      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e028      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e023      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3308      	adds	r3, #8
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e01e      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	330c      	adds	r3, #12
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e019      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e012      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	611a      	str	r2, [r3, #16]
          break;
 8002172:	e008      	b.n	8002186 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
          break;
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2bff      	cmp	r3, #255	; 0xff
 800218a:	d801      	bhi.n	8002190 <HAL_GPIO_Init+0xec>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	e001      	b.n	8002194 <HAL_GPIO_Init+0xf0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2bff      	cmp	r3, #255	; 0xff
 800219a:	d802      	bhi.n	80021a2 <HAL_GPIO_Init+0xfe>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x104>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3b08      	subs	r3, #8
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	210f      	movs	r1, #15
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	401a      	ands	r2, r3
 80021ba:	6a39      	ldr	r1, [r7, #32]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	431a      	orrs	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8096 	beq.w	8002302 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d6:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_GPIO_Init+0x298>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x298>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6193      	str	r3, [r2, #24]
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_GPIO_Init+0x298>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ee:	4a54      	ldr	r2, [pc, #336]	; (8002340 <HAL_GPIO_Init+0x29c>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_GPIO_Init+0x2a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x19e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_GPIO_Init+0x2a4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x19a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x2a8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x196>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2ac>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x192>
 8002232:	2303      	movs	r3, #3
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x1a0>
 8002236:	2304      	movs	r3, #4
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x1a0>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x1a0>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x1a0>
 8002242:	2300      	movs	r3, #0
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002254:	493a      	ldr	r1, [pc, #232]	; (8002340 <HAL_GPIO_Init+0x29c>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4938      	ldr	r1, [pc, #224]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	43db      	mvns	r3, r3
 8002284:	4933      	ldr	r1, [pc, #204]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002286:	4013      	ands	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002296:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	492e      	ldr	r1, [pc, #184]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4929      	ldr	r1, [pc, #164]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	4924      	ldr	r1, [pc, #144]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	491f      	ldr	r1, [pc, #124]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	491a      	ldr	r1, [pc, #104]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
 80022f2:	e006      	b.n	8002302 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4915      	ldr	r1, [pc, #84]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3301      	adds	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f aed0 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 8002318:	bf00      	nop
 800231a:	372c      	adds	r7, #44	; 0x2c
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	10210000 	.word	0x10210000
 8002328:	10110000 	.word	0x10110000
 800232c:	10120000 	.word	0x10120000
 8002330:	10310000 	.word	0x10310000
 8002334:	10320000 	.word	0x10320000
 8002338:	10220000 	.word	0x10220000
 800233c:	40021000 	.word	0x40021000
 8002340:	40010000 	.word	0x40010000
 8002344:	40010800 	.word	0x40010800
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40011000 	.word	0x40011000
 8002350:	40011400 	.word	0x40011400
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f806 	bl	8002388 <HAL_GPIO_EXTI_Callback>
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010400 	.word	0x40010400

08002388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e26c      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023d4:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x12c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d168      	bne.n	80024c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e246      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x76>
 8002404:	4b80      	ldr	r3, [pc, #512]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7f      	ldr	r2, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e02e      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7a      	ldr	r2, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b78      	ldr	r3, [pc, #480]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a77      	ldr	r2, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0xbc>
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fcb4 	bl	8001de4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fcb0 	bl	8001de4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1fa      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xe4>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fca0 	bl	8001de4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fc9c 	bl	8001de4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1e6      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x10c>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1ba      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4939      	ldr	r1, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fc55 	bl	8001de4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff fc51 	bl	8001de4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e19b      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4927      	ldr	r1, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x270>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fc34 	bl	8001de4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff fc30 	bl	8001de4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e17a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03a      	beq.n	8002620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7ff fc14 	bl	8001de4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff fc10 	bl	8001de4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e15a      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fb0a 	bl	8002bf8 <RCC_Delay>
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff fbfa 	bl	8001de4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fbf6 	bl	8001de4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d908      	bls.n	8002614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e140      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	42420000 	.word	0x42420000
 8002610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e9      	bne.n	80025f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a6 	beq.w	800277a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b97      	ldr	r3, [pc, #604]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a93      	ldr	r2, [pc, #588]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8a      	ldr	r2, [pc, #552]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7ff fbb7 	bl	8001de4 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7ff fbb3 	bl	8001de4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0fd      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x312>
 80026a0:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e02d      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x356>
 80026d8:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7ff fb67 	bl	8001de4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7ff fb63 	bl	8001de4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ab      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x37e>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7ff fb51 	bl	8001de4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff fb4d 	bl	8001de4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e095      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b48      	ldr	r3, [pc, #288]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8081 	beq.w	8002886 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d061      	beq.n	8002854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d146      	bne.n	8002826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fb21 	bl	8001de4 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff fb1d 	bl	8001de4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e067      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a19      	ldr	r1, [r3, #32]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	430b      	orrs	r3, r1
 80027f2:	4927      	ldr	r1, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7ff faf1 	bl	8001de4 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff faed 	bl	8001de4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e037      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x46a>
 8002824:	e02f      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_RCC_OscConfig+0x4fc>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fada 	bl	8001de4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff fad6 	bl	8001de4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e020      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x498>
 8002852:	e018      	b.n	8002886 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420060 	.word	0x42420060

0800289c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d0      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d910      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4965      	ldr	r1, [pc, #404]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800291a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	494d      	ldr	r1, [pc, #308]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d040      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e073      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4936      	ldr	r1, [pc, #216]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7ff fa2a 	bl	8001de4 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff fa26 	bl	8001de4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e053      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d210      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4916      	ldr	r1, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2a:	f000 f821 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1cc>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1d0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f8b4 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08006464 	.word	0x08006464
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	20000008 	.word	0x20000008

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b490      	push	{r4, r7}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a78:	1d3c      	adds	r4, r7, #4
 8002a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8002aae:	e02d      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab2:	623b      	str	r3, [r7, #32]
      break;
 8002ab4:	e02d      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c5b      	lsrs	r3, r3, #17
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ae8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aee:	fb02 f203 	mul.w	r2, r2, r3
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e004      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	623b      	str	r3, [r7, #32]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc90      	pop	{r4, r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	0800643c 	.word	0x0800643c
 8002b24:	0800644c 	.word	0x0800644c
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	007a1200 	.word	0x007a1200
 8002b30:	003d0900 	.word	0x003d0900

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b4c:	f7ff fff2 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b50:	4601      	mov	r1, r0
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08006474 	.word	0x08006474

08002b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0adb      	lsrs	r3, r3, #11
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08006474 	.word	0x08006474

08002b98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_GetClockConfig+0x58>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_RCC_GetClockConfig+0x58>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_GetClockConfig+0x58>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_RCC_GetClockConfig+0x58>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0207 	and.w	r2, r3, #7
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <RCC_Delay+0x34>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <RCC_Delay+0x38>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c14:	bf00      	nop
  }
  while (Delay --);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	60fa      	str	r2, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <RCC_Delay+0x1c>
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	10624dd3 	.word	0x10624dd3

08002c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e041      	b.n	8002cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f839 	bl	8002cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f000 f9b4 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03a      	b.n	8002d72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_TIM_Base_Start_IT+0x98>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d010      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8ed 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8e0 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8ef 	bl	8002fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8c3 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8b6 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8c5 	bl	8002fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f899 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f88c 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f89b 	bl	8002fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f86f 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f862 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f871 	bl	8002fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0201 	mvn.w	r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe fd7c 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8bf 	bl	80030b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f835 	bl	8002fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0220 	mvn.w	r2, #32
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f88a 	bl	80030a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <TIM_Base_SetConfig+0xb8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00b      	beq.n	8003010 <TIM_Base_SetConfig+0x30>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d007      	beq.n	8003010 <TIM_Base_SetConfig+0x30>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a26      	ldr	r2, [pc, #152]	; (800309c <TIM_Base_SetConfig+0xbc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d003      	beq.n	8003010 <TIM_Base_SetConfig+0x30>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <TIM_Base_SetConfig+0xc0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d108      	bne.n	8003022 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <TIM_Base_SetConfig+0xb8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0x62>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x62>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a19      	ldr	r2, [pc, #100]	; (800309c <TIM_Base_SetConfig+0xbc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <TIM_Base_SetConfig+0xc0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <TIM_Base_SetConfig+0xb8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800

080030a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e03f      	b.n	800315a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fcd6 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc21 	bl	8003954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b08a      	sub	sp, #40	; 0x28
 8003166:	af02      	add	r7, sp, #8
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	d17c      	bne.n	800327c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_UART_Transmit+0x2c>
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e075      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Transmit+0x3e>
 800319c:	2302      	movs	r3, #2
 800319e:	e06e      	b.n	800327e <HAL_UART_Transmit+0x11c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	; 0x21
 80031b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031b6:	f7fe fe15 	bl	8001de4 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80031f4:	e02a      	b.n	800324c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa45 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e036      	b.n	800327e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e007      	b.n	800323e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cf      	bne.n	80031f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa15 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b08a      	sub	sp, #40	; 0x28
 800328a:	af02      	add	r7, sp, #8
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 8089 	bne.w	80033ba <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Receive+0x2e>
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e081      	b.n	80033bc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Receive+0x40>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e07a      	b.n	80033bc <HAL_UART_Receive+0x136>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2222      	movs	r2, #34	; 0x22
 80032d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032dc:	f7fe fd82 	bl	8001de4 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f6:	d108      	bne.n	800330a <HAL_UART_Receive+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e003      	b.n	8003312 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800331a:	e043      	b.n	80033a4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2200      	movs	r2, #0
 8003324:	2120      	movs	r1, #32
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f9b2 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e042      	b.n	80033bc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10c      	bne.n	8003356 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003348:	b29a      	uxth	r2, r3
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	3302      	adds	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	e01f      	b.n	8003396 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d007      	beq.n	8003370 <HAL_UART_Receive+0xea>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_UART_Receive+0xf8>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e008      	b.n	8003390 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338a:	b2da      	uxtb	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1b6      	bne.n	800331c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d140      	bne.n	8003460 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_UART_Receive_IT+0x26>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e039      	b.n	8003462 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Receive_IT+0x38>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e032      	b.n	8003462 <HAL_UART_Receive_IT+0x9e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2222      	movs	r2, #34	; 0x22
 8003420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_UART_IRQHandler+0x52>
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9cc 	bl	8003854 <UART_Receive_IT>
      return;
 80034bc:	e0d1      	b.n	8003662 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80b0 	beq.w	8003626 <HAL_UART_IRQHandler+0x1ba>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_UART_IRQHandler+0x70>
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80a5 	beq.w	8003626 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0x90>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0xb0>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f043 0202 	orr.w	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_UART_IRQHandler+0xd0>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f043 0204 	orr.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00f      	beq.n	8003566 <HAL_UART_IRQHandler+0xfa>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_UART_IRQHandler+0xee>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	f043 0208 	orr.w	r2, r3, #8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d078      	beq.n	8003660 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f966 	bl	8003854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_UART_IRQHandler+0x144>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d031      	beq.n	8003614 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8b7 	bl	8003724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_UART_IRQHandler+0x1fc>)
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fce5 	bl	8001fb8 <HAL_DMA_Abort_IT>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d016      	beq.n	8003622 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035fe:	4610      	mov	r0, r2
 8003600:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003602:	e00e      	b.n	8003622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f83a 	bl	800367e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360a:	e00a      	b.n	8003622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f836 	bl	800367e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003612:	e006      	b.n	8003622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f832 	bl	800367e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003620:	e01e      	b.n	8003660 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	bf00      	nop
    return;
 8003624:	e01c      	b.n	8003660 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x1d6>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8a3 	bl	8003786 <UART_Transmit_IT>
    return;
 8003640:	e00f      	b.n	8003662 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_UART_IRQHandler+0x1f6>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8e4 	bl	8003824 <UART_EndTransmit_IT>
    return;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003660:	bf00      	nop
  }
}
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	0800375f 	.word	0x0800375f

0800366c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	e02c      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a8:	d028      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036b0:	f7fe fb98 	bl	8001de4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d21d      	bcs.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00f      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d0c3      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800373a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff ff80 	bl	800367e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b21      	cmp	r3, #33	; 0x21
 8003798:	d13e      	bne.n	8003818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	d114      	bne.n	80037ce <UART_Transmit_IT+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d110      	bne.n	80037ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]
 80037cc:	e008      	b.n	80037e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6211      	str	r1, [r2, #32]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff11 	bl	800366c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b22      	cmp	r3, #34	; 0x22
 8003866:	d170      	bne.n	800394a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d117      	bne.n	80038a2 <UART_Receive_IT+0x4e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d113      	bne.n	80038a2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	b29a      	uxth	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
 80038a0:	e026      	b.n	80038f0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d007      	beq.n	80038c6 <UART_Receive_IT+0x72>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <UART_Receive_IT+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e008      	b.n	80038e6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4619      	mov	r1, r3
 80038fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003900:	2b00      	cmp	r3, #0
 8003902:	d120      	bne.n	8003946 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0220 	bic.w	r2, r2, #32
 8003912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fc fc31 	bl	80001a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e002      	b.n	800394c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800398e:	f023 030c 	bic.w	r3, r3, #12
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	430b      	orrs	r3, r1
 800399a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <UART_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7ff f8d8 	bl	8002b70 <HAL_RCC_GetPCLK2Freq>
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	e002      	b.n	80039ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7ff f8c0 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	0119      	lsls	r1, r3, #4
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <UART_SetConfig+0x118>)
 8003a02:	fba3 0302 	umull	r0, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2064      	movs	r0, #100	; 0x64
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <UART_SetConfig+0x118>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a20:	4419      	add	r1, r3
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <UART_SetConfig+0x118>)
 8003a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2064      	movs	r0, #100	; 0x64
 8003a42:	fb00 f303 	mul.w	r3, r0, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <UART_SetConfig+0x118>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	51eb851f 	.word	0x51eb851f

08003a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f103 0208 	add.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 0208 	add.w	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f103 0208 	add.w	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b22:	d103      	bne.n	8003b2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e00c      	b.n	8003b46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e002      	b.n	8003b3a <vListInsert+0x2e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d2f6      	bcs.n	8003b34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d103      	bne.n	8003bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08e      	sub	sp, #56	; 0x38
 8003bd2:	af04      	add	r7, sp, #16
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <xTaskCreateStatic+0x42>
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e7fe      	b.n	8003c0e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c10:	2354      	movs	r3, #84	; 0x54
 8003c12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b54      	cmp	r3, #84	; 0x54
 8003c18:	d009      	beq.n	8003c2e <xTaskCreateStatic+0x60>
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e7fe      	b.n	8003c2c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01e      	beq.n	8003c72 <xTaskCreateStatic+0xa4>
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01b      	beq.n	8003c72 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	9302      	str	r3, [sp, #8]
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f850 	bl	8003d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6c:	f000 f8cc 	bl	8003e08 <prvAddNewTaskToReadyList>
 8003c70:	e001      	b.n	8003c76 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c76:	697b      	ldr	r3, [r7, #20]
	}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fe51 	bl	800493c <pvPortMalloc>
 8003c9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ca2:	2054      	movs	r0, #84	; 0x54
 8003ca4:	f000 fe4a 	bl	800493c <pvPortMalloc>
 8003ca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb6:	e005      	b.n	8003cc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f000 ff01 	bl	8004ac0 <vPortFree>
 8003cbe:	e001      	b.n	8003cc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f80e 	bl	8003d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cee:	69f8      	ldr	r0, [r7, #28]
 8003cf0:	f000 f88a 	bl	8003e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e002      	b.n	8003d00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d00:	69bb      	ldr	r3, [r7, #24]
	}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d22:	3b01      	subs	r3, #1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f023 0307 	bic.w	r3, r3, #7
 8003d30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <prvInitialiseNewTask+0x46>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e7fe      	b.n	8003d4e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e012      	b.n	8003d7c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	7819      	ldrb	r1, [r3, #0]
 8003d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	3334      	adds	r3, #52	; 0x34
 8003d66:	460a      	mov	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d9e9      	bls.n	8003d56 <prvInitialiseNewTask+0x4c>
 8003d82:	e000      	b.n	8003d86 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003d84:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d901      	bls.n	8003d98 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d94:	2306      	movs	r3, #6
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fe7d 	bl	8003aae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	3318      	adds	r3, #24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe78 	bl	8003aae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f1c3 0207 	rsb	r2, r3, #7
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	69b8      	ldr	r0, [r7, #24]
 8003de8:	f000 fc06 	bl	80045f8 <pxPortInitialiseStack>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dfe:	bf00      	nop
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e10:	f000 fcda 	bl	80047c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e26:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d110      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e34:	f000 fabc 	bl	80043b0 <prvInitialiseTaskLists>
 8003e38:	e00d      	b.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e3a:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <prvAddNewTaskToReadyList+0xc0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d802      	bhi.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <prvAddNewTaskToReadyList+0xcc>)
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7ff fe1c 	bl	8003ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e8e:	f000 fcc9 	bl	8004824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <prvAddNewTaskToReadyList+0xc0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00e      	beq.n	8003eb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <prvAddNewTaskToReadyList+0xd0>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000970 	.word	0x20000970
 8003ec4:	20000870 	.word	0x20000870
 8003ec8:	2000097c 	.word	0x2000097c
 8003ecc:	2000098c 	.word	0x2000098c
 8003ed0:	20000978 	.word	0x20000978
 8003ed4:	20000874 	.word	0x20000874
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <vTaskDelay+0x60>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <vTaskDelay+0x2e>
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	e7fe      	b.n	8003f08 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f0a:	f000 f879 	bl	8004000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb0b 	bl	800452c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f16:	f000 f881 	bl	800401c <xTaskResumeAll>
 8003f1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <vTaskDelay+0x64>)
 8003f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000998 	.word	0x20000998
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f52:	463a      	mov	r2, r7
 8003f54:	1d39      	adds	r1, r7, #4
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc f90a 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f60:	6839      	ldr	r1, [r7, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	9202      	str	r2, [sp, #8]
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	460a      	mov	r2, r1
 8003f72:	491d      	ldr	r1, [pc, #116]	; (8003fe8 <vTaskStartScheduler+0xa4>)
 8003f74:	481d      	ldr	r0, [pc, #116]	; (8003fec <vTaskStartScheduler+0xa8>)
 8003f76:	f7ff fe2a 	bl	8003bce <xTaskCreateStatic>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <vTaskStartScheduler+0xac>)
 8003f7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <vTaskStartScheduler+0xac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e001      	b.n	8003f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d115      	bne.n	8003fc4 <vTaskStartScheduler+0x80>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <vTaskStartScheduler+0xb0>)
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <vTaskStartScheduler+0xb4>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <vTaskStartScheduler+0xb8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fbe:	f000 fb93 	bl	80046e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fc2:	e00d      	b.n	8003fe0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fca:	d109      	bne.n	8003fe0 <vTaskStartScheduler+0x9c>
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e7fe      	b.n	8003fde <vTaskStartScheduler+0x9a>
}
 8003fe0:	bf00      	nop
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	08006450 	.word	0x08006450
 8003fec:	08004381 	.word	0x08004381
 8003ff0:	20000994 	.word	0x20000994
 8003ff4:	20000990 	.word	0x20000990
 8003ff8:	2000097c 	.word	0x2000097c
 8003ffc:	20000974 	.word	0x20000974

08004000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <vTaskSuspendAll+0x18>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	4a03      	ldr	r2, [pc, #12]	; (8004018 <vTaskSuspendAll+0x18>)
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000998 	.word	0x20000998

0800401c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <xTaskResumeAll+0x114>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <xTaskResumeAll+0x2a>
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	e7fe      	b.n	8004044 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004046:	f000 fbbf 	bl	80047c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <xTaskResumeAll+0x114>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	4a37      	ldr	r2, [pc, #220]	; (8004130 <xTaskResumeAll+0x114>)
 8004052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <xTaskResumeAll+0x114>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d161      	bne.n	8004120 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <xTaskResumeAll+0x118>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05d      	beq.n	8004120 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004064:	e02e      	b.n	80040c4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <xTaskResumeAll+0x11c>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3318      	adds	r3, #24
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fd82 	bl	8003b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fd7d 	bl	8003b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <xTaskResumeAll+0x120>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <xTaskResumeAll+0x120>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a27      	ldr	r2, [pc, #156]	; (8004140 <xTaskResumeAll+0x124>)
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7ff fd0b 	bl	8003ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <xTaskResumeAll+0x128>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <xTaskResumeAll+0x12c>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <xTaskResumeAll+0x11c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1cc      	bne.n	8004066 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040d2:	f000 fa07 	bl	80044e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <xTaskResumeAll+0x130>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040e2:	f000 f837 	bl	8004154 <xTaskIncrementTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <xTaskResumeAll+0x12c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f1      	bne.n	80040e2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <xTaskResumeAll+0x130>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <xTaskResumeAll+0x12c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <xTaskResumeAll+0x134>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004120:	f000 fb80 	bl	8004824 <vPortExitCritical>

	return xAlreadyYielded;
 8004124:	68bb      	ldr	r3, [r7, #8]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000998 	.word	0x20000998
 8004134:	20000970 	.word	0x20000970
 8004138:	20000930 	.word	0x20000930
 800413c:	20000978 	.word	0x20000978
 8004140:	20000874 	.word	0x20000874
 8004144:	20000870 	.word	0x20000870
 8004148:	20000984 	.word	0x20000984
 800414c:	20000980 	.word	0x20000980
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <xTaskIncrementTick+0x14c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 808c 	bne.w	8004280 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004168:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <xTaskIncrementTick+0x150>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004170:	4a4c      	ldr	r2, [pc, #304]	; (80042a4 <xTaskIncrementTick+0x150>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11f      	bne.n	80041bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800417c:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <xTaskIncrementTick+0x154>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <xTaskIncrementTick+0x46>
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	e7fe      	b.n	8004198 <xTaskIncrementTick+0x44>
 800419a:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <xTaskIncrementTick+0x154>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b42      	ldr	r3, [pc, #264]	; (80042ac <xTaskIncrementTick+0x158>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a40      	ldr	r2, [pc, #256]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4a40      	ldr	r2, [pc, #256]	; (80042ac <xTaskIncrementTick+0x158>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <xTaskIncrementTick+0x15c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a3e      	ldr	r2, [pc, #248]	; (80042b0 <xTaskIncrementTick+0x15c>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	f000 f994 	bl	80044e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <xTaskIncrementTick+0x160>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d34d      	bcc.n	8004262 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <xTaskIncrementTick+0x80>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <xTaskIncrementTick+0x82>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041da:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <xTaskIncrementTick+0x160>)
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e0:	601a      	str	r2, [r3, #0]
					break;
 80041e2:	e03e      	b.n	8004262 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041e4:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d203      	bcs.n	8004204 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <xTaskIncrementTick+0x160>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
						break;
 8004202:	e02e      	b.n	8004262 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fcb7 	bl	8003b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3318      	adds	r3, #24
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fcae 	bl	8003b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <xTaskIncrementTick+0x164>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <xTaskIncrementTick+0x164>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <xTaskIncrementTick+0x168>)
 8004240:	441a      	add	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7ff fc3c 	bl	8003ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <xTaskIncrementTick+0x16c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d3b4      	bcc.n	80041c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004260:	e7b1      	b.n	80041c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <xTaskIncrementTick+0x16c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4914      	ldr	r1, [pc, #80]	; (80042bc <xTaskIncrementTick+0x168>)
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d907      	bls.n	800428a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800427a:	2301      	movs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e004      	b.n	800428a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <xTaskIncrementTick+0x170>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <xTaskIncrementTick+0x170>)
 8004288:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <xTaskIncrementTick+0x174>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000998 	.word	0x20000998
 80042a4:	20000974 	.word	0x20000974
 80042a8:	20000928 	.word	0x20000928
 80042ac:	2000092c 	.word	0x2000092c
 80042b0:	20000988 	.word	0x20000988
 80042b4:	20000990 	.word	0x20000990
 80042b8:	20000978 	.word	0x20000978
 80042bc:	20000874 	.word	0x20000874
 80042c0:	20000870 	.word	0x20000870
 80042c4:	20000980 	.word	0x20000980
 80042c8:	20000984 	.word	0x20000984

080042cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <vTaskSwitchContext+0xa0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <vTaskSwitchContext+0xa4>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042e0:	e03e      	b.n	8004360 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <vTaskSwitchContext+0xa4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <vTaskSwitchContext+0xa8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042f6:	7afb      	ldrb	r3, [r7, #11]
 80042f8:	f1c3 031f 	rsb	r3, r3, #31
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	491e      	ldr	r1, [pc, #120]	; (8004378 <vTaskSwitchContext+0xac>)
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e7fe      	b.n	8004324 <vTaskSwitchContext+0x58>
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <vTaskSwitchContext+0xac>)
 8004332:	4413      	add	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3308      	adds	r3, #8
 8004348:	429a      	cmp	r2, r3
 800434a:	d104      	bne.n	8004356 <vTaskSwitchContext+0x8a>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a07      	ldr	r2, [pc, #28]	; (800437c <vTaskSwitchContext+0xb0>)
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000998 	.word	0x20000998
 8004370:	20000984 	.word	0x20000984
 8004374:	20000978 	.word	0x20000978
 8004378:	20000874 	.word	0x20000874
 800437c:	20000870 	.word	0x20000870

08004380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004388:	f000 f852 	bl	8004430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <prvIdleTask+0x28>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d9f9      	bls.n	8004388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <prvIdleTask+0x2c>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043a4:	e7f0      	b.n	8004388 <prvIdleTask+0x8>
 80043a6:	bf00      	nop
 80043a8:	20000874 	.word	0x20000874
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e00c      	b.n	80043d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <prvInitialiseTaskLists+0x60>)
 80043c8:	4413      	add	r3, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fb50 	bl	8003a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d9ef      	bls.n	80043bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043dc:	480d      	ldr	r0, [pc, #52]	; (8004414 <prvInitialiseTaskLists+0x64>)
 80043de:	f7ff fb47 	bl	8003a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043e2:	480d      	ldr	r0, [pc, #52]	; (8004418 <prvInitialiseTaskLists+0x68>)
 80043e4:	f7ff fb44 	bl	8003a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043e8:	480c      	ldr	r0, [pc, #48]	; (800441c <prvInitialiseTaskLists+0x6c>)
 80043ea:	f7ff fb41 	bl	8003a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ee:	480c      	ldr	r0, [pc, #48]	; (8004420 <prvInitialiseTaskLists+0x70>)
 80043f0:	f7ff fb3e 	bl	8003a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043f4:	480b      	ldr	r0, [pc, #44]	; (8004424 <prvInitialiseTaskLists+0x74>)
 80043f6:	f7ff fb3b 	bl	8003a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <prvInitialiseTaskLists+0x78>)
 80043fc:	4a05      	ldr	r2, [pc, #20]	; (8004414 <prvInitialiseTaskLists+0x64>)
 80043fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <prvInitialiseTaskLists+0x7c>)
 8004402:	4a05      	ldr	r2, [pc, #20]	; (8004418 <prvInitialiseTaskLists+0x68>)
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000874 	.word	0x20000874
 8004414:	20000900 	.word	0x20000900
 8004418:	20000914 	.word	0x20000914
 800441c:	20000930 	.word	0x20000930
 8004420:	20000944 	.word	0x20000944
 8004424:	2000095c 	.word	0x2000095c
 8004428:	20000928 	.word	0x20000928
 800442c:	2000092c 	.word	0x2000092c

08004430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004436:	e019      	b.n	800446c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004438:	f000 f9c6 	bl	80047c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <prvCheckTasksWaitingTermination+0x4c>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fb97 	bl	8003b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <prvCheckTasksWaitingTermination+0x50>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <prvCheckTasksWaitingTermination+0x50>)
 8004456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvCheckTasksWaitingTermination+0x54>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <prvCheckTasksWaitingTermination+0x54>)
 8004460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004462:	f000 f9df 	bl	8004824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f80e 	bl	8004488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <prvCheckTasksWaitingTermination+0x54>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e1      	bne.n	8004438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000944 	.word	0x20000944
 8004480:	20000970 	.word	0x20000970
 8004484:	20000958 	.word	0x20000958

08004488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fb0e 	bl	8004ac0 <vPortFree>
				vPortFree( pxTCB );
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb0b 	bl	8004ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044aa:	e017      	b.n	80044dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d103      	bne.n	80044be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fb02 	bl	8004ac0 <vPortFree>
	}
 80044bc:	e00e      	b.n	80044dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d009      	beq.n	80044dc <prvDeleteTCB+0x54>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e7fe      	b.n	80044da <prvDeleteTCB+0x52>
	}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ea:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvResetNextTaskUnblockTime+0x40>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <prvResetNextTaskUnblockTime+0x14>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <prvResetNextTaskUnblockTime+0x16>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <prvResetNextTaskUnblockTime+0x44>)
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004504:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004506:	e008      	b.n	800451a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <prvResetNextTaskUnblockTime+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvResetNextTaskUnblockTime+0x44>)
 8004518:	6013      	str	r3, [r2, #0]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	20000928 	.word	0x20000928
 8004528:	20000990 	.word	0x20000990

0800452c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453c:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fb1a 	bl	8003b7c <uxListRemove>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	2201      	movs	r2, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4013      	ands	r3, r2
 8004562:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d10a      	bne.n	8004584 <prvAddCurrentTaskToDelayedList+0x58>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	481a      	ldr	r0, [pc, #104]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800457e:	f7ff faa2 	bl	8003ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004582:	e026      	b.n	80045d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d209      	bcs.n	80045b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459c:	4b13      	ldr	r3, [pc, #76]	; (80045ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3304      	adds	r3, #4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7ff faaf 	bl	8003b0c <vListInsert>
}
 80045ae:	e010      	b.n	80045d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7ff faa5 	bl	8003b0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d202      	bcs.n	80045d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000974 	.word	0x20000974
 80045e0:	20000870 	.word	0x20000870
 80045e4:	20000978 	.word	0x20000978
 80045e8:	2000095c 	.word	0x2000095c
 80045ec:	2000092c 	.word	0x2000092c
 80045f0:	20000928 	.word	0x20000928
 80045f4:	20000990 	.word	0x20000990

080045f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3b04      	subs	r3, #4
 8004608:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b04      	subs	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b04      	subs	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <pxPortInitialiseStack+0x54>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b14      	subs	r3, #20
 8004632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3b20      	subs	r3, #32
 800463e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	08004651 	.word	0x08004651

08004650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <prvTaskExitError+0x4c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004662:	d009      	beq.n	8004678 <prvTaskExitError+0x28>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e7fe      	b.n	8004676 <prvTaskExitError+0x26>
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800468a:	bf00      	nop
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0fc      	beq.n	800468c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	20000010 	.word	0x20000010

080046a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80046be:	4770      	bx	lr

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80046c8:	4806      	ldr	r0, [pc, #24]	; (80046e4 <prvPortStartFirstTask+0x1c>)
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f380 8808 	msr	MSP, r0
 80046d2:	b662      	cpsie	i
 80046d4:	b661      	cpsie	f
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	df00      	svc	0
 80046e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046e2:	bf00      	nop
 80046e4:	e000ed08 	.word	0xe000ed08

080046e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <xPortStartScheduler+0xcc>)
 80046f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	22ff      	movs	r2, #255	; 0xff
 80046fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <xPortStartScheduler+0xd0>)
 8004714:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <xPortStartScheduler+0xd4>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471c:	e009      	b.n	8004732 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <xPortStartScheduler+0xd4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a25      	ldr	r2, [pc, #148]	; (80047bc <xPortStartScheduler+0xd4>)
 8004726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d0ef      	beq.n	800471e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <xPortStartScheduler+0xd4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1c3 0307 	rsb	r3, r3, #7
 8004746:	2b04      	cmp	r3, #4
 8004748:	d009      	beq.n	800475e <xPortStartScheduler+0x76>
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	e7fe      	b.n	800475c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <xPortStartScheduler+0xd4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <xPortStartScheduler+0xd4>)
 8004766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <xPortStartScheduler+0xd4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004770:	4a12      	ldr	r2, [pc, #72]	; (80047bc <xPortStartScheduler+0xd4>)
 8004772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xPortStartScheduler+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <xPortStartScheduler+0xd8>)
 8004782:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <xPortStartScheduler+0xd8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <xPortStartScheduler+0xd8>)
 800478e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004794:	f000 f8b0 	bl	80048f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <xPortStartScheduler+0xdc>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800479e:	f7ff ff93 	bl	80046c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047a2:	f7ff fd93 	bl	80042cc <vTaskSwitchContext>
	prvTaskExitError();
 80047a6:	f7ff ff53 	bl	8004650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000e400 	.word	0xe000e400
 80047b8:	2000099c 	.word	0x2000099c
 80047bc:	200009a0 	.word	0x200009a0
 80047c0:	e000ed20 	.word	0xe000ed20
 80047c4:	20000010 	.word	0x20000010

080047c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <vPortEnterCritical+0x54>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x54>)
 80047e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10e      	bne.n	8004810 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f2:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x58>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <vPortEnterCritical+0x48>
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x46>
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000010 	.word	0x20000010
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <vPortExitCritical+0x48>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <vPortExitCritical+0x22>
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	e7fe      	b.n	8004844 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <vPortExitCritical+0x48>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	4a07      	ldr	r2, [pc, #28]	; (800486c <vPortExitCritical+0x48>)
 800484e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <vPortExitCritical+0x48>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <vPortExitCritical+0x3e>
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	20000010 	.word	0x20000010

08004870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004870:	f3ef 8009 	mrs	r0, PSP
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <pxCurrentTCBConst>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004880:	6010      	str	r0, [r2, #0]
 8004882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004886:	f04f 0050 	mov.w	r0, #80	; 0x50
 800488a:	f380 8811 	msr	BASEPRI, r0
 800488e:	f7ff fd1d 	bl	80042cc <vTaskSwitchContext>
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8811 	msr	BASEPRI, r0
 800489a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048a6:	f380 8809 	msr	PSP, r0
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	4770      	bx	lr

080048b0 <pxCurrentTCBConst>:
 80048b0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048d0:	f7ff fc40 	bl	8004154 <xTaskIncrementTick>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <SysTick_Handler+0x3c>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <vPortSetupTimerInterrupt+0x30>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <vPortSetupTimerInterrupt+0x34>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <vPortSetupTimerInterrupt+0x38>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a09      	ldr	r2, [pc, #36]	; (8004934 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <vPortSetupTimerInterrupt+0x40>)
 8004916:	3b01      	subs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491a:	4b03      	ldr	r3, [pc, #12]	; (8004928 <vPortSetupTimerInterrupt+0x30>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	e000e010 	.word	0xe000e010
 800492c:	e000e018 	.word	0xe000e018
 8004930:	20000004 	.word	0x20000004
 8004934:	10624dd3 	.word	0x10624dd3
 8004938:	e000e014 	.word	0xe000e014

0800493c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004948:	f7ff fb5a 	bl	8004000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <pvPortMalloc+0x170>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004954:	f000 f90c 	bl	8004b70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <pvPortMalloc+0x174>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 808c 	bne.w	8004a7e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800496c:	2208      	movs	r2, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d013      	beq.n	80049a6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	3308      	adds	r3, #8
 8004986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <pvPortMalloc+0x6a>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e7fe      	b.n	80049a4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d068      	beq.n	8004a7e <pvPortMalloc+0x142>
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <pvPortMalloc+0x178>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d863      	bhi.n	8004a7e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049b6:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <pvPortMalloc+0x17c>)
 80049b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <pvPortMalloc+0x17c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c0:	e004      	b.n	80049cc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <pvPortMalloc+0xa2>
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f1      	bne.n	80049c2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049de:	4b33      	ldr	r3, [pc, #204]	; (8004aac <pvPortMalloc+0x170>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d04a      	beq.n	8004a7e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4413      	add	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	2308      	movs	r3, #8
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d91e      	bls.n	8004a48 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <pvPortMalloc+0xf4>
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e7fe      	b.n	8004a2e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a42:	69b8      	ldr	r0, [r7, #24]
 8004a44:	f000 f8f6 	bl	8004c34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <pvPortMalloc+0x178>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <pvPortMalloc+0x178>)
 8004a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a56:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <pvPortMalloc+0x178>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <pvPortMalloc+0x180>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d203      	bcs.n	8004a6a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <pvPortMalloc+0x178>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <pvPortMalloc+0x180>)
 8004a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <pvPortMalloc+0x174>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a7e:	f7ff facd 	bl	800401c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <pvPortMalloc+0x164>
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e7fe      	b.n	8004a9e <pvPortMalloc+0x162>
	return pvReturn;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20001dac 	.word	0x20001dac
 8004ab0:	20001db8 	.word	0x20001db8
 8004ab4:	20001db0 	.word	0x20001db0
 8004ab8:	20001da4 	.word	0x20001da4
 8004abc:	20001db4 	.word	0x20001db4

08004ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d046      	beq.n	8004b60 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	425b      	negs	r3, r3
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4413      	add	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <vPortFree+0xa8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <vPortFree+0x42>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e7fe      	b.n	8004b00 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <vPortFree+0x5e>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	e7fe      	b.n	8004b1c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <vPortFree+0xa8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d019      	beq.n	8004b60 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d115      	bne.n	8004b60 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <vPortFree+0xa8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b44:	f7ff fa5c 	bl	8004000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <vPortFree+0xac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4413      	add	r3, r2
 8004b52:	4a06      	ldr	r2, [pc, #24]	; (8004b6c <vPortFree+0xac>)
 8004b54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f000 f86c 	bl	8004c34 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b5c:	f7ff fa5e 	bl	800401c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20001db8 	.word	0x20001db8
 8004b6c:	20001db0 	.word	0x20001db0

08004b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <prvHeapInit+0xac>)
 8004b7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3307      	adds	r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <prvHeapInit+0xac>)
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <prvHeapInit+0xb0>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <prvHeapInit+0xb0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	4413      	add	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <prvHeapInit+0xb4>)
 8004bd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bd2:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <prvHeapInit+0xb4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <prvHeapInit+0xb4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <prvHeapInit+0xb4>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <prvHeapInit+0xb8>)
 8004bfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <prvHeapInit+0xbc>)
 8004c06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <prvHeapInit+0xc0>)
 8004c0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200009a4 	.word	0x200009a4
 8004c20:	20001da4 	.word	0x20001da4
 8004c24:	20001dac 	.word	0x20001dac
 8004c28:	20001db4 	.word	0x20001db4
 8004c2c:	20001db0 	.word	0x20001db0
 8004c30:	20001db8 	.word	0x20001db8

08004c34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <prvInsertBlockIntoFreeList+0xa8>)
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e002      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x14>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d8f7      	bhi.n	8004c42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d108      	bne.n	8004c76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d118      	bne.n	8004cbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <prvInsertBlockIntoFreeList+0xac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d00d      	beq.n	8004cb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e008      	b.n	8004cc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <prvInsertBlockIntoFreeList+0xac>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e003      	b.n	8004cc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d002      	beq.n	8004cd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	20001da4 	.word	0x20001da4
 8004ce0:	20001dac 	.word	0x20001dac

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000014 	.word	0x20000014

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	4e0c      	ldr	r6, [pc, #48]	; (8004d28 <__libc_init_array+0x38>)
 8004cf6:	4c0d      	ldr	r4, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf8:	1ba4      	subs	r4, r4, r6
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	42a5      	cmp	r5, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	f001 f9a2 	bl	8006048 <_init>
 8004d04:	2500      	movs	r5, #0
 8004d06:	4e0a      	ldr	r6, [pc, #40]	; (8004d30 <__libc_init_array+0x40>)
 8004d08:	4c0a      	ldr	r4, [pc, #40]	; (8004d34 <__libc_init_array+0x44>)
 8004d0a:	1ba4      	subs	r4, r4, r6
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	42a5      	cmp	r5, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d18:	4798      	blx	r3
 8004d1a:	3501      	adds	r5, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d22:	4798      	blx	r3
 8004d24:	3501      	adds	r5, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08006638 	.word	0x08006638
 8004d2c:	08006638 	.word	0x08006638
 8004d30:	08006638 	.word	0x08006638
 8004d34:	0800663c 	.word	0x0800663c

08004d38 <memcpy>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	1e43      	subs	r3, r0, #1
 8004d3c:	440a      	add	r2, r1
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	d100      	bne.n	8004d44 <memcpy+0xc>
 8004d42:	bd10      	pop	{r4, pc}
 8004d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4c:	e7f7      	b.n	8004d3e <memcpy+0x6>

08004d4e <memset>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4402      	add	r2, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d100      	bne.n	8004d58 <memset+0xa>
 8004d56:	4770      	bx	lr
 8004d58:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5c:	e7f9      	b.n	8004d52 <memset+0x4>
	...

08004d60 <siprintf>:
 8004d60:	b40e      	push	{r1, r2, r3}
 8004d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d66:	b500      	push	{lr}
 8004d68:	b09c      	sub	sp, #112	; 0x70
 8004d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d6c:	9002      	str	r0, [sp, #8]
 8004d6e:	9006      	str	r0, [sp, #24]
 8004d70:	9107      	str	r1, [sp, #28]
 8004d72:	9104      	str	r1, [sp, #16]
 8004d74:	4808      	ldr	r0, [pc, #32]	; (8004d98 <siprintf+0x38>)
 8004d76:	4909      	ldr	r1, [pc, #36]	; (8004d9c <siprintf+0x3c>)
 8004d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7c:	9105      	str	r1, [sp, #20]
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	a902      	add	r1, sp, #8
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	f000 f9c4 	bl	8005110 <_svfiprintf_r>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	b01c      	add	sp, #112	; 0x70
 8004d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d94:	b003      	add	sp, #12
 8004d96:	4770      	bx	lr
 8004d98:	20000014 	.word	0x20000014
 8004d9c:	ffff0208 	.word	0xffff0208

08004da0 <siscanf>:
 8004da0:	b40e      	push	{r1, r2, r3}
 8004da2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004da6:	b530      	push	{r4, r5, lr}
 8004da8:	b09c      	sub	sp, #112	; 0x70
 8004daa:	ac1f      	add	r4, sp, #124	; 0x7c
 8004dac:	f854 5b04 	ldr.w	r5, [r4], #4
 8004db0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004db4:	9002      	str	r0, [sp, #8]
 8004db6:	9006      	str	r0, [sp, #24]
 8004db8:	f7fb f9d4 	bl	8000164 <strlen>
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <siscanf+0x4c>)
 8004dbe:	9003      	str	r0, [sp, #12]
 8004dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc6:	9314      	str	r3, [sp, #80]	; 0x50
 8004dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dcc:	9007      	str	r0, [sp, #28]
 8004dce:	4808      	ldr	r0, [pc, #32]	; (8004df0 <siscanf+0x50>)
 8004dd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dd4:	462a      	mov	r2, r5
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	a902      	add	r1, sp, #8
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	9401      	str	r4, [sp, #4]
 8004dde:	f000 fae9 	bl	80053b4 <__ssvfiscanf_r>
 8004de2:	b01c      	add	sp, #112	; 0x70
 8004de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de8:	b003      	add	sp, #12
 8004dea:	4770      	bx	lr
 8004dec:	08004df5 	.word	0x08004df5
 8004df0:	20000014 	.word	0x20000014

08004df4 <__seofread>:
 8004df4:	2000      	movs	r0, #0
 8004df6:	4770      	bx	lr

08004df8 <strchr>:
 8004df8:	b2c9      	uxtb	r1, r1
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e00:	b11a      	cbz	r2, 8004e0a <strchr+0x12>
 8004e02:	428a      	cmp	r2, r1
 8004e04:	d1f9      	bne.n	8004dfa <strchr+0x2>
 8004e06:	4618      	mov	r0, r3
 8004e08:	4770      	bx	lr
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	bf18      	it	ne
 8004e0e:	2300      	movne	r3, #0
 8004e10:	e7f9      	b.n	8004e06 <strchr+0xe>

08004e12 <strcpy>:
 8004e12:	4603      	mov	r3, r0
 8004e14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e18:	f803 2b01 	strb.w	r2, [r3], #1
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d1f9      	bne.n	8004e14 <strcpy+0x2>
 8004e20:	4770      	bx	lr

08004e22 <strstr>:
 8004e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e24:	7803      	ldrb	r3, [r0, #0]
 8004e26:	b17b      	cbz	r3, 8004e48 <strstr+0x26>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	7823      	ldrb	r3, [r4, #0]
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	1c66      	adds	r6, r4, #1
 8004e30:	b17b      	cbz	r3, 8004e52 <strstr+0x30>
 8004e32:	1e4a      	subs	r2, r1, #1
 8004e34:	1e63      	subs	r3, r4, #1
 8004e36:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004e3a:	b14d      	cbz	r5, 8004e50 <strstr+0x2e>
 8004e3c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004e40:	4634      	mov	r4, r6
 8004e42:	42af      	cmp	r7, r5
 8004e44:	d0f7      	beq.n	8004e36 <strstr+0x14>
 8004e46:	e7f0      	b.n	8004e2a <strstr+0x8>
 8004e48:	780b      	ldrb	r3, [r1, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf18      	it	ne
 8004e4e:	2000      	movne	r0, #0
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e52:	4618      	mov	r0, r3
 8004e54:	e7fc      	b.n	8004e50 <strstr+0x2e>
	...

08004e58 <strtok>:
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <strtok+0x50>)
 8004e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	681d      	ldr	r5, [r3, #0]
 8004e60:	4606      	mov	r6, r0
 8004e62:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004e64:	460f      	mov	r7, r1
 8004e66:	b9b4      	cbnz	r4, 8004e96 <strtok+0x3e>
 8004e68:	2050      	movs	r0, #80	; 0x50
 8004e6a:	f000 f849 	bl	8004f00 <malloc>
 8004e6e:	65a8      	str	r0, [r5, #88]	; 0x58
 8004e70:	e9c0 4400 	strd	r4, r4, [r0]
 8004e74:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e78:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e7c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e80:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e84:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e88:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e8c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e90:	6184      	str	r4, [r0, #24]
 8004e92:	7704      	strb	r4, [r0, #28]
 8004e94:	6244      	str	r4, [r0, #36]	; 0x24
 8004e96:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004e98:	4639      	mov	r1, r7
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f000 b803 	b.w	8004eac <__strtok_r>
 8004ea6:	bf00      	nop
 8004ea8:	20000014 	.word	0x20000014

08004eac <__strtok_r>:
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	b918      	cbnz	r0, 8004eb8 <__strtok_r+0xc>
 8004eb0:	6810      	ldr	r0, [r2, #0]
 8004eb2:	b908      	cbnz	r0, 8004eb8 <__strtok_r+0xc>
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ec0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ec4:	b91e      	cbnz	r6, 8004ece <__strtok_r+0x22>
 8004ec6:	b96d      	cbnz	r5, 8004ee4 <__strtok_r+0x38>
 8004ec8:	6015      	str	r5, [r2, #0]
 8004eca:	4628      	mov	r0, r5
 8004ecc:	e7f2      	b.n	8004eb4 <__strtok_r+0x8>
 8004ece:	42b5      	cmp	r5, r6
 8004ed0:	d1f6      	bne.n	8004ec0 <__strtok_r+0x14>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ef      	bne.n	8004eb6 <__strtok_r+0xa>
 8004ed6:	6014      	str	r4, [r2, #0]
 8004ed8:	7003      	strb	r3, [r0, #0]
 8004eda:	e7eb      	b.n	8004eb4 <__strtok_r+0x8>
 8004edc:	462b      	mov	r3, r5
 8004ede:	e00d      	b.n	8004efc <__strtok_r+0x50>
 8004ee0:	b926      	cbnz	r6, 8004eec <__strtok_r+0x40>
 8004ee2:	461c      	mov	r4, r3
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004eec:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ef0:	42b5      	cmp	r5, r6
 8004ef2:	d1f5      	bne.n	8004ee0 <__strtok_r+0x34>
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	d0f1      	beq.n	8004edc <__strtok_r+0x30>
 8004ef8:	2100      	movs	r1, #0
 8004efa:	7021      	strb	r1, [r4, #0]
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e7d9      	b.n	8004eb4 <__strtok_r+0x8>

08004f00 <malloc>:
 8004f00:	4b02      	ldr	r3, [pc, #8]	; (8004f0c <malloc+0xc>)
 8004f02:	4601      	mov	r1, r0
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	f000 b84f 	b.w	8004fa8 <_malloc_r>
 8004f0a:	bf00      	nop
 8004f0c:	20000014 	.word	0x20000014

08004f10 <_free_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4605      	mov	r5, r0
 8004f14:	2900      	cmp	r1, #0
 8004f16:	d043      	beq.n	8004fa0 <_free_r+0x90>
 8004f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1c:	1f0c      	subs	r4, r1, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfb8      	it	lt
 8004f22:	18e4      	addlt	r4, r4, r3
 8004f24:	f001 f853 	bl	8005fce <__malloc_lock>
 8004f28:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <_free_r+0x94>)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	b933      	cbnz	r3, 8004f3e <_free_r+0x2e>
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	6014      	str	r4, [r2, #0]
 8004f34:	4628      	mov	r0, r5
 8004f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f3a:	f001 b849 	b.w	8005fd0 <__malloc_unlock>
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	d90b      	bls.n	8004f5a <_free_r+0x4a>
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	1862      	adds	r2, r4, r1
 8004f46:	4293      	cmp	r3, r2
 8004f48:	bf01      	itttt	eq
 8004f4a:	681a      	ldreq	r2, [r3, #0]
 8004f4c:	685b      	ldreq	r3, [r3, #4]
 8004f4e:	1852      	addeq	r2, r2, r1
 8004f50:	6022      	streq	r2, [r4, #0]
 8004f52:	6063      	str	r3, [r4, #4]
 8004f54:	6004      	str	r4, [r0, #0]
 8004f56:	e7ed      	b.n	8004f34 <_free_r+0x24>
 8004f58:	4613      	mov	r3, r2
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	b10a      	cbz	r2, 8004f62 <_free_r+0x52>
 8004f5e:	42a2      	cmp	r2, r4
 8004f60:	d9fa      	bls.n	8004f58 <_free_r+0x48>
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	1858      	adds	r0, r3, r1
 8004f66:	42a0      	cmp	r0, r4
 8004f68:	d10b      	bne.n	8004f82 <_free_r+0x72>
 8004f6a:	6820      	ldr	r0, [r4, #0]
 8004f6c:	4401      	add	r1, r0
 8004f6e:	1858      	adds	r0, r3, r1
 8004f70:	4282      	cmp	r2, r0
 8004f72:	6019      	str	r1, [r3, #0]
 8004f74:	d1de      	bne.n	8004f34 <_free_r+0x24>
 8004f76:	6810      	ldr	r0, [r2, #0]
 8004f78:	6852      	ldr	r2, [r2, #4]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
 8004f80:	e7d8      	b.n	8004f34 <_free_r+0x24>
 8004f82:	d902      	bls.n	8004f8a <_free_r+0x7a>
 8004f84:	230c      	movs	r3, #12
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	e7d4      	b.n	8004f34 <_free_r+0x24>
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1821      	adds	r1, r4, r0
 8004f8e:	428a      	cmp	r2, r1
 8004f90:	bf01      	itttt	eq
 8004f92:	6811      	ldreq	r1, [r2, #0]
 8004f94:	6852      	ldreq	r2, [r2, #4]
 8004f96:	1809      	addeq	r1, r1, r0
 8004f98:	6021      	streq	r1, [r4, #0]
 8004f9a:	6062      	str	r2, [r4, #4]
 8004f9c:	605c      	str	r4, [r3, #4]
 8004f9e:	e7c9      	b.n	8004f34 <_free_r+0x24>
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20001dbc 	.word	0x20001dbc

08004fa8 <_malloc_r>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	1ccd      	adds	r5, r1, #3
 8004fac:	f025 0503 	bic.w	r5, r5, #3
 8004fb0:	3508      	adds	r5, #8
 8004fb2:	2d0c      	cmp	r5, #12
 8004fb4:	bf38      	it	cc
 8004fb6:	250c      	movcc	r5, #12
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	4606      	mov	r6, r0
 8004fbc:	db01      	blt.n	8004fc2 <_malloc_r+0x1a>
 8004fbe:	42a9      	cmp	r1, r5
 8004fc0:	d903      	bls.n	8004fca <_malloc_r+0x22>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	f001 f800 	bl	8005fce <__malloc_lock>
 8004fce:	4a21      	ldr	r2, [pc, #132]	; (8005054 <_malloc_r+0xac>)
 8004fd0:	6814      	ldr	r4, [r2, #0]
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	b991      	cbnz	r1, 8004ffc <_malloc_r+0x54>
 8004fd6:	4c20      	ldr	r4, [pc, #128]	; (8005058 <_malloc_r+0xb0>)
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	b91b      	cbnz	r3, 8004fe4 <_malloc_r+0x3c>
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f000 fe19 	bl	8005c14 <_sbrk_r>
 8004fe2:	6020      	str	r0, [r4, #0]
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 fe14 	bl	8005c14 <_sbrk_r>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d124      	bne.n	800503a <_malloc_r+0x92>
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	6033      	str	r3, [r6, #0]
 8004ff6:	f000 ffeb 	bl	8005fd0 <__malloc_unlock>
 8004ffa:	e7e4      	b.n	8004fc6 <_malloc_r+0x1e>
 8004ffc:	680b      	ldr	r3, [r1, #0]
 8004ffe:	1b5b      	subs	r3, r3, r5
 8005000:	d418      	bmi.n	8005034 <_malloc_r+0x8c>
 8005002:	2b0b      	cmp	r3, #11
 8005004:	d90f      	bls.n	8005026 <_malloc_r+0x7e>
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	18cc      	adds	r4, r1, r3
 800500a:	50cd      	str	r5, [r1, r3]
 800500c:	4630      	mov	r0, r6
 800500e:	f000 ffdf 	bl	8005fd0 <__malloc_unlock>
 8005012:	f104 000b 	add.w	r0, r4, #11
 8005016:	1d23      	adds	r3, r4, #4
 8005018:	f020 0007 	bic.w	r0, r0, #7
 800501c:	1ac3      	subs	r3, r0, r3
 800501e:	d0d3      	beq.n	8004fc8 <_malloc_r+0x20>
 8005020:	425a      	negs	r2, r3
 8005022:	50e2      	str	r2, [r4, r3]
 8005024:	e7d0      	b.n	8004fc8 <_malloc_r+0x20>
 8005026:	684b      	ldr	r3, [r1, #4]
 8005028:	428c      	cmp	r4, r1
 800502a:	bf16      	itet	ne
 800502c:	6063      	strne	r3, [r4, #4]
 800502e:	6013      	streq	r3, [r2, #0]
 8005030:	460c      	movne	r4, r1
 8005032:	e7eb      	b.n	800500c <_malloc_r+0x64>
 8005034:	460c      	mov	r4, r1
 8005036:	6849      	ldr	r1, [r1, #4]
 8005038:	e7cc      	b.n	8004fd4 <_malloc_r+0x2c>
 800503a:	1cc4      	adds	r4, r0, #3
 800503c:	f024 0403 	bic.w	r4, r4, #3
 8005040:	42a0      	cmp	r0, r4
 8005042:	d005      	beq.n	8005050 <_malloc_r+0xa8>
 8005044:	1a21      	subs	r1, r4, r0
 8005046:	4630      	mov	r0, r6
 8005048:	f000 fde4 	bl	8005c14 <_sbrk_r>
 800504c:	3001      	adds	r0, #1
 800504e:	d0cf      	beq.n	8004ff0 <_malloc_r+0x48>
 8005050:	6025      	str	r5, [r4, #0]
 8005052:	e7db      	b.n	800500c <_malloc_r+0x64>
 8005054:	20001dbc 	.word	0x20001dbc
 8005058:	20001dc0 	.word	0x20001dc0

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	4682      	mov	sl, r0
 8005064:	429e      	cmp	r6, r3
 8005066:	460c      	mov	r4, r1
 8005068:	4690      	mov	r8, r2
 800506a:	4699      	mov	r9, r3
 800506c:	d837      	bhi.n	80050de <__ssputs_r+0x82>
 800506e:	898a      	ldrh	r2, [r1, #12]
 8005070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005074:	d031      	beq.n	80050da <__ssputs_r+0x7e>
 8005076:	2302      	movs	r3, #2
 8005078:	6825      	ldr	r5, [r4, #0]
 800507a:	6909      	ldr	r1, [r1, #16]
 800507c:	1a6f      	subs	r7, r5, r1
 800507e:	6965      	ldr	r5, [r4, #20]
 8005080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005084:	fb95 f5f3 	sdiv	r5, r5, r3
 8005088:	f109 0301 	add.w	r3, r9, #1
 800508c:	443b      	add	r3, r7
 800508e:	429d      	cmp	r5, r3
 8005090:	bf38      	it	cc
 8005092:	461d      	movcc	r5, r3
 8005094:	0553      	lsls	r3, r2, #21
 8005096:	d530      	bpl.n	80050fa <__ssputs_r+0x9e>
 8005098:	4629      	mov	r1, r5
 800509a:	f7ff ff85 	bl	8004fa8 <_malloc_r>
 800509e:	4606      	mov	r6, r0
 80050a0:	b950      	cbnz	r0, 80050b8 <__ssputs_r+0x5c>
 80050a2:	230c      	movs	r3, #12
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a8:	f8ca 3000 	str.w	r3, [sl]
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	463a      	mov	r2, r7
 80050ba:	6921      	ldr	r1, [r4, #16]
 80050bc:	f7ff fe3c 	bl	8004d38 <memcpy>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	6126      	str	r6, [r4, #16]
 80050ce:	443e      	add	r6, r7
 80050d0:	6026      	str	r6, [r4, #0]
 80050d2:	464e      	mov	r6, r9
 80050d4:	6165      	str	r5, [r4, #20]
 80050d6:	1bed      	subs	r5, r5, r7
 80050d8:	60a5      	str	r5, [r4, #8]
 80050da:	454e      	cmp	r6, r9
 80050dc:	d900      	bls.n	80050e0 <__ssputs_r+0x84>
 80050de:	464e      	mov	r6, r9
 80050e0:	4632      	mov	r2, r6
 80050e2:	4641      	mov	r1, r8
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	f000 ff59 	bl	8005f9c <memmove>
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	2000      	movs	r0, #0
 80050ee:	1b9b      	subs	r3, r3, r6
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	441e      	add	r6, r3
 80050f6:	6026      	str	r6, [r4, #0]
 80050f8:	e7dc      	b.n	80050b4 <__ssputs_r+0x58>
 80050fa:	462a      	mov	r2, r5
 80050fc:	f000 ff69 	bl	8005fd2 <_realloc_r>
 8005100:	4606      	mov	r6, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	d1e2      	bne.n	80050cc <__ssputs_r+0x70>
 8005106:	6921      	ldr	r1, [r4, #16]
 8005108:	4650      	mov	r0, sl
 800510a:	f7ff ff01 	bl	8004f10 <_free_r>
 800510e:	e7c8      	b.n	80050a2 <__ssputs_r+0x46>

08005110 <_svfiprintf_r>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	461d      	mov	r5, r3
 8005116:	898b      	ldrh	r3, [r1, #12]
 8005118:	b09d      	sub	sp, #116	; 0x74
 800511a:	061f      	lsls	r7, r3, #24
 800511c:	4680      	mov	r8, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4616      	mov	r6, r2
 8005122:	d50f      	bpl.n	8005144 <_svfiprintf_r+0x34>
 8005124:	690b      	ldr	r3, [r1, #16]
 8005126:	b96b      	cbnz	r3, 8005144 <_svfiprintf_r+0x34>
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	f7ff ff3d 	bl	8004fa8 <_malloc_r>
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	6120      	str	r0, [r4, #16]
 8005132:	b928      	cbnz	r0, 8005140 <_svfiprintf_r+0x30>
 8005134:	230c      	movs	r3, #12
 8005136:	f8c8 3000 	str.w	r3, [r8]
 800513a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800513e:	e0c8      	b.n	80052d2 <_svfiprintf_r+0x1c2>
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	6163      	str	r3, [r4, #20]
 8005144:	2300      	movs	r3, #0
 8005146:	9309      	str	r3, [sp, #36]	; 0x24
 8005148:	2320      	movs	r3, #32
 800514a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800514e:	2330      	movs	r3, #48	; 0x30
 8005150:	f04f 0b01 	mov.w	fp, #1
 8005154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005158:	9503      	str	r5, [sp, #12]
 800515a:	4637      	mov	r7, r6
 800515c:	463d      	mov	r5, r7
 800515e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005162:	b10b      	cbz	r3, 8005168 <_svfiprintf_r+0x58>
 8005164:	2b25      	cmp	r3, #37	; 0x25
 8005166:	d13e      	bne.n	80051e6 <_svfiprintf_r+0xd6>
 8005168:	ebb7 0a06 	subs.w	sl, r7, r6
 800516c:	d00b      	beq.n	8005186 <_svfiprintf_r+0x76>
 800516e:	4653      	mov	r3, sl
 8005170:	4632      	mov	r2, r6
 8005172:	4621      	mov	r1, r4
 8005174:	4640      	mov	r0, r8
 8005176:	f7ff ff71 	bl	800505c <__ssputs_r>
 800517a:	3001      	adds	r0, #1
 800517c:	f000 80a4 	beq.w	80052c8 <_svfiprintf_r+0x1b8>
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	4453      	add	r3, sl
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	783b      	ldrb	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 809d 	beq.w	80052c8 <_svfiprintf_r+0x1b8>
 800518e:	2300      	movs	r3, #0
 8005190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051a0:	931a      	str	r3, [sp, #104]	; 0x68
 80051a2:	462f      	mov	r7, r5
 80051a4:	2205      	movs	r2, #5
 80051a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051aa:	4850      	ldr	r0, [pc, #320]	; (80052ec <_svfiprintf_r+0x1dc>)
 80051ac:	f000 fee8 	bl	8005f80 <memchr>
 80051b0:	9b04      	ldr	r3, [sp, #16]
 80051b2:	b9d0      	cbnz	r0, 80051ea <_svfiprintf_r+0xda>
 80051b4:	06d9      	lsls	r1, r3, #27
 80051b6:	bf44      	itt	mi
 80051b8:	2220      	movmi	r2, #32
 80051ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051be:	071a      	lsls	r2, r3, #28
 80051c0:	bf44      	itt	mi
 80051c2:	222b      	movmi	r2, #43	; 0x2b
 80051c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051c8:	782a      	ldrb	r2, [r5, #0]
 80051ca:	2a2a      	cmp	r2, #42	; 0x2a
 80051cc:	d015      	beq.n	80051fa <_svfiprintf_r+0xea>
 80051ce:	462f      	mov	r7, r5
 80051d0:	2000      	movs	r0, #0
 80051d2:	250a      	movs	r5, #10
 80051d4:	9a07      	ldr	r2, [sp, #28]
 80051d6:	4639      	mov	r1, r7
 80051d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051dc:	3b30      	subs	r3, #48	; 0x30
 80051de:	2b09      	cmp	r3, #9
 80051e0:	d94d      	bls.n	800527e <_svfiprintf_r+0x16e>
 80051e2:	b1b8      	cbz	r0, 8005214 <_svfiprintf_r+0x104>
 80051e4:	e00f      	b.n	8005206 <_svfiprintf_r+0xf6>
 80051e6:	462f      	mov	r7, r5
 80051e8:	e7b8      	b.n	800515c <_svfiprintf_r+0x4c>
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <_svfiprintf_r+0x1dc>)
 80051ec:	463d      	mov	r5, r7
 80051ee:	1a80      	subs	r0, r0, r2
 80051f0:	fa0b f000 	lsl.w	r0, fp, r0
 80051f4:	4318      	orrs	r0, r3
 80051f6:	9004      	str	r0, [sp, #16]
 80051f8:	e7d3      	b.n	80051a2 <_svfiprintf_r+0x92>
 80051fa:	9a03      	ldr	r2, [sp, #12]
 80051fc:	1d11      	adds	r1, r2, #4
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	9103      	str	r1, [sp, #12]
 8005202:	2a00      	cmp	r2, #0
 8005204:	db01      	blt.n	800520a <_svfiprintf_r+0xfa>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e004      	b.n	8005214 <_svfiprintf_r+0x104>
 800520a:	4252      	negs	r2, r2
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	9207      	str	r2, [sp, #28]
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	783b      	ldrb	r3, [r7, #0]
 8005216:	2b2e      	cmp	r3, #46	; 0x2e
 8005218:	d10c      	bne.n	8005234 <_svfiprintf_r+0x124>
 800521a:	787b      	ldrb	r3, [r7, #1]
 800521c:	2b2a      	cmp	r3, #42	; 0x2a
 800521e:	d133      	bne.n	8005288 <_svfiprintf_r+0x178>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	3702      	adds	r7, #2
 8005224:	1d1a      	adds	r2, r3, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	9203      	str	r2, [sp, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	bfb8      	it	lt
 800522e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	4d2e      	ldr	r5, [pc, #184]	; (80052f0 <_svfiprintf_r+0x1e0>)
 8005236:	2203      	movs	r2, #3
 8005238:	7839      	ldrb	r1, [r7, #0]
 800523a:	4628      	mov	r0, r5
 800523c:	f000 fea0 	bl	8005f80 <memchr>
 8005240:	b138      	cbz	r0, 8005252 <_svfiprintf_r+0x142>
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	1b40      	subs	r0, r0, r5
 8005246:	fa03 f000 	lsl.w	r0, r3, r0
 800524a:	9b04      	ldr	r3, [sp, #16]
 800524c:	3701      	adds	r7, #1
 800524e:	4303      	orrs	r3, r0
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	7839      	ldrb	r1, [r7, #0]
 8005254:	2206      	movs	r2, #6
 8005256:	4827      	ldr	r0, [pc, #156]	; (80052f4 <_svfiprintf_r+0x1e4>)
 8005258:	1c7e      	adds	r6, r7, #1
 800525a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525e:	f000 fe8f 	bl	8005f80 <memchr>
 8005262:	2800      	cmp	r0, #0
 8005264:	d038      	beq.n	80052d8 <_svfiprintf_r+0x1c8>
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <_svfiprintf_r+0x1e8>)
 8005268:	bb13      	cbnz	r3, 80052b0 <_svfiprintf_r+0x1a0>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	3307      	adds	r3, #7
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	3308      	adds	r3, #8
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	444b      	add	r3, r9
 800527a:	9309      	str	r3, [sp, #36]	; 0x24
 800527c:	e76d      	b.n	800515a <_svfiprintf_r+0x4a>
 800527e:	fb05 3202 	mla	r2, r5, r2, r3
 8005282:	2001      	movs	r0, #1
 8005284:	460f      	mov	r7, r1
 8005286:	e7a6      	b.n	80051d6 <_svfiprintf_r+0xc6>
 8005288:	2300      	movs	r3, #0
 800528a:	250a      	movs	r5, #10
 800528c:	4619      	mov	r1, r3
 800528e:	3701      	adds	r7, #1
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	4638      	mov	r0, r7
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_svfiprintf_r+0x196>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c8      	beq.n	8005234 <_svfiprintf_r+0x124>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c6      	b.n	8005234 <_svfiprintf_r+0x124>
 80052a6:	fb05 2101 	mla	r1, r5, r1, r2
 80052aa:	2301      	movs	r3, #1
 80052ac:	4607      	mov	r7, r0
 80052ae:	e7f0      	b.n	8005292 <_svfiprintf_r+0x182>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4622      	mov	r2, r4
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <_svfiprintf_r+0x1ec>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4640      	mov	r0, r8
 80052bc:	f3af 8000 	nop.w
 80052c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80052c4:	4681      	mov	r9, r0
 80052c6:	d1d6      	bne.n	8005276 <_svfiprintf_r+0x166>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	065b      	lsls	r3, r3, #25
 80052cc:	f53f af35 	bmi.w	800513a <_svfiprintf_r+0x2a>
 80052d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d2:	b01d      	add	sp, #116	; 0x74
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4622      	mov	r2, r4
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <_svfiprintf_r+0x1ec>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4640      	mov	r0, r8
 80052e4:	f000 fa2c 	bl	8005740 <_printf_i>
 80052e8:	e7ea      	b.n	80052c0 <_svfiprintf_r+0x1b0>
 80052ea:	bf00      	nop
 80052ec:	0800647c 	.word	0x0800647c
 80052f0:	08006482 	.word	0x08006482
 80052f4:	08006486 	.word	0x08006486
 80052f8:	00000000 	.word	0x00000000
 80052fc:	0800505d 	.word	0x0800505d

08005300 <_sungetc_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	1c4b      	adds	r3, r1, #1
 8005304:	4614      	mov	r4, r2
 8005306:	d103      	bne.n	8005310 <_sungetc_r+0x10>
 8005308:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800530c:	4628      	mov	r0, r5
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	8993      	ldrh	r3, [r2, #12]
 8005312:	b2cd      	uxtb	r5, r1
 8005314:	f023 0320 	bic.w	r3, r3, #32
 8005318:	8193      	strh	r3, [r2, #12]
 800531a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800531c:	6852      	ldr	r2, [r2, #4]
 800531e:	b18b      	cbz	r3, 8005344 <_sungetc_r+0x44>
 8005320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005322:	4293      	cmp	r3, r2
 8005324:	dd08      	ble.n	8005338 <_sungetc_r+0x38>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	e7e9      	b.n	800530c <_sungetc_r+0xc>
 8005338:	4621      	mov	r1, r4
 800533a:	f000 fdc5 	bl	8005ec8 <__submore>
 800533e:	2800      	cmp	r0, #0
 8005340:	d0f1      	beq.n	8005326 <_sungetc_r+0x26>
 8005342:	e7e1      	b.n	8005308 <_sungetc_r+0x8>
 8005344:	6921      	ldr	r1, [r4, #16]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	b151      	cbz	r1, 8005360 <_sungetc_r+0x60>
 800534a:	4299      	cmp	r1, r3
 800534c:	d208      	bcs.n	8005360 <_sungetc_r+0x60>
 800534e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005352:	42a9      	cmp	r1, r5
 8005354:	d104      	bne.n	8005360 <_sungetc_r+0x60>
 8005356:	3b01      	subs	r3, #1
 8005358:	3201      	adds	r2, #1
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	6062      	str	r2, [r4, #4]
 800535e:	e7d5      	b.n	800530c <_sungetc_r+0xc>
 8005360:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005368:	6363      	str	r3, [r4, #52]	; 0x34
 800536a:	2303      	movs	r3, #3
 800536c:	63a3      	str	r3, [r4, #56]	; 0x38
 800536e:	4623      	mov	r3, r4
 8005370:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	2301      	movs	r3, #1
 8005378:	e7dc      	b.n	8005334 <_sungetc_r+0x34>

0800537a <__ssrefill_r>:
 800537a:	b510      	push	{r4, lr}
 800537c:	460c      	mov	r4, r1
 800537e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005380:	b169      	cbz	r1, 800539e <__ssrefill_r+0x24>
 8005382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005386:	4299      	cmp	r1, r3
 8005388:	d001      	beq.n	800538e <__ssrefill_r+0x14>
 800538a:	f7ff fdc1 	bl	8004f10 <_free_r>
 800538e:	2000      	movs	r0, #0
 8005390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005392:	6360      	str	r0, [r4, #52]	; 0x34
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	b113      	cbz	r3, 800539e <__ssrefill_r+0x24>
 8005398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	bd10      	pop	{r4, pc}
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	6063      	str	r3, [r4, #4]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	e7f3      	b.n	800539c <__ssrefill_r+0x22>

080053b4 <__ssvfiscanf_r>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	460c      	mov	r4, r1
 80053ba:	2100      	movs	r1, #0
 80053bc:	4606      	mov	r6, r0
 80053be:	4692      	mov	sl, r2
 80053c0:	270a      	movs	r7, #10
 80053c2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80053c6:	9144      	str	r1, [sp, #272]	; 0x110
 80053c8:	9145      	str	r1, [sp, #276]	; 0x114
 80053ca:	499e      	ldr	r1, [pc, #632]	; (8005644 <__ssvfiscanf_r+0x290>)
 80053cc:	f10d 0804 	add.w	r8, sp, #4
 80053d0:	91a0      	str	r1, [sp, #640]	; 0x280
 80053d2:	499d      	ldr	r1, [pc, #628]	; (8005648 <__ssvfiscanf_r+0x294>)
 80053d4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800564c <__ssvfiscanf_r+0x298>
 80053d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80053dc:	91a1      	str	r1, [sp, #644]	; 0x284
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f89a 3000 	ldrb.w	r3, [sl]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 812a 	beq.w	800563e <__ssvfiscanf_r+0x28a>
 80053ea:	4655      	mov	r5, sl
 80053ec:	f000 fda8 	bl	8005f40 <__locale_ctype_ptr>
 80053f0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80053f4:	4458      	add	r0, fp
 80053f6:	7843      	ldrb	r3, [r0, #1]
 80053f8:	f013 0308 	ands.w	r3, r3, #8
 80053fc:	d01c      	beq.n	8005438 <__ssvfiscanf_r+0x84>
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	dd12      	ble.n	800542a <__ssvfiscanf_r+0x76>
 8005404:	f000 fd9c 	bl	8005f40 <__locale_ctype_ptr>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	4410      	add	r0, r2
 800540e:	7842      	ldrb	r2, [r0, #1]
 8005410:	0712      	lsls	r2, r2, #28
 8005412:	d401      	bmi.n	8005418 <__ssvfiscanf_r+0x64>
 8005414:	46aa      	mov	sl, r5
 8005416:	e7e3      	b.n	80053e0 <__ssvfiscanf_r+0x2c>
 8005418:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800541a:	3301      	adds	r3, #1
 800541c:	3201      	adds	r2, #1
 800541e:	9245      	str	r2, [sp, #276]	; 0x114
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	3a01      	subs	r2, #1
 8005426:	6062      	str	r2, [r4, #4]
 8005428:	e7e9      	b.n	80053fe <__ssvfiscanf_r+0x4a>
 800542a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800542c:	4621      	mov	r1, r4
 800542e:	4630      	mov	r0, r6
 8005430:	4798      	blx	r3
 8005432:	2800      	cmp	r0, #0
 8005434:	d0e6      	beq.n	8005404 <__ssvfiscanf_r+0x50>
 8005436:	e7ed      	b.n	8005414 <__ssvfiscanf_r+0x60>
 8005438:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800543c:	f040 8082 	bne.w	8005544 <__ssvfiscanf_r+0x190>
 8005440:	9343      	str	r3, [sp, #268]	; 0x10c
 8005442:	9341      	str	r3, [sp, #260]	; 0x104
 8005444:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005448:	2b2a      	cmp	r3, #42	; 0x2a
 800544a:	d103      	bne.n	8005454 <__ssvfiscanf_r+0xa0>
 800544c:	2310      	movs	r3, #16
 800544e:	f10a 0502 	add.w	r5, sl, #2
 8005452:	9341      	str	r3, [sp, #260]	; 0x104
 8005454:	46aa      	mov	sl, r5
 8005456:	f815 1b01 	ldrb.w	r1, [r5], #1
 800545a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800545e:	2a09      	cmp	r2, #9
 8005460:	d922      	bls.n	80054a8 <__ssvfiscanf_r+0xf4>
 8005462:	2203      	movs	r2, #3
 8005464:	4879      	ldr	r0, [pc, #484]	; (800564c <__ssvfiscanf_r+0x298>)
 8005466:	f000 fd8b 	bl	8005f80 <memchr>
 800546a:	b138      	cbz	r0, 800547c <__ssvfiscanf_r+0xc8>
 800546c:	eba0 0309 	sub.w	r3, r0, r9
 8005470:	2001      	movs	r0, #1
 8005472:	46aa      	mov	sl, r5
 8005474:	4098      	lsls	r0, r3
 8005476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005478:	4318      	orrs	r0, r3
 800547a:	9041      	str	r0, [sp, #260]	; 0x104
 800547c:	f89a 3000 	ldrb.w	r3, [sl]
 8005480:	f10a 0501 	add.w	r5, sl, #1
 8005484:	2b67      	cmp	r3, #103	; 0x67
 8005486:	d82b      	bhi.n	80054e0 <__ssvfiscanf_r+0x12c>
 8005488:	2b65      	cmp	r3, #101	; 0x65
 800548a:	f080 809f 	bcs.w	80055cc <__ssvfiscanf_r+0x218>
 800548e:	2b47      	cmp	r3, #71	; 0x47
 8005490:	d810      	bhi.n	80054b4 <__ssvfiscanf_r+0x100>
 8005492:	2b45      	cmp	r3, #69	; 0x45
 8005494:	f080 809a 	bcs.w	80055cc <__ssvfiscanf_r+0x218>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d06c      	beq.n	8005576 <__ssvfiscanf_r+0x1c2>
 800549c:	2b25      	cmp	r3, #37	; 0x25
 800549e:	d051      	beq.n	8005544 <__ssvfiscanf_r+0x190>
 80054a0:	2303      	movs	r3, #3
 80054a2:	9742      	str	r7, [sp, #264]	; 0x108
 80054a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80054a6:	e027      	b.n	80054f8 <__ssvfiscanf_r+0x144>
 80054a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80054aa:	fb07 1303 	mla	r3, r7, r3, r1
 80054ae:	3b30      	subs	r3, #48	; 0x30
 80054b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80054b2:	e7cf      	b.n	8005454 <__ssvfiscanf_r+0xa0>
 80054b4:	2b5b      	cmp	r3, #91	; 0x5b
 80054b6:	d06a      	beq.n	800558e <__ssvfiscanf_r+0x1da>
 80054b8:	d80c      	bhi.n	80054d4 <__ssvfiscanf_r+0x120>
 80054ba:	2b58      	cmp	r3, #88	; 0x58
 80054bc:	d1f0      	bne.n	80054a0 <__ssvfiscanf_r+0xec>
 80054be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	9241      	str	r2, [sp, #260]	; 0x104
 80054c6:	2210      	movs	r2, #16
 80054c8:	9242      	str	r2, [sp, #264]	; 0x108
 80054ca:	2b6e      	cmp	r3, #110	; 0x6e
 80054cc:	bf8c      	ite	hi
 80054ce:	2304      	movhi	r3, #4
 80054d0:	2303      	movls	r3, #3
 80054d2:	e010      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 80054d4:	2b63      	cmp	r3, #99	; 0x63
 80054d6:	d065      	beq.n	80055a4 <__ssvfiscanf_r+0x1f0>
 80054d8:	2b64      	cmp	r3, #100	; 0x64
 80054da:	d1e1      	bne.n	80054a0 <__ssvfiscanf_r+0xec>
 80054dc:	9742      	str	r7, [sp, #264]	; 0x108
 80054de:	e7f4      	b.n	80054ca <__ssvfiscanf_r+0x116>
 80054e0:	2b70      	cmp	r3, #112	; 0x70
 80054e2:	d04b      	beq.n	800557c <__ssvfiscanf_r+0x1c8>
 80054e4:	d826      	bhi.n	8005534 <__ssvfiscanf_r+0x180>
 80054e6:	2b6e      	cmp	r3, #110	; 0x6e
 80054e8:	d062      	beq.n	80055b0 <__ssvfiscanf_r+0x1fc>
 80054ea:	d84c      	bhi.n	8005586 <__ssvfiscanf_r+0x1d2>
 80054ec:	2b69      	cmp	r3, #105	; 0x69
 80054ee:	d1d7      	bne.n	80054a0 <__ssvfiscanf_r+0xec>
 80054f0:	2300      	movs	r3, #0
 80054f2:	9342      	str	r3, [sp, #264]	; 0x108
 80054f4:	2303      	movs	r3, #3
 80054f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dd68      	ble.n	80055d0 <__ssvfiscanf_r+0x21c>
 80054fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005500:	0659      	lsls	r1, r3, #25
 8005502:	d407      	bmi.n	8005514 <__ssvfiscanf_r+0x160>
 8005504:	f000 fd1c 	bl	8005f40 <__locale_ctype_ptr>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	4410      	add	r0, r2
 800550e:	7842      	ldrb	r2, [r0, #1]
 8005510:	0712      	lsls	r2, r2, #28
 8005512:	d464      	bmi.n	80055de <__ssvfiscanf_r+0x22a>
 8005514:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005516:	2b02      	cmp	r3, #2
 8005518:	dc73      	bgt.n	8005602 <__ssvfiscanf_r+0x24e>
 800551a:	466b      	mov	r3, sp
 800551c:	4622      	mov	r2, r4
 800551e:	a941      	add	r1, sp, #260	; 0x104
 8005520:	4630      	mov	r0, r6
 8005522:	f000 fa1f 	bl	8005964 <_scanf_chars>
 8005526:	2801      	cmp	r0, #1
 8005528:	f000 8089 	beq.w	800563e <__ssvfiscanf_r+0x28a>
 800552c:	2802      	cmp	r0, #2
 800552e:	f47f af71 	bne.w	8005414 <__ssvfiscanf_r+0x60>
 8005532:	e01d      	b.n	8005570 <__ssvfiscanf_r+0x1bc>
 8005534:	2b75      	cmp	r3, #117	; 0x75
 8005536:	d0d1      	beq.n	80054dc <__ssvfiscanf_r+0x128>
 8005538:	2b78      	cmp	r3, #120	; 0x78
 800553a:	d0c0      	beq.n	80054be <__ssvfiscanf_r+0x10a>
 800553c:	2b73      	cmp	r3, #115	; 0x73
 800553e:	d1af      	bne.n	80054a0 <__ssvfiscanf_r+0xec>
 8005540:	2302      	movs	r3, #2
 8005542:	e7d8      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd0c      	ble.n	8005564 <__ssvfiscanf_r+0x1b0>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	455a      	cmp	r2, fp
 8005550:	d175      	bne.n	800563e <__ssvfiscanf_r+0x28a>
 8005552:	3301      	adds	r3, #1
 8005554:	6862      	ldr	r2, [r4, #4]
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800555a:	3a01      	subs	r2, #1
 800555c:	3301      	adds	r3, #1
 800555e:	6062      	str	r2, [r4, #4]
 8005560:	9345      	str	r3, [sp, #276]	; 0x114
 8005562:	e757      	b.n	8005414 <__ssvfiscanf_r+0x60>
 8005564:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005566:	4621      	mov	r1, r4
 8005568:	4630      	mov	r0, r6
 800556a:	4798      	blx	r3
 800556c:	2800      	cmp	r0, #0
 800556e:	d0ec      	beq.n	800554a <__ssvfiscanf_r+0x196>
 8005570:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005572:	2800      	cmp	r0, #0
 8005574:	d159      	bne.n	800562a <__ssvfiscanf_r+0x276>
 8005576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800557a:	e05c      	b.n	8005636 <__ssvfiscanf_r+0x282>
 800557c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800557e:	f042 0220 	orr.w	r2, r2, #32
 8005582:	9241      	str	r2, [sp, #260]	; 0x104
 8005584:	e79b      	b.n	80054be <__ssvfiscanf_r+0x10a>
 8005586:	2308      	movs	r3, #8
 8005588:	9342      	str	r3, [sp, #264]	; 0x108
 800558a:	2304      	movs	r3, #4
 800558c:	e7b3      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 800558e:	4629      	mov	r1, r5
 8005590:	4640      	mov	r0, r8
 8005592:	f000 fb4f 	bl	8005c34 <__sccl>
 8005596:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005598:	4605      	mov	r5, r0
 800559a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559e:	9341      	str	r3, [sp, #260]	; 0x104
 80055a0:	2301      	movs	r3, #1
 80055a2:	e7a8      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 80055a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055aa:	9341      	str	r3, [sp, #260]	; 0x104
 80055ac:	2300      	movs	r3, #0
 80055ae:	e7a2      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 80055b0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80055b2:	06c3      	lsls	r3, r0, #27
 80055b4:	f53f af2e 	bmi.w	8005414 <__ssvfiscanf_r+0x60>
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	9100      	str	r1, [sp, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	07c0      	lsls	r0, r0, #31
 80055c4:	bf4c      	ite	mi
 80055c6:	801a      	strhmi	r2, [r3, #0]
 80055c8:	601a      	strpl	r2, [r3, #0]
 80055ca:	e723      	b.n	8005414 <__ssvfiscanf_r+0x60>
 80055cc:	2305      	movs	r3, #5
 80055ce:	e792      	b.n	80054f6 <__ssvfiscanf_r+0x142>
 80055d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	4798      	blx	r3
 80055d8:	2800      	cmp	r0, #0
 80055da:	d090      	beq.n	80054fe <__ssvfiscanf_r+0x14a>
 80055dc:	e7c8      	b.n	8005570 <__ssvfiscanf_r+0x1bc>
 80055de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80055e0:	3201      	adds	r2, #1
 80055e2:	9245      	str	r2, [sp, #276]	; 0x114
 80055e4:	6862      	ldr	r2, [r4, #4]
 80055e6:	3a01      	subs	r2, #1
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	6062      	str	r2, [r4, #4]
 80055ec:	dd02      	ble.n	80055f4 <__ssvfiscanf_r+0x240>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	e787      	b.n	8005504 <__ssvfiscanf_r+0x150>
 80055f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	4798      	blx	r3
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d081      	beq.n	8005504 <__ssvfiscanf_r+0x150>
 8005600:	e7b6      	b.n	8005570 <__ssvfiscanf_r+0x1bc>
 8005602:	2b04      	cmp	r3, #4
 8005604:	dc06      	bgt.n	8005614 <__ssvfiscanf_r+0x260>
 8005606:	466b      	mov	r3, sp
 8005608:	4622      	mov	r2, r4
 800560a:	a941      	add	r1, sp, #260	; 0x104
 800560c:	4630      	mov	r0, r6
 800560e:	f000 fa0b 	bl	8005a28 <_scanf_i>
 8005612:	e788      	b.n	8005526 <__ssvfiscanf_r+0x172>
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <__ssvfiscanf_r+0x29c>)
 8005616:	2b00      	cmp	r3, #0
 8005618:	f43f aefc 	beq.w	8005414 <__ssvfiscanf_r+0x60>
 800561c:	466b      	mov	r3, sp
 800561e:	4622      	mov	r2, r4
 8005620:	a941      	add	r1, sp, #260	; 0x104
 8005622:	4630      	mov	r0, r6
 8005624:	f3af 8000 	nop.w
 8005628:	e77d      	b.n	8005526 <__ssvfiscanf_r+0x172>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005630:	bf18      	it	ne
 8005632:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005636:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005640:	e7f9      	b.n	8005636 <__ssvfiscanf_r+0x282>
 8005642:	bf00      	nop
 8005644:	08005301 	.word	0x08005301
 8005648:	0800537b 	.word	0x0800537b
 800564c:	08006482 	.word	0x08006482
 8005650:	00000000 	.word	0x00000000

08005654 <_printf_common>:
 8005654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	4691      	mov	r9, r2
 800565a:	461f      	mov	r7, r3
 800565c:	688a      	ldr	r2, [r1, #8]
 800565e:	690b      	ldr	r3, [r1, #16]
 8005660:	4606      	mov	r6, r0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfb8      	it	lt
 8005666:	4613      	movlt	r3, r2
 8005668:	f8c9 3000 	str.w	r3, [r9]
 800566c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005670:	460c      	mov	r4, r1
 8005672:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005676:	b112      	cbz	r2, 800567e <_printf_common+0x2a>
 8005678:	3301      	adds	r3, #1
 800567a:	f8c9 3000 	str.w	r3, [r9]
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	0699      	lsls	r1, r3, #26
 8005682:	bf42      	ittt	mi
 8005684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005688:	3302      	addmi	r3, #2
 800568a:	f8c9 3000 	strmi.w	r3, [r9]
 800568e:	6825      	ldr	r5, [r4, #0]
 8005690:	f015 0506 	ands.w	r5, r5, #6
 8005694:	d107      	bne.n	80056a6 <_printf_common+0x52>
 8005696:	f104 0a19 	add.w	sl, r4, #25
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	f8d9 2000 	ldr.w	r2, [r9]
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	dc29      	bgt.n	80056fa <_printf_common+0xa6>
 80056a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	3300      	adds	r3, #0
 80056ae:	bf18      	it	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	0692      	lsls	r2, r2, #26
 80056b4:	d42e      	bmi.n	8005714 <_printf_common+0xc0>
 80056b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ba:	4639      	mov	r1, r7
 80056bc:	4630      	mov	r0, r6
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d021      	beq.n	8005708 <_printf_common+0xb4>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	68e5      	ldr	r5, [r4, #12]
 80056c8:	f003 0306 	and.w	r3, r3, #6
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	bf18      	it	ne
 80056d0:	2500      	movne	r5, #0
 80056d2:	f8d9 2000 	ldr.w	r2, [r9]
 80056d6:	f04f 0900 	mov.w	r9, #0
 80056da:	bf08      	it	eq
 80056dc:	1aad      	subeq	r5, r5, r2
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	bf08      	it	eq
 80056e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bfc4      	itt	gt
 80056ec:	1a9b      	subgt	r3, r3, r2
 80056ee:	18ed      	addgt	r5, r5, r3
 80056f0:	341a      	adds	r4, #26
 80056f2:	454d      	cmp	r5, r9
 80056f4:	d11a      	bne.n	800572c <_printf_common+0xd8>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e008      	b.n	800570c <_printf_common+0xb8>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4652      	mov	r2, sl
 80056fe:	4639      	mov	r1, r7
 8005700:	4630      	mov	r0, r6
 8005702:	47c0      	blx	r8
 8005704:	3001      	adds	r0, #1
 8005706:	d103      	bne.n	8005710 <_printf_common+0xbc>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	3501      	adds	r5, #1
 8005712:	e7c2      	b.n	800569a <_printf_common+0x46>
 8005714:	2030      	movs	r0, #48	; 0x30
 8005716:	18e1      	adds	r1, r4, r3
 8005718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005722:	4422      	add	r2, r4
 8005724:	3302      	adds	r3, #2
 8005726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572a:	e7c4      	b.n	80056b6 <_printf_common+0x62>
 800572c:	2301      	movs	r3, #1
 800572e:	4622      	mov	r2, r4
 8005730:	4639      	mov	r1, r7
 8005732:	4630      	mov	r0, r6
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d0e6      	beq.n	8005708 <_printf_common+0xb4>
 800573a:	f109 0901 	add.w	r9, r9, #1
 800573e:	e7d8      	b.n	80056f2 <_printf_common+0x9e>

08005740 <_printf_i>:
 8005740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005748:	460c      	mov	r4, r1
 800574a:	7e09      	ldrb	r1, [r1, #24]
 800574c:	b085      	sub	sp, #20
 800574e:	296e      	cmp	r1, #110	; 0x6e
 8005750:	4617      	mov	r7, r2
 8005752:	4606      	mov	r6, r0
 8005754:	4698      	mov	r8, r3
 8005756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005758:	f000 80b3 	beq.w	80058c2 <_printf_i+0x182>
 800575c:	d822      	bhi.n	80057a4 <_printf_i+0x64>
 800575e:	2963      	cmp	r1, #99	; 0x63
 8005760:	d036      	beq.n	80057d0 <_printf_i+0x90>
 8005762:	d80a      	bhi.n	800577a <_printf_i+0x3a>
 8005764:	2900      	cmp	r1, #0
 8005766:	f000 80b9 	beq.w	80058dc <_printf_i+0x19c>
 800576a:	2958      	cmp	r1, #88	; 0x58
 800576c:	f000 8083 	beq.w	8005876 <_printf_i+0x136>
 8005770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005778:	e032      	b.n	80057e0 <_printf_i+0xa0>
 800577a:	2964      	cmp	r1, #100	; 0x64
 800577c:	d001      	beq.n	8005782 <_printf_i+0x42>
 800577e:	2969      	cmp	r1, #105	; 0x69
 8005780:	d1f6      	bne.n	8005770 <_printf_i+0x30>
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	6813      	ldr	r3, [r2, #0]
 8005786:	0605      	lsls	r5, r0, #24
 8005788:	f103 0104 	add.w	r1, r3, #4
 800578c:	d52a      	bpl.n	80057e4 <_printf_i+0xa4>
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da03      	bge.n	800579e <_printf_i+0x5e>
 8005796:	222d      	movs	r2, #45	; 0x2d
 8005798:	425b      	negs	r3, r3
 800579a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800579e:	486f      	ldr	r0, [pc, #444]	; (800595c <_printf_i+0x21c>)
 80057a0:	220a      	movs	r2, #10
 80057a2:	e039      	b.n	8005818 <_printf_i+0xd8>
 80057a4:	2973      	cmp	r1, #115	; 0x73
 80057a6:	f000 809d 	beq.w	80058e4 <_printf_i+0x1a4>
 80057aa:	d808      	bhi.n	80057be <_printf_i+0x7e>
 80057ac:	296f      	cmp	r1, #111	; 0x6f
 80057ae:	d020      	beq.n	80057f2 <_printf_i+0xb2>
 80057b0:	2970      	cmp	r1, #112	; 0x70
 80057b2:	d1dd      	bne.n	8005770 <_printf_i+0x30>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f043 0320 	orr.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	e003      	b.n	80057c6 <_printf_i+0x86>
 80057be:	2975      	cmp	r1, #117	; 0x75
 80057c0:	d017      	beq.n	80057f2 <_printf_i+0xb2>
 80057c2:	2978      	cmp	r1, #120	; 0x78
 80057c4:	d1d4      	bne.n	8005770 <_printf_i+0x30>
 80057c6:	2378      	movs	r3, #120	; 0x78
 80057c8:	4865      	ldr	r0, [pc, #404]	; (8005960 <_printf_i+0x220>)
 80057ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ce:	e055      	b.n	800587c <_printf_i+0x13c>
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d6:	1d19      	adds	r1, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6011      	str	r1, [r2, #0]
 80057dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e0:	2301      	movs	r3, #1
 80057e2:	e08c      	b.n	80058fe <_printf_i+0x1be>
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057ea:	6011      	str	r1, [r2, #0]
 80057ec:	bf18      	it	ne
 80057ee:	b21b      	sxthne	r3, r3
 80057f0:	e7cf      	b.n	8005792 <_printf_i+0x52>
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	6825      	ldr	r5, [r4, #0]
 80057f6:	1d18      	adds	r0, r3, #4
 80057f8:	6010      	str	r0, [r2, #0]
 80057fa:	0628      	lsls	r0, r5, #24
 80057fc:	d501      	bpl.n	8005802 <_printf_i+0xc2>
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	e002      	b.n	8005808 <_printf_i+0xc8>
 8005802:	0668      	lsls	r0, r5, #25
 8005804:	d5fb      	bpl.n	80057fe <_printf_i+0xbe>
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	296f      	cmp	r1, #111	; 0x6f
 800580a:	bf14      	ite	ne
 800580c:	220a      	movne	r2, #10
 800580e:	2208      	moveq	r2, #8
 8005810:	4852      	ldr	r0, [pc, #328]	; (800595c <_printf_i+0x21c>)
 8005812:	2100      	movs	r1, #0
 8005814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005818:	6865      	ldr	r5, [r4, #4]
 800581a:	2d00      	cmp	r5, #0
 800581c:	60a5      	str	r5, [r4, #8]
 800581e:	f2c0 8095 	blt.w	800594c <_printf_i+0x20c>
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	f021 0104 	bic.w	r1, r1, #4
 8005828:	6021      	str	r1, [r4, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d13d      	bne.n	80058aa <_printf_i+0x16a>
 800582e:	2d00      	cmp	r5, #0
 8005830:	f040 808e 	bne.w	8005950 <_printf_i+0x210>
 8005834:	4665      	mov	r5, ip
 8005836:	2a08      	cmp	r2, #8
 8005838:	d10b      	bne.n	8005852 <_printf_i+0x112>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	07db      	lsls	r3, r3, #31
 800583e:	d508      	bpl.n	8005852 <_printf_i+0x112>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	bfde      	ittt	le
 8005848:	2330      	movle	r3, #48	; 0x30
 800584a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800584e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005852:	ebac 0305 	sub.w	r3, ip, r5
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	f8cd 8000 	str.w	r8, [sp]
 800585c:	463b      	mov	r3, r7
 800585e:	aa03      	add	r2, sp, #12
 8005860:	4621      	mov	r1, r4
 8005862:	4630      	mov	r0, r6
 8005864:	f7ff fef6 	bl	8005654 <_printf_common>
 8005868:	3001      	adds	r0, #1
 800586a:	d14d      	bne.n	8005908 <_printf_i+0x1c8>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005870:	b005      	add	sp, #20
 8005872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005876:	4839      	ldr	r0, [pc, #228]	; (800595c <_printf_i+0x21c>)
 8005878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800587c:	6813      	ldr	r3, [r2, #0]
 800587e:	6821      	ldr	r1, [r4, #0]
 8005880:	1d1d      	adds	r5, r3, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6015      	str	r5, [r2, #0]
 8005886:	060a      	lsls	r2, r1, #24
 8005888:	d50b      	bpl.n	80058a2 <_printf_i+0x162>
 800588a:	07ca      	lsls	r2, r1, #31
 800588c:	bf44      	itt	mi
 800588e:	f041 0120 	orrmi.w	r1, r1, #32
 8005892:	6021      	strmi	r1, [r4, #0]
 8005894:	b91b      	cbnz	r3, 800589e <_printf_i+0x15e>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	f022 0220 	bic.w	r2, r2, #32
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	2210      	movs	r2, #16
 80058a0:	e7b7      	b.n	8005812 <_printf_i+0xd2>
 80058a2:	064d      	lsls	r5, r1, #25
 80058a4:	bf48      	it	mi
 80058a6:	b29b      	uxthmi	r3, r3
 80058a8:	e7ef      	b.n	800588a <_printf_i+0x14a>
 80058aa:	4665      	mov	r5, ip
 80058ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80058b0:	fb02 3311 	mls	r3, r2, r1, r3
 80058b4:	5cc3      	ldrb	r3, [r0, r3]
 80058b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058ba:	460b      	mov	r3, r1
 80058bc:	2900      	cmp	r1, #0
 80058be:	d1f5      	bne.n	80058ac <_printf_i+0x16c>
 80058c0:	e7b9      	b.n	8005836 <_printf_i+0xf6>
 80058c2:	6813      	ldr	r3, [r2, #0]
 80058c4:	6825      	ldr	r5, [r4, #0]
 80058c6:	1d18      	adds	r0, r3, #4
 80058c8:	6961      	ldr	r1, [r4, #20]
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	0628      	lsls	r0, r5, #24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	d501      	bpl.n	80058d6 <_printf_i+0x196>
 80058d2:	6019      	str	r1, [r3, #0]
 80058d4:	e002      	b.n	80058dc <_printf_i+0x19c>
 80058d6:	066a      	lsls	r2, r5, #25
 80058d8:	d5fb      	bpl.n	80058d2 <_printf_i+0x192>
 80058da:	8019      	strh	r1, [r3, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	4665      	mov	r5, ip
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	e7b9      	b.n	8005858 <_printf_i+0x118>
 80058e4:	6813      	ldr	r3, [r2, #0]
 80058e6:	1d19      	adds	r1, r3, #4
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	681d      	ldr	r5, [r3, #0]
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	2100      	movs	r1, #0
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fb45 	bl	8005f80 <memchr>
 80058f6:	b108      	cbz	r0, 80058fc <_printf_i+0x1bc>
 80058f8:	1b40      	subs	r0, r0, r5
 80058fa:	6060      	str	r0, [r4, #4]
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	2300      	movs	r3, #0
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005906:	e7a7      	b.n	8005858 <_printf_i+0x118>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	462a      	mov	r2, r5
 800590c:	4639      	mov	r1, r7
 800590e:	4630      	mov	r0, r6
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d0aa      	beq.n	800586c <_printf_i+0x12c>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	079b      	lsls	r3, r3, #30
 800591a:	d413      	bmi.n	8005944 <_printf_i+0x204>
 800591c:	68e0      	ldr	r0, [r4, #12]
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	4298      	cmp	r0, r3
 8005922:	bfb8      	it	lt
 8005924:	4618      	movlt	r0, r3
 8005926:	e7a3      	b.n	8005870 <_printf_i+0x130>
 8005928:	2301      	movs	r3, #1
 800592a:	464a      	mov	r2, r9
 800592c:	4639      	mov	r1, r7
 800592e:	4630      	mov	r0, r6
 8005930:	47c0      	blx	r8
 8005932:	3001      	adds	r0, #1
 8005934:	d09a      	beq.n	800586c <_printf_i+0x12c>
 8005936:	3501      	adds	r5, #1
 8005938:	68e3      	ldr	r3, [r4, #12]
 800593a:	9a03      	ldr	r2, [sp, #12]
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	42ab      	cmp	r3, r5
 8005940:	dcf2      	bgt.n	8005928 <_printf_i+0x1e8>
 8005942:	e7eb      	b.n	800591c <_printf_i+0x1dc>
 8005944:	2500      	movs	r5, #0
 8005946:	f104 0919 	add.w	r9, r4, #25
 800594a:	e7f5      	b.n	8005938 <_printf_i+0x1f8>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1ac      	bne.n	80058aa <_printf_i+0x16a>
 8005950:	7803      	ldrb	r3, [r0, #0]
 8005952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800595a:	e76c      	b.n	8005836 <_printf_i+0xf6>
 800595c:	0800648d 	.word	0x0800648d
 8005960:	0800649e 	.word	0x0800649e

08005964 <_scanf_chars>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	4615      	mov	r5, r2
 800596a:	688a      	ldr	r2, [r1, #8]
 800596c:	4680      	mov	r8, r0
 800596e:	460c      	mov	r4, r1
 8005970:	b932      	cbnz	r2, 8005980 <_scanf_chars+0x1c>
 8005972:	698a      	ldr	r2, [r1, #24]
 8005974:	2a00      	cmp	r2, #0
 8005976:	bf14      	ite	ne
 8005978:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800597c:	2201      	moveq	r2, #1
 800597e:	608a      	str	r2, [r1, #8]
 8005980:	2600      	movs	r6, #0
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	06d1      	lsls	r1, r2, #27
 8005986:	bf5f      	itttt	pl
 8005988:	681a      	ldrpl	r2, [r3, #0]
 800598a:	1d11      	addpl	r1, r2, #4
 800598c:	6019      	strpl	r1, [r3, #0]
 800598e:	6817      	ldrpl	r7, [r2, #0]
 8005990:	69a3      	ldr	r3, [r4, #24]
 8005992:	b1db      	cbz	r3, 80059cc <_scanf_chars+0x68>
 8005994:	2b01      	cmp	r3, #1
 8005996:	d107      	bne.n	80059a8 <_scanf_chars+0x44>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6962      	ldr	r2, [r4, #20]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	5cd3      	ldrb	r3, [r2, r3]
 80059a0:	b9a3      	cbnz	r3, 80059cc <_scanf_chars+0x68>
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	d131      	bne.n	8005a0a <_scanf_chars+0xa6>
 80059a6:	e006      	b.n	80059b6 <_scanf_chars+0x52>
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d007      	beq.n	80059bc <_scanf_chars+0x58>
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	d12c      	bne.n	8005a0a <_scanf_chars+0xa6>
 80059b0:	69a3      	ldr	r3, [r4, #24]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d129      	bne.n	8005a0a <_scanf_chars+0xa6>
 80059b6:	2001      	movs	r0, #1
 80059b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059bc:	f000 fac0 	bl	8005f40 <__locale_ctype_ptr>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	4418      	add	r0, r3
 80059c6:	7843      	ldrb	r3, [r0, #1]
 80059c8:	071b      	lsls	r3, r3, #28
 80059ca:	d4ef      	bmi.n	80059ac <_scanf_chars+0x48>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	3601      	adds	r6, #1
 80059d0:	06da      	lsls	r2, r3, #27
 80059d2:	bf5e      	ittt	pl
 80059d4:	682b      	ldrpl	r3, [r5, #0]
 80059d6:	781b      	ldrbpl	r3, [r3, #0]
 80059d8:	703b      	strbpl	r3, [r7, #0]
 80059da:	682a      	ldr	r2, [r5, #0]
 80059dc:	686b      	ldr	r3, [r5, #4]
 80059de:	f102 0201 	add.w	r2, r2, #1
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	68a2      	ldr	r2, [r4, #8]
 80059e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80059ea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80059ee:	606b      	str	r3, [r5, #4]
 80059f0:	bf58      	it	pl
 80059f2:	3701      	addpl	r7, #1
 80059f4:	60a2      	str	r2, [r4, #8]
 80059f6:	b142      	cbz	r2, 8005a0a <_scanf_chars+0xa6>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dcc9      	bgt.n	8005990 <_scanf_chars+0x2c>
 80059fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a00:	4629      	mov	r1, r5
 8005a02:	4640      	mov	r0, r8
 8005a04:	4798      	blx	r3
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d0c2      	beq.n	8005990 <_scanf_chars+0x2c>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f013 0310 	ands.w	r3, r3, #16
 8005a10:	d105      	bne.n	8005a1e <_scanf_chars+0xba>
 8005a12:	68e2      	ldr	r2, [r4, #12]
 8005a14:	3201      	adds	r2, #1
 8005a16:	60e2      	str	r2, [r4, #12]
 8005a18:	69a2      	ldr	r2, [r4, #24]
 8005a1a:	b102      	cbz	r2, 8005a1e <_scanf_chars+0xba>
 8005a1c:	703b      	strb	r3, [r7, #0]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	2000      	movs	r0, #0
 8005a22:	441e      	add	r6, r3
 8005a24:	6126      	str	r6, [r4, #16]
 8005a26:	e7c7      	b.n	80059b8 <_scanf_chars+0x54>

08005a28 <_scanf_i>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	469a      	mov	sl, r3
 8005a30:	4b74      	ldr	r3, [pc, #464]	; (8005c04 <_scanf_i+0x1dc>)
 8005a32:	b087      	sub	sp, #28
 8005a34:	4683      	mov	fp, r0
 8005a36:	4616      	mov	r6, r2
 8005a38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	68a7      	ldr	r7, [r4, #8]
 8005a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a44:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <_scanf_i+0x1e0>)
 8005a46:	69a1      	ldr	r1, [r4, #24]
 8005a48:	4a70      	ldr	r2, [pc, #448]	; (8005c0c <_scanf_i+0x1e4>)
 8005a4a:	f104 091c 	add.w	r9, r4, #28
 8005a4e:	2903      	cmp	r1, #3
 8005a50:	bf08      	it	eq
 8005a52:	461a      	moveq	r2, r3
 8005a54:	1e7b      	subs	r3, r7, #1
 8005a56:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005a5a:	bf84      	itt	hi
 8005a5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a60:	60a3      	strhi	r3, [r4, #8]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	bf88      	it	hi
 8005a66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a6a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	bf98      	it	ls
 8005a72:	2700      	movls	r7, #0
 8005a74:	464b      	mov	r3, r9
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	9200      	str	r2, [sp, #0]
 8005a7c:	bf88      	it	hi
 8005a7e:	197f      	addhi	r7, r7, r5
 8005a80:	6831      	ldr	r1, [r6, #0]
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	7809      	ldrb	r1, [r1, #0]
 8005a8e:	f000 fa77 	bl	8005f80 <memchr>
 8005a92:	9b01      	ldr	r3, [sp, #4]
 8005a94:	b330      	cbz	r0, 8005ae4 <_scanf_i+0xbc>
 8005a96:	f1b8 0f01 	cmp.w	r8, #1
 8005a9a:	d15a      	bne.n	8005b52 <_scanf_i+0x12a>
 8005a9c:	6862      	ldr	r2, [r4, #4]
 8005a9e:	b92a      	cbnz	r2, 8005aac <_scanf_i+0x84>
 8005aa0:	2108      	movs	r1, #8
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	6061      	str	r1, [r4, #4]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005ab2:	6022      	str	r2, [r4, #0]
 8005ab4:	68a2      	ldr	r2, [r4, #8]
 8005ab6:	1e51      	subs	r1, r2, #1
 8005ab8:	60a1      	str	r1, [r4, #8]
 8005aba:	b19a      	cbz	r2, 8005ae4 <_scanf_i+0xbc>
 8005abc:	6832      	ldr	r2, [r6, #0]
 8005abe:	1c5d      	adds	r5, r3, #1
 8005ac0:	1c51      	adds	r1, r2, #1
 8005ac2:	6031      	str	r1, [r6, #0]
 8005ac4:	7812      	ldrb	r2, [r2, #0]
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	6873      	ldr	r3, [r6, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	6073      	str	r3, [r6, #4]
 8005ad0:	dc07      	bgt.n	8005ae2 <_scanf_i+0xba>
 8005ad2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4658      	mov	r0, fp
 8005ada:	4798      	blx	r3
 8005adc:	2800      	cmp	r0, #0
 8005ade:	f040 8087 	bne.w	8005bf0 <_scanf_i+0x1c8>
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	f108 0801 	add.w	r8, r8, #1
 8005ae8:	f1b8 0f03 	cmp.w	r8, #3
 8005aec:	d1c8      	bne.n	8005a80 <_scanf_i+0x58>
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	b90a      	cbnz	r2, 8005af6 <_scanf_i+0xce>
 8005af2:	220a      	movs	r2, #10
 8005af4:	6062      	str	r2, [r4, #4]
 8005af6:	6862      	ldr	r2, [r4, #4]
 8005af8:	4945      	ldr	r1, [pc, #276]	; (8005c10 <_scanf_i+0x1e8>)
 8005afa:	6960      	ldr	r0, [r4, #20]
 8005afc:	1a89      	subs	r1, r1, r2
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	f000 f898 	bl	8005c34 <__sccl>
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d03b      	beq.n	8005b8c <_scanf_i+0x164>
 8005b14:	6831      	ldr	r1, [r6, #0]
 8005b16:	6960      	ldr	r0, [r4, #20]
 8005b18:	f891 c000 	ldrb.w	ip, [r1]
 8005b1c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d033      	beq.n	8005b8c <_scanf_i+0x164>
 8005b24:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005b28:	d121      	bne.n	8005b6e <_scanf_i+0x146>
 8005b2a:	0510      	lsls	r0, r2, #20
 8005b2c:	d51f      	bpl.n	8005b6e <_scanf_i+0x146>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	b117      	cbz	r7, 8005b3a <_scanf_i+0x112>
 8005b34:	3301      	adds	r3, #1
 8005b36:	3f01      	subs	r7, #1
 8005b38:	60a3      	str	r3, [r4, #8]
 8005b3a:	6873      	ldr	r3, [r6, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	6073      	str	r3, [r6, #4]
 8005b42:	dd1c      	ble.n	8005b7e <_scanf_i+0x156>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	60a3      	str	r3, [r4, #8]
 8005b50:	e7dc      	b.n	8005b0c <_scanf_i+0xe4>
 8005b52:	f1b8 0f02 	cmp.w	r8, #2
 8005b56:	d1ad      	bne.n	8005ab4 <_scanf_i+0x8c>
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005b5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005b62:	d1bf      	bne.n	8005ae4 <_scanf_i+0xbc>
 8005b64:	2110      	movs	r1, #16
 8005b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6a:	6061      	str	r1, [r4, #4]
 8005b6c:	e7a1      	b.n	8005ab2 <_scanf_i+0x8a>
 8005b6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005b72:	6022      	str	r2, [r4, #0]
 8005b74:	780b      	ldrb	r3, [r1, #0]
 8005b76:	3501      	adds	r5, #1
 8005b78:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005b7c:	e7dd      	b.n	8005b3a <_scanf_i+0x112>
 8005b7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b82:	4631      	mov	r1, r6
 8005b84:	4658      	mov	r0, fp
 8005b86:	4798      	blx	r3
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0de      	beq.n	8005b4a <_scanf_i+0x122>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	05d9      	lsls	r1, r3, #23
 8005b90:	d50c      	bpl.n	8005bac <_scanf_i+0x184>
 8005b92:	454d      	cmp	r5, r9
 8005b94:	d908      	bls.n	8005ba8 <_scanf_i+0x180>
 8005b96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005b9a:	1e6f      	subs	r7, r5, #1
 8005b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	4798      	blx	r3
 8005ba6:	463d      	mov	r5, r7
 8005ba8:	454d      	cmp	r5, r9
 8005baa:	d029      	beq.n	8005c00 <_scanf_i+0x1d8>
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	f012 0210 	ands.w	r2, r2, #16
 8005bb2:	d113      	bne.n	8005bdc <_scanf_i+0x1b4>
 8005bb4:	702a      	strb	r2, [r5, #0]
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4658      	mov	r0, fp
 8005bbc:	9e00      	ldr	r6, [sp, #0]
 8005bbe:	47b0      	blx	r6
 8005bc0:	f8da 3000 	ldr.w	r3, [sl]
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	f8ca 2000 	str.w	r2, [sl]
 8005bcc:	f011 0f20 	tst.w	r1, #32
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	d010      	beq.n	8005bf6 <_scanf_i+0x1ce>
 8005bd4:	6018      	str	r0, [r3, #0]
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60e3      	str	r3, [r4, #12]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	eba5 0509 	sub.w	r5, r5, r9
 8005be2:	44a8      	add	r8, r5
 8005be4:	6925      	ldr	r5, [r4, #16]
 8005be6:	4445      	add	r5, r8
 8005be8:	6125      	str	r5, [r4, #16]
 8005bea:	b007      	add	sp, #28
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	f04f 0800 	mov.w	r8, #0
 8005bf4:	e7ca      	b.n	8005b8c <_scanf_i+0x164>
 8005bf6:	07ca      	lsls	r2, r1, #31
 8005bf8:	bf4c      	ite	mi
 8005bfa:	8018      	strhmi	r0, [r3, #0]
 8005bfc:	6018      	strpl	r0, [r3, #0]
 8005bfe:	e7ea      	b.n	8005bd6 <_scanf_i+0x1ae>
 8005c00:	2001      	movs	r0, #1
 8005c02:	e7f2      	b.n	8005bea <_scanf_i+0x1c2>
 8005c04:	08006458 	.word	0x08006458
 8005c08:	08005d8d 	.word	0x08005d8d
 8005c0c:	08005ea5 	.word	0x08005ea5
 8005c10:	080064bf 	.word	0x080064bf

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	2300      	movs	r3, #0
 8005c18:	4c05      	ldr	r4, [pc, #20]	; (8005c30 <_sbrk_r+0x1c>)
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	f7fc f856 	bl	8001cd0 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200029e4 	.word	0x200029e4

08005c34 <__sccl>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	780b      	ldrb	r3, [r1, #0]
 8005c38:	1e44      	subs	r4, r0, #1
 8005c3a:	2b5e      	cmp	r3, #94	; 0x5e
 8005c3c:	bf13      	iteet	ne
 8005c3e:	1c4a      	addne	r2, r1, #1
 8005c40:	1c8a      	addeq	r2, r1, #2
 8005c42:	784b      	ldrbeq	r3, [r1, #1]
 8005c44:	2100      	movne	r1, #0
 8005c46:	bf08      	it	eq
 8005c48:	2101      	moveq	r1, #1
 8005c4a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005c4e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005c52:	42ac      	cmp	r4, r5
 8005c54:	d1fb      	bne.n	8005c4e <__sccl+0x1a>
 8005c56:	b913      	cbnz	r3, 8005c5e <__sccl+0x2a>
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	f081 0401 	eor.w	r4, r1, #1
 8005c62:	54c4      	strb	r4, [r0, r3]
 8005c64:	1c51      	adds	r1, r2, #1
 8005c66:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8005c6a:	1e4e      	subs	r6, r1, #1
 8005c6c:	2d2d      	cmp	r5, #45	; 0x2d
 8005c6e:	460a      	mov	r2, r1
 8005c70:	d006      	beq.n	8005c80 <__sccl+0x4c>
 8005c72:	2d5d      	cmp	r5, #93	; 0x5d
 8005c74:	d0f1      	beq.n	8005c5a <__sccl+0x26>
 8005c76:	b90d      	cbnz	r5, 8005c7c <__sccl+0x48>
 8005c78:	4632      	mov	r2, r6
 8005c7a:	e7ee      	b.n	8005c5a <__sccl+0x26>
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	e7f0      	b.n	8005c62 <__sccl+0x2e>
 8005c80:	780e      	ldrb	r6, [r1, #0]
 8005c82:	2e5d      	cmp	r6, #93	; 0x5d
 8005c84:	d0fa      	beq.n	8005c7c <__sccl+0x48>
 8005c86:	42b3      	cmp	r3, r6
 8005c88:	dcf8      	bgt.n	8005c7c <__sccl+0x48>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	429e      	cmp	r6, r3
 8005c8e:	54c4      	strb	r4, [r0, r3]
 8005c90:	dcfb      	bgt.n	8005c8a <__sccl+0x56>
 8005c92:	3102      	adds	r1, #2
 8005c94:	e7e7      	b.n	8005c66 <__sccl+0x32>

08005c96 <_strtol_l.isra.0>:
 8005c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	4692      	mov	sl, r2
 8005ca0:	461e      	mov	r6, r3
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	463d      	mov	r5, r7
 8005ca6:	9808      	ldr	r0, [sp, #32]
 8005ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cac:	f000 f944 	bl	8005f38 <__locale_ctype_ptr_l>
 8005cb0:	4420      	add	r0, r4
 8005cb2:	7843      	ldrb	r3, [r0, #1]
 8005cb4:	f013 0308 	ands.w	r3, r3, #8
 8005cb8:	d132      	bne.n	8005d20 <_strtol_l.isra.0+0x8a>
 8005cba:	2c2d      	cmp	r4, #45	; 0x2d
 8005cbc:	d132      	bne.n	8005d24 <_strtol_l.isra.0+0x8e>
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	787c      	ldrb	r4, [r7, #1]
 8005cc2:	1cbd      	adds	r5, r7, #2
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	d05d      	beq.n	8005d84 <_strtol_l.isra.0+0xee>
 8005cc8:	2e10      	cmp	r6, #16
 8005cca:	d109      	bne.n	8005ce0 <_strtol_l.isra.0+0x4a>
 8005ccc:	2c30      	cmp	r4, #48	; 0x30
 8005cce:	d107      	bne.n	8005ce0 <_strtol_l.isra.0+0x4a>
 8005cd0:	782b      	ldrb	r3, [r5, #0]
 8005cd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cd6:	2b58      	cmp	r3, #88	; 0x58
 8005cd8:	d14f      	bne.n	8005d7a <_strtol_l.isra.0+0xe4>
 8005cda:	2610      	movs	r6, #16
 8005cdc:	786c      	ldrb	r4, [r5, #1]
 8005cde:	3502      	adds	r5, #2
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005ce8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005cec:	2700      	movs	r7, #0
 8005cee:	fbb1 fcf6 	udiv	ip, r1, r6
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005cf8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d817      	bhi.n	8005d30 <_strtol_l.isra.0+0x9a>
 8005d00:	461c      	mov	r4, r3
 8005d02:	42a6      	cmp	r6, r4
 8005d04:	dd23      	ble.n	8005d4e <_strtol_l.isra.0+0xb8>
 8005d06:	1c7b      	adds	r3, r7, #1
 8005d08:	d007      	beq.n	8005d1a <_strtol_l.isra.0+0x84>
 8005d0a:	4584      	cmp	ip, r0
 8005d0c:	d31c      	bcc.n	8005d48 <_strtol_l.isra.0+0xb2>
 8005d0e:	d101      	bne.n	8005d14 <_strtol_l.isra.0+0x7e>
 8005d10:	45a6      	cmp	lr, r4
 8005d12:	db19      	blt.n	8005d48 <_strtol_l.isra.0+0xb2>
 8005d14:	2701      	movs	r7, #1
 8005d16:	fb00 4006 	mla	r0, r0, r6, r4
 8005d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d1e:	e7eb      	b.n	8005cf8 <_strtol_l.isra.0+0x62>
 8005d20:	462f      	mov	r7, r5
 8005d22:	e7bf      	b.n	8005ca4 <_strtol_l.isra.0+0xe>
 8005d24:	2c2b      	cmp	r4, #43	; 0x2b
 8005d26:	bf04      	itt	eq
 8005d28:	1cbd      	addeq	r5, r7, #2
 8005d2a:	787c      	ldrbeq	r4, [r7, #1]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	e7c9      	b.n	8005cc4 <_strtol_l.isra.0+0x2e>
 8005d30:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005d34:	2b19      	cmp	r3, #25
 8005d36:	d801      	bhi.n	8005d3c <_strtol_l.isra.0+0xa6>
 8005d38:	3c37      	subs	r4, #55	; 0x37
 8005d3a:	e7e2      	b.n	8005d02 <_strtol_l.isra.0+0x6c>
 8005d3c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005d40:	2b19      	cmp	r3, #25
 8005d42:	d804      	bhi.n	8005d4e <_strtol_l.isra.0+0xb8>
 8005d44:	3c57      	subs	r4, #87	; 0x57
 8005d46:	e7dc      	b.n	8005d02 <_strtol_l.isra.0+0x6c>
 8005d48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d4c:	e7e5      	b.n	8005d1a <_strtol_l.isra.0+0x84>
 8005d4e:	1c7b      	adds	r3, r7, #1
 8005d50:	d108      	bne.n	8005d64 <_strtol_l.isra.0+0xce>
 8005d52:	2322      	movs	r3, #34	; 0x22
 8005d54:	4608      	mov	r0, r1
 8005d56:	f8c8 3000 	str.w	r3, [r8]
 8005d5a:	f1ba 0f00 	cmp.w	sl, #0
 8005d5e:	d107      	bne.n	8005d70 <_strtol_l.isra.0+0xda>
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	b102      	cbz	r2, 8005d68 <_strtol_l.isra.0+0xd2>
 8005d66:	4240      	negs	r0, r0
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d0f8      	beq.n	8005d60 <_strtol_l.isra.0+0xca>
 8005d6e:	b10f      	cbz	r7, 8005d74 <_strtol_l.isra.0+0xde>
 8005d70:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005d74:	f8ca 9000 	str.w	r9, [sl]
 8005d78:	e7f2      	b.n	8005d60 <_strtol_l.isra.0+0xca>
 8005d7a:	2430      	movs	r4, #48	; 0x30
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	d1af      	bne.n	8005ce0 <_strtol_l.isra.0+0x4a>
 8005d80:	2608      	movs	r6, #8
 8005d82:	e7ad      	b.n	8005ce0 <_strtol_l.isra.0+0x4a>
 8005d84:	2c30      	cmp	r4, #48	; 0x30
 8005d86:	d0a3      	beq.n	8005cd0 <_strtol_l.isra.0+0x3a>
 8005d88:	260a      	movs	r6, #10
 8005d8a:	e7a9      	b.n	8005ce0 <_strtol_l.isra.0+0x4a>

08005d8c <_strtol_r>:
 8005d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8e:	4c06      	ldr	r4, [pc, #24]	; (8005da8 <_strtol_r+0x1c>)
 8005d90:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_strtol_r+0x20>)
 8005d92:	6824      	ldr	r4, [r4, #0]
 8005d94:	6a24      	ldr	r4, [r4, #32]
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	bf08      	it	eq
 8005d9a:	462c      	moveq	r4, r5
 8005d9c:	9400      	str	r4, [sp, #0]
 8005d9e:	f7ff ff7a 	bl	8005c96 <_strtol_l.isra.0>
 8005da2:	b003      	add	sp, #12
 8005da4:	bd30      	pop	{r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	20000014 	.word	0x20000014
 8005dac:	20000078 	.word	0x20000078

08005db0 <_strtoul_l.isra.0>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	4692      	mov	sl, r2
 8005dba:	461e      	mov	r6, r3
 8005dbc:	460f      	mov	r7, r1
 8005dbe:	463d      	mov	r5, r7
 8005dc0:	9808      	ldr	r0, [sp, #32]
 8005dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dc6:	f000 f8b7 	bl	8005f38 <__locale_ctype_ptr_l>
 8005dca:	4420      	add	r0, r4
 8005dcc:	7843      	ldrb	r3, [r0, #1]
 8005dce:	f013 0308 	ands.w	r3, r3, #8
 8005dd2:	d130      	bne.n	8005e36 <_strtoul_l.isra.0+0x86>
 8005dd4:	2c2d      	cmp	r4, #45	; 0x2d
 8005dd6:	d130      	bne.n	8005e3a <_strtoul_l.isra.0+0x8a>
 8005dd8:	2101      	movs	r1, #1
 8005dda:	787c      	ldrb	r4, [r7, #1]
 8005ddc:	1cbd      	adds	r5, r7, #2
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	d05c      	beq.n	8005e9c <_strtoul_l.isra.0+0xec>
 8005de2:	2e10      	cmp	r6, #16
 8005de4:	d109      	bne.n	8005dfa <_strtoul_l.isra.0+0x4a>
 8005de6:	2c30      	cmp	r4, #48	; 0x30
 8005de8:	d107      	bne.n	8005dfa <_strtoul_l.isra.0+0x4a>
 8005dea:	782b      	ldrb	r3, [r5, #0]
 8005dec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005df0:	2b58      	cmp	r3, #88	; 0x58
 8005df2:	d14e      	bne.n	8005e92 <_strtoul_l.isra.0+0xe2>
 8005df4:	2610      	movs	r6, #16
 8005df6:	786c      	ldrb	r4, [r5, #1]
 8005df8:	3502      	adds	r5, #2
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dfe:	fbb2 f2f6 	udiv	r2, r2, r6
 8005e02:	2300      	movs	r3, #0
 8005e04:	fb06 fc02 	mul.w	ip, r6, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	ea6f 0c0c 	mvn.w	ip, ip
 8005e0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005e12:	2f09      	cmp	r7, #9
 8005e14:	d817      	bhi.n	8005e46 <_strtoul_l.isra.0+0x96>
 8005e16:	463c      	mov	r4, r7
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	dd23      	ble.n	8005e64 <_strtoul_l.isra.0+0xb4>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	db1e      	blt.n	8005e5e <_strtoul_l.isra.0+0xae>
 8005e20:	4282      	cmp	r2, r0
 8005e22:	d31c      	bcc.n	8005e5e <_strtoul_l.isra.0+0xae>
 8005e24:	d101      	bne.n	8005e2a <_strtoul_l.isra.0+0x7a>
 8005e26:	45a4      	cmp	ip, r4
 8005e28:	db19      	blt.n	8005e5e <_strtoul_l.isra.0+0xae>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	fb00 4006 	mla	r0, r0, r6, r4
 8005e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e34:	e7eb      	b.n	8005e0e <_strtoul_l.isra.0+0x5e>
 8005e36:	462f      	mov	r7, r5
 8005e38:	e7c1      	b.n	8005dbe <_strtoul_l.isra.0+0xe>
 8005e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8005e3c:	bf04      	itt	eq
 8005e3e:	1cbd      	addeq	r5, r7, #2
 8005e40:	787c      	ldrbeq	r4, [r7, #1]
 8005e42:	4619      	mov	r1, r3
 8005e44:	e7cb      	b.n	8005dde <_strtoul_l.isra.0+0x2e>
 8005e46:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005e4a:	2f19      	cmp	r7, #25
 8005e4c:	d801      	bhi.n	8005e52 <_strtoul_l.isra.0+0xa2>
 8005e4e:	3c37      	subs	r4, #55	; 0x37
 8005e50:	e7e2      	b.n	8005e18 <_strtoul_l.isra.0+0x68>
 8005e52:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005e56:	2f19      	cmp	r7, #25
 8005e58:	d804      	bhi.n	8005e64 <_strtoul_l.isra.0+0xb4>
 8005e5a:	3c57      	subs	r4, #87	; 0x57
 8005e5c:	e7dc      	b.n	8005e18 <_strtoul_l.isra.0+0x68>
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	e7e5      	b.n	8005e30 <_strtoul_l.isra.0+0x80>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	da09      	bge.n	8005e7c <_strtoul_l.isra.0+0xcc>
 8005e68:	2322      	movs	r3, #34	; 0x22
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6e:	f8c8 3000 	str.w	r3, [r8]
 8005e72:	f1ba 0f00 	cmp.w	sl, #0
 8005e76:	d107      	bne.n	8005e88 <_strtoul_l.isra.0+0xd8>
 8005e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7c:	b101      	cbz	r1, 8005e80 <_strtoul_l.isra.0+0xd0>
 8005e7e:	4240      	negs	r0, r0
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	d0f8      	beq.n	8005e78 <_strtoul_l.isra.0+0xc8>
 8005e86:	b10b      	cbz	r3, 8005e8c <_strtoul_l.isra.0+0xdc>
 8005e88:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005e8c:	f8ca 9000 	str.w	r9, [sl]
 8005e90:	e7f2      	b.n	8005e78 <_strtoul_l.isra.0+0xc8>
 8005e92:	2430      	movs	r4, #48	; 0x30
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	d1b0      	bne.n	8005dfa <_strtoul_l.isra.0+0x4a>
 8005e98:	2608      	movs	r6, #8
 8005e9a:	e7ae      	b.n	8005dfa <_strtoul_l.isra.0+0x4a>
 8005e9c:	2c30      	cmp	r4, #48	; 0x30
 8005e9e:	d0a4      	beq.n	8005dea <_strtoul_l.isra.0+0x3a>
 8005ea0:	260a      	movs	r6, #10
 8005ea2:	e7aa      	b.n	8005dfa <_strtoul_l.isra.0+0x4a>

08005ea4 <_strtoul_r>:
 8005ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ea6:	4c06      	ldr	r4, [pc, #24]	; (8005ec0 <_strtoul_r+0x1c>)
 8005ea8:	4d06      	ldr	r5, [pc, #24]	; (8005ec4 <_strtoul_r+0x20>)
 8005eaa:	6824      	ldr	r4, [r4, #0]
 8005eac:	6a24      	ldr	r4, [r4, #32]
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	bf08      	it	eq
 8005eb2:	462c      	moveq	r4, r5
 8005eb4:	9400      	str	r4, [sp, #0]
 8005eb6:	f7ff ff7b 	bl	8005db0 <_strtoul_l.isra.0>
 8005eba:	b003      	add	sp, #12
 8005ebc:	bd30      	pop	{r4, r5, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000014 	.word	0x20000014
 8005ec4:	20000078 	.word	0x20000078

08005ec8 <__submore>:
 8005ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	d11b      	bne.n	8005f10 <__submore+0x48>
 8005ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005edc:	f7ff f864 	bl	8004fa8 <_malloc_r>
 8005ee0:	b918      	cbnz	r0, 8005eea <__submore+0x22>
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eee:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ef0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ef6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005efa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005efe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f02:	7043      	strb	r3, [r0, #1]
 8005f04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f08:	7003      	strb	r3, [r0, #0]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e7ea      	b.n	8005ee6 <__submore+0x1e>
 8005f10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005f12:	0077      	lsls	r7, r6, #1
 8005f14:	463a      	mov	r2, r7
 8005f16:	f000 f85c 	bl	8005fd2 <_realloc_r>
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0e0      	beq.n	8005ee2 <__submore+0x1a>
 8005f20:	eb00 0806 	add.w	r8, r0, r6
 8005f24:	4601      	mov	r1, r0
 8005f26:	4632      	mov	r2, r6
 8005f28:	4640      	mov	r0, r8
 8005f2a:	f7fe ff05 	bl	8004d38 <memcpy>
 8005f2e:	f8c4 8000 	str.w	r8, [r4]
 8005f32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005f36:	e7e9      	b.n	8005f0c <__submore+0x44>

08005f38 <__locale_ctype_ptr_l>:
 8005f38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f3c:	4770      	bx	lr
	...

08005f40 <__locale_ctype_ptr>:
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <__locale_ctype_ptr+0x14>)
 8005f42:	4a05      	ldr	r2, [pc, #20]	; (8005f58 <__locale_ctype_ptr+0x18>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf08      	it	eq
 8005f4c:	4613      	moveq	r3, r2
 8005f4e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005f52:	4770      	bx	lr
 8005f54:	20000014 	.word	0x20000014
 8005f58:	20000078 	.word	0x20000078

08005f5c <__ascii_mbtowc>:
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	b901      	cbnz	r1, 8005f62 <__ascii_mbtowc+0x6>
 8005f60:	a901      	add	r1, sp, #4
 8005f62:	b142      	cbz	r2, 8005f76 <__ascii_mbtowc+0x1a>
 8005f64:	b14b      	cbz	r3, 8005f7a <__ascii_mbtowc+0x1e>
 8005f66:	7813      	ldrb	r3, [r2, #0]
 8005f68:	600b      	str	r3, [r1, #0]
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	1c10      	adds	r0, r2, #0
 8005f6e:	bf18      	it	ne
 8005f70:	2001      	movne	r0, #1
 8005f72:	b002      	add	sp, #8
 8005f74:	4770      	bx	lr
 8005f76:	4610      	mov	r0, r2
 8005f78:	e7fb      	b.n	8005f72 <__ascii_mbtowc+0x16>
 8005f7a:	f06f 0001 	mvn.w	r0, #1
 8005f7e:	e7f8      	b.n	8005f72 <__ascii_mbtowc+0x16>

08005f80 <memchr>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	b2c9      	uxtb	r1, r1
 8005f84:	4402      	add	r2, r0
 8005f86:	4290      	cmp	r0, r2
 8005f88:	4603      	mov	r3, r0
 8005f8a:	d101      	bne.n	8005f90 <memchr+0x10>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e003      	b.n	8005f98 <memchr+0x18>
 8005f90:	781c      	ldrb	r4, [r3, #0]
 8005f92:	3001      	adds	r0, #1
 8005f94:	428c      	cmp	r4, r1
 8005f96:	d1f6      	bne.n	8005f86 <memchr+0x6>
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <memmove>:
 8005f9c:	4288      	cmp	r0, r1
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	eb01 0302 	add.w	r3, r1, r2
 8005fa4:	d807      	bhi.n	8005fb6 <memmove+0x1a>
 8005fa6:	1e42      	subs	r2, r0, #1
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	d00a      	beq.n	8005fc2 <memmove+0x26>
 8005fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005fb4:	e7f8      	b.n	8005fa8 <memmove+0xc>
 8005fb6:	4283      	cmp	r3, r0
 8005fb8:	d9f5      	bls.n	8005fa6 <memmove+0xa>
 8005fba:	1881      	adds	r1, r0, r2
 8005fbc:	1ad2      	subs	r2, r2, r3
 8005fbe:	42d3      	cmn	r3, r2
 8005fc0:	d100      	bne.n	8005fc4 <memmove+0x28>
 8005fc2:	bd10      	pop	{r4, pc}
 8005fc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fcc:	e7f7      	b.n	8005fbe <memmove+0x22>

08005fce <__malloc_lock>:
 8005fce:	4770      	bx	lr

08005fd0 <__malloc_unlock>:
 8005fd0:	4770      	bx	lr

08005fd2 <_realloc_r>:
 8005fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	460e      	mov	r6, r1
 8005fda:	b921      	cbnz	r1, 8005fe6 <_realloc_r+0x14>
 8005fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	f7fe bfe1 	b.w	8004fa8 <_malloc_r>
 8005fe6:	b922      	cbnz	r2, 8005ff2 <_realloc_r+0x20>
 8005fe8:	f7fe ff92 	bl	8004f10 <_free_r>
 8005fec:	4625      	mov	r5, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff2:	f000 f821 	bl	8006038 <_malloc_usable_size_r>
 8005ff6:	42a0      	cmp	r0, r4
 8005ff8:	d20f      	bcs.n	800601a <_realloc_r+0x48>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7fe ffd3 	bl	8004fa8 <_malloc_r>
 8006002:	4605      	mov	r5, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d0f2      	beq.n	8005fee <_realloc_r+0x1c>
 8006008:	4631      	mov	r1, r6
 800600a:	4622      	mov	r2, r4
 800600c:	f7fe fe94 	bl	8004d38 <memcpy>
 8006010:	4631      	mov	r1, r6
 8006012:	4638      	mov	r0, r7
 8006014:	f7fe ff7c 	bl	8004f10 <_free_r>
 8006018:	e7e9      	b.n	8005fee <_realloc_r+0x1c>
 800601a:	4635      	mov	r5, r6
 800601c:	e7e7      	b.n	8005fee <_realloc_r+0x1c>

0800601e <__ascii_wctomb>:
 800601e:	b149      	cbz	r1, 8006034 <__ascii_wctomb+0x16>
 8006020:	2aff      	cmp	r2, #255	; 0xff
 8006022:	bf8b      	itete	hi
 8006024:	238a      	movhi	r3, #138	; 0x8a
 8006026:	700a      	strbls	r2, [r1, #0]
 8006028:	6003      	strhi	r3, [r0, #0]
 800602a:	2001      	movls	r0, #1
 800602c:	bf88      	it	hi
 800602e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006032:	4770      	bx	lr
 8006034:	4608      	mov	r0, r1
 8006036:	4770      	bx	lr

08006038 <_malloc_usable_size_r>:
 8006038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800603c:	1f18      	subs	r0, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfbc      	itt	lt
 8006042:	580b      	ldrlt	r3, [r1, r0]
 8006044:	18c0      	addlt	r0, r0, r3
 8006046:	4770      	bx	lr

08006048 <_init>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	bf00      	nop
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr

08006054 <_fini>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr
