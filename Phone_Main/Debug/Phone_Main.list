
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006494  08006494  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006494  08006494  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006494  08006494  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800649c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  200001e4  08006680  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200033a0  08006680  000233a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001011f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000268b  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019266  00000000  00000000  00034680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce67  00000000  00000000  0004d8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ac8  00000000  00000000  0005a74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec215  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  000ec290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed8 	.word	0x08005ed8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08005ed8 	.word	0x08005ed8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000200 	.word	0x20000200
 80001a0:	20000254 	.word	0x20000254

080001a4 <HAL_UART_RxCpltCallback>:
ts_phonebook_entry phonebook[25];
ts_rec_message messages[50];
int phonebook_index = 0;
int message_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b0a      	cmp	r3, #10
 80001b6:	d10f      	bne.n	80001d8 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x60>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001ca:	4413      	add	r3, r2
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001d2:	f003 f83b 	bl	800324c <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001d6:	e00d      	b.n	80001f4 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001e8:	4413      	add	r3, r2
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	f003 f82c 	bl	800324c <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000554 	.word	0x20000554
 8000200:	20000454 	.word	0x20000454
 8000204:	20000858 	.word	0x20000858
 8000208:	20003308 	.word	0x20003308

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b5b0      	push	{r4, r5, r7, lr}
 800020e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8000212:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000214:	f001 fd02 	bl	8001c1c <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8000218:	f000 fb12 	bl	8000840 <MX_GPIO_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021c:	f000 fa78 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000220:	f000 fb0e 	bl	8000840 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000224:	f000 fab8 	bl	8000798 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000228:	f000 fae0 	bl	80007ec <MX_USART2_UART_Init>


	char close_echo[] = "ATE0\r\n";
 800022c:	4acf      	ldr	r2, [pc, #828]	; (800056c <main+0x360>)
 800022e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000236:	6018      	str	r0, [r3, #0]
 8000238:	3304      	adds	r3, #4
 800023a:	8019      	strh	r1, [r3, #0]
 800023c:	3302      	adds	r3, #2
 800023e:	0c0a      	lsrs	r2, r1, #16
 8000240:	701a      	strb	r2, [r3, #0]
	char text_mode[] = "AT+CMGF=1\r\n";
 8000242:	4acb      	ldr	r2, [pc, #812]	; (8000570 <main+0x364>)
 8000244:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000248:	ca07      	ldmia	r2, {r0, r1, r2}
 800024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char message_buf[176] = {0};
 800024e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000252:	22b0      	movs	r2, #176	; 0xb0
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fcc1 	bl	8004bde <memset>
	char response[256] = {0};
 800025c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000260:	4618      	mov	r0, r3
 8000262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000266:	461a      	mov	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f004 fcb8 	bl	8004bde <memset>
	char get_entry[64] = {0};
 800026e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000272:	4618      	mov	r0, r3
 8000274:	2340      	movs	r3, #64	; 0x40
 8000276:	461a      	mov	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f004 fcb0 	bl	8004bde <memset>
	char *p1;
	char *p2;
	int index = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000284:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff6b 	bl	8000164 <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8000296:	23c8      	movs	r3, #200	; 0xc8
 8000298:	48b6      	ldr	r0, [pc, #728]	; (8000574 <main+0x368>)
 800029a:	f002 fea6 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800029e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80002a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002aa:	48b2      	ldr	r0, [pc, #712]	; (8000574 <main+0x368>)
 80002ac:	f002 ff2f 	bl	800310e <HAL_UART_Receive>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&text_mode[0], strlen(text_mode), 200);
 80002b0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29a      	uxth	r2, r3
 80002be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80002c2:	23c8      	movs	r3, #200	; 0xc8
 80002c4:	48ab      	ldr	r0, [pc, #684]	; (8000574 <main+0x368>)
 80002c6:	f002 fe90 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002ca:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80002ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d6:	48a7      	ldr	r0, [pc, #668]	; (8000574 <main+0x368>)
 80002d8:	f002 ff19 	bl	800310e <HAL_UART_Receive>

	memset(response, 0, sizeof(response));
 80002dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80002e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 fc79 	bl	8004bde <memset>
	for(int i = 1; i < 251; i++)
 80002ec:	2301      	movs	r3, #1
 80002ee:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80002f2:	e0ae      	b.n	8000452 <main+0x246>
	{
		sprintf(get_entry, "AT+CPBR=%d\r\n", i);
 80002f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002f8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80002fc:	499e      	ldr	r1, [pc, #632]	; (8000578 <main+0x36c>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fc76 	bl	8004bf0 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 8000304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff2b 	bl	8000164 <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000316:	23c8      	movs	r3, #200	; 0xc8
 8000318:	4896      	ldr	r0, [pc, #600]	; (8000574 <main+0x368>)
 800031a:	f002 fe66 	bl	8002fea <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800031e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000322:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032a:	4892      	ldr	r0, [pc, #584]	; (8000574 <main+0x368>)
 800032c:	f002 feef 	bl	800310e <HAL_UART_Receive>
		if(strcmp(response, "\r\nOK\r\n") == 0)
 8000330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000334:	4991      	ldr	r1, [pc, #580]	; (800057c <main+0x370>)
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff0a 	bl	8000150 <strcmp>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	f000 808d 	beq.w	800045e <main+0x252>
			break;
		p1 = strstr(response, "\"");
 8000344:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000348:	2122      	movs	r1, #34	; 0x22
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fc9c 	bl	8004c88 <strchr>
 8000350:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 8000354:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000358:	3301      	adds	r3, #1
 800035a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 800035e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000362:	2b00      	cmp	r3, #0
 8000364:	d01e      	beq.n	80003a4 <main+0x198>
		  p2 = strstr(p1,"\"");
 8000366:	2122      	movs	r1, #34	; 0x22
 8000368:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800036c:	f004 fc8c 	bl	8004c88 <strchr>
 8000370:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		while(p1 != p2)
 8000374:	e016      	b.n	80003a4 <main+0x198>
		{
		  phonebook[i-1].number[index++] = *p1;
 8000376:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800037a:	1e5a      	subs	r2, r3, #1
 800037c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000380:	1c59      	adds	r1, r3, #1
 8000382:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8000386:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800038a:	7808      	ldrb	r0, [r1, #0]
 800038c:	497c      	ldr	r1, [pc, #496]	; (8000580 <main+0x374>)
 800038e:	0152      	lsls	r2, r2, #5
 8000390:	440a      	add	r2, r1
 8000392:	4413      	add	r3, r2
 8000394:	3310      	adds	r3, #16
 8000396:	4602      	mov	r2, r0
 8000398:	701a      	strb	r2, [r3, #0]
		  p1++;
 800039a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800039e:	3301      	adds	r3, #1
 80003a0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 80003a4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80003a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d1e2      	bne.n	8000376 <main+0x16a>
		}
		p2++;
 80003b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80003b4:	3301      	adds	r3, #1
 80003b6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		p1 = strstr(p2, "\"");
 80003ba:	2122      	movs	r1, #34	; 0x22
 80003bc:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 80003c0:	f004 fc62 	bl	8004c88 <strchr>
 80003c4:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 80003c8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80003cc:	3301      	adds	r3, #1
 80003ce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 80003d2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <main+0x1dc>
		  p2 = strstr(p1,"\"");
 80003da:	2122      	movs	r1, #34	; 0x22
 80003dc:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80003e0:	f004 fc52 	bl	8004c88 <strchr>
 80003e4:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		index = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		while(p1 != p2)
 80003ee:	e015      	b.n	800041c <main+0x210>
		{
		  phonebook[i-1].name[index++] = *p1;
 80003f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80003fa:	1c59      	adds	r1, r3, #1
 80003fc:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8000400:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000404:	7808      	ldrb	r0, [r1, #0]
 8000406:	495e      	ldr	r1, [pc, #376]	; (8000580 <main+0x374>)
 8000408:	0152      	lsls	r2, r2, #5
 800040a:	440a      	add	r2, r1
 800040c:	4413      	add	r3, r2
 800040e:	4602      	mov	r2, r0
 8000410:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000412:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000416:	3301      	adds	r3, #1
 8000418:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 800041c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000420:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000424:	429a      	cmp	r2, r3
 8000426:	d1e3      	bne.n	80003f0 <main+0x1e4>
		}
		memset(response, 0, sizeof(response));
 8000428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800042c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fbd3 	bl	8004bde <memset>
		index = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		phonebook_index++;
 800043e:	4b51      	ldr	r3, [pc, #324]	; (8000584 <main+0x378>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	4a4f      	ldr	r2, [pc, #316]	; (8000584 <main+0x378>)
 8000446:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 8000448:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800044c:	3301      	adds	r3, #1
 800044e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8000452:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000456:	2bfa      	cmp	r3, #250	; 0xfa
 8000458:	f77f af4c 	ble.w	80002f4 <main+0xe8>
 800045c:	e000      	b.n	8000460 <main+0x254>
			break;
 800045e:	bf00      	nop
	}
	index = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for(int i = 1; i < 251; i++)
 8000466:	2301      	movs	r3, #1
 8000468:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800046c:	e0c6      	b.n	80005fc <main+0x3f0>
	{
		sprintf(get_entry, "AT+CMGR=%d\r\n", i);
 800046e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000472:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8000476:	4944      	ldr	r1, [pc, #272]	; (8000588 <main+0x37c>)
 8000478:	4618      	mov	r0, r3
 800047a:	f004 fbb9 	bl	8004bf0 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 800047e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe6e 	bl	8000164 <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000490:	23c8      	movs	r3, #200	; 0xc8
 8000492:	4838      	ldr	r0, [pc, #224]	; (8000574 <main+0x368>)
 8000494:	f002 fda9 	bl	8002fea <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 8000498:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800049c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a0:	22b0      	movs	r2, #176	; 0xb0
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <main+0x368>)
 80004a4:	f002 fe33 	bl	800310e <HAL_UART_Receive>
		if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 80004a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80004ac:	4933      	ldr	r1, [pc, #204]	; (800057c <main+0x370>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe4e 	bl	8000150 <strcmp>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	f000 80a6 	beq.w	8000608 <main+0x3fc>
			break;
		p1 = strstr(message_buf, "\"+");
 80004bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80004c0:	4932      	ldr	r1, [pc, #200]	; (800058c <main+0x380>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f004 fbf5 	bl	8004cb2 <strstr>
 80004c8:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 80004cc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80004d0:	3301      	adds	r3, #1
 80004d2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 80004d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d020      	beq.n	8000520 <main+0x314>
		  p2 = strstr(p1,"\"");
 80004de:	2122      	movs	r1, #34	; 0x22
 80004e0:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80004e4:	f004 fbd0 	bl	8004c88 <strchr>
 80004e8:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		while(p1 != p2)
 80004ec:	e018      	b.n	8000520 <main+0x314>
		{
		  messages[i-1].sender[index++] = *p1;
 80004ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80004f2:	1e59      	subs	r1, r3, #1
 80004f4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80004f8:	1c53      	adds	r3, r2, #1
 80004fa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80004fe:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000502:	781c      	ldrb	r4, [r3, #0]
 8000504:	4822      	ldr	r0, [pc, #136]	; (8000590 <main+0x384>)
 8000506:	460b      	mov	r3, r1
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	1a5b      	subs	r3, r3, r1
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4403      	add	r3, r0
 8000510:	4413      	add	r3, r2
 8000512:	4622      	mov	r2, r4
 8000514:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000516:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800051a:	3301      	adds	r3, #1
 800051c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 8000520:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000524:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000528:	429a      	cmp	r2, r3
 800052a:	d1e0      	bne.n	80004ee <main+0x2e2>
		}
		p2++;
 800052c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000530:	3301      	adds	r3, #1
 8000532:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		p1 = strstr(p2, "\n");
 8000536:	210a      	movs	r1, #10
 8000538:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800053c:	f004 fba4 	bl	8004c88 <strchr>
 8000540:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		p1++;
 8000544:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000548:	3301      	adds	r3, #1
 800054a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(p1)
 800054e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <main+0x358>
		  p2 = strstr(p1,"\r");
 8000556:	210d      	movs	r1, #13
 8000558:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800055c:	f004 fb94 	bl	8004c88 <strchr>
 8000560:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
		index = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		while(p1 != p2)
 800056a:	e02d      	b.n	80005c8 <main+0x3bc>
 800056c:	08005f44 	.word	0x08005f44
 8000570:	08005f4c 	.word	0x08005f4c
 8000574:	20001ce4 	.word	0x20001ce4
 8000578:	08005ef0 	.word	0x08005ef0
 800057c:	08005f00 	.word	0x08005f00
 8000580:	200019bc 	.word	0x200019bc
 8000584:	2000085c 	.word	0x2000085c
 8000588:	08005f08 	.word	0x08005f08
 800058c:	08005f18 	.word	0x08005f18
 8000590:	20001d28 	.word	0x20001d28
		{
		  messages[i-1].message[index++] = *p1;
 8000594:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000598:	1e59      	subs	r1, r3, #1
 800059a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800059e:	1c53      	adds	r3, r2, #1
 80005a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80005a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80005a8:	781c      	ldrb	r4, [r3, #0]
 80005aa:	484b      	ldr	r0, [pc, #300]	; (80006d8 <main+0x4cc>)
 80005ac:	460b      	mov	r3, r1
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a5b      	subs	r3, r3, r1
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4403      	add	r3, r0
 80005b6:	4413      	add	r3, r2
 80005b8:	3310      	adds	r3, #16
 80005ba:	4622      	mov	r2, r4
 80005bc:	701a      	strb	r2, [r3, #0]
		  p1++;
 80005be:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		while(p1 != p2)
 80005c8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80005cc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d1df      	bne.n	8000594 <main+0x388>
		}
		memset(message_buf, 0, sizeof(message_buf));
 80005d4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80005d8:	22b0      	movs	r2, #176	; 0xb0
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fafe 	bl	8004bde <memset>
		index = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		message_index++;
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <main+0x4d0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <main+0x4d0>)
 80005f0:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 80005f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80005f6:	3301      	adds	r3, #1
 80005f8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80005fc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000600:	2bfa      	cmp	r3, #250	; 0xfa
 8000602:	f77f af34 	ble.w	800046e <main+0x262>
 8000606:	e000      	b.n	800060a <main+0x3fe>
			break;
 8000608:	bf00      	nop
	}
	if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <main+0x4d4>)
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2303      	movs	r3, #3
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	4932      	ldr	r1, [pc, #200]	; (80006e4 <main+0x4d8>)
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <main+0x4dc>)
 800061c:	f003 fa74 	bl	8003b08 <xTaskCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d000      	beq.n	8000628 <main+0x41c>
	{
		__NOP();
 8000626:	bf00      	nop
	}
	if(xTaskCreate(message_task_func, "sms_task", 256, NULL, 3, &sms_task) != pdPASS)
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <main+0x4e0>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2303      	movs	r3, #3
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000636:	492e      	ldr	r1, [pc, #184]	; (80006f0 <main+0x4e4>)
 8000638:	482e      	ldr	r0, [pc, #184]	; (80006f4 <main+0x4e8>)
 800063a:	f003 fa65 	bl	8003b08 <xTaskCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d000      	beq.n	8000646 <main+0x43a>
	{
		__NOP();
 8000644:	bf00      	nop
	}

	if(xTaskCreate(call_task_func, "call_task", 256, NULL, 7, &call_task) != pdPASS)
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x4ec>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2307      	movs	r3, #7
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	4929      	ldr	r1, [pc, #164]	; (80006fc <main+0x4f0>)
 8000656:	482a      	ldr	r0, [pc, #168]	; (8000700 <main+0x4f4>)
 8000658:	f003 fa56 	bl	8003b08 <xTaskCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d000      	beq.n	8000664 <main+0x458>
	{
		__NOP();
 8000662:	bf00      	nop
	}
	char ready[]="main_page.t0.txt=\"Phone is ready!\"\xFF\xFF\xFF";
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	4a26      	ldr	r2, [pc, #152]	; (8000704 <main+0x4f8>)
 800066a:	461c      	mov	r4, r3
 800066c:	4615      	mov	r5, r2
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0003 	ldmia.w	r5, {r0, r1}
 800067a:	6020      	str	r0, [r4, #0]
 800067c:	3404      	adds	r4, #4
 800067e:	8021      	strh	r1, [r4, #0]
	char start_time[]="main_page.tm0.en=1\xFF\xFF\xFF";
 8000680:	463b      	mov	r3, r7
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <main+0x4fc>)
 8000684:	461c      	mov	r4, r3
 8000686:	4615      	mov	r5, r2
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000690:	6020      	str	r0, [r4, #0]
 8000692:	3404      	adds	r4, #4
 8000694:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)ready, strlen(ready), 200);
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd62 	bl	8000164 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f107 0118 	add.w	r1, r7, #24
 80006a8:	23c8      	movs	r3, #200	; 0xc8
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <main+0x500>)
 80006ac:	f002 fc9d 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_time, strlen(start_time), 200);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd56 	bl	8000164 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4639      	mov	r1, r7
 80006be:	23c8      	movs	r3, #200	; 0xc8
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <main+0x500>)
 80006c2:	f002 fc92 	bl	8002fea <HAL_UART_Transmit>
	vTaskStartScheduler();
 80006c6:	f003 fb81 	bl	8003dcc <vTaskStartScheduler>
 80006ca:	2300      	movs	r3, #0

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001d28 	.word	0x20001d28
 80006dc:	20000860 	.word	0x20000860
 80006e0:	20003348 	.word	0x20003348
 80006e4:	08005f1c 	.word	0x08005f1c
 80006e8:	08000f85 	.word	0x08000f85
 80006ec:	20001d24 	.word	0x20001d24
 80006f0:	08005f2c 	.word	0x08005f2c
 80006f4:	08000fc5 	.word	0x08000fc5
 80006f8:	20001cdc 	.word	0x20001cdc
 80006fc:	08005f38 	.word	0x08005f38
 8000700:	0800112d 	.word	0x0800112d
 8000704:	08005f58 	.word	0x08005f58
 8000708:	08005f80 	.word	0x08005f80
 800070c:	20003308 	.word	0x20003308

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b090      	sub	sp, #64	; 0x40
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2228      	movs	r2, #40	; 0x28
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fa5d 	bl	8004bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800074e:	2300      	movs	r3, #0
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fd64 	bl	8002224 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000762:	f001 f8a9 	bl	80018b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ffcf 	bl	8002724 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800078c:	f001 f894 	bl	80018b8 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3740      	adds	r7, #64	; 0x40
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f002 fbbe 	bl	8002f50 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f001 f86d 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20001ce4 	.word	0x20001ce4
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f002 fb94 	bl	8002f50 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f001 f843 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20003308 	.word	0x20003308
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0x8c>)
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_GPIO_Init+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_GPIO_Init+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x8c>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x90>)
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_GPIO_Init+0x94>)
 80008b0:	f001 fb3c 	bl	8001f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2006      	movs	r0, #6
 80008ba:	f001 fa96 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008be:	2006      	movs	r0, #6
 80008c0:	f001 faaf 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	10210000 	.word	0x10210000
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <show_subscriber_with_index>:

void show_subscriber_with_index(int index)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a8      	sub	sp, #160	; 0xa0
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char name[64] = {0};
 80008e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008e4:	2240      	movs	r2, #64	; 0x40
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 f978 	bl	8004bde <memset>
	char number[64] = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 f971 	bl	8004bde <memset>
	char active_button1[] = "vis b2,1\xFF\xFF\xFF";
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <show_subscriber_with_index+0x100>)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	ca07      	ldmia	r2, {r0, r1, r2}
 8000904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char active_button2[] = "vis b3,1\xFF\xFF\xFF";
 8000908:	4a34      	ldr	r2, [pc, #208]	; (80009dc <show_subscriber_with_index+0x104>)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(index < phonebook_index)
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <show_subscriber_with_index+0x108>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	da15      	bge.n	800094a <show_subscriber_with_index+0x72>
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].name);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <show_subscriber_with_index+0x10c>)
 8000924:	441a      	add	r2, r3
 8000926:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800092a:	492f      	ldr	r1, [pc, #188]	; (80009e8 <show_subscriber_with_index+0x110>)
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f95f 	bl	8004bf0 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].number);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	015b      	lsls	r3, r3, #5
 8000936:	3310      	adds	r3, #16
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <show_subscriber_with_index+0x10c>)
 800093a:	441a      	add	r2, r3
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	492a      	ldr	r1, [pc, #168]	; (80009ec <show_subscriber_with_index+0x114>)
 8000942:	4618      	mov	r0, r3
 8000944:	f004 f954 	bl	8004bf0 <siprintf>
 8000948:	e00d      	b.n	8000966 <show_subscriber_with_index+0x8e>
	}
	else
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", "empty");
 800094a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <show_subscriber_with_index+0x118>)
 8000950:	4925      	ldr	r1, [pc, #148]	; (80009e8 <show_subscriber_with_index+0x110>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f94c 	bl	8004bf0 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF",  "empty");
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <show_subscriber_with_index+0x118>)
 800095e:	4923      	ldr	r1, [pc, #140]	; (80009ec <show_subscriber_with_index+0x114>)
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f945 	bl	8004bf0 <siprintf>
	}
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)name, strlen(name), 200);
 8000966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fbfa 	bl	8000164 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000978:	23c8      	movs	r3, #200	; 0xc8
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <show_subscriber_with_index+0x11c>)
 800097c:	f002 fb35 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)number, strlen(number), 200);
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fbed 	bl	8000164 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	f107 0120 	add.w	r1, r7, #32
 8000992:	23c8      	movs	r3, #200	; 0xc8
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <show_subscriber_with_index+0x11c>)
 8000996:	f002 fb28 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button1, strlen(active_button1), 100);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fbe0 	bl	8000164 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f107 0114 	add.w	r1, r7, #20
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <show_subscriber_with_index+0x11c>)
 80009b0:	f002 fb1b 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button2, strlen(active_button2), 100);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fbd3 	bl	8000164 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f107 0108 	add.w	r1, r7, #8
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <show_subscriber_with_index+0x11c>)
 80009ca:	f002 fb0e 	bl	8002fea <HAL_UART_Transmit>
}
 80009ce:	bf00      	nop
 80009d0:	37a0      	adds	r7, #160	; 0xa0
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08005fe0 	.word	0x08005fe0
 80009dc:	08005fec 	.word	0x08005fec
 80009e0:	2000085c 	.word	0x2000085c
 80009e4:	200019bc 	.word	0x200019bc
 80009e8:	08005f98 	.word	0x08005f98
 80009ec:	08005fb8 	.word	0x08005fb8
 80009f0:	08005fd8 	.word	0x08005fd8
 80009f4:	20003308 	.word	0x20003308

080009f8 <add_subscriber>:

void add_subscriber(char *data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	char *name = strtok(data, ">");
 8000a00:	4925      	ldr	r1, [pc, #148]	; (8000a98 <add_subscriber+0xa0>)
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f004 f970 	bl	8004ce8 <strtok>
 8000a08:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *number = strtok(NULL, ">");
 8000a0a:	4923      	ldr	r1, [pc, #140]	; (8000a98 <add_subscriber+0xa0>)
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f004 f96b 	bl	8004ce8 <strtok>
 8000a12:	64b8      	str	r0, [r7, #72]	; 0x48
	number[strlen(number)-1] = '\0';
 8000a14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000a16:	f7ff fba5 	bl	8000164 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
	char sim_write_command[64] = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 f8d5 	bl	8004bde <memset>
	sprintf(sim_write_command, "AT+CPBW=,\"%s\",145,\"%s\"", number, name);
 8000a34:	f107 0008 	add.w	r0, r7, #8
 8000a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a3c:	4917      	ldr	r1, [pc, #92]	; (8000a9c <add_subscriber+0xa4>)
 8000a3e:	f004 f8d7 	bl	8004bf0 <siprintf>
	strcpy(phonebook[phonebook_index].name, name);
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <add_subscriber+0xa8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <add_subscriber+0xac>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 f927 	bl	8004ca2 <strcpy>
	strcpy(phonebook[phonebook_index].number, number);
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <add_subscriber+0xa8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	015b      	lsls	r3, r3, #5
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <add_subscriber+0xac>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 f91d 	bl	8004ca2 <strcpy>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)sim_write_command, strlen(sim_write_command), 300);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fb79 	bl	8000164 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f107 0108 	add.w	r1, r7, #8
 8000a7a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <add_subscriber+0xb0>)
 8000a80:	f002 fab3 	bl	8002fea <HAL_UART_Transmit>
	phonebook_index++;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <add_subscriber+0xa8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <add_subscriber+0xa8>)
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08005ff8 	.word	0x08005ff8
 8000a9c:	08005ffc 	.word	0x08005ffc
 8000aa0:	2000085c 	.word	0x2000085c
 8000aa4:	200019bc 	.word	0x200019bc
 8000aa8:	20001ce4 	.word	0x20001ce4

08000aac <show_text_message_index>:

void show_text_message_index(int index)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0bc      	sub	sp, #240	; 0xf0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	index = (-1)*(index - (message_index-1));
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <show_text_message_index+0x108>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	607b      	str	r3, [r7, #4]
	char sender[64] = {0};
 8000ac0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f888 	bl	8004bde <memset>
	char message[128];
	char visible_buton_1[] = "vis b1,1\xFF\xFF\xFF";
 8000ace:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <show_text_message_index+0x10c>)
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_0[] = "vis b0,1\xFF\xFF\xFF";
 8000ada:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <show_text_message_index+0x110>)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char visible_buton_3[] = "vis b3,1\xFF\xFF\xFF";
 8000ae6:	4a36      	ldr	r2, [pc, #216]	; (8000bc0 <show_text_message_index+0x114>)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sprintf(sender, "messages.t0.txt=\"%s\"\xFF\xFF\xFF", messages[index].sender);
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	1a9b      	subs	r3, r3, r2
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <show_text_message_index+0x118>)
 8000afe:	441a      	add	r2, r3
 8000b00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b04:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <show_text_message_index+0x11c>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 f872 	bl	8004bf0 <siprintf>
	sprintf(message, "messages.t1.txt=\"%s\"\xFF\xFF\xFF", messages[index].message);
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	3310      	adds	r3, #16
 8000b18:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <show_text_message_index+0x118>)
 8000b1a:	441a      	add	r2, r3
 8000b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b20:	492a      	ldr	r1, [pc, #168]	; (8000bcc <show_text_message_index+0x120>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 f864 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)sender, strlen(sender), 200);
 8000b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb19 	bl	8000164 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b3a:	23c8      	movs	r3, #200	; 0xc8
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <show_text_message_index+0x124>)
 8000b3e:	f002 fa54 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)message, strlen(message), 400);
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb0c 	bl	8000164 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b58:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <show_text_message_index+0x124>)
 8000b5a:	f002 fa46 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_1, strlen(visible_buton_1), 100);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fafe 	bl	8000164 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <show_text_message_index+0x124>)
 8000b74:	f002 fa39 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_0, strlen(visible_buton_0), 100);
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff faf1 	bl	8000164 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f107 0118 	add.w	r1, r7, #24
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <show_text_message_index+0x124>)
 8000b8e:	f002 fa2c 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)visible_buton_3, strlen(visible_buton_3), 100);
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fae4 	bl	8000164 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f107 010c 	add.w	r1, r7, #12
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <show_text_message_index+0x124>)
 8000ba8:	f002 fa1f 	bl	8002fea <HAL_UART_Transmit>
}
 8000bac:	bf00      	nop
 8000bae:	37f0      	adds	r7, #240	; 0xf0
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000860 	.word	0x20000860
 8000bb8:	08006044 	.word	0x08006044
 8000bbc:	08006050 	.word	0x08006050
 8000bc0:	08005fec 	.word	0x08005fec
 8000bc4:	20001d28 	.word	0x20001d28
 8000bc8:	08006014 	.word	0x08006014
 8000bcc:	0800602c 	.word	0x0800602c
 8000bd0:	20003308 	.word	0x20003308

08000bd4 <send_date_and_time>:

void send_date_and_time()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0a8      	sub	sp, #160	; 0xa0
 8000bd8:	af04      	add	r7, sp, #16
	char date_command[] = "AT+CCLK?\r\n";
 8000bda:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <send_date_and_time+0x1ec>)
 8000bdc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000be2:	c303      	stmia	r3!, {r0, r1}
 8000be4:	801a      	strh	r2, [r3, #0]
 8000be6:	3302      	adds	r3, #2
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	701a      	strb	r2, [r3, #0]
	char response[64] = {0};
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	2240      	movs	r2, #64	; 0x40
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fff2 	bl	8004bde <memset>
	char command[32] = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2220      	movs	r2, #32
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 ffeb 	bl	8004bde <memset>
	char *p1, *p2;
	int index = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int hour,minute,second,day,month,year;
	HAL_UART_Transmit(GSM_UART, (uint8_t*)date_command, strlen(date_command), 200);
 8000c0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff faa6 	bl	8000164 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000c20:	23c8      	movs	r3, #200	; 0xc8
 8000c22:	4868      	ldr	r0, [pc, #416]	; (8000dc4 <send_date_and_time+0x1f0>)
 8000c24:	f002 f9e1 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000c28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c30:	4965      	ldr	r1, [pc, #404]	; (8000dc8 <send_date_and_time+0x1f4>)
 8000c32:	4864      	ldr	r0, [pc, #400]	; (8000dc4 <send_date_and_time+0x1f0>)
 8000c34:	f002 fa6b 	bl	800310e <HAL_UART_Receive>
	p1 = strstr(at_response, "\"");
 8000c38:	2122      	movs	r1, #34	; 0x22
 8000c3a:	4863      	ldr	r0, [pc, #396]	; (8000dc8 <send_date_and_time+0x1f4>)
 8000c3c:	f004 f824 	bl	8004c88 <strchr>
 8000c40:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	p1++;
 8000c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(p1)
 8000c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d019      	beq.n	8000c8a <send_date_and_time+0xb6>
	  p2 = strstr(p1,"\"");
 8000c56:	2122      	movs	r1, #34	; 0x22
 8000c58:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000c5c:	f004 f814 	bl	8004c88 <strchr>
 8000c60:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	while(p1 != p2)
 8000c64:	e011      	b.n	8000c8a <send_date_and_time+0xb6>
	{
	  response[index++] = *p1;
 8000c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000c70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f803 2c58 	strb.w	r2, [r3, #-88]
	  p1++;
 8000c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(p1 != p2)
 8000c8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d1e7      	bne.n	8000c66 <send_date_and_time+0x92>
	}
	sscanf(response,"%d/%d/%d,%d:%d:%d", &year, &month, &day, &hour, &minute, &second);
 8000c96:	1d39      	adds	r1, r7, #4
 8000c98:	463a      	mov	r2, r7
 8000c9a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	9303      	str	r3, [sp, #12]
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4944      	ldr	r1, [pc, #272]	; (8000dcc <send_date_and_time+0x1f8>)
 8000cba:	f003 ffb9 	bl	8004c30 <siscanf>
	year += 2000;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000cc4:	603b      	str	r3, [r7, #0]
	sprintf(command, "main_page.n5.val=%d\xFF\xFF\xFF", second);
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	4940      	ldr	r1, [pc, #256]	; (8000dd0 <send_date_and_time+0x1fc>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 ff8e 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa43 	bl	8000164 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f107 0118 	add.w	r1, r7, #24
 8000ce6:	23c8      	movs	r3, #200	; 0xc8
 8000ce8:	483a      	ldr	r0, [pc, #232]	; (8000dd4 <send_date_and_time+0x200>)
 8000cea:	f002 f97e 	bl	8002fea <HAL_UART_Transmit>
	sprintf(command, "main_page.n1.val=%d\xFF\xFF\xFF", minute);
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4938      	ldr	r1, [pc, #224]	; (8000dd8 <send_date_and_time+0x204>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 ff7a 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa2f 	bl	8000164 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f107 0118 	add.w	r1, r7, #24
 8000d0e:	23c8      	movs	r3, #200	; 0xc8
 8000d10:	4830      	ldr	r0, [pc, #192]	; (8000dd4 <send_date_and_time+0x200>)
 8000d12:	f002 f96a 	bl	8002fea <HAL_UART_Transmit>
	sprintf(command, "main_page.n0.val=%d\xFF\xFF\xFF", hour);
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	492f      	ldr	r1, [pc, #188]	; (8000ddc <send_date_and_time+0x208>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 ff66 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa1b 	bl	8000164 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f107 0118 	add.w	r1, r7, #24
 8000d36:	23c8      	movs	r3, #200	; 0xc8
 8000d38:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <send_date_and_time+0x200>)
 8000d3a:	f002 f956 	bl	8002fea <HAL_UART_Transmit>
	sprintf(command, "main_page.n2.val=%d\xFF\xFF\xFF", day);
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4926      	ldr	r1, [pc, #152]	; (8000de0 <send_date_and_time+0x20c>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 ff52 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fa07 	bl	8000164 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	f107 0118 	add.w	r1, r7, #24
 8000d5e:	23c8      	movs	r3, #200	; 0xc8
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <send_date_and_time+0x200>)
 8000d62:	f002 f942 	bl	8002fea <HAL_UART_Transmit>
	sprintf(command, "main_page.n3.val=%d\xFF\xFF\xFF", month);
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	491d      	ldr	r1, [pc, #116]	; (8000de4 <send_date_and_time+0x210>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 ff3e 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff f9f3 	bl	8000164 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f107 0118 	add.w	r1, r7, #24
 8000d86:	23c8      	movs	r3, #200	; 0xc8
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <send_date_and_time+0x200>)
 8000d8a:	f002 f92e 	bl	8002fea <HAL_UART_Transmit>
	sprintf(command, "main_page.n4.val=%d\xFF\xFF\xFF", year);
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <send_date_and_time+0x214>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ff2a 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)command, strlen(command), 200);
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff f9df 	bl	8000164 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f107 0118 	add.w	r1, r7, #24
 8000dae:	23c8      	movs	r3, #200	; 0xc8
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <send_date_and_time+0x200>)
 8000db2:	f002 f91a 	bl	8002fea <HAL_UART_Transmit>
}
 8000db6:	bf00      	nop
 8000db8:	3790      	adds	r7, #144	; 0x90
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08006100 	.word	0x08006100
 8000dc4:	20001ce4 	.word	0x20001ce4
 8000dc8:	20000758 	.word	0x20000758
 8000dcc:	0800605c 	.word	0x0800605c
 8000dd0:	08006070 	.word	0x08006070
 8000dd4:	20003308 	.word	0x20003308
 8000dd8:	08006088 	.word	0x08006088
 8000ddc:	080060a0 	.word	0x080060a0
 8000de0:	080060b8 	.word	0x080060b8
 8000de4:	080060d0 	.word	0x080060d0
 8000de8:	080060e8 	.word	0x080060e8

08000dec <parse_display_request>:

void parse_display_request()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if((display_rx[1] == 0x01 && display_rx[2] == 0x10) || (display_rx[1] == 0x05 && display_rx[2] == 0x05)) //call
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <parse_display_request+0x178>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d103      	bne.n	8000e00 <parse_display_request+0x14>
 8000df8:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <parse_display_request+0x178>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d007      	beq.n	8000e10 <parse_display_request+0x24>
 8000e00:	4b58      	ldr	r3, [pc, #352]	; (8000f64 <parse_display_request+0x178>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d116      	bne.n	8000e36 <parse_display_request+0x4a>
 8000e08:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <parse_display_request+0x178>)
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d112      	bne.n	8000e36 <parse_display_request+0x4a>
	{
		memcpy(call_task_data, display_rx, RX_SIZE);
 8000e10:	4a55      	ldr	r2, [pc, #340]	; (8000f68 <parse_display_request+0x17c>)
 8000e12:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <parse_display_request+0x178>)
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f003 fed3 	bl	8004bc8 <memcpy>
		PHONE_STATE = BUSY;
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <parse_display_request+0x180>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MO;
 8000e28:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <parse_display_request+0x184>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <parse_display_request+0x188>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e08e      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x03 && display_rx[2] == 0x02) || (display_rx[1] == 0x04 && display_rx[2] == 0x02)) //Terminate call by user
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <parse_display_request+0x178>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d103      	bne.n	8000e46 <parse_display_request+0x5a>
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <parse_display_request+0x178>)
 8000e40:	789b      	ldrb	r3, [r3, #2]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d007      	beq.n	8000e56 <parse_display_request+0x6a>
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <parse_display_request+0x178>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d107      	bne.n	8000e5e <parse_display_request+0x72>
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <parse_display_request+0x178>)
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d103      	bne.n	8000e5e <parse_display_request+0x72>
	{
		CALL_STATE = TERMINATE_CALL;
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <parse_display_request+0x188>)
 8000e58:	2206      	movs	r2, #6
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e07a      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x04 && display_rx[2] == 0x03) //Terminate call by user
 8000e5e:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <parse_display_request+0x178>)
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d107      	bne.n	8000e76 <parse_display_request+0x8a>
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <parse_display_request+0x178>)
 8000e68:	789b      	ldrb	r3, [r3, #2]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d103      	bne.n	8000e76 <parse_display_request+0x8a>
	{
		CALL_STATE = ACCEPT_CALL;
 8000e6e:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <parse_display_request+0x188>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e06e      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x06 && display_rx[2] == 0x05)) //Add subscriber to phone book
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <parse_display_request+0x178>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d107      	bne.n	8000e8e <parse_display_request+0xa2>
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <parse_display_request+0x178>)
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d103      	bne.n	8000e8e <parse_display_request+0xa2>
	{
		add_subscriber(&display_rx[7]);
 8000e86:	483c      	ldr	r0, [pc, #240]	; (8000f78 <parse_display_request+0x18c>)
 8000e88:	f7ff fdb6 	bl	80009f8 <add_subscriber>
 8000e8c:	e062      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x05 && display_rx[2] == 0x06) || (display_rx[1] == 0x05 && display_rx[2] == 0x03) //Get phonebook entry
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <parse_display_request+0x178>)
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	2b05      	cmp	r3, #5
 8000e94:	d103      	bne.n	8000e9e <parse_display_request+0xb2>
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <parse_display_request+0x178>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d00f      	beq.n	8000ebe <parse_display_request+0xd2>
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <parse_display_request+0x178>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d103      	bne.n	8000eae <parse_display_request+0xc2>
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <parse_display_request+0x178>)
 8000ea8:	789b      	ldrb	r3, [r3, #2]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d007      	beq.n	8000ebe <parse_display_request+0xd2>
			|| (display_rx[1] == 0x05 && display_rx[2] == 0x07))
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <parse_display_request+0x178>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d109      	bne.n	8000eca <parse_display_request+0xde>
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <parse_display_request+0x178>)
 8000eb8:	789b      	ldrb	r3, [r3, #2]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d105      	bne.n	8000eca <parse_display_request+0xde>
	{
		show_subscriber_with_index(display_rx[7]);
 8000ebe:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <parse_display_request+0x178>)
 8000ec0:	79db      	ldrb	r3, [r3, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd08 	bl	80008d8 <show_subscriber_with_index>
 8000ec8:	e044      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x02 && display_rx[2] == 0x37)//Send sms
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <parse_display_request+0x178>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d110      	bne.n	8000ef4 <parse_display_request+0x108>
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <parse_display_request+0x178>)
 8000ed4:	789b      	ldrb	r3, [r3, #2]
 8000ed6:	2b37      	cmp	r3, #55	; 0x37
 8000ed8:	d10c      	bne.n	8000ef4 <parse_display_request+0x108>
	{
		memcpy(sms_task_data, display_rx, RX_SIZE);
 8000eda:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <parse_display_request+0x190>)
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <parse_display_request+0x178>)
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f003 fe6e 	bl	8004bc8 <memcpy>
		SMS_STATE = SEND_SMS;
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <parse_display_request+0x194>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e02f      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if((display_rx[1] == 0x09 && display_rx[2] == 0x02) || (display_rx[1] == 0x09 && display_rx[2] == 0x03) //Get message
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <parse_display_request+0x178>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	d103      	bne.n	8000f04 <parse_display_request+0x118>
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <parse_display_request+0x178>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d017      	beq.n	8000f34 <parse_display_request+0x148>
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <parse_display_request+0x178>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d103      	bne.n	8000f14 <parse_display_request+0x128>
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <parse_display_request+0x178>)
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d00f      	beq.n	8000f34 <parse_display_request+0x148>
			|| (display_rx[1] == 0x08 && display_rx[2] == 0x03) || (display_rx[1] == 0x00 && display_rx[2] == 0x06))
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <parse_display_request+0x178>)
 8000f16:	785b      	ldrb	r3, [r3, #1]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d103      	bne.n	8000f24 <parse_display_request+0x138>
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <parse_display_request+0x178>)
 8000f1e:	789b      	ldrb	r3, [r3, #2]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d007      	beq.n	8000f34 <parse_display_request+0x148>
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <parse_display_request+0x178>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d109      	bne.n	8000f40 <parse_display_request+0x154>
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <parse_display_request+0x178>)
 8000f2e:	789b      	ldrb	r3, [r3, #2]
 8000f30:	2b06      	cmp	r3, #6
 8000f32:	d105      	bne.n	8000f40 <parse_display_request+0x154>
	{
		show_text_message_index(display_rx[7]);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <parse_display_request+0x178>)
 8000f36:	79db      	ldrb	r3, [r3, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fdb7 	bl	8000aac <show_text_message_index>
 8000f3e:	e009      	b.n	8000f54 <parse_display_request+0x168>
	}
	else if(display_rx[1] == 0x00 && display_rx[2] == 0x12)//Send time
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <parse_display_request+0x178>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <parse_display_request+0x168>
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <parse_display_request+0x178>)
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	d101      	bne.n	8000f54 <parse_display_request+0x168>
	{
		send_date_and_time();
 8000f50:	f7ff fe40 	bl	8000bd4 <send_date_and_time>
	}
	memset(display_rx, 0, RX_SIZE);
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <parse_display_request+0x178>)
 8000f5c:	f003 fe3f 	bl	8004bde <memset>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000454 	.word	0x20000454
 8000f68:	20000658 	.word	0x20000658
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	2000334c 	.word	0x2000334c
 8000f74:	20000859 	.word	0x20000859
 8000f78:	2000045b 	.word	0x2000045b
 8000f7c:	20000558 	.word	0x20000558
 8000f80:	2000085a 	.word	0x2000085a

08000f84 <display_uart_task_func>:

void display_uart_task_func(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <display_uart_task_func+0x30>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <display_uart_task_func+0x34>)
 8000f92:	4413      	add	r3, r2
 8000f94:	2201      	movs	r2, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <display_uart_task_func+0x38>)
 8000f9a:	f002 f957 	bl	800324c <HAL_UART_Receive_IT>
	while(1)
	{
		if(display_rec_flag)
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <display_uart_task_func+0x3c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0fb      	beq.n	8000f9e <display_uart_task_func+0x1a>
		{
			display_rec_flag = FALSE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <display_uart_task_func+0x3c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
			parse_display_request();
 8000fac:	f7ff ff1e 	bl	8000dec <parse_display_request>
		if(display_rec_flag)
 8000fb0:	e7f5      	b.n	8000f9e <display_uart_task_func+0x1a>
 8000fb2:	bf00      	nop
 8000fb4:	20000554 	.word	0x20000554
 8000fb8:	20000454 	.word	0x20000454
 8000fbc:	20003308 	.word	0x20003308
 8000fc0:	20000858 	.word	0x20000858

08000fc4 <message_task_func>:
		}
	}
}

void message_task_func(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0c0      	sub	sp, #256	; 0x100
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	char text_mod[] = "AT+CMGF=1\r\n";
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	; (800110c <message_task_func+0x148>)
 8000fce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 8000fd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fdc:	2240      	movs	r2, #64	; 0x40
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fdfc 	bl	8004bde <memset>
	char message_command[160] = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	22a0      	movs	r2, #160	; 0xa0
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fdf5 	bl	8004bde <memset>
	char *number;
	char *message;
	while(1)
	{
		switch (SMS_STATE) {
 8000ff4:	4b46      	ldr	r3, [pc, #280]	; (8001110 <message_task_func+0x14c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d002      	beq.n	8001002 <message_task_func+0x3e>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d074      	beq.n	80010ea <message_task_func+0x126>
 8001000:	e07d      	b.n	80010fe <message_task_func+0x13a>
			case SEND_SMS:
				memset(at_response, 0, RX_SIZE);
 8001002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001006:	2100      	movs	r1, #0
 8001008:	4842      	ldr	r0, [pc, #264]	; (8001114 <message_task_func+0x150>)
 800100a:	f003 fde8 	bl	8004bde <memset>
				number = strtok(&sms_task_data[7], ">");
 800100e:	4942      	ldr	r1, [pc, #264]	; (8001118 <message_task_func+0x154>)
 8001010:	4842      	ldr	r0, [pc, #264]	; (800111c <message_task_func+0x158>)
 8001012:	f003 fe69 	bl	8004ce8 <strtok>
 8001016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				message = strtok(NULL, ">");
 800101a:	493f      	ldr	r1, [pc, #252]	; (8001118 <message_task_func+0x154>)
 800101c:	2000      	movs	r0, #0
 800101e:	f003 fe63 	bl	8004ce8 <strtok>
 8001022:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 8001026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800102a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800102e:	493c      	ldr	r1, [pc, #240]	; (8001120 <message_task_func+0x15c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fddd 	bl	8004bf0 <siprintf>
				sprintf(&message_command[0], "%s", message);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fe2f 	bl	8004ca2 <strcpy>
				message_command[strlen(message_command)-1] = 26;
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f88b 	bl	8000164 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	3b01      	subs	r3, #1
 8001052:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001056:	4413      	add	r3, r2
 8001058:	221a      	movs	r2, #26
 800105a:	f803 2cf4 	strb.w	r2, [r3, #-244]
				HAL_UART_Transmit(GSM_UART, (uint8_t*)text_mod, strlen(text_mod), 300);
 800105e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f87e 	bl	8000164 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001070:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <message_task_func+0x160>)
 8001076:	f001 ffb8 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 800107a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <message_task_func+0x150>)
 8001084:	4827      	ldr	r0, [pc, #156]	; (8001124 <message_task_func+0x160>)
 8001086:	f002 f842 	bl	800310e <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)sender_command, strlen(sender_command), 300);
 800108a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f868 	bl	8000164 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800109c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010a0:	4820      	ldr	r0, [pc, #128]	; (8001124 <message_task_func+0x160>)
 80010a2:	f001 ffa2 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 80010a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	4919      	ldr	r1, [pc, #100]	; (8001114 <message_task_func+0x150>)
 80010b0:	481c      	ldr	r0, [pc, #112]	; (8001124 <message_task_func+0x160>)
 80010b2:	f002 f82c 	bl	800310e <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)message_command, strlen(sender_command), 300);
 80010b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f852 	bl	8000164 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f107 010c 	add.w	r1, r7, #12
 80010c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <message_task_func+0x160>)
 80010ce:	f001 ff8c 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 80010d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <message_task_func+0x150>)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <message_task_func+0x160>)
 80010de:	f002 f816 	bl	800310e <HAL_UART_Receive>
				SMS_STATE = COMPLETED_SMS;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <message_task_func+0x14c>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
			break;
 80010e8:	e00e      	b.n	8001108 <message_task_func+0x144>
			case COMPLETED_SMS:
				memset(sms_task_data, 0, RX_SIZE);
 80010ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ee:	2100      	movs	r1, #0
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <message_task_func+0x164>)
 80010f2:	f003 fd74 	bl	8004bde <memset>
				SMS_STATE = NO_SMS;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <message_task_func+0x14c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
			break;
 80010fc:	e004      	b.n	8001108 <message_task_func+0x144>
			default:
				vTaskDelay(500 / portTICK_PERIOD_MS);
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f002 fe2f 	bl	8003d64 <vTaskDelay>
			break;
 8001106:	bf00      	nop
		switch (SMS_STATE) {
 8001108:	e774      	b.n	8000ff4 <message_task_func+0x30>
 800110a:	bf00      	nop
 800110c:	08005f4c 	.word	0x08005f4c
 8001110:	2000085a 	.word	0x2000085a
 8001114:	20000758 	.word	0x20000758
 8001118:	08005ff8 	.word	0x08005ff8
 800111c:	2000055f 	.word	0x2000055f
 8001120:	0800610c 	.word	0x0800610c
 8001124:	20001ce4 	.word	0x20001ce4
 8001128:	20000558 	.word	0x20000558

0800112c <call_task_func>:
		}
	}
}

void call_task_func(void *argument)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b0d6      	sub	sp, #344	; 0x158
 8001130:	af00      	add	r7, sp, #0
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	6018      	str	r0, [r3, #0]
	char custom_command[64] = {0};
 8001136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fd4d 	bl	8004bde <memset>
	char check_status[] = "AT+CLCC\r\n";
 8001144:	4aba      	ldr	r2, [pc, #744]	; (8001430 <call_task_func+0x304>)
 8001146:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800114a:	ca07      	ldmia	r2, {r0, r1, r2}
 800114c:	c303      	stmia	r3!, {r0, r1}
 800114e:	801a      	strh	r2, [r3, #0]
	char terminate_call[] = "ATH0\r\n";
 8001150:	4ab8      	ldr	r2, [pc, #736]	; (8001434 <call_task_func+0x308>)
 8001152:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115a:	6018      	str	r0, [r3, #0]
 800115c:	3304      	adds	r3, #4
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c0a      	lsrs	r2, r1, #16
 8001164:	701a      	strb	r2, [r3, #0]
	char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8001166:	4bb4      	ldr	r3, [pc, #720]	; (8001438 <call_task_func+0x30c>)
 8001168:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 800116c:	461d      	mov	r5, r3
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117a:	6020      	str	r0, [r4, #0]
 800117c:	3404      	adds	r4, #4
 800117e:	8021      	strh	r1, [r4, #0]
	char send_call_start[] = "call_progress.t1.txt=\"Call Active!!\"\xFF\xFF\xFF";
 8001180:	4bae      	ldr	r3, [pc, #696]	; (800143c <call_task_func+0x310>)
 8001182:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001194:	e884 0003 	stmia.w	r4, {r0, r1}
	char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 8001198:	4ba9      	ldr	r3, [pc, #676]	; (8001440 <call_task_func+0x314>)
 800119a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a8:	c403      	stmia	r4!, {r0, r1}
 80011aa:	8022      	strh	r2, [r4, #0]
	char send_call_start_incoming[] = "incoming_call.t2.txt=\"Call Active!\"\xFF\xFF\xFF";
 80011ac:	4ba5      	ldr	r3, [pc, #660]	; (8001444 <call_task_func+0x318>)
 80011ae:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c0:	6020      	str	r0, [r4, #0]
 80011c2:	3404      	adds	r4, #4
 80011c4:	8021      	strh	r1, [r4, #0]
 80011c6:	3402      	adds	r4, #2
 80011c8:	0c0b      	lsrs	r3, r1, #16
 80011ca:	7023      	strb	r3, [r4, #0]
	char send_call_end_incoming[] = "incoming_call.t2.txt=\"Call Ended!\"\xFF\xFF\xFF";
 80011cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d0:	4a9d      	ldr	r2, [pc, #628]	; (8001448 <call_task_func+0x31c>)
 80011d2:	461c      	mov	r4, r3
 80011d4:	4615      	mov	r5, r2
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e2:	6020      	str	r0, [r4, #0]
 80011e4:	3404      	adds	r4, #4
 80011e6:	8021      	strh	r1, [r4, #0]
	char answer_call[] = "ATA\r\n";
 80011e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ec:	4a97      	ldr	r2, [pc, #604]	; (800144c <call_task_func+0x320>)
 80011ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f2:	6018      	str	r0, [r3, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	8019      	strh	r1, [r3, #0]
	char incoming_page[] = "page incoming_call\xFF\xFF\xFF";
 80011f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fc:	4a94      	ldr	r2, [pc, #592]	; (8001450 <call_task_func+0x324>)
 80011fe:	461c      	mov	r4, r3
 8001200:	4615      	mov	r5, r2
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120a:	6020      	str	r0, [r4, #0]
 800120c:	3404      	adds	r4, #4
 800120e:	8021      	strh	r1, [r4, #0]
	char start_page_timer_incoming[] = "incoming_call.tm0.en=1\xFF\xFF\xFF";
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4a8f      	ldr	r2, [pc, #572]	; (8001454 <call_task_func+0x328>)
 8001216:	461c      	mov	r4, r3
 8001218:	4615      	mov	r5, r2
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	c403      	stmia	r4!, {r0, r1}
 8001224:	8022      	strh	r2, [r4, #0]
	while(1)
	{
		switch(CALL_STATE)
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <call_task_func+0x32c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	2b06      	cmp	r3, #6
 800122e:	f200 8190 	bhi.w	8001552 <call_task_func+0x426>
 8001232:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <call_task_func+0x10c>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	08001255 	.word	0x08001255
 800123c:	08001553 	.word	0x08001553
 8001240:	08001553 	.word	0x08001553
 8001244:	08001329 	.word	0x08001329
 8001248:	080013e3 	.word	0x080013e3
 800124c:	08001481 	.word	0x08001481
 8001250:	080013a3 	.word	0x080013a3
		{
			case INITIATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	2100      	movs	r1, #0
 800125a:	4880      	ldr	r0, [pc, #512]	; (800145c <call_task_func+0x330>)
 800125c:	f003 fcbf 	bl	8004bde <memset>
				call_task_data[strlen(call_task_data)-1] = '\0';
 8001260:	487f      	ldr	r0, [pc, #508]	; (8001460 <call_task_func+0x334>)
 8001262:	f7fe ff7f 	bl	8000164 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	3b01      	subs	r3, #1
 800126a:	4a7d      	ldr	r2, [pc, #500]	; (8001460 <call_task_func+0x334>)
 800126c:	2100      	movs	r1, #0
 800126e:	54d1      	strb	r1, [r2, r3]
				if(CALL_TYPE == MO)
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <call_task_func+0x338>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12b      	bne.n	80012d0 <call_task_func+0x1a4>
				{
					sprintf(&custom_command[0], "ATD+%si;\r\n", &call_task_data[8]);
 8001278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800127c:	4a7a      	ldr	r2, [pc, #488]	; (8001468 <call_task_func+0x33c>)
 800127e:	497b      	ldr	r1, [pc, #492]	; (800146c <call_task_func+0x340>)
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fcb5 	bl	8004bf0 <siprintf>
					HAL_UART_Transmit(GSM_UART, (uint8_t*)&custom_command[0], strlen(custom_command), 500);
 8001286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ff6a 	bl	8000164 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001298:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800129c:	4874      	ldr	r0, [pc, #464]	; (8001470 <call_task_func+0x344>)
 800129e:	f001 fea4 	bl	8002fea <HAL_UART_Transmit>
					HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 5000);
 80012a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012aa:	496c      	ldr	r1, [pc, #432]	; (800145c <call_task_func+0x330>)
 80012ac:	4870      	ldr	r0, [pc, #448]	; (8001470 <call_task_func+0x344>)
 80012ae:	f001 ff2e 	bl	800310e <HAL_UART_Receive>
					if(strcmp(at_response,"\r\nOK\r\n") == 0)
 80012b2:	4970      	ldr	r1, [pc, #448]	; (8001474 <call_task_func+0x348>)
 80012b4:	4869      	ldr	r0, [pc, #420]	; (800145c <call_task_func+0x330>)
 80012b6:	f7fe ff4b 	bl	8000150 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <call_task_func+0x19c>
						CALL_STATE = DIALING;
 80012c0:	4b65      	ldr	r3, [pc, #404]	; (8001458 <call_task_func+0x32c>)
 80012c2:	2204      	movs	r2, #4
 80012c4:	701a      	strb	r2, [r3, #0]
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
					CALL_STATE = CHECK_CALL_STATE;
				}
			break;
 80012c6:	e146      	b.n	8001556 <call_task_func+0x42a>
						CALL_STATE = TERMINATE_CALL;
 80012c8:	4b63      	ldr	r3, [pc, #396]	; (8001458 <call_task_func+0x32c>)
 80012ca:	2206      	movs	r2, #6
 80012cc:	701a      	strb	r2, [r3, #0]
			break;
 80012ce:	e142      	b.n	8001556 <call_task_func+0x42a>
				else if(CALL_TYPE == MT)
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <call_task_func+0x338>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f040 813e 	bne.w	8001556 <call_task_func+0x42a>
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
 80012da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012de:	4a60      	ldr	r2, [pc, #384]	; (8001460 <call_task_func+0x334>)
 80012e0:	4965      	ldr	r1, [pc, #404]	; (8001478 <call_task_func+0x34c>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fc84 	bl	8004bf0 <siprintf>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
 80012e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff39 	bl	8000164 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012fe:	485f      	ldr	r0, [pc, #380]	; (800147c <call_task_func+0x350>)
 8001300:	f001 fe73 	bl	8002fea <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
 8001304:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff2b 	bl	8000164 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001316:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800131a:	4858      	ldr	r0, [pc, #352]	; (800147c <call_task_func+0x350>)
 800131c:	f001 fe65 	bl	8002fea <HAL_UART_Transmit>
					CALL_STATE = CHECK_CALL_STATE;
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <call_task_func+0x32c>)
 8001322:	2205      	movs	r2, #5
 8001324:	701a      	strb	r2, [r3, #0]
			break;
 8001326:	e116      	b.n	8001556 <call_task_func+0x42a>
			case DIALING:
				memset(at_response, 0, RX_SIZE);
 8001328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132c:	2100      	movs	r1, #0
 800132e:	484b      	ldr	r0, [pc, #300]	; (800145c <call_task_func+0x330>)
 8001330:	f003 fc55 	bl	8004bde <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8001334:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff13 	bl	8000164 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001346:	23c8      	movs	r3, #200	; 0xc8
 8001348:	4849      	ldr	r0, [pc, #292]	; (8001470 <call_task_func+0x344>)
 800134a:	f001 fe4e 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 800134e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	4941      	ldr	r1, [pc, #260]	; (800145c <call_task_func+0x330>)
 8001358:	4845      	ldr	r0, [pc, #276]	; (8001470 <call_task_func+0x344>)
 800135a:	f001 fed8 	bl	800310e <HAL_UART_Receive>
				if(at_response[13] == '0')
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <call_task_func+0x330>)
 8001360:	7b5b      	ldrb	r3, [r3, #13]
 8001362:	2b30      	cmp	r3, #48	; 0x30
 8001364:	d111      	bne.n	800138a <call_task_func+0x25e>
				{
					CALL_STATE = CHECK_CALL_STATE;
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <call_task_func+0x32c>)
 8001368:	2205      	movs	r2, #5
 800136a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start, strlen(send_call_start), 300);
 800136c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe fef7 	bl	8000164 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800137e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001382:	483e      	ldr	r0, [pc, #248]	; (800147c <call_task_func+0x350>)
 8001384:	f001 fe31 	bl	8002fea <HAL_UART_Transmit>
				}
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
					CALL_STATE = TERMINATE_CALL;
			break;
 8001388:	e0e7      	b.n	800155a <call_task_func+0x42e>
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
 800138a:	493a      	ldr	r1, [pc, #232]	; (8001474 <call_task_func+0x348>)
 800138c:	4833      	ldr	r0, [pc, #204]	; (800145c <call_task_func+0x330>)
 800138e:	f7fe fedf 	bl	8000150 <strcmp>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 80e0 	bne.w	800155a <call_task_func+0x42e>
					CALL_STATE = TERMINATE_CALL;
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <call_task_func+0x32c>)
 800139c:	2206      	movs	r2, #6
 800139e:	701a      	strb	r2, [r3, #0]
			break;
 80013a0:	e0db      	b.n	800155a <call_task_func+0x42e>
			case ACCEPT_CALL:
				HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start_incoming, strlen(send_call_start_incoming), 300);
 80013a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe fedc 	bl	8000164 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80013b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013b8:	4830      	ldr	r0, [pc, #192]	; (800147c <call_task_func+0x350>)
 80013ba:	f001 fe16 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)answer_call, strlen(answer_call), 300);
 80013be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7fe fece 	bl	8000164 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80013d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013d4:	4826      	ldr	r0, [pc, #152]	; (8001470 <call_task_func+0x344>)
 80013d6:	f001 fe08 	bl	8002fea <HAL_UART_Transmit>
				CALL_STATE = CHECK_CALL_STATE;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <call_task_func+0x32c>)
 80013dc:	2205      	movs	r2, #5
 80013de:	701a      	strb	r2, [r3, #0]
			break;
 80013e0:	e0be      	b.n	8001560 <call_task_func+0x434>
			case CHECK_CALL_STATE:
				memset(at_response, 0, RX_SIZE);
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	2100      	movs	r1, #0
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <call_task_func+0x330>)
 80013ea:	f003 fbf8 	bl	8004bde <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 80013ee:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feb6 	bl	8000164 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001400:	23c8      	movs	r3, #200	; 0xc8
 8001402:	481b      	ldr	r0, [pc, #108]	; (8001470 <call_task_func+0x344>)
 8001404:	f001 fdf1 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8001408:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800140c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001410:	4912      	ldr	r1, [pc, #72]	; (800145c <call_task_func+0x330>)
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <call_task_func+0x344>)
 8001414:	f001 fe7b 	bl	800310e <HAL_UART_Receive>
				if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8001418:	4916      	ldr	r1, [pc, #88]	; (8001474 <call_task_func+0x348>)
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <call_task_func+0x330>)
 800141c:	f7fe fe98 	bl	8000150 <strcmp>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 809b 	bne.w	800155e <call_task_func+0x432>
					CALL_STATE = TERMINATE_CALL;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <call_task_func+0x32c>)
 800142a:	2206      	movs	r2, #6
 800142c:	701a      	strb	r2, [r3, #0]
			break;
 800142e:	e096      	b.n	800155e <call_task_func+0x432>
 8001430:	08006148 	.word	0x08006148
 8001434:	08006154 	.word	0x08006154
 8001438:	0800615c 	.word	0x0800615c
 800143c:	08006184 	.word	0x08006184
 8001440:	080061ac 	.word	0x080061ac
 8001444:	080061c8 	.word	0x080061c8
 8001448:	080061f0 	.word	0x080061f0
 800144c:	08006218 	.word	0x08006218
 8001450:	08006220 	.word	0x08006220
 8001454:	08006238 	.word	0x08006238
 8001458:	20000859 	.word	0x20000859
 800145c:	20000758 	.word	0x20000758
 8001460:	20000658 	.word	0x20000658
 8001464:	2000334c 	.word	0x2000334c
 8001468:	20000660 	.word	0x20000660
 800146c:	0800611c 	.word	0x0800611c
 8001470:	20001ce4 	.word	0x20001ce4
 8001474:	08005f00 	.word	0x08005f00
 8001478:	08006128 	.word	0x08006128
 800147c:	20003308 	.word	0x20003308
			case TERMINATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	2100      	movs	r1, #0
 8001486:	4839      	ldr	r0, [pc, #228]	; (800156c <call_task_func+0x440>)
 8001488:	f003 fba9 	bl	8004bde <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)terminate_call, strlen(terminate_call), 200);
 800148c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe67 	bl	8000164 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800149e:	23c8      	movs	r3, #200	; 0xc8
 80014a0:	4833      	ldr	r0, [pc, #204]	; (8001570 <call_task_func+0x444>)
 80014a2:	f001 fda2 	bl	8002fea <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 80014a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	492f      	ldr	r1, [pc, #188]	; (800156c <call_task_func+0x440>)
 80014b0:	482f      	ldr	r0, [pc, #188]	; (8001570 <call_task_func+0x444>)
 80014b2:	f001 fe2c 	bl	800310e <HAL_UART_Receive>
				if(CALL_TYPE == MO)
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <call_task_func+0x448>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11c      	bne.n	80014f8 <call_task_func+0x3cc>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end, strlen(send_call_end), 300);
 80014be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe4e 	bl	8000164 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80014d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014d4:	4828      	ldr	r0, [pc, #160]	; (8001578 <call_task_func+0x44c>)
 80014d6:	f001 fd88 	bl	8002fea <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer, strlen(start_page_timer), 300);
 80014da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe40 	bl	8000164 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80014ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <call_task_func+0x44c>)
 80014f2:	f001 fd7a 	bl	8002fea <HAL_UART_Transmit>
 80014f6:	e01f      	b.n	8001538 <call_task_func+0x40c>
				}
				else if(CALL_TYPE == MT)
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <call_task_func+0x448>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d11b      	bne.n	8001538 <call_task_func+0x40c>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end_incoming, strlen(send_call_end_incoming), 300);
 8001500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fe2d 	bl	8000164 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001512:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001516:	4818      	ldr	r0, [pc, #96]	; (8001578 <call_task_func+0x44c>)
 8001518:	f001 fd67 	bl	8002fea <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer_incoming, strlen(start_page_timer_incoming), 300);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe1f 	bl	8000164 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 010c 	add.w	r1, r7, #12
 800152e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001532:	4811      	ldr	r0, [pc, #68]	; (8001578 <call_task_func+0x44c>)
 8001534:	f001 fd59 	bl	8002fea <HAL_UART_Transmit>
				}
				memset(call_task_data, 0, RX_SIZE);
 8001538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153c:	2100      	movs	r1, #0
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <call_task_func+0x450>)
 8001540:	f003 fb4d 	bl	8004bde <memset>
				PHONE_STATE = IDLE;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <call_task_func+0x454>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
				CALL_STATE = NO_CALL;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <call_task_func+0x458>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
			break;
 8001550:	e006      	b.n	8001560 <call_task_func+0x434>
			default:
			break;
 8001552:	bf00      	nop
 8001554:	e004      	b.n	8001560 <call_task_func+0x434>
			break;
 8001556:	bf00      	nop
 8001558:	e002      	b.n	8001560 <call_task_func+0x434>
			break;
 800155a:	bf00      	nop
 800155c:	e000      	b.n	8001560 <call_task_func+0x434>
			break;
 800155e:	bf00      	nop
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8001560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001564:	f002 fbfe 	bl	8003d64 <vTaskDelay>
		switch(CALL_STATE)
 8001568:	e65d      	b.n	8001226 <call_task_func+0xfa>
 800156a:	bf00      	nop
 800156c:	20000758 	.word	0x20000758
 8001570:	20001ce4 	.word	0x20001ce4
 8001574:	2000334c 	.word	0x2000334c
 8001578:	20003308 	.word	0x20003308
 800157c:	20000658 	.word	0x20000658
 8001580:	20000000 	.word	0x20000000
 8001584:	20000859 	.word	0x20000859

08001588 <call_detected>:
	}
}

static void call_detected()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
	char check_call[] = "AT+CLCC\r\n";
 800158e:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <call_detected+0xb8>)
 8001590:	463b      	mov	r3, r7
 8001592:	ca07      	ldmia	r2, {r0, r1, r2}
 8001594:	c303      	stmia	r3!, {r0, r1}
 8001596:	801a      	strh	r2, [r3, #0]
	int index;
	char *p1, *p2;
	memset(at_response, 0, sizeof(at_response));
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	2100      	movs	r1, #0
 800159e:	4829      	ldr	r0, [pc, #164]	; (8001644 <call_detected+0xbc>)
 80015a0:	f003 fb1d 	bl	8004bde <memset>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)check_call, strlen(check_call), 200);
 80015a4:	463b      	mov	r3, r7
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fddc 	bl	8000164 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4639      	mov	r1, r7
 80015b2:	23c8      	movs	r3, #200	; 0xc8
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <call_detected+0xc0>)
 80015b6:	f001 fd18 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 80015ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	4920      	ldr	r1, [pc, #128]	; (8001644 <call_detected+0xbc>)
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <call_detected+0xc0>)
 80015c6:	f001 fda2 	bl	800310e <HAL_UART_Receive>
	if(at_response[13] == '4' && PHONE_STATE == IDLE)
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <call_detected+0xbc>)
 80015cc:	7b5b      	ldrb	r3, [r3, #13]
 80015ce:	2b34      	cmp	r3, #52	; 0x34
 80015d0:	d132      	bne.n	8001638 <call_detected+0xb0>
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <call_detected+0xc4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d12e      	bne.n	8001638 <call_detected+0xb0>
	{
		index = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
		p1 = strstr(at_response, "\"");
 80015de:	2122      	movs	r1, #34	; 0x22
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <call_detected+0xbc>)
 80015e2:	f003 fb51 	bl	8004c88 <strchr>
 80015e6:	6138      	str	r0, [r7, #16]
		p1++;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3301      	adds	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]
		if(p1)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00f      	beq.n	8001614 <call_detected+0x8c>
			p2 = strstr(p1,"\"");
 80015f4:	2122      	movs	r1, #34	; 0x22
 80015f6:	6938      	ldr	r0, [r7, #16]
 80015f8:	f003 fb46 	bl	8004c88 <strchr>
 80015fc:	60f8      	str	r0, [r7, #12]
		while(p1 != p2)
 80015fe:	e009      	b.n	8001614 <call_detected+0x8c>
		{
			call_task_data[index++] = *p1;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	617a      	str	r2, [r7, #20]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	7811      	ldrb	r1, [r2, #0]
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <call_detected+0xc8>)
 800160c:	54d1      	strb	r1, [r2, r3]
			p1++;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
		while(p1 != p2)
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d1f1      	bne.n	8001600 <call_detected+0x78>
		}
		call_task_data[index] = '\n';
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <call_detected+0xc8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	220a      	movs	r2, #10
 8001624:	701a      	strb	r2, [r3, #0]
		PHONE_STATE = BUSY;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <call_detected+0xc4>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MT;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <call_detected+0xcc>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <call_detected+0xd0>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
	}
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	08006148 	.word	0x08006148
 8001644:	20000758 	.word	0x20000758
 8001648:	20001ce4 	.word	0x20001ce4
 800164c:	20000000 	.word	0x20000000
 8001650:	20000658 	.word	0x20000658
 8001654:	2000334c 	.word	0x2000334c
 8001658:	20000859 	.word	0x20000859

0800165c <sms_detected>:

static void sms_detected()
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b0ac      	sub	sp, #176	; 0xb0
 8001660:	af00      	add	r7, sp, #0
	char message_buf[96] = {0};
 8001662:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001666:	2260      	movs	r2, #96	; 0x60
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fab7 	bl	8004bde <memset>
	char get_entry[20] ={0};
 8001670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
	char new_mess[]="main_page.t1.txt=\"New message! Tap to read!\"\xFF\xFF\xFF";
 8001680:	4b60      	ldr	r3, [pc, #384]	; (8001804 <sms_detected+0x1a8>)
 8001682:	463c      	mov	r4, r7
 8001684:	461d      	mov	r5, r3
 8001686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *p1, *p2;
	int index = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sprintf(get_entry, "AT+CMGR=%d\r\n", message_index+1);
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <sms_detected+0x1ac>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a6:	4959      	ldr	r1, [pc, #356]	; (800180c <sms_detected+0x1b0>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 faa1 	bl	8004bf0 <siprintf>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 80016ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fd56 	bl	8000164 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016c0:	23c8      	movs	r3, #200	; 0xc8
 80016c2:	4853      	ldr	r0, [pc, #332]	; (8001810 <sms_detected+0x1b4>)
 80016c4:	f001 fc91 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&message_buf[0], sizeof(message_buf), 1000);
 80016c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	2260      	movs	r2, #96	; 0x60
 80016d2:	484f      	ldr	r0, [pc, #316]	; (8001810 <sms_detected+0x1b4>)
 80016d4:	f001 fd1b 	bl	800310e <HAL_UART_Receive>
	if(strcmp(message_buf, "\r\nOK\r\n") == 0)
 80016d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016dc:	494d      	ldr	r1, [pc, #308]	; (8001814 <sms_detected+0x1b8>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd36 	bl	8000150 <strcmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8088 	beq.w	80017fc <sms_detected+0x1a0>
		return;
	p1 = strstr(message_buf, "\"+");
 80016ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f0:	4949      	ldr	r1, [pc, #292]	; (8001818 <sms_detected+0x1bc>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fadd 	bl	8004cb2 <strstr>
 80016f8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 80016fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001700:	3301      	adds	r3, #1
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 8001706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01f      	beq.n	800174e <sms_detected+0xf2>
	  p2 = strstr(p1,"\"");
 800170e:	2122      	movs	r1, #34	; 0x22
 8001710:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001714:	f003 fab8 	bl	8004c88 <strchr>
 8001718:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	while(p1 != p2)
 800171c:	e017      	b.n	800174e <sms_detected+0xf2>
	{
	  messages[message_index].sender[index++] = *p1;
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <sms_detected+0x1ac>)
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001726:	1c53      	adds	r3, r2, #1
 8001728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800172c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001730:	781c      	ldrb	r4, [r3, #0]
 8001732:	483a      	ldr	r0, [pc, #232]	; (800181c <sms_detected+0x1c0>)
 8001734:	460b      	mov	r3, r1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a5b      	subs	r3, r3, r1
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4403      	add	r3, r0
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	701a      	strb	r2, [r3, #0]
	  p1++;
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001748:	3301      	adds	r3, #1
 800174a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 800174e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001756:	429a      	cmp	r2, r3
 8001758:	d1e1      	bne.n	800171e <sms_detected+0xc2>
	}
	p2++;
 800175a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175e:	3301      	adds	r3, #1
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	p1 = strstr(p2, "\n");
 8001764:	210a      	movs	r1, #10
 8001766:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800176a:	f003 fa8d 	bl	8004c88 <strchr>
 800176e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	p1++;
 8001772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001776:	3301      	adds	r3, #1
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(p1)
 800177c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <sms_detected+0x136>
	  p2 = strstr(p1,"\r");
 8001784:	210d      	movs	r1, #13
 8001786:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800178a:	f003 fa7d 	bl	8004c88 <strchr>
 800178e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	index = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while(p1 != p2)
 8001798:	e018      	b.n	80017cc <sms_detected+0x170>
	{
	  messages[message_index].message[index++] = *p1;
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <sms_detected+0x1ac>)
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80017a2:	1c53      	adds	r3, r2, #1
 80017a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ac:	781c      	ldrb	r4, [r3, #0]
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <sms_detected+0x1c0>)
 80017b0:	460b      	mov	r3, r1
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a5b      	subs	r3, r3, r1
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4403      	add	r3, r0
 80017ba:	4413      	add	r3, r2
 80017bc:	3310      	adds	r3, #16
 80017be:	4622      	mov	r2, r4
 80017c0:	701a      	strb	r2, [r3, #0]
	  p1++;
 80017c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c6:	3301      	adds	r3, #1
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(p1 != p2)
 80017cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80017d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1e0      	bne.n	800179a <sms_detected+0x13e>
	}
	message_index++;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <sms_detected+0x1ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <sms_detected+0x1ac>)
 80017e0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)new_mess, strlen(new_mess), 300);
 80017e2:	463b      	mov	r3, r7
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcbd 	bl	8000164 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4639      	mov	r1, r7
 80017f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <sms_detected+0x1c4>)
 80017f6:	f001 fbf8 	bl	8002fea <HAL_UART_Transmit>
 80017fa:	e000      	b.n	80017fe <sms_detected+0x1a2>
		return;
 80017fc:	bf00      	nop
}
 80017fe:	37b0      	adds	r7, #176	; 0xb0
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	08006254 	.word	0x08006254
 8001808:	20000860 	.word	0x20000860
 800180c:	08005f08 	.word	0x08005f08
 8001810:	20001ce4 	.word	0x20001ce4
 8001814:	08005f00 	.word	0x08005f00
 8001818:	08005f18 	.word	0x08005f18
 800181c:	20001d28 	.word	0x20001d28
 8001820:	20003308 	.word	0x20003308

08001824 <ring_int_handler>:

void ring_int_handler()
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
	char phone_state[] = "AT+CPAS\r\n";
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <ring_int_handler+0x60>)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	c303      	stmia	r3!, {r0, r1}
 8001832:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(GSM_UART, (uint8_t*)phone_state, strlen(phone_state), 200);
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fc94 	bl	8000164 <strlen>
 800183c:	4603      	mov	r3, r0
 800183e:	b29a      	uxth	r2, r3
 8001840:	1d39      	adds	r1, r7, #4
 8001842:	23c8      	movs	r3, #200	; 0xc8
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <ring_int_handler+0x64>)
 8001846:	f001 fbd0 	bl	8002fea <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 500);
 800184a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	490e      	ldr	r1, [pc, #56]	; (800188c <ring_int_handler+0x68>)
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <ring_int_handler+0x64>)
 8001856:	f001 fc5a 	bl	800310e <HAL_UART_Receive>
	if(strstr(at_response, "RING") != NULL)
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <ring_int_handler+0x6c>)
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <ring_int_handler+0x68>)
 800185e:	f003 fa28 	bl	8004cb2 <strstr>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <ring_int_handler+0x4a>
	{
		call_detected();
 8001868:	f7ff fe8e 	bl	8001588 <call_detected>
	}
	else if(at_response[9] == '0')
	{
		sms_detected();
	}
}
 800186c:	e005      	b.n	800187a <ring_int_handler+0x56>
	else if(at_response[9] == '0')
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <ring_int_handler+0x68>)
 8001870:	7a5b      	ldrb	r3, [r3, #9]
 8001872:	2b30      	cmp	r3, #48	; 0x30
 8001874:	d101      	bne.n	800187a <ring_int_handler+0x56>
		sms_detected();
 8001876:	f7ff fef1 	bl	800165c <sms_detected>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	0800628c 	.word	0x0800628c
 8001888:	20001ce4 	.word	0x20001ce4
 800188c:	20000758 	.word	0x20000758
 8001890:	08006284 	.word	0x08006284

08001894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018a6:	f000 f9cf 	bl	8001c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018be:	e7fe      	b.n	80018be <Error_Handler+0x6>

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_MspInit+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_MspInit+0x68>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_MspInit+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_MspInit+0x68>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_MspInit+0x68>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x68>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	210f      	movs	r1, #15
 80018fa:	f06f 0001 	mvn.w	r0, #1
 80018fe:	f000 fa74 	bl	8001dea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x6c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_MspInit+0x6c>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_UART_MspInit+0x108>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d132      	bne.n	80019b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	4619      	mov	r1, r3
 8001994:	482a      	ldr	r0, [pc, #168]	; (8001a40 <HAL_UART_MspInit+0x110>)
 8001996:	f000 fac9 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800199a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4824      	ldr	r0, [pc, #144]	; (8001a40 <HAL_UART_MspInit+0x110>)
 80019b0:	f000 fabc 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b4:	e03c      	b.n	8001a30 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_UART_MspInit+0x114>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d137      	bne.n	8001a30 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ca:	61d3      	str	r3, [r2, #28]
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019f0:	2304      	movs	r3, #4
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	4619      	mov	r1, r3
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <HAL_UART_MspInit+0x110>)
 8001a04:	f000 fa92 	bl	8001f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_UART_MspInit+0x110>)
 8001a1c:	f000 fa86 	bl	8001f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2026      	movs	r0, #38	; 0x26
 8001a26:	f000 f9e0 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a2a:	2026      	movs	r0, #38	; 0x26
 8001a2c:	f000 f9f9 	bl	8001e22 <HAL_NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800
 8001a44:	40004400 	.word	0x40004400

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	2019      	movs	r0, #25
 8001a5e:	f000 f9c4 	bl	8001dea <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a62:	2019      	movs	r0, #25
 8001a64:	f000 f9dd 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_InitTick+0x9c>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a80:	f107 0210 	add.w	r2, r7, #16
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 ffc8 	bl	8002a20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a90:	f000 ffb2 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 8001a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_InitTick+0xa0>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_InitTick+0xa4>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_InitTick+0xa8>)
 8001aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_InitTick+0xa4>)
 8001aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_InitTick+0xa4>)
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_InitTick+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_InitTick+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_InitTick+0xa4>)
 8001ac6:	f000 fff9 	bl	8002abc <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_InitTick+0xa4>)
 8001ad2:	f001 f84b 	bl	8002b6c <HAL_TIM_Base_Start_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	20003350 	.word	0x20003350
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <NMI_Handler>:
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <DebugMon_Handler>:
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <EXTI0_IRQHandler>:
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	f7ff fe7f 	bl	8001824 <ring_int_handler>
 8001b26:	2001      	movs	r0, #1
 8001b28:	f000 fb5a 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TIM1_UP_IRQHandler>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM1_UP_IRQHandler+0x10>)
 8001b36:	f001 f86b 	bl	8002c10 <HAL_TIM_IRQHandler>
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20003350 	.word	0x20003350

08001b44 <USART2_IRQHandler>:
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART2_IRQHandler+0x10>)
 8001b4a:	f001 fbd3 	bl	80032f4 <HAL_UART_IRQHandler>
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20003308 	.word	0x20003308

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f002 fff4 	bl	8004b74 <__errno>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	230c      	movs	r3, #12
 8001b90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20005000 	.word	0x20005000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000864 	.word	0x20000864
 8001bc0:	200033a0 	.word	0x200033a0

08001bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bd2:	e003      	b.n	8001bdc <LoopCopyDataInit>

08001bd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bda:	3104      	adds	r1, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bdc:	480a      	ldr	r0, [pc, #40]	; (8001c08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001be0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001be4:	d3f6      	bcc.n	8001bd4 <CopyDataInit>
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001be8:	e002      	b.n	8001bf0 <LoopFillZerobss>

08001bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bec:	f842 3b04 	str.w	r3, [r2], #4

08001bf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bf4:	d3f9      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf6:	f7ff ffe5 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f002 ffc1 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7fe fb05 	bl	800020c <main>
  bx lr
 8001c02:	4770      	bx	lr
  ldr r3, =_sidata
 8001c04:	0800649c 	.word	0x0800649c
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c0c:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001c10:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001c14:	200033a0 	.word	0x200033a0

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f8d1 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff ff08 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fe42 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x1c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x20>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_IncTick+0x20>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20003398 	.word	0x20003398

08001c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20003398 	.word	0x20003398

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4906      	ldr	r1, [pc, #24]	; (8001d18 <__NVIC_EnableIRQ+0x34>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff4f 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff64 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ffb2 	bl	8001d70 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff81 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff57 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d005      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e051      	b.n	8001f06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 020e 	bic.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_DMA_Abort_IT+0xd0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d029      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xa0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <HAL_DMA_Abort_IT+0xd4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d022      	beq.n	8001edc <HAL_DMA_Abort_IT+0x9c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_DMA_Abort_IT+0xd8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01a      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x96>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_DMA_Abort_IT+0xdc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x90>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_DMA_Abort_IT+0xe0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00a      	beq.n	8001eca <HAL_DMA_Abort_IT+0x8a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_DMA_Abort_IT+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <HAL_DMA_Abort_IT+0x84>
 8001ebe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ec2:	e00e      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	e00b      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ece:	e008      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	e002      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001edc:	2310      	movs	r3, #16
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_DMA_Abort_IT+0xe8>)
 8001ee4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
    } 
  }
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40020008 	.word	0x40020008
 8001f14:	4002001c 	.word	0x4002001c
 8001f18:	40020030 	.word	0x40020030
 8001f1c:	40020044 	.word	0x40020044
 8001f20:	40020058 	.word	0x40020058
 8001f24:	4002006c 	.word	0x4002006c
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b08b      	sub	sp, #44	; 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3e:	e127      	b.n	8002190 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f40:	2201      	movs	r2, #1
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8116 	bne.w	800218a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b12      	cmp	r3, #18
 8001f64:	d034      	beq.n	8001fd0 <HAL_GPIO_Init+0xa4>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d80d      	bhi.n	8001f86 <HAL_GPIO_Init+0x5a>
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d02b      	beq.n	8001fc6 <HAL_GPIO_Init+0x9a>
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d804      	bhi.n	8001f7c <HAL_GPIO_Init+0x50>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0xae>
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d01c      	beq.n	8001fb4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f7a:	e048      	b.n	800200e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d043      	beq.n	8002008 <HAL_GPIO_Init+0xdc>
 8001f80:	2b11      	cmp	r3, #17
 8001f82:	d01b      	beq.n	8001fbc <HAL_GPIO_Init+0x90>
          break;
 8001f84:	e043      	b.n	800200e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f86:	4a89      	ldr	r2, [pc, #548]	; (80021ac <HAL_GPIO_Init+0x280>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d026      	beq.n	8001fda <HAL_GPIO_Init+0xae>
 8001f8c:	4a87      	ldr	r2, [pc, #540]	; (80021ac <HAL_GPIO_Init+0x280>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d806      	bhi.n	8001fa0 <HAL_GPIO_Init+0x74>
 8001f92:	4a87      	ldr	r2, [pc, #540]	; (80021b0 <HAL_GPIO_Init+0x284>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d020      	beq.n	8001fda <HAL_GPIO_Init+0xae>
 8001f98:	4a86      	ldr	r2, [pc, #536]	; (80021b4 <HAL_GPIO_Init+0x288>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01d      	beq.n	8001fda <HAL_GPIO_Init+0xae>
          break;
 8001f9e:	e036      	b.n	800200e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fa0:	4a85      	ldr	r2, [pc, #532]	; (80021b8 <HAL_GPIO_Init+0x28c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0xae>
 8001fa6:	4a85      	ldr	r2, [pc, #532]	; (80021bc <HAL_GPIO_Init+0x290>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d016      	beq.n	8001fda <HAL_GPIO_Init+0xae>
 8001fac:	4a84      	ldr	r2, [pc, #528]	; (80021c0 <HAL_GPIO_Init+0x294>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0xae>
          break;
 8001fb2:	e02c      	b.n	800200e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e028      	b.n	800200e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e023      	b.n	800200e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e01e      	b.n	800200e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e019      	b.n	800200e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e012      	b.n	800200e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	611a      	str	r2, [r3, #16]
          break;
 8001ffa:	e008      	b.n	800200e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	615a      	str	r2, [r3, #20]
          break;
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2bff      	cmp	r3, #255	; 0xff
 8002012:	d801      	bhi.n	8002018 <HAL_GPIO_Init+0xec>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	e001      	b.n	800201c <HAL_GPIO_Init+0xf0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2bff      	cmp	r3, #255	; 0xff
 8002022:	d802      	bhi.n	800202a <HAL_GPIO_Init+0xfe>
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x104>
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3b08      	subs	r3, #8
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	210f      	movs	r1, #15
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	6a39      	ldr	r1, [r7, #32]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	431a      	orrs	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8096 	beq.w	800218a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800205e:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_GPIO_Init+0x298>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x298>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_GPIO_Init+0x298>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002076:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_GPIO_Init+0x29c>)
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <HAL_GPIO_Init+0x2a0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x19e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_GPIO_Init+0x2a4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x19a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a49      	ldr	r2, [pc, #292]	; (80021d4 <HAL_GPIO_Init+0x2a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x196>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_GPIO_Init+0x2ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x192>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x1a0>
 80020be:	2304      	movs	r3, #4
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x1a0>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x1a0>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x1a0>
 80020ca:	2300      	movs	r3, #0
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020dc:	493a      	ldr	r1, [pc, #232]	; (80021c8 <HAL_GPIO_Init+0x29c>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4938      	ldr	r1, [pc, #224]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	43db      	mvns	r3, r3
 800210c:	4933      	ldr	r1, [pc, #204]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 800210e:	4013      	ands	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	492e      	ldr	r1, [pc, #184]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
 800212a:	e006      	b.n	800213a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	43db      	mvns	r3, r3
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002136:	4013      	ands	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4924      	ldr	r1, [pc, #144]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	491f      	ldr	r1, [pc, #124]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 800215e:	4013      	ands	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	43db      	mvns	r3, r3
 8002184:	4915      	ldr	r1, [pc, #84]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8002186:	4013      	ands	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f aed0 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 80021a0:	bf00      	nop
 80021a2:	372c      	adds	r7, #44	; 0x2c
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	10210000 	.word	0x10210000
 80021b0:	10110000 	.word	0x10110000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10310000 	.word	0x10310000
 80021bc:	10320000 	.word	0x10320000
 80021c0:	10220000 	.word	0x10220000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	40010c00 	.word	0x40010c00
 80021d4:	40011000 	.word	0x40011000
 80021d8:	40011400 	.word	0x40011400
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f806 	bl	8002210 <HAL_GPIO_EXTI_Callback>
  }
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e26c      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002244:	4b92      	ldr	r3, [pc, #584]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d112      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
 800225c:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d10b      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06c      	beq.n	8002350 <HAL_RCC_OscConfig+0x12c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d168      	bne.n	8002350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e246      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x76>
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7f      	ldr	r2, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e02e      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7a      	ldr	r2, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0xbc>
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a71      	ldr	r2, [pc, #452]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022e0:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a67      	ldr	r2, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fcb4 	bl	8001c6c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fcb0 	bl	8001c6c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1fa      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xe4>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fca0 	bl	8001c6c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fc9c 	bl	8001c6c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1e6      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x10c>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1ba      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4939      	ldr	r1, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fc55 	bl	8001c6c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7ff fc51 	bl	8001c6c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e19b      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4927      	ldr	r1, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff fc34 	bl	8001c6c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff fc30 	bl	8001c6c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e17a      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03a      	beq.n	80024a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7ff fc14 	bl	8001c6c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fc10 	bl	8001c6c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e15a      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f000 fb0a 	bl	8002a80 <RCC_Delay>
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7ff fbfa 	bl	8001c6c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	e00f      	b.n	800249c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7ff fbf6 	bl	8001c6c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d908      	bls.n	800249c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e140      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	42420000 	.word	0x42420000
 8002498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b9e      	ldr	r3, [pc, #632]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e9      	bne.n	800247c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a6 	beq.w	8002602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b97      	ldr	r3, [pc, #604]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b94      	ldr	r3, [pc, #592]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a93      	ldr	r2, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b91      	ldr	r3, [pc, #580]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8a      	ldr	r2, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7ff fbb7 	bl	8001c6c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7ff fbb3 	bl	8001c6c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0fd      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x4f8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e02d      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x334>
 800253e:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a75      	ldr	r2, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6213      	str	r3, [r2, #32]
 800254a:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a72      	ldr	r2, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x356>
 8002560:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a6c      	ldr	r2, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a69      	ldr	r2, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a63      	ldr	r2, [pc, #396]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fb67 	bl	8001c6c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fb63 	bl	8001c6c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0ab      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b57      	ldr	r3, [pc, #348]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x37e>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb51 	bl	8001c6c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fb4d 	bl	8001c6c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e095      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b48      	ldr	r3, [pc, #288]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a47      	ldr	r2, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8081 	beq.w	800270e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d061      	beq.n	80026dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d146      	bne.n	80026ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0x4fc>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff fb21 	bl	8001c6c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7ff fb1d 	bl	8001c6c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e067      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	492d      	ldr	r1, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a19      	ldr	r1, [r3, #32]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	430b      	orrs	r3, r1
 800267a:	4927      	ldr	r1, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_OscConfig+0x4fc>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff faf1 	bl	8001c6c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff faed 	bl	8001c6c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e037      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
 80026ac:	e02f      	b.n	800270e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCC_OscConfig+0x4fc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fada 	bl	8001c6c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff fad6 	bl	8001c6c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e020      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x498>
 80026da:	e018      	b.n	800270e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e013      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	42420060 	.word	0x42420060

08002724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d0      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4965      	ldr	r1, [pc, #404]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d040      	beq.n	8002844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d115      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e073      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06b      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4936      	ldr	r1, [pc, #216]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002814:	f7ff fa2a 	bl	8001c6c <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7ff fa26 	bl	8001c6c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e053      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d210      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4601      	mov	r1, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	fa21 f303 	lsr.w	r3, r1, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1cc>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f8b8 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40021000 	.word	0x40021000
 80028ec:	080062c0 	.word	0x080062c0
 80028f0:	20000004 	.word	0x20000004
 80028f4:	20000008 	.word	0x20000008

080028f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	b490      	push	{r4, r7}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002900:	1d3c      	adds	r4, r7, #4
 8002902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d002      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x40>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x46>
 8002936:	e02d      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800293a:	623b      	str	r3, [r7, #32]
      break;
 800293c:	e02d      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800294a:	4413      	add	r3, r2
 800294c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002950:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c5b      	lsrs	r3, r3, #17
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800296a:	4413      	add	r3, r2
 800296c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002970:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002976:	fb02 f203 	mul.w	r2, r2, r3
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e004      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	623b      	str	r3, [r7, #32]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002996:	623b      	str	r3, [r7, #32]
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	6a3b      	ldr	r3, [r7, #32]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc90      	pop	{r4, r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	08006298 	.word	0x08006298
 80029ac:	080062a8 	.word	0x080062a8
 80029b0:	40021000 	.word	0x40021000
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	003d0900 	.word	0x003d0900

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_RCC_GetHCLKFreq+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d4:	f7ff fff2 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029d8:	4601      	mov	r1, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080062d0 	.word	0x080062d0

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029fc:	f7ff ffde 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a00:	4601      	mov	r1, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	080062d0 	.word	0x080062d0

08002a20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_GetClockConfig+0x58>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_RCC_GetClockConfig+0x58>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetClockConfig+0x58>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_RCC_GetClockConfig+0x58>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetClockConfig+0x5c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40022000 	.word	0x40022000

08002a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <RCC_Delay+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <RCC_Delay+0x38>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a9c:	bf00      	nop
  }
  while (Delay --);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <RCC_Delay+0x1c>
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f839 	bl	8002b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 f9b4 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e03a      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_TIM_Base_Start_IT+0x98>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x58>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bae:	d009      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x58>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x58>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d111      	bne.n	8002be8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d010      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	e007      	b.n	8002bf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0202 	mvn.w	r2, #2
 8002c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8ed 	bl	8002e32 <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8e0 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8ef 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8c3 	bl	8002e32 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8b6 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8c5 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0208 	mvn.w	r2, #8
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f899 	bl	8002e32 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f88c 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f89b 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0210 	mvn.w	r2, #16
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f86f 	bl	8002e32 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f862 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f871 	bl	8002e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0201 	mvn.w	r2, #1
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe fd80 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8bf 	bl	8002f3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f835 	bl	8002e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0220 	mvn.w	r2, #32
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f88a 	bl	8002f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <TIM_Base_SetConfig+0xb8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <TIM_Base_SetConfig+0x30>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0x30>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <TIM_Base_SetConfig+0xbc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0x30>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <TIM_Base_SetConfig+0xc0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d108      	bne.n	8002eaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <TIM_Base_SetConfig+0xb8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_Base_SetConfig+0x62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d007      	beq.n	8002eca <TIM_Base_SetConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <TIM_Base_SetConfig+0xbc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <TIM_Base_SetConfig+0xc0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <TIM_Base_SetConfig+0xb8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	615a      	str	r2, [r3, #20]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800

08002f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e03f      	b.n	8002fe2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe fcda 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fc21 	bl	80037dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08a      	sub	sp, #40	; 0x28
 8002fee:	af02      	add	r7, sp, #8
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b20      	cmp	r3, #32
 8003008:	d17c      	bne.n	8003104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_UART_Transmit+0x2c>
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e075      	b.n	8003106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_UART_Transmit+0x3e>
 8003024:	2302      	movs	r3, #2
 8003026:	e06e      	b.n	8003106 <HAL_UART_Transmit+0x11c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2221      	movs	r2, #33	; 0x21
 800303a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800303e:	f7fe fe15 	bl	8001c6c <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d108      	bne.n	800306c <HAL_UART_Transmit+0x82>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800307c:	e02a      	b.n	80030d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa45 	bl	8003518 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e036      	b.n	8003106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3302      	adds	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e007      	b.n	80030c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	3301      	adds	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1cf      	bne.n	800307e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa15 	bl	8003518 <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	; 0x28
 8003112:	af02      	add	r7, sp, #8
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 8089 	bne.w	8003242 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Receive+0x2e>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e081      	b.n	8003244 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive+0x40>
 800314a:	2302      	movs	r3, #2
 800314c:	e07a      	b.n	8003244 <HAL_UART_Receive+0x136>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2222      	movs	r2, #34	; 0x22
 8003160:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003164:	f7fe fd82 	bl	8001c6c <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317e:	d108      	bne.n	8003192 <HAL_UART_Receive+0x84>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e003      	b.n	800319a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031a2:	e043      	b.n	800322c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2120      	movs	r1, #32
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f9b2 	bl	8003518 <UART_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e042      	b.n	8003244 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e01f      	b.n	800321e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d007      	beq.n	80031f8 <HAL_UART_Receive+0xea>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_UART_Receive+0xf8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e008      	b.n	8003218 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1b6      	bne.n	80031a4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	d140      	bne.n	80032e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_UART_Receive_IT+0x26>
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e039      	b.n	80032ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_UART_Receive_IT+0x38>
 8003280:	2302      	movs	r3, #2
 8003282:	e032      	b.n	80032ea <HAL_UART_Receive_IT+0x9e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2222      	movs	r2, #34	; 0x22
 80032a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_UART_IRQHandler+0x52>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9cc 	bl	80036dc <UART_Receive_IT>
      return;
 8003344:	e0d1      	b.n	80034ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80b0 	beq.w	80034ae <HAL_UART_IRQHandler+0x1ba>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_UART_IRQHandler+0x70>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80a5 	beq.w	80034ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_UART_IRQHandler+0x90>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_UART_IRQHandler+0xb0>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_UART_IRQHandler+0xd0>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00f      	beq.n	80033ee <HAL_UART_IRQHandler+0xfa>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_UART_IRQHandler+0xee>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	f043 0208 	orr.w	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d078      	beq.n	80034e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_UART_IRQHandler+0x11c>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f966 	bl	80036dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_UART_IRQHandler+0x144>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d031      	beq.n	800349c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f8b7 	bl	80035ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <HAL_UART_IRQHandler+0x1fc>)
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fce5 	bl	8001e40 <HAL_DMA_Abort_IT>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003486:	4610      	mov	r0, r2
 8003488:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348a:	e00e      	b.n	80034aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f83a 	bl	8003506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003492:	e00a      	b.n	80034aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f836 	bl	8003506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	e006      	b.n	80034aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f832 	bl	8003506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034a8:	e01e      	b.n	80034e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034aa:	bf00      	nop
    return;
 80034ac:	e01c      	b.n	80034e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_UART_IRQHandler+0x1d6>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8a3 	bl	800360e <UART_Transmit_IT>
    return;
 80034c8:	e00f      	b.n	80034ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_UART_IRQHandler+0x1f6>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8e4 	bl	80036ac <UART_EndTransmit_IT>
    return;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80034e8:	bf00      	nop
  }
}
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	080035e7 	.word	0x080035e7

080034f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003528:	e02c      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003530:	d028      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <UART_WaitOnFlagUntilTimeout+0x30>
 8003538:	f7fe fb98 	bl	8001c6c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d21d      	bcs.n	8003584 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003556:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e00f      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d0c3      	beq.n	800352a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff80 	bl	8003506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b21      	cmp	r3, #33	; 0x21
 8003620:	d13e      	bne.n	80036a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	d114      	bne.n	8003656 <UART_Transmit_IT+0x48>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d110      	bne.n	8003656 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]
 8003654:	e008      	b.n	8003668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6211      	str	r1, [r2, #32]
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29b      	uxth	r3, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4619      	mov	r1, r3
 8003676:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10f      	bne.n	800369c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff11 	bl	80034f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b22      	cmp	r3, #34	; 0x22
 80036ee:	d170      	bne.n	80037d2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d117      	bne.n	800372a <UART_Receive_IT+0x4e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	b29a      	uxth	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
 8003728:	e026      	b.n	8003778 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d007      	beq.n	800374e <UART_Receive_IT+0x72>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <UART_Receive_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e008      	b.n	800376e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4619      	mov	r1, r3
 8003786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003788:	2b00      	cmp	r3, #0
 800378a:	d120      	bne.n	80037ce <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0220 	bic.w	r2, r2, #32
 800379a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fc fced 	bl	80001a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e002      	b.n	80037d4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003816:	f023 030c 	bic.w	r3, r3, #12
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <UART_SetConfig+0x114>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f8d8 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	e002      	b.n	8003852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7ff f8c0 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	0119      	lsls	r1, r3, #4
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f2f3 	udiv	r2, r2, r3
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <UART_SetConfig+0x118>)
 800388a:	fba3 0302 	umull	r0, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2064      	movs	r0, #100	; 0x64
 8003892:	fb00 f303 	mul.w	r3, r0, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <UART_SetConfig+0x118>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	4419      	add	r1, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <UART_SetConfig+0x118>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <UART_SetConfig+0x118>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	440a      	add	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40013800 	.word	0x40013800
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 0208 	add.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f103 0208 	add.w	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f103 0208 	add.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039aa:	d103      	bne.n	80039b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e00c      	b.n	80039ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3308      	adds	r3, #8
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e002      	b.n	80039c2 <vListInsert+0x2e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d2f6      	bcs.n	80039bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6852      	ldr	r2, [r2, #4]
 8003a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d103      	bne.n	8003a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08e      	sub	sp, #56	; 0x38
 8003a5a:	af04      	add	r7, sp, #16
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	e7fe      	b.n	8003a7c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <xTaskCreateStatic+0x42>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e7fe      	b.n	8003a96 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a98:	2354      	movs	r3, #84	; 0x54
 8003a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b54      	cmp	r3, #84	; 0x54
 8003aa0:	d009      	beq.n	8003ab6 <xTaskCreateStatic+0x60>
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01e      	beq.n	8003afa <xTaskCreateStatic+0xa4>
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01b      	beq.n	8003afa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f850 	bl	8003b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af4:	f000 f8cc 	bl	8003c90 <prvAddNewTaskToReadyList>
 8003af8:	e001      	b.n	8003afe <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003afe:	697b      	ldr	r3, [r7, #20]
	}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	; 0x30
 8003b0c:	af04      	add	r7, sp, #16
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fe55 	bl	80047cc <pvPortMalloc>
 8003b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b2a:	2054      	movs	r0, #84	; 0x54
 8003b2c:	f000 fe4e 	bl	80047cc <pvPortMalloc>
 8003b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3e:	e005      	b.n	8003b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b40:	6978      	ldr	r0, [r7, #20]
 8003b42:	f000 ff05 	bl	8004950 <vPortFree>
 8003b46:	e001      	b.n	8003b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f80e 	bl	8003b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b76:	69f8      	ldr	r0, [r7, #28]
 8003b78:	f000 f88a 	bl	8003c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e002      	b.n	8003b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b88:	69bb      	ldr	r3, [r7, #24]
	}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b088      	sub	sp, #32
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003baa:	3b01      	subs	r3, #1
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f023 0307 	bic.w	r3, r3, #7
 8003bb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <prvInitialiseNewTask+0x46>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e7fe      	b.n	8003bd6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e012      	b.n	8003c04 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	7819      	ldrb	r1, [r3, #0]
 8003be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	3334      	adds	r3, #52	; 0x34
 8003bee:	460a      	mov	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3301      	adds	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	d9e9      	bls.n	8003bde <prvInitialiseNewTask+0x4c>
 8003c0a:	e000      	b.n	8003c0e <prvInitialiseNewTask+0x7c>
		{
			break;
 8003c0c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b06      	cmp	r3, #6
 8003c1a:	d901      	bls.n	8003c20 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	2200      	movs	r2, #0
 8003c30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	3304      	adds	r3, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fe7d 	bl	8003936 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	3318      	adds	r3, #24
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fe78 	bl	8003936 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	f1c3 0207 	rsb	r2, r3, #7
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	2200      	movs	r2, #0
 8003c60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	69b8      	ldr	r0, [r7, #24]
 8003c70:	f000 fc06 	bl	8004480 <pxPortInitialiseStack>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c86:	bf00      	nop
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c98:	f000 fcde 	bl	8004658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <prvAddNewTaskToReadyList+0xb8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <prvAddNewTaskToReadyList+0xb8>)
 8003ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <prvAddNewTaskToReadyList+0xbc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <prvAddNewTaskToReadyList+0xbc>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <prvAddNewTaskToReadyList+0xb8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d110      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cbc:	f000 fabc 	bl	8004238 <prvInitialiseTaskLists>
 8003cc0:	e00d      	b.n	8003cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <prvAddNewTaskToReadyList+0xc0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <prvAddNewTaskToReadyList+0xbc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d802      	bhi.n	8003cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <prvAddNewTaskToReadyList+0xbc>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003ce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <prvAddNewTaskToReadyList+0xcc>)
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f7ff fe1c 	bl	800394e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d16:	f000 fccd 	bl	80046b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <prvAddNewTaskToReadyList+0xc0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <prvAddNewTaskToReadyList+0xbc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000968 	.word	0x20000968
 8003d4c:	20000868 	.word	0x20000868
 8003d50:	20000974 	.word	0x20000974
 8003d54:	20000984 	.word	0x20000984
 8003d58:	20000970 	.word	0x20000970
 8003d5c:	2000086c 	.word	0x2000086c
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <vTaskDelay+0x60>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <vTaskDelay+0x2e>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	e7fe      	b.n	8003d90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d92:	f000 f879 	bl	8003e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb0b 	bl	80043b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d9e:	f000 f881 	bl	8003ea4 <xTaskResumeAll>
 8003da2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <vTaskDelay+0x64>)
 8003dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000990 	.word	0x20000990
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dda:	463a      	mov	r2, r7
 8003ddc:	1d39      	adds	r1, r7, #4
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc f9c6 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	9202      	str	r2, [sp, #8]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	460a      	mov	r2, r1
 8003dfa:	491d      	ldr	r1, [pc, #116]	; (8003e70 <vTaskStartScheduler+0xa4>)
 8003dfc:	481d      	ldr	r0, [pc, #116]	; (8003e74 <vTaskStartScheduler+0xa8>)
 8003dfe:	f7ff fe2a 	bl	8003a56 <xTaskCreateStatic>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <vTaskStartScheduler+0xac>)
 8003e06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <vTaskStartScheduler+0xac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e10:	2301      	movs	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e001      	b.n	8003e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d115      	bne.n	8003e4c <vTaskStartScheduler+0x80>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <vTaskStartScheduler+0xb0>)
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <vTaskStartScheduler+0xb4>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <vTaskStartScheduler+0xb8>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e46:	f000 fb97 	bl	8004578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e4a:	e00d      	b.n	8003e68 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e52:	d109      	bne.n	8003e68 <vTaskStartScheduler+0x9c>
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e7fe      	b.n	8003e66 <vTaskStartScheduler+0x9a>
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	080062ac 	.word	0x080062ac
 8003e74:	08004209 	.word	0x08004209
 8003e78:	2000098c 	.word	0x2000098c
 8003e7c:	20000988 	.word	0x20000988
 8003e80:	20000974 	.word	0x20000974
 8003e84:	2000096c 	.word	0x2000096c

08003e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <vTaskSuspendAll+0x18>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <vTaskSuspendAll+0x18>)
 8003e94:	6013      	str	r3, [r2, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000990 	.word	0x20000990

08003ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eb2:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <xTaskResumeAll+0x114>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <xTaskResumeAll+0x2a>
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	e7fe      	b.n	8003ecc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ece:	f000 fbc3 	bl	8004658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <xTaskResumeAll+0x114>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	4a37      	ldr	r2, [pc, #220]	; (8003fb8 <xTaskResumeAll+0x114>)
 8003eda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <xTaskResumeAll+0x114>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d161      	bne.n	8003fa8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <xTaskResumeAll+0x118>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05d      	beq.n	8003fa8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eec:	e02e      	b.n	8003f4c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <xTaskResumeAll+0x11c>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3318      	adds	r3, #24
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fd82 	bl	8003a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fd7d 	bl	8003a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <xTaskResumeAll+0x120>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <xTaskResumeAll+0x120>)
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <xTaskResumeAll+0x124>)
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7ff fd0b 	bl	800394e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <xTaskResumeAll+0x128>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <xTaskResumeAll+0x12c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <xTaskResumeAll+0x11c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1cc      	bne.n	8003eee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f5a:	f000 fa07 	bl	800436c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <xTaskResumeAll+0x130>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f6a:	f000 f837 	bl	8003fdc <xTaskIncrementTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <xTaskResumeAll+0x12c>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f1      	bne.n	8003f6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <xTaskResumeAll+0x130>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <xTaskResumeAll+0x12c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <xTaskResumeAll+0x134>)
 8003f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fa8:	f000 fb84 	bl	80046b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003fac:	68bb      	ldr	r3, [r7, #8]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000990 	.word	0x20000990
 8003fbc:	20000968 	.word	0x20000968
 8003fc0:	20000928 	.word	0x20000928
 8003fc4:	20000970 	.word	0x20000970
 8003fc8:	2000086c 	.word	0x2000086c
 8003fcc:	20000868 	.word	0x20000868
 8003fd0:	2000097c 	.word	0x2000097c
 8003fd4:	20000978 	.word	0x20000978
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <xTaskIncrementTick+0x14c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 808c 	bne.w	8004108 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ff0:	4b4e      	ldr	r3, [pc, #312]	; (800412c <xTaskIncrementTick+0x150>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ff8:	4a4c      	ldr	r2, [pc, #304]	; (800412c <xTaskIncrementTick+0x150>)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11f      	bne.n	8004044 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004004:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <xTaskIncrementTick+0x154>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <xTaskIncrementTick+0x46>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	e7fe      	b.n	8004020 <xTaskIncrementTick+0x44>
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <xTaskIncrementTick+0x154>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <xTaskIncrementTick+0x158>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a40      	ldr	r2, [pc, #256]	; (8004130 <xTaskIncrementTick+0x154>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4a40      	ldr	r2, [pc, #256]	; (8004134 <xTaskIncrementTick+0x158>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b40      	ldr	r3, [pc, #256]	; (8004138 <xTaskIncrementTick+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	4a3e      	ldr	r2, [pc, #248]	; (8004138 <xTaskIncrementTick+0x15c>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	f000 f994 	bl	800436c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004044:	4b3d      	ldr	r3, [pc, #244]	; (800413c <xTaskIncrementTick+0x160>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d34d      	bcc.n	80040ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <xTaskIncrementTick+0x154>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <xTaskIncrementTick+0x80>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <xTaskIncrementTick+0x82>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <xTaskIncrementTick+0x160>)
 8004064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004068:	601a      	str	r2, [r3, #0]
					break;
 800406a:	e03e      	b.n	80040ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <xTaskIncrementTick+0x154>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d203      	bcs.n	800408c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004084:	4a2d      	ldr	r2, [pc, #180]	; (800413c <xTaskIncrementTick+0x160>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
						break;
 800408a:	e02e      	b.n	80040ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fcb7 	bl	8003a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fcae 	bl	8003a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2201      	movs	r2, #1
 80040ae:	409a      	lsls	r2, r3
 80040b0:	4b23      	ldr	r3, [pc, #140]	; (8004140 <xTaskIncrementTick+0x164>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	4a22      	ldr	r2, [pc, #136]	; (8004140 <xTaskIncrementTick+0x164>)
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <xTaskIncrementTick+0x168>)
 80040c8:	441a      	add	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7ff fc3c 	bl	800394e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <xTaskIncrementTick+0x16c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b4      	bcc.n	800404e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e8:	e7b1      	b.n	800404e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <xTaskIncrementTick+0x16c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4914      	ldr	r1, [pc, #80]	; (8004144 <xTaskIncrementTick+0x168>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d907      	bls.n	8004112 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004102:	2301      	movs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e004      	b.n	8004112 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <xTaskIncrementTick+0x170>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <xTaskIncrementTick+0x170>)
 8004110:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <xTaskIncrementTick+0x174>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800411a:	2301      	movs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800411e:	697b      	ldr	r3, [r7, #20]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000990 	.word	0x20000990
 800412c:	2000096c 	.word	0x2000096c
 8004130:	20000920 	.word	0x20000920
 8004134:	20000924 	.word	0x20000924
 8004138:	20000980 	.word	0x20000980
 800413c:	20000988 	.word	0x20000988
 8004140:	20000970 	.word	0x20000970
 8004144:	2000086c 	.word	0x2000086c
 8004148:	20000868 	.word	0x20000868
 800414c:	20000978 	.word	0x20000978
 8004150:	2000097c 	.word	0x2000097c

08004154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <vTaskSwitchContext+0xa0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <vTaskSwitchContext+0xa4>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004168:	e03e      	b.n	80041e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <vTaskSwitchContext+0xa4>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <vTaskSwitchContext+0xa8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800417e:	7afb      	ldrb	r3, [r7, #11]
 8004180:	f1c3 031f 	rsb	r3, r3, #31
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	491e      	ldr	r1, [pc, #120]	; (8004200 <vTaskSwitchContext+0xac>)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e7fe      	b.n	80041ac <vTaskSwitchContext+0x58>
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a11      	ldr	r2, [pc, #68]	; (8004200 <vTaskSwitchContext+0xac>)
 80041ba:	4413      	add	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3308      	adds	r3, #8
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d104      	bne.n	80041de <vTaskSwitchContext+0x8a>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <vTaskSwitchContext+0xb0>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000990 	.word	0x20000990
 80041f8:	2000097c 	.word	0x2000097c
 80041fc:	20000970 	.word	0x20000970
 8004200:	2000086c 	.word	0x2000086c
 8004204:	20000868 	.word	0x20000868

08004208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004210:	f000 f852 	bl	80042b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <prvIdleTask+0x28>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d9f9      	bls.n	8004210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <prvIdleTask+0x2c>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800422c:	e7f0      	b.n	8004210 <prvIdleTask+0x8>
 800422e:	bf00      	nop
 8004230:	2000086c 	.word	0x2000086c
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	e00c      	b.n	800425e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <prvInitialiseTaskLists+0x60>)
 8004250:	4413      	add	r3, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fb50 	bl	80038f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3301      	adds	r3, #1
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b06      	cmp	r3, #6
 8004262:	d9ef      	bls.n	8004244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004264:	480d      	ldr	r0, [pc, #52]	; (800429c <prvInitialiseTaskLists+0x64>)
 8004266:	f7ff fb47 	bl	80038f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <prvInitialiseTaskLists+0x68>)
 800426c:	f7ff fb44 	bl	80038f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <prvInitialiseTaskLists+0x6c>)
 8004272:	f7ff fb41 	bl	80038f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004276:	480c      	ldr	r0, [pc, #48]	; (80042a8 <prvInitialiseTaskLists+0x70>)
 8004278:	f7ff fb3e 	bl	80038f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x74>)
 800427e:	f7ff fb3b 	bl	80038f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <prvInitialiseTaskLists+0x78>)
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <prvInitialiseTaskLists+0x64>)
 8004286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvInitialiseTaskLists+0x7c>)
 800428a:	4a05      	ldr	r2, [pc, #20]	; (80042a0 <prvInitialiseTaskLists+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000086c 	.word	0x2000086c
 800429c:	200008f8 	.word	0x200008f8
 80042a0:	2000090c 	.word	0x2000090c
 80042a4:	20000928 	.word	0x20000928
 80042a8:	2000093c 	.word	0x2000093c
 80042ac:	20000954 	.word	0x20000954
 80042b0:	20000920 	.word	0x20000920
 80042b4:	20000924 	.word	0x20000924

080042b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042be:	e019      	b.n	80042f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042c0:	f000 f9ca 	bl	8004658 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <prvCheckTasksWaitingTermination+0x4c>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fb97 	bl	8003a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <prvCheckTasksWaitingTermination+0x50>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <prvCheckTasksWaitingTermination+0x50>)
 80042de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	4a09      	ldr	r2, [pc, #36]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ea:	f000 f9e3 	bl	80046b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f80e 	bl	8004310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e1      	bne.n	80042c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	2000093c 	.word	0x2000093c
 8004308:	20000968 	.word	0x20000968
 800430c:	20000950 	.word	0x20000950

08004310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fb12 	bl	8004950 <vPortFree>
				vPortFree( pxTCB );
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb0f 	bl	8004950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004332:	e017      	b.n	8004364 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800433a:	2b01      	cmp	r3, #1
 800433c:	d103      	bne.n	8004346 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fb06 	bl	8004950 <vPortFree>
	}
 8004344:	e00e      	b.n	8004364 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800434c:	2b02      	cmp	r3, #2
 800434e:	d009      	beq.n	8004364 <prvDeleteTCB+0x54>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e7fe      	b.n	8004362 <prvDeleteTCB+0x52>
	}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <prvResetNextTaskUnblockTime+0x40>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <prvResetNextTaskUnblockTime+0x14>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <prvResetNextTaskUnblockTime+0x16>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <prvResetNextTaskUnblockTime+0x44>)
 8004388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800438c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800438e:	e008      	b.n	80043a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <prvResetNextTaskUnblockTime+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <prvResetNextTaskUnblockTime+0x44>)
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	20000920 	.word	0x20000920
 80043b0:	20000988 	.word	0x20000988

080043b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c4:	4b28      	ldr	r3, [pc, #160]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fb1a 	bl	8003a04 <uxListRemove>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	2201      	movs	r2, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <prvAddCurrentTaskToDelayedList+0xb8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4013      	ands	r3, r2
 80043ea:	4a20      	ldr	r2, [pc, #128]	; (800446c <prvAddCurrentTaskToDelayedList+0xb8>)
 80043ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f4:	d10a      	bne.n	800440c <prvAddCurrentTaskToDelayedList+0x58>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	481a      	ldr	r0, [pc, #104]	; (8004470 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004406:	f7ff faa2 	bl	800394e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800440a:	e026      	b.n	800445a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d209      	bcs.n	8004438 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7ff faaf 	bl	8003994 <vListInsert>
}
 8004436:	e010      	b.n	800445a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <prvAddCurrentTaskToDelayedList+0xc4>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7ff faa5 	bl	8003994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <prvAddCurrentTaskToDelayedList+0xc8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d202      	bcs.n	800445a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6013      	str	r3, [r2, #0]
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	2000096c 	.word	0x2000096c
 8004468:	20000868 	.word	0x20000868
 800446c:	20000970 	.word	0x20000970
 8004470:	20000954 	.word	0x20000954
 8004474:	20000924 	.word	0x20000924
 8004478:	20000920 	.word	0x20000920
 800447c:	20000988 	.word	0x20000988

08004480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b04      	subs	r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b04      	subs	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b04      	subs	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <pxPortInitialiseStack+0x54>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b14      	subs	r3, #20
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b20      	subs	r3, #32
 80044c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	080044d9 	.word	0x080044d9

080044d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <prvTaskExitError+0x4c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ea:	d009      	beq.n	8004500 <prvTaskExitError+0x28>
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e7fe      	b.n	80044fe <prvTaskExitError+0x26>
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004512:	bf00      	nop
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0fc      	beq.n	8004514 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	20000010 	.word	0x20000010
	...

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	f04e 0e0d 	orr.w	lr, lr, #13
 800454e:	4770      	bx	lr

08004550 <pxCurrentTCBConst2>:
 8004550:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004558:	4806      	ldr	r0, [pc, #24]	; (8004574 <prvPortStartFirstTask+0x1c>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	b662      	cpsie	i
 8004564:	b661      	cpsie	f
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	df00      	svc	0
 8004570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004572:	bf00      	nop
 8004574:	e000ed08 	.word	0xe000ed08

08004578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xPortStartScheduler+0xcc>)
 8004580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22ff      	movs	r2, #255	; 0xff
 800458e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <xPortStartScheduler+0xd0>)
 80045a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <xPortStartScheduler+0xd4>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ac:	e009      	b.n	80045c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045ae:	4b27      	ldr	r3, [pc, #156]	; (800464c <xPortStartScheduler+0xd4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <xPortStartScheduler+0xd4>)
 80045b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d0ef      	beq.n	80045ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <xPortStartScheduler+0xd4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d009      	beq.n	80045ee <xPortStartScheduler+0x76>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	e7fe      	b.n	80045ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <xPortStartScheduler+0xd4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <xPortStartScheduler+0xd4>)
 80045f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <xPortStartScheduler+0xd4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <xPortStartScheduler+0xd4>)
 8004602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xPortStartScheduler+0xd8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <xPortStartScheduler+0xd8>)
 8004612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <xPortStartScheduler+0xd8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <xPortStartScheduler+0xd8>)
 800461e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004624:	f000 f8b0 	bl	8004788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <xPortStartScheduler+0xdc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800462e:	f7ff ff93 	bl	8004558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004632:	f7ff fd8f 	bl	8004154 <vTaskSwitchContext>
	prvTaskExitError();
 8004636:	f7ff ff4f 	bl	80044d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	e000e400 	.word	0xe000e400
 8004648:	20000994 	.word	0x20000994
 800464c:	20000998 	.word	0x20000998
 8004650:	e000ed20 	.word	0xe000ed20
 8004654:	20000010 	.word	0x20000010

08004658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <vPortEnterCritical+0x54>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <vPortEnterCritical+0x54>)
 8004678:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <vPortEnterCritical+0x54>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d10e      	bne.n	80046a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortEnterCritical+0x58>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <vPortEnterCritical+0x48>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	e7fe      	b.n	800469e <vPortEnterCritical+0x46>
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000010 	.word	0x20000010
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <vPortExitCritical+0x48>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <vPortExitCritical+0x22>
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e7fe      	b.n	80046d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <vPortExitCritical+0x48>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <vPortExitCritical+0x48>)
 80046de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <vPortExitCritical+0x48>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <vPortExitCritical+0x3e>
 80046e8:	2300      	movs	r3, #0
 80046ea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	20000010 	.word	0x20000010

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004716:	f04f 0050 	mov.w	r0, #80	; 0x50
 800471a:	f380 8811 	msr	BASEPRI, r0
 800471e:	f7ff fd19 	bl	8004154 <vTaskSwitchContext>
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004736:	f380 8809 	msr	PSP, r0
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	4770      	bx	lr

08004740 <pxCurrentTCBConst>:
 8004740:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004760:	f7ff fc3c 	bl	8003fdc <xTaskIncrementTick>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <SysTick_Handler+0x3c>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x30>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x34>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x38>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vPortSetupTimerInterrupt+0x3c>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <vPortSetupTimerInterrupt+0x40>)
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047aa:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <vPortSetupTimerInterrupt+0x30>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	e000e010 	.word	0xe000e010
 80047bc:	e000e018 	.word	0xe000e018
 80047c0:	20000004 	.word	0x20000004
 80047c4:	10624dd3 	.word	0x10624dd3
 80047c8:	e000e014 	.word	0xe000e014

080047cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047d8:	f7ff fb56 	bl	8003e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047dc:	4b57      	ldr	r3, [pc, #348]	; (800493c <pvPortMalloc+0x170>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e4:	f000 f90c 	bl	8004a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e8:	4b55      	ldr	r3, [pc, #340]	; (8004940 <pvPortMalloc+0x174>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 808c 	bne.w	800490e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01c      	beq.n	8004836 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80047fc:	2208      	movs	r2, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f023 0307 	bic.w	r3, r3, #7
 8004814:	3308      	adds	r3, #8
 8004816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <pvPortMalloc+0x6a>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e7fe      	b.n	8004834 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d068      	beq.n	800490e <pvPortMalloc+0x142>
 800483c:	4b41      	ldr	r3, [pc, #260]	; (8004944 <pvPortMalloc+0x178>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d863      	bhi.n	800490e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004846:	4b40      	ldr	r3, [pc, #256]	; (8004948 <pvPortMalloc+0x17c>)
 8004848:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <pvPortMalloc+0x17c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004850:	e004      	b.n	800485c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d903      	bls.n	800486e <pvPortMalloc+0xa2>
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f1      	bne.n	8004852 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800486e:	4b33      	ldr	r3, [pc, #204]	; (800493c <pvPortMalloc+0x170>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	d04a      	beq.n	800490e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1ad2      	subs	r2, r2, r3
 8004892:	2308      	movs	r3, #8
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	429a      	cmp	r2, r3
 8004898:	d91e      	bls.n	80048d8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <pvPortMalloc+0xf4>
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e7fe      	b.n	80048be <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d2:	69b8      	ldr	r0, [r7, #24]
 80048d4:	f000 f8f6 	bl	8004ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <pvPortMalloc+0x178>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <pvPortMalloc+0x178>)
 80048e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <pvPortMalloc+0x178>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <pvPortMalloc+0x180>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d203      	bcs.n	80048fa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <pvPortMalloc+0x178>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <pvPortMalloc+0x180>)
 80048f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <pvPortMalloc+0x174>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	431a      	orrs	r2, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800490e:	f7ff fac9 	bl	8003ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <pvPortMalloc+0x164>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e7fe      	b.n	800492e <pvPortMalloc+0x162>
	return pvReturn;
 8004930:	69fb      	ldr	r3, [r7, #28]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200019a4 	.word	0x200019a4
 8004940:	200019b0 	.word	0x200019b0
 8004944:	200019a8 	.word	0x200019a8
 8004948:	2000199c 	.word	0x2000199c
 800494c:	200019ac 	.word	0x200019ac

08004950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d046      	beq.n	80049f0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004962:	2308      	movs	r3, #8
 8004964:	425b      	negs	r3, r3
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <vPortFree+0xa8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <vPortFree+0x42>
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e7fe      	b.n	8004990 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <vPortFree+0x5e>
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e7fe      	b.n	80049ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <vPortFree+0xa8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d115      	bne.n	80049f0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <vPortFree+0xa8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	401a      	ands	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049d4:	f7ff fa58 	bl	8003e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <vPortFree+0xac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <vPortFree+0xac>)
 80049e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f000 f86c 	bl	8004ac4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049ec:	f7ff fa5a 	bl	8003ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200019b0 	.word	0x200019b0
 80049fc:	200019a8 	.word	0x200019a8

08004a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <prvHeapInit+0xac>)
 8004a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <prvHeapInit+0xac>)
 8004a30:	4413      	add	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a38:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <prvHeapInit+0xb0>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <prvHeapInit+0xb0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <prvHeapInit+0xb8>)
 8004a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <prvHeapInit+0xbc>)
 8004a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <prvHeapInit+0xc0>)
 8004a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a9e:	601a      	str	r2, [r3, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000099c 	.word	0x2000099c
 8004ab0:	2000199c 	.word	0x2000199c
 8004ab4:	200019a4 	.word	0x200019a4
 8004ab8:	200019ac 	.word	0x200019ac
 8004abc:	200019a8 	.word	0x200019a8
 8004ac0:	200019b0 	.word	0x200019b0

08004ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <prvInsertBlockIntoFreeList+0xa8>)
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e002      	b.n	8004ad8 <prvInsertBlockIntoFreeList+0x14>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d8f7      	bhi.n	8004ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4413      	add	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d108      	bne.n	8004b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	441a      	add	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d118      	bne.n	8004b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <prvInsertBlockIntoFreeList+0xac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d00d      	beq.n	8004b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e008      	b.n	8004b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <prvInsertBlockIntoFreeList+0xac>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e003      	b.n	8004b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d002      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	2000199c 	.word	0x2000199c
 8004b70:	200019a4 	.word	0x200019a4

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000014 	.word	0x20000014

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	2500      	movs	r5, #0
 8004b84:	4e0c      	ldr	r6, [pc, #48]	; (8004bb8 <__libc_init_array+0x38>)
 8004b86:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b88:	1ba4      	subs	r4, r4, r6
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	42a5      	cmp	r5, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	f001 f9a2 	bl	8005ed8 <_init>
 8004b94:	2500      	movs	r5, #0
 8004b96:	4e0a      	ldr	r6, [pc, #40]	; (8004bc0 <__libc_init_array+0x40>)
 8004b98:	4c0a      	ldr	r4, [pc, #40]	; (8004bc4 <__libc_init_array+0x44>)
 8004b9a:	1ba4      	subs	r4, r4, r6
 8004b9c:	10a4      	asrs	r4, r4, #2
 8004b9e:	42a5      	cmp	r5, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba8:	4798      	blx	r3
 8004baa:	3501      	adds	r5, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bb2:	4798      	blx	r3
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08006494 	.word	0x08006494
 8004bbc:	08006494 	.word	0x08006494
 8004bc0:	08006494 	.word	0x08006494
 8004bc4:	08006498 	.word	0x08006498

08004bc8 <memcpy>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	1e43      	subs	r3, r0, #1
 8004bcc:	440a      	add	r2, r1
 8004bce:	4291      	cmp	r1, r2
 8004bd0:	d100      	bne.n	8004bd4 <memcpy+0xc>
 8004bd2:	bd10      	pop	{r4, pc}
 8004bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bdc:	e7f7      	b.n	8004bce <memcpy+0x6>

08004bde <memset>:
 8004bde:	4603      	mov	r3, r0
 8004be0:	4402      	add	r2, r0
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d100      	bne.n	8004be8 <memset+0xa>
 8004be6:	4770      	bx	lr
 8004be8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bec:	e7f9      	b.n	8004be2 <memset+0x4>
	...

08004bf0 <siprintf>:
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bf6:	b500      	push	{lr}
 8004bf8:	b09c      	sub	sp, #112	; 0x70
 8004bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8004bfc:	9002      	str	r0, [sp, #8]
 8004bfe:	9006      	str	r0, [sp, #24]
 8004c00:	9107      	str	r1, [sp, #28]
 8004c02:	9104      	str	r1, [sp, #16]
 8004c04:	4808      	ldr	r0, [pc, #32]	; (8004c28 <siprintf+0x38>)
 8004c06:	4909      	ldr	r1, [pc, #36]	; (8004c2c <siprintf+0x3c>)
 8004c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	a902      	add	r1, sp, #8
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	f000 f9c4 	bl	8004fa0 <_svfiprintf_r>
 8004c18:	2200      	movs	r2, #0
 8004c1a:	9b02      	ldr	r3, [sp, #8]
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	b01c      	add	sp, #112	; 0x70
 8004c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	20000014 	.word	0x20000014
 8004c2c:	ffff0208 	.word	0xffff0208

08004c30 <siscanf>:
 8004c30:	b40e      	push	{r1, r2, r3}
 8004c32:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004c36:	b530      	push	{r4, r5, lr}
 8004c38:	b09c      	sub	sp, #112	; 0x70
 8004c3a:	ac1f      	add	r4, sp, #124	; 0x7c
 8004c3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004c40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004c44:	9002      	str	r0, [sp, #8]
 8004c46:	9006      	str	r0, [sp, #24]
 8004c48:	f7fb fa8c 	bl	8000164 <strlen>
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <siscanf+0x4c>)
 8004c4e:	9003      	str	r0, [sp, #12]
 8004c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c52:	2300      	movs	r3, #0
 8004c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c56:	9314      	str	r3, [sp, #80]	; 0x50
 8004c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5c:	9007      	str	r0, [sp, #28]
 8004c5e:	4808      	ldr	r0, [pc, #32]	; (8004c80 <siscanf+0x50>)
 8004c60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c64:	462a      	mov	r2, r5
 8004c66:	4623      	mov	r3, r4
 8004c68:	a902      	add	r1, sp, #8
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	9401      	str	r4, [sp, #4]
 8004c6e:	f000 fae9 	bl	8005244 <__ssvfiscanf_r>
 8004c72:	b01c      	add	sp, #112	; 0x70
 8004c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c78:	b003      	add	sp, #12
 8004c7a:	4770      	bx	lr
 8004c7c:	08004c85 	.word	0x08004c85
 8004c80:	20000014 	.word	0x20000014

08004c84 <__seofread>:
 8004c84:	2000      	movs	r0, #0
 8004c86:	4770      	bx	lr

08004c88 <strchr>:
 8004c88:	b2c9      	uxtb	r1, r1
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c90:	b11a      	cbz	r2, 8004c9a <strchr+0x12>
 8004c92:	428a      	cmp	r2, r1
 8004c94:	d1f9      	bne.n	8004c8a <strchr+0x2>
 8004c96:	4618      	mov	r0, r3
 8004c98:	4770      	bx	lr
 8004c9a:	2900      	cmp	r1, #0
 8004c9c:	bf18      	it	ne
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	e7f9      	b.n	8004c96 <strchr+0xe>

08004ca2 <strcpy>:
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ca8:	f803 2b01 	strb.w	r2, [r3], #1
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d1f9      	bne.n	8004ca4 <strcpy+0x2>
 8004cb0:	4770      	bx	lr

08004cb2 <strstr>:
 8004cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb4:	7803      	ldrb	r3, [r0, #0]
 8004cb6:	b17b      	cbz	r3, 8004cd8 <strstr+0x26>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	7823      	ldrb	r3, [r4, #0]
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	1c66      	adds	r6, r4, #1
 8004cc0:	b17b      	cbz	r3, 8004ce2 <strstr+0x30>
 8004cc2:	1e4a      	subs	r2, r1, #1
 8004cc4:	1e63      	subs	r3, r4, #1
 8004cc6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004cca:	b14d      	cbz	r5, 8004ce0 <strstr+0x2e>
 8004ccc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004cd0:	4634      	mov	r4, r6
 8004cd2:	42af      	cmp	r7, r5
 8004cd4:	d0f7      	beq.n	8004cc6 <strstr+0x14>
 8004cd6:	e7f0      	b.n	8004cba <strstr+0x8>
 8004cd8:	780b      	ldrb	r3, [r1, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf18      	it	ne
 8004cde:	2000      	movne	r0, #0
 8004ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	e7fc      	b.n	8004ce0 <strstr+0x2e>
	...

08004ce8 <strtok>:
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <strtok+0x50>)
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	681d      	ldr	r5, [r3, #0]
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004cf4:	460f      	mov	r7, r1
 8004cf6:	b9b4      	cbnz	r4, 8004d26 <strtok+0x3e>
 8004cf8:	2050      	movs	r0, #80	; 0x50
 8004cfa:	f000 f849 	bl	8004d90 <malloc>
 8004cfe:	65a8      	str	r0, [r5, #88]	; 0x58
 8004d00:	e9c0 4400 	strd	r4, r4, [r0]
 8004d04:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004d08:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d0c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004d10:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004d14:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004d18:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004d1c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004d20:	6184      	str	r4, [r0, #24]
 8004d22:	7704      	strb	r4, [r0, #28]
 8004d24:	6244      	str	r4, [r0, #36]	; 0x24
 8004d26:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	2301      	movs	r3, #1
 8004d32:	f000 b803 	b.w	8004d3c <__strtok_r>
 8004d36:	bf00      	nop
 8004d38:	20000014 	.word	0x20000014

08004d3c <__strtok_r>:
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3e:	b918      	cbnz	r0, 8004d48 <__strtok_r+0xc>
 8004d40:	6810      	ldr	r0, [r2, #0]
 8004d42:	b908      	cbnz	r0, 8004d48 <__strtok_r+0xc>
 8004d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d46:	4620      	mov	r0, r4
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004d50:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d54:	b91e      	cbnz	r6, 8004d5e <__strtok_r+0x22>
 8004d56:	b96d      	cbnz	r5, 8004d74 <__strtok_r+0x38>
 8004d58:	6015      	str	r5, [r2, #0]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	e7f2      	b.n	8004d44 <__strtok_r+0x8>
 8004d5e:	42b5      	cmp	r5, r6
 8004d60:	d1f6      	bne.n	8004d50 <__strtok_r+0x14>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ef      	bne.n	8004d46 <__strtok_r+0xa>
 8004d66:	6014      	str	r4, [r2, #0]
 8004d68:	7003      	strb	r3, [r0, #0]
 8004d6a:	e7eb      	b.n	8004d44 <__strtok_r+0x8>
 8004d6c:	462b      	mov	r3, r5
 8004d6e:	e00d      	b.n	8004d8c <__strtok_r+0x50>
 8004d70:	b926      	cbnz	r6, 8004d7c <__strtok_r+0x40>
 8004d72:	461c      	mov	r4, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	460f      	mov	r7, r1
 8004d78:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004d7c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d80:	42b5      	cmp	r5, r6
 8004d82:	d1f5      	bne.n	8004d70 <__strtok_r+0x34>
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d0f1      	beq.n	8004d6c <__strtok_r+0x30>
 8004d88:	2100      	movs	r1, #0
 8004d8a:	7021      	strb	r1, [r4, #0]
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e7d9      	b.n	8004d44 <__strtok_r+0x8>

08004d90 <malloc>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <malloc+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f000 b84f 	b.w	8004e38 <_malloc_r>
 8004d9a:	bf00      	nop
 8004d9c:	20000014 	.word	0x20000014

08004da0 <_free_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4605      	mov	r5, r0
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d043      	beq.n	8004e30 <_free_r+0x90>
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f0c      	subs	r4, r1, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfb8      	it	lt
 8004db2:	18e4      	addlt	r4, r4, r3
 8004db4:	f001 f853 	bl	8005e5e <__malloc_lock>
 8004db8:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <_free_r+0x94>)
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	b933      	cbnz	r3, 8004dce <_free_r+0x2e>
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	6014      	str	r4, [r2, #0]
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dca:	f001 b849 	b.w	8005e60 <__malloc_unlock>
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	d90b      	bls.n	8004dea <_free_r+0x4a>
 8004dd2:	6821      	ldr	r1, [r4, #0]
 8004dd4:	1862      	adds	r2, r4, r1
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	bf01      	itttt	eq
 8004dda:	681a      	ldreq	r2, [r3, #0]
 8004ddc:	685b      	ldreq	r3, [r3, #4]
 8004dde:	1852      	addeq	r2, r2, r1
 8004de0:	6022      	streq	r2, [r4, #0]
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	6004      	str	r4, [r0, #0]
 8004de6:	e7ed      	b.n	8004dc4 <_free_r+0x24>
 8004de8:	4613      	mov	r3, r2
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	b10a      	cbz	r2, 8004df2 <_free_r+0x52>
 8004dee:	42a2      	cmp	r2, r4
 8004df0:	d9fa      	bls.n	8004de8 <_free_r+0x48>
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	1858      	adds	r0, r3, r1
 8004df6:	42a0      	cmp	r0, r4
 8004df8:	d10b      	bne.n	8004e12 <_free_r+0x72>
 8004dfa:	6820      	ldr	r0, [r4, #0]
 8004dfc:	4401      	add	r1, r0
 8004dfe:	1858      	adds	r0, r3, r1
 8004e00:	4282      	cmp	r2, r0
 8004e02:	6019      	str	r1, [r3, #0]
 8004e04:	d1de      	bne.n	8004dc4 <_free_r+0x24>
 8004e06:	6810      	ldr	r0, [r2, #0]
 8004e08:	6852      	ldr	r2, [r2, #4]
 8004e0a:	4401      	add	r1, r0
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e7d8      	b.n	8004dc4 <_free_r+0x24>
 8004e12:	d902      	bls.n	8004e1a <_free_r+0x7a>
 8004e14:	230c      	movs	r3, #12
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	e7d4      	b.n	8004dc4 <_free_r+0x24>
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	1821      	adds	r1, r4, r0
 8004e1e:	428a      	cmp	r2, r1
 8004e20:	bf01      	itttt	eq
 8004e22:	6811      	ldreq	r1, [r2, #0]
 8004e24:	6852      	ldreq	r2, [r2, #4]
 8004e26:	1809      	addeq	r1, r1, r0
 8004e28:	6021      	streq	r1, [r4, #0]
 8004e2a:	6062      	str	r2, [r4, #4]
 8004e2c:	605c      	str	r4, [r3, #4]
 8004e2e:	e7c9      	b.n	8004dc4 <_free_r+0x24>
 8004e30:	bd38      	pop	{r3, r4, r5, pc}
 8004e32:	bf00      	nop
 8004e34:	200019b4 	.word	0x200019b4

08004e38 <_malloc_r>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	1ccd      	adds	r5, r1, #3
 8004e3c:	f025 0503 	bic.w	r5, r5, #3
 8004e40:	3508      	adds	r5, #8
 8004e42:	2d0c      	cmp	r5, #12
 8004e44:	bf38      	it	cc
 8004e46:	250c      	movcc	r5, #12
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	db01      	blt.n	8004e52 <_malloc_r+0x1a>
 8004e4e:	42a9      	cmp	r1, r5
 8004e50:	d903      	bls.n	8004e5a <_malloc_r+0x22>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	f001 f800 	bl	8005e5e <__malloc_lock>
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <_malloc_r+0xac>)
 8004e60:	6814      	ldr	r4, [r2, #0]
 8004e62:	4621      	mov	r1, r4
 8004e64:	b991      	cbnz	r1, 8004e8c <_malloc_r+0x54>
 8004e66:	4c20      	ldr	r4, [pc, #128]	; (8004ee8 <_malloc_r+0xb0>)
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	b91b      	cbnz	r3, 8004e74 <_malloc_r+0x3c>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f000 fe19 	bl	8005aa4 <_sbrk_r>
 8004e72:	6020      	str	r0, [r4, #0]
 8004e74:	4629      	mov	r1, r5
 8004e76:	4630      	mov	r0, r6
 8004e78:	f000 fe14 	bl	8005aa4 <_sbrk_r>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d124      	bne.n	8004eca <_malloc_r+0x92>
 8004e80:	230c      	movs	r3, #12
 8004e82:	4630      	mov	r0, r6
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	f000 ffeb 	bl	8005e60 <__malloc_unlock>
 8004e8a:	e7e4      	b.n	8004e56 <_malloc_r+0x1e>
 8004e8c:	680b      	ldr	r3, [r1, #0]
 8004e8e:	1b5b      	subs	r3, r3, r5
 8004e90:	d418      	bmi.n	8004ec4 <_malloc_r+0x8c>
 8004e92:	2b0b      	cmp	r3, #11
 8004e94:	d90f      	bls.n	8004eb6 <_malloc_r+0x7e>
 8004e96:	600b      	str	r3, [r1, #0]
 8004e98:	18cc      	adds	r4, r1, r3
 8004e9a:	50cd      	str	r5, [r1, r3]
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 ffdf 	bl	8005e60 <__malloc_unlock>
 8004ea2:	f104 000b 	add.w	r0, r4, #11
 8004ea6:	1d23      	adds	r3, r4, #4
 8004ea8:	f020 0007 	bic.w	r0, r0, #7
 8004eac:	1ac3      	subs	r3, r0, r3
 8004eae:	d0d3      	beq.n	8004e58 <_malloc_r+0x20>
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	50e2      	str	r2, [r4, r3]
 8004eb4:	e7d0      	b.n	8004e58 <_malloc_r+0x20>
 8004eb6:	684b      	ldr	r3, [r1, #4]
 8004eb8:	428c      	cmp	r4, r1
 8004eba:	bf16      	itet	ne
 8004ebc:	6063      	strne	r3, [r4, #4]
 8004ebe:	6013      	streq	r3, [r2, #0]
 8004ec0:	460c      	movne	r4, r1
 8004ec2:	e7eb      	b.n	8004e9c <_malloc_r+0x64>
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	6849      	ldr	r1, [r1, #4]
 8004ec8:	e7cc      	b.n	8004e64 <_malloc_r+0x2c>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d005      	beq.n	8004ee0 <_malloc_r+0xa8>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 fde4 	bl	8005aa4 <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d0cf      	beq.n	8004e80 <_malloc_r+0x48>
 8004ee0:	6025      	str	r5, [r4, #0]
 8004ee2:	e7db      	b.n	8004e9c <_malloc_r+0x64>
 8004ee4:	200019b4 	.word	0x200019b4
 8004ee8:	200019b8 	.word	0x200019b8

08004eec <__ssputs_r>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	688e      	ldr	r6, [r1, #8]
 8004ef2:	4682      	mov	sl, r0
 8004ef4:	429e      	cmp	r6, r3
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	4690      	mov	r8, r2
 8004efa:	4699      	mov	r9, r3
 8004efc:	d837      	bhi.n	8004f6e <__ssputs_r+0x82>
 8004efe:	898a      	ldrh	r2, [r1, #12]
 8004f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f04:	d031      	beq.n	8004f6a <__ssputs_r+0x7e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	6825      	ldr	r5, [r4, #0]
 8004f0a:	6909      	ldr	r1, [r1, #16]
 8004f0c:	1a6f      	subs	r7, r5, r1
 8004f0e:	6965      	ldr	r5, [r4, #20]
 8004f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f18:	f109 0301 	add.w	r3, r9, #1
 8004f1c:	443b      	add	r3, r7
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	bf38      	it	cc
 8004f22:	461d      	movcc	r5, r3
 8004f24:	0553      	lsls	r3, r2, #21
 8004f26:	d530      	bpl.n	8004f8a <__ssputs_r+0x9e>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7ff ff85 	bl	8004e38 <_malloc_r>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	b950      	cbnz	r0, 8004f48 <__ssputs_r+0x5c>
 8004f32:	230c      	movs	r3, #12
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f38:	f8ca 3000 	str.w	r3, [sl]
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	463a      	mov	r2, r7
 8004f4a:	6921      	ldr	r1, [r4, #16]
 8004f4c:	f7ff fe3c 	bl	8004bc8 <memcpy>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	6126      	str	r6, [r4, #16]
 8004f5e:	443e      	add	r6, r7
 8004f60:	6026      	str	r6, [r4, #0]
 8004f62:	464e      	mov	r6, r9
 8004f64:	6165      	str	r5, [r4, #20]
 8004f66:	1bed      	subs	r5, r5, r7
 8004f68:	60a5      	str	r5, [r4, #8]
 8004f6a:	454e      	cmp	r6, r9
 8004f6c:	d900      	bls.n	8004f70 <__ssputs_r+0x84>
 8004f6e:	464e      	mov	r6, r9
 8004f70:	4632      	mov	r2, r6
 8004f72:	4641      	mov	r1, r8
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	f000 ff59 	bl	8005e2c <memmove>
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	1b9b      	subs	r3, r3, r6
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	441e      	add	r6, r3
 8004f86:	6026      	str	r6, [r4, #0]
 8004f88:	e7dc      	b.n	8004f44 <__ssputs_r+0x58>
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	f000 ff69 	bl	8005e62 <_realloc_r>
 8004f90:	4606      	mov	r6, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d1e2      	bne.n	8004f5c <__ssputs_r+0x70>
 8004f96:	6921      	ldr	r1, [r4, #16]
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f7ff ff01 	bl	8004da0 <_free_r>
 8004f9e:	e7c8      	b.n	8004f32 <__ssputs_r+0x46>

08004fa0 <_svfiprintf_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	898b      	ldrh	r3, [r1, #12]
 8004fa8:	b09d      	sub	sp, #116	; 0x74
 8004faa:	061f      	lsls	r7, r3, #24
 8004fac:	4680      	mov	r8, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	d50f      	bpl.n	8004fd4 <_svfiprintf_r+0x34>
 8004fb4:	690b      	ldr	r3, [r1, #16]
 8004fb6:	b96b      	cbnz	r3, 8004fd4 <_svfiprintf_r+0x34>
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	f7ff ff3d 	bl	8004e38 <_malloc_r>
 8004fbe:	6020      	str	r0, [r4, #0]
 8004fc0:	6120      	str	r0, [r4, #16]
 8004fc2:	b928      	cbnz	r0, 8004fd0 <_svfiprintf_r+0x30>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	f8c8 3000 	str.w	r3, [r8]
 8004fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fce:	e0c8      	b.n	8005162 <_svfiprintf_r+0x1c2>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fde:	2330      	movs	r3, #48	; 0x30
 8004fe0:	f04f 0b01 	mov.w	fp, #1
 8004fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fe8:	9503      	str	r5, [sp, #12]
 8004fea:	4637      	mov	r7, r6
 8004fec:	463d      	mov	r5, r7
 8004fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ff2:	b10b      	cbz	r3, 8004ff8 <_svfiprintf_r+0x58>
 8004ff4:	2b25      	cmp	r3, #37	; 0x25
 8004ff6:	d13e      	bne.n	8005076 <_svfiprintf_r+0xd6>
 8004ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ffc:	d00b      	beq.n	8005016 <_svfiprintf_r+0x76>
 8004ffe:	4653      	mov	r3, sl
 8005000:	4632      	mov	r2, r6
 8005002:	4621      	mov	r1, r4
 8005004:	4640      	mov	r0, r8
 8005006:	f7ff ff71 	bl	8004eec <__ssputs_r>
 800500a:	3001      	adds	r0, #1
 800500c:	f000 80a4 	beq.w	8005158 <_svfiprintf_r+0x1b8>
 8005010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005012:	4453      	add	r3, sl
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	783b      	ldrb	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809d 	beq.w	8005158 <_svfiprintf_r+0x1b8>
 800501e:	2300      	movs	r3, #0
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005030:	931a      	str	r3, [sp, #104]	; 0x68
 8005032:	462f      	mov	r7, r5
 8005034:	2205      	movs	r2, #5
 8005036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800503a:	4850      	ldr	r0, [pc, #320]	; (800517c <_svfiprintf_r+0x1dc>)
 800503c:	f000 fee8 	bl	8005e10 <memchr>
 8005040:	9b04      	ldr	r3, [sp, #16]
 8005042:	b9d0      	cbnz	r0, 800507a <_svfiprintf_r+0xda>
 8005044:	06d9      	lsls	r1, r3, #27
 8005046:	bf44      	itt	mi
 8005048:	2220      	movmi	r2, #32
 800504a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800504e:	071a      	lsls	r2, r3, #28
 8005050:	bf44      	itt	mi
 8005052:	222b      	movmi	r2, #43	; 0x2b
 8005054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005058:	782a      	ldrb	r2, [r5, #0]
 800505a:	2a2a      	cmp	r2, #42	; 0x2a
 800505c:	d015      	beq.n	800508a <_svfiprintf_r+0xea>
 800505e:	462f      	mov	r7, r5
 8005060:	2000      	movs	r0, #0
 8005062:	250a      	movs	r5, #10
 8005064:	9a07      	ldr	r2, [sp, #28]
 8005066:	4639      	mov	r1, r7
 8005068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800506c:	3b30      	subs	r3, #48	; 0x30
 800506e:	2b09      	cmp	r3, #9
 8005070:	d94d      	bls.n	800510e <_svfiprintf_r+0x16e>
 8005072:	b1b8      	cbz	r0, 80050a4 <_svfiprintf_r+0x104>
 8005074:	e00f      	b.n	8005096 <_svfiprintf_r+0xf6>
 8005076:	462f      	mov	r7, r5
 8005078:	e7b8      	b.n	8004fec <_svfiprintf_r+0x4c>
 800507a:	4a40      	ldr	r2, [pc, #256]	; (800517c <_svfiprintf_r+0x1dc>)
 800507c:	463d      	mov	r5, r7
 800507e:	1a80      	subs	r0, r0, r2
 8005080:	fa0b f000 	lsl.w	r0, fp, r0
 8005084:	4318      	orrs	r0, r3
 8005086:	9004      	str	r0, [sp, #16]
 8005088:	e7d3      	b.n	8005032 <_svfiprintf_r+0x92>
 800508a:	9a03      	ldr	r2, [sp, #12]
 800508c:	1d11      	adds	r1, r2, #4
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	9103      	str	r1, [sp, #12]
 8005092:	2a00      	cmp	r2, #0
 8005094:	db01      	blt.n	800509a <_svfiprintf_r+0xfa>
 8005096:	9207      	str	r2, [sp, #28]
 8005098:	e004      	b.n	80050a4 <_svfiprintf_r+0x104>
 800509a:	4252      	negs	r2, r2
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	9207      	str	r2, [sp, #28]
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	783b      	ldrb	r3, [r7, #0]
 80050a6:	2b2e      	cmp	r3, #46	; 0x2e
 80050a8:	d10c      	bne.n	80050c4 <_svfiprintf_r+0x124>
 80050aa:	787b      	ldrb	r3, [r7, #1]
 80050ac:	2b2a      	cmp	r3, #42	; 0x2a
 80050ae:	d133      	bne.n	8005118 <_svfiprintf_r+0x178>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	3702      	adds	r7, #2
 80050b4:	1d1a      	adds	r2, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	9203      	str	r2, [sp, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfb8      	it	lt
 80050be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	4d2e      	ldr	r5, [pc, #184]	; (8005180 <_svfiprintf_r+0x1e0>)
 80050c6:	2203      	movs	r2, #3
 80050c8:	7839      	ldrb	r1, [r7, #0]
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 fea0 	bl	8005e10 <memchr>
 80050d0:	b138      	cbz	r0, 80050e2 <_svfiprintf_r+0x142>
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	1b40      	subs	r0, r0, r5
 80050d6:	fa03 f000 	lsl.w	r0, r3, r0
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	3701      	adds	r7, #1
 80050de:	4303      	orrs	r3, r0
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	7839      	ldrb	r1, [r7, #0]
 80050e4:	2206      	movs	r2, #6
 80050e6:	4827      	ldr	r0, [pc, #156]	; (8005184 <_svfiprintf_r+0x1e4>)
 80050e8:	1c7e      	adds	r6, r7, #1
 80050ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ee:	f000 fe8f 	bl	8005e10 <memchr>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d038      	beq.n	8005168 <_svfiprintf_r+0x1c8>
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <_svfiprintf_r+0x1e8>)
 80050f8:	bb13      	cbnz	r3, 8005140 <_svfiprintf_r+0x1a0>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	3307      	adds	r3, #7
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	3308      	adds	r3, #8
 8005104:	9303      	str	r3, [sp, #12]
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	444b      	add	r3, r9
 800510a:	9309      	str	r3, [sp, #36]	; 0x24
 800510c:	e76d      	b.n	8004fea <_svfiprintf_r+0x4a>
 800510e:	fb05 3202 	mla	r2, r5, r2, r3
 8005112:	2001      	movs	r0, #1
 8005114:	460f      	mov	r7, r1
 8005116:	e7a6      	b.n	8005066 <_svfiprintf_r+0xc6>
 8005118:	2300      	movs	r3, #0
 800511a:	250a      	movs	r5, #10
 800511c:	4619      	mov	r1, r3
 800511e:	3701      	adds	r7, #1
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	4638      	mov	r0, r7
 8005124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005128:	3a30      	subs	r2, #48	; 0x30
 800512a:	2a09      	cmp	r2, #9
 800512c:	d903      	bls.n	8005136 <_svfiprintf_r+0x196>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0c8      	beq.n	80050c4 <_svfiprintf_r+0x124>
 8005132:	9105      	str	r1, [sp, #20]
 8005134:	e7c6      	b.n	80050c4 <_svfiprintf_r+0x124>
 8005136:	fb05 2101 	mla	r1, r5, r1, r2
 800513a:	2301      	movs	r3, #1
 800513c:	4607      	mov	r7, r0
 800513e:	e7f0      	b.n	8005122 <_svfiprintf_r+0x182>
 8005140:	ab03      	add	r3, sp, #12
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	4622      	mov	r2, r4
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <_svfiprintf_r+0x1ec>)
 8005148:	a904      	add	r1, sp, #16
 800514a:	4640      	mov	r0, r8
 800514c:	f3af 8000 	nop.w
 8005150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005154:	4681      	mov	r9, r0
 8005156:	d1d6      	bne.n	8005106 <_svfiprintf_r+0x166>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	065b      	lsls	r3, r3, #25
 800515c:	f53f af35 	bmi.w	8004fca <_svfiprintf_r+0x2a>
 8005160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005162:	b01d      	add	sp, #116	; 0x74
 8005164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005168:	ab03      	add	r3, sp, #12
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4622      	mov	r2, r4
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <_svfiprintf_r+0x1ec>)
 8005170:	a904      	add	r1, sp, #16
 8005172:	4640      	mov	r0, r8
 8005174:	f000 fa2c 	bl	80055d0 <_printf_i>
 8005178:	e7ea      	b.n	8005150 <_svfiprintf_r+0x1b0>
 800517a:	bf00      	nop
 800517c:	080062d8 	.word	0x080062d8
 8005180:	080062de 	.word	0x080062de
 8005184:	080062e2 	.word	0x080062e2
 8005188:	00000000 	.word	0x00000000
 800518c:	08004eed 	.word	0x08004eed

08005190 <_sungetc_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	1c4b      	adds	r3, r1, #1
 8005194:	4614      	mov	r4, r2
 8005196:	d103      	bne.n	80051a0 <_sungetc_r+0x10>
 8005198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800519c:	4628      	mov	r0, r5
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	8993      	ldrh	r3, [r2, #12]
 80051a2:	b2cd      	uxtb	r5, r1
 80051a4:	f023 0320 	bic.w	r3, r3, #32
 80051a8:	8193      	strh	r3, [r2, #12]
 80051aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	b18b      	cbz	r3, 80051d4 <_sungetc_r+0x44>
 80051b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b2:	4293      	cmp	r3, r2
 80051b4:	dd08      	ble.n	80051c8 <_sungetc_r+0x38>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	6022      	str	r2, [r4, #0]
 80051bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051c0:	6863      	ldr	r3, [r4, #4]
 80051c2:	3301      	adds	r3, #1
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	e7e9      	b.n	800519c <_sungetc_r+0xc>
 80051c8:	4621      	mov	r1, r4
 80051ca:	f000 fdc5 	bl	8005d58 <__submore>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d0f1      	beq.n	80051b6 <_sungetc_r+0x26>
 80051d2:	e7e1      	b.n	8005198 <_sungetc_r+0x8>
 80051d4:	6921      	ldr	r1, [r4, #16]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	b151      	cbz	r1, 80051f0 <_sungetc_r+0x60>
 80051da:	4299      	cmp	r1, r3
 80051dc:	d208      	bcs.n	80051f0 <_sungetc_r+0x60>
 80051de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80051e2:	42a9      	cmp	r1, r5
 80051e4:	d104      	bne.n	80051f0 <_sungetc_r+0x60>
 80051e6:	3b01      	subs	r3, #1
 80051e8:	3201      	adds	r2, #1
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	6062      	str	r2, [r4, #4]
 80051ee:	e7d5      	b.n	800519c <_sungetc_r+0xc>
 80051f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80051f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051f8:	6363      	str	r3, [r4, #52]	; 0x34
 80051fa:	2303      	movs	r3, #3
 80051fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80051fe:	4623      	mov	r3, r4
 8005200:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	e7dc      	b.n	80051c4 <_sungetc_r+0x34>

0800520a <__ssrefill_r>:
 800520a:	b510      	push	{r4, lr}
 800520c:	460c      	mov	r4, r1
 800520e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005210:	b169      	cbz	r1, 800522e <__ssrefill_r+0x24>
 8005212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005216:	4299      	cmp	r1, r3
 8005218:	d001      	beq.n	800521e <__ssrefill_r+0x14>
 800521a:	f7ff fdc1 	bl	8004da0 <_free_r>
 800521e:	2000      	movs	r0, #0
 8005220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005222:	6360      	str	r0, [r4, #52]	; 0x34
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	b113      	cbz	r3, 800522e <__ssrefill_r+0x24>
 8005228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	bd10      	pop	{r4, pc}
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	e7f3      	b.n	800522c <__ssrefill_r+0x22>

08005244 <__ssvfiscanf_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	460c      	mov	r4, r1
 800524a:	2100      	movs	r1, #0
 800524c:	4606      	mov	r6, r0
 800524e:	4692      	mov	sl, r2
 8005250:	270a      	movs	r7, #10
 8005252:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005256:	9144      	str	r1, [sp, #272]	; 0x110
 8005258:	9145      	str	r1, [sp, #276]	; 0x114
 800525a:	499e      	ldr	r1, [pc, #632]	; (80054d4 <__ssvfiscanf_r+0x290>)
 800525c:	f10d 0804 	add.w	r8, sp, #4
 8005260:	91a0      	str	r1, [sp, #640]	; 0x280
 8005262:	499d      	ldr	r1, [pc, #628]	; (80054d8 <__ssvfiscanf_r+0x294>)
 8005264:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80054dc <__ssvfiscanf_r+0x298>
 8005268:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800526c:	91a1      	str	r1, [sp, #644]	; 0x284
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	f89a 3000 	ldrb.w	r3, [sl]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 812a 	beq.w	80054ce <__ssvfiscanf_r+0x28a>
 800527a:	4655      	mov	r5, sl
 800527c:	f000 fda8 	bl	8005dd0 <__locale_ctype_ptr>
 8005280:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005284:	4458      	add	r0, fp
 8005286:	7843      	ldrb	r3, [r0, #1]
 8005288:	f013 0308 	ands.w	r3, r3, #8
 800528c:	d01c      	beq.n	80052c8 <__ssvfiscanf_r+0x84>
 800528e:	6863      	ldr	r3, [r4, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd12      	ble.n	80052ba <__ssvfiscanf_r+0x76>
 8005294:	f000 fd9c 	bl	8005dd0 <__locale_ctype_ptr>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	4410      	add	r0, r2
 800529e:	7842      	ldrb	r2, [r0, #1]
 80052a0:	0712      	lsls	r2, r2, #28
 80052a2:	d401      	bmi.n	80052a8 <__ssvfiscanf_r+0x64>
 80052a4:	46aa      	mov	sl, r5
 80052a6:	e7e3      	b.n	8005270 <__ssvfiscanf_r+0x2c>
 80052a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052aa:	3301      	adds	r3, #1
 80052ac:	3201      	adds	r2, #1
 80052ae:	9245      	str	r2, [sp, #276]	; 0x114
 80052b0:	6862      	ldr	r2, [r4, #4]
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	3a01      	subs	r2, #1
 80052b6:	6062      	str	r2, [r4, #4]
 80052b8:	e7e9      	b.n	800528e <__ssvfiscanf_r+0x4a>
 80052ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052bc:	4621      	mov	r1, r4
 80052be:	4630      	mov	r0, r6
 80052c0:	4798      	blx	r3
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0e6      	beq.n	8005294 <__ssvfiscanf_r+0x50>
 80052c6:	e7ed      	b.n	80052a4 <__ssvfiscanf_r+0x60>
 80052c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80052cc:	f040 8082 	bne.w	80053d4 <__ssvfiscanf_r+0x190>
 80052d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80052d2:	9341      	str	r3, [sp, #260]	; 0x104
 80052d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80052d8:	2b2a      	cmp	r3, #42	; 0x2a
 80052da:	d103      	bne.n	80052e4 <__ssvfiscanf_r+0xa0>
 80052dc:	2310      	movs	r3, #16
 80052de:	f10a 0502 	add.w	r5, sl, #2
 80052e2:	9341      	str	r3, [sp, #260]	; 0x104
 80052e4:	46aa      	mov	sl, r5
 80052e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80052ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80052ee:	2a09      	cmp	r2, #9
 80052f0:	d922      	bls.n	8005338 <__ssvfiscanf_r+0xf4>
 80052f2:	2203      	movs	r2, #3
 80052f4:	4879      	ldr	r0, [pc, #484]	; (80054dc <__ssvfiscanf_r+0x298>)
 80052f6:	f000 fd8b 	bl	8005e10 <memchr>
 80052fa:	b138      	cbz	r0, 800530c <__ssvfiscanf_r+0xc8>
 80052fc:	eba0 0309 	sub.w	r3, r0, r9
 8005300:	2001      	movs	r0, #1
 8005302:	46aa      	mov	sl, r5
 8005304:	4098      	lsls	r0, r3
 8005306:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005308:	4318      	orrs	r0, r3
 800530a:	9041      	str	r0, [sp, #260]	; 0x104
 800530c:	f89a 3000 	ldrb.w	r3, [sl]
 8005310:	f10a 0501 	add.w	r5, sl, #1
 8005314:	2b67      	cmp	r3, #103	; 0x67
 8005316:	d82b      	bhi.n	8005370 <__ssvfiscanf_r+0x12c>
 8005318:	2b65      	cmp	r3, #101	; 0x65
 800531a:	f080 809f 	bcs.w	800545c <__ssvfiscanf_r+0x218>
 800531e:	2b47      	cmp	r3, #71	; 0x47
 8005320:	d810      	bhi.n	8005344 <__ssvfiscanf_r+0x100>
 8005322:	2b45      	cmp	r3, #69	; 0x45
 8005324:	f080 809a 	bcs.w	800545c <__ssvfiscanf_r+0x218>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d06c      	beq.n	8005406 <__ssvfiscanf_r+0x1c2>
 800532c:	2b25      	cmp	r3, #37	; 0x25
 800532e:	d051      	beq.n	80053d4 <__ssvfiscanf_r+0x190>
 8005330:	2303      	movs	r3, #3
 8005332:	9742      	str	r7, [sp, #264]	; 0x108
 8005334:	9347      	str	r3, [sp, #284]	; 0x11c
 8005336:	e027      	b.n	8005388 <__ssvfiscanf_r+0x144>
 8005338:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800533a:	fb07 1303 	mla	r3, r7, r3, r1
 800533e:	3b30      	subs	r3, #48	; 0x30
 8005340:	9343      	str	r3, [sp, #268]	; 0x10c
 8005342:	e7cf      	b.n	80052e4 <__ssvfiscanf_r+0xa0>
 8005344:	2b5b      	cmp	r3, #91	; 0x5b
 8005346:	d06a      	beq.n	800541e <__ssvfiscanf_r+0x1da>
 8005348:	d80c      	bhi.n	8005364 <__ssvfiscanf_r+0x120>
 800534a:	2b58      	cmp	r3, #88	; 0x58
 800534c:	d1f0      	bne.n	8005330 <__ssvfiscanf_r+0xec>
 800534e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	9241      	str	r2, [sp, #260]	; 0x104
 8005356:	2210      	movs	r2, #16
 8005358:	9242      	str	r2, [sp, #264]	; 0x108
 800535a:	2b6e      	cmp	r3, #110	; 0x6e
 800535c:	bf8c      	ite	hi
 800535e:	2304      	movhi	r3, #4
 8005360:	2303      	movls	r3, #3
 8005362:	e010      	b.n	8005386 <__ssvfiscanf_r+0x142>
 8005364:	2b63      	cmp	r3, #99	; 0x63
 8005366:	d065      	beq.n	8005434 <__ssvfiscanf_r+0x1f0>
 8005368:	2b64      	cmp	r3, #100	; 0x64
 800536a:	d1e1      	bne.n	8005330 <__ssvfiscanf_r+0xec>
 800536c:	9742      	str	r7, [sp, #264]	; 0x108
 800536e:	e7f4      	b.n	800535a <__ssvfiscanf_r+0x116>
 8005370:	2b70      	cmp	r3, #112	; 0x70
 8005372:	d04b      	beq.n	800540c <__ssvfiscanf_r+0x1c8>
 8005374:	d826      	bhi.n	80053c4 <__ssvfiscanf_r+0x180>
 8005376:	2b6e      	cmp	r3, #110	; 0x6e
 8005378:	d062      	beq.n	8005440 <__ssvfiscanf_r+0x1fc>
 800537a:	d84c      	bhi.n	8005416 <__ssvfiscanf_r+0x1d2>
 800537c:	2b69      	cmp	r3, #105	; 0x69
 800537e:	d1d7      	bne.n	8005330 <__ssvfiscanf_r+0xec>
 8005380:	2300      	movs	r3, #0
 8005382:	9342      	str	r3, [sp, #264]	; 0x108
 8005384:	2303      	movs	r3, #3
 8005386:	9347      	str	r3, [sp, #284]	; 0x11c
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd68      	ble.n	8005460 <__ssvfiscanf_r+0x21c>
 800538e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005390:	0659      	lsls	r1, r3, #25
 8005392:	d407      	bmi.n	80053a4 <__ssvfiscanf_r+0x160>
 8005394:	f000 fd1c 	bl	8005dd0 <__locale_ctype_ptr>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	4410      	add	r0, r2
 800539e:	7842      	ldrb	r2, [r0, #1]
 80053a0:	0712      	lsls	r2, r2, #28
 80053a2:	d464      	bmi.n	800546e <__ssvfiscanf_r+0x22a>
 80053a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	dc73      	bgt.n	8005492 <__ssvfiscanf_r+0x24e>
 80053aa:	466b      	mov	r3, sp
 80053ac:	4622      	mov	r2, r4
 80053ae:	a941      	add	r1, sp, #260	; 0x104
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 fa1f 	bl	80057f4 <_scanf_chars>
 80053b6:	2801      	cmp	r0, #1
 80053b8:	f000 8089 	beq.w	80054ce <__ssvfiscanf_r+0x28a>
 80053bc:	2802      	cmp	r0, #2
 80053be:	f47f af71 	bne.w	80052a4 <__ssvfiscanf_r+0x60>
 80053c2:	e01d      	b.n	8005400 <__ssvfiscanf_r+0x1bc>
 80053c4:	2b75      	cmp	r3, #117	; 0x75
 80053c6:	d0d1      	beq.n	800536c <__ssvfiscanf_r+0x128>
 80053c8:	2b78      	cmp	r3, #120	; 0x78
 80053ca:	d0c0      	beq.n	800534e <__ssvfiscanf_r+0x10a>
 80053cc:	2b73      	cmp	r3, #115	; 0x73
 80053ce:	d1af      	bne.n	8005330 <__ssvfiscanf_r+0xec>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e7d8      	b.n	8005386 <__ssvfiscanf_r+0x142>
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dd0c      	ble.n	80053f4 <__ssvfiscanf_r+0x1b0>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	455a      	cmp	r2, fp
 80053e0:	d175      	bne.n	80054ce <__ssvfiscanf_r+0x28a>
 80053e2:	3301      	adds	r3, #1
 80053e4:	6862      	ldr	r2, [r4, #4]
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80053ea:	3a01      	subs	r2, #1
 80053ec:	3301      	adds	r3, #1
 80053ee:	6062      	str	r2, [r4, #4]
 80053f0:	9345      	str	r3, [sp, #276]	; 0x114
 80053f2:	e757      	b.n	80052a4 <__ssvfiscanf_r+0x60>
 80053f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80053f6:	4621      	mov	r1, r4
 80053f8:	4630      	mov	r0, r6
 80053fa:	4798      	blx	r3
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d0ec      	beq.n	80053da <__ssvfiscanf_r+0x196>
 8005400:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005402:	2800      	cmp	r0, #0
 8005404:	d159      	bne.n	80054ba <__ssvfiscanf_r+0x276>
 8005406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540a:	e05c      	b.n	80054c6 <__ssvfiscanf_r+0x282>
 800540c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800540e:	f042 0220 	orr.w	r2, r2, #32
 8005412:	9241      	str	r2, [sp, #260]	; 0x104
 8005414:	e79b      	b.n	800534e <__ssvfiscanf_r+0x10a>
 8005416:	2308      	movs	r3, #8
 8005418:	9342      	str	r3, [sp, #264]	; 0x108
 800541a:	2304      	movs	r3, #4
 800541c:	e7b3      	b.n	8005386 <__ssvfiscanf_r+0x142>
 800541e:	4629      	mov	r1, r5
 8005420:	4640      	mov	r0, r8
 8005422:	f000 fb4f 	bl	8005ac4 <__sccl>
 8005426:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005428:	4605      	mov	r5, r0
 800542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542e:	9341      	str	r3, [sp, #260]	; 0x104
 8005430:	2301      	movs	r3, #1
 8005432:	e7a8      	b.n	8005386 <__ssvfiscanf_r+0x142>
 8005434:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800543a:	9341      	str	r3, [sp, #260]	; 0x104
 800543c:	2300      	movs	r3, #0
 800543e:	e7a2      	b.n	8005386 <__ssvfiscanf_r+0x142>
 8005440:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005442:	06c3      	lsls	r3, r0, #27
 8005444:	f53f af2e 	bmi.w	80052a4 <__ssvfiscanf_r+0x60>
 8005448:	9b00      	ldr	r3, [sp, #0]
 800544a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	9100      	str	r1, [sp, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	07c0      	lsls	r0, r0, #31
 8005454:	bf4c      	ite	mi
 8005456:	801a      	strhmi	r2, [r3, #0]
 8005458:	601a      	strpl	r2, [r3, #0]
 800545a:	e723      	b.n	80052a4 <__ssvfiscanf_r+0x60>
 800545c:	2305      	movs	r3, #5
 800545e:	e792      	b.n	8005386 <__ssvfiscanf_r+0x142>
 8005460:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005462:	4621      	mov	r1, r4
 8005464:	4630      	mov	r0, r6
 8005466:	4798      	blx	r3
 8005468:	2800      	cmp	r0, #0
 800546a:	d090      	beq.n	800538e <__ssvfiscanf_r+0x14a>
 800546c:	e7c8      	b.n	8005400 <__ssvfiscanf_r+0x1bc>
 800546e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005470:	3201      	adds	r2, #1
 8005472:	9245      	str	r2, [sp, #276]	; 0x114
 8005474:	6862      	ldr	r2, [r4, #4]
 8005476:	3a01      	subs	r2, #1
 8005478:	2a00      	cmp	r2, #0
 800547a:	6062      	str	r2, [r4, #4]
 800547c:	dd02      	ble.n	8005484 <__ssvfiscanf_r+0x240>
 800547e:	3301      	adds	r3, #1
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e787      	b.n	8005394 <__ssvfiscanf_r+0x150>
 8005484:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005486:	4621      	mov	r1, r4
 8005488:	4630      	mov	r0, r6
 800548a:	4798      	blx	r3
 800548c:	2800      	cmp	r0, #0
 800548e:	d081      	beq.n	8005394 <__ssvfiscanf_r+0x150>
 8005490:	e7b6      	b.n	8005400 <__ssvfiscanf_r+0x1bc>
 8005492:	2b04      	cmp	r3, #4
 8005494:	dc06      	bgt.n	80054a4 <__ssvfiscanf_r+0x260>
 8005496:	466b      	mov	r3, sp
 8005498:	4622      	mov	r2, r4
 800549a:	a941      	add	r1, sp, #260	; 0x104
 800549c:	4630      	mov	r0, r6
 800549e:	f000 fa0b 	bl	80058b8 <_scanf_i>
 80054a2:	e788      	b.n	80053b6 <__ssvfiscanf_r+0x172>
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <__ssvfiscanf_r+0x29c>)
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f43f aefc 	beq.w	80052a4 <__ssvfiscanf_r+0x60>
 80054ac:	466b      	mov	r3, sp
 80054ae:	4622      	mov	r2, r4
 80054b0:	a941      	add	r1, sp, #260	; 0x104
 80054b2:	4630      	mov	r0, r6
 80054b4:	f3af 8000 	nop.w
 80054b8:	e77d      	b.n	80053b6 <__ssvfiscanf_r+0x172>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054c0:	bf18      	it	ne
 80054c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80054c6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80054d0:	e7f9      	b.n	80054c6 <__ssvfiscanf_r+0x282>
 80054d2:	bf00      	nop
 80054d4:	08005191 	.word	0x08005191
 80054d8:	0800520b 	.word	0x0800520b
 80054dc:	080062de 	.word	0x080062de
 80054e0:	00000000 	.word	0x00000000

080054e4 <_printf_common>:
 80054e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	4691      	mov	r9, r2
 80054ea:	461f      	mov	r7, r3
 80054ec:	688a      	ldr	r2, [r1, #8]
 80054ee:	690b      	ldr	r3, [r1, #16]
 80054f0:	4606      	mov	r6, r0
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bfb8      	it	lt
 80054f6:	4613      	movlt	r3, r2
 80054f8:	f8c9 3000 	str.w	r3, [r9]
 80054fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005500:	460c      	mov	r4, r1
 8005502:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005506:	b112      	cbz	r2, 800550e <_printf_common+0x2a>
 8005508:	3301      	adds	r3, #1
 800550a:	f8c9 3000 	str.w	r3, [r9]
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	0699      	lsls	r1, r3, #26
 8005512:	bf42      	ittt	mi
 8005514:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005518:	3302      	addmi	r3, #2
 800551a:	f8c9 3000 	strmi.w	r3, [r9]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	f015 0506 	ands.w	r5, r5, #6
 8005524:	d107      	bne.n	8005536 <_printf_common+0x52>
 8005526:	f104 0a19 	add.w	sl, r4, #25
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	f8d9 2000 	ldr.w	r2, [r9]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	42ab      	cmp	r3, r5
 8005534:	dc29      	bgt.n	800558a <_printf_common+0xa6>
 8005536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	3300      	adds	r3, #0
 800553e:	bf18      	it	ne
 8005540:	2301      	movne	r3, #1
 8005542:	0692      	lsls	r2, r2, #26
 8005544:	d42e      	bmi.n	80055a4 <_printf_common+0xc0>
 8005546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800554a:	4639      	mov	r1, r7
 800554c:	4630      	mov	r0, r6
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d021      	beq.n	8005598 <_printf_common+0xb4>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	68e5      	ldr	r5, [r4, #12]
 8005558:	f003 0306 	and.w	r3, r3, #6
 800555c:	2b04      	cmp	r3, #4
 800555e:	bf18      	it	ne
 8005560:	2500      	movne	r5, #0
 8005562:	f8d9 2000 	ldr.w	r2, [r9]
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	bf08      	it	eq
 800556c:	1aad      	subeq	r5, r5, r2
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	bf08      	it	eq
 8005574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005578:	4293      	cmp	r3, r2
 800557a:	bfc4      	itt	gt
 800557c:	1a9b      	subgt	r3, r3, r2
 800557e:	18ed      	addgt	r5, r5, r3
 8005580:	341a      	adds	r4, #26
 8005582:	454d      	cmp	r5, r9
 8005584:	d11a      	bne.n	80055bc <_printf_common+0xd8>
 8005586:	2000      	movs	r0, #0
 8005588:	e008      	b.n	800559c <_printf_common+0xb8>
 800558a:	2301      	movs	r3, #1
 800558c:	4652      	mov	r2, sl
 800558e:	4639      	mov	r1, r7
 8005590:	4630      	mov	r0, r6
 8005592:	47c0      	blx	r8
 8005594:	3001      	adds	r0, #1
 8005596:	d103      	bne.n	80055a0 <_printf_common+0xbc>
 8005598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a0:	3501      	adds	r5, #1
 80055a2:	e7c2      	b.n	800552a <_printf_common+0x46>
 80055a4:	2030      	movs	r0, #48	; 0x30
 80055a6:	18e1      	adds	r1, r4, r3
 80055a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055b2:	4422      	add	r2, r4
 80055b4:	3302      	adds	r3, #2
 80055b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055ba:	e7c4      	b.n	8005546 <_printf_common+0x62>
 80055bc:	2301      	movs	r3, #1
 80055be:	4622      	mov	r2, r4
 80055c0:	4639      	mov	r1, r7
 80055c2:	4630      	mov	r0, r6
 80055c4:	47c0      	blx	r8
 80055c6:	3001      	adds	r0, #1
 80055c8:	d0e6      	beq.n	8005598 <_printf_common+0xb4>
 80055ca:	f109 0901 	add.w	r9, r9, #1
 80055ce:	e7d8      	b.n	8005582 <_printf_common+0x9e>

080055d0 <_printf_i>:
 80055d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055d8:	460c      	mov	r4, r1
 80055da:	7e09      	ldrb	r1, [r1, #24]
 80055dc:	b085      	sub	sp, #20
 80055de:	296e      	cmp	r1, #110	; 0x6e
 80055e0:	4617      	mov	r7, r2
 80055e2:	4606      	mov	r6, r0
 80055e4:	4698      	mov	r8, r3
 80055e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055e8:	f000 80b3 	beq.w	8005752 <_printf_i+0x182>
 80055ec:	d822      	bhi.n	8005634 <_printf_i+0x64>
 80055ee:	2963      	cmp	r1, #99	; 0x63
 80055f0:	d036      	beq.n	8005660 <_printf_i+0x90>
 80055f2:	d80a      	bhi.n	800560a <_printf_i+0x3a>
 80055f4:	2900      	cmp	r1, #0
 80055f6:	f000 80b9 	beq.w	800576c <_printf_i+0x19c>
 80055fa:	2958      	cmp	r1, #88	; 0x58
 80055fc:	f000 8083 	beq.w	8005706 <_printf_i+0x136>
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005608:	e032      	b.n	8005670 <_printf_i+0xa0>
 800560a:	2964      	cmp	r1, #100	; 0x64
 800560c:	d001      	beq.n	8005612 <_printf_i+0x42>
 800560e:	2969      	cmp	r1, #105	; 0x69
 8005610:	d1f6      	bne.n	8005600 <_printf_i+0x30>
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	0605      	lsls	r5, r0, #24
 8005618:	f103 0104 	add.w	r1, r3, #4
 800561c:	d52a      	bpl.n	8005674 <_printf_i+0xa4>
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	da03      	bge.n	800562e <_printf_i+0x5e>
 8005626:	222d      	movs	r2, #45	; 0x2d
 8005628:	425b      	negs	r3, r3
 800562a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800562e:	486f      	ldr	r0, [pc, #444]	; (80057ec <_printf_i+0x21c>)
 8005630:	220a      	movs	r2, #10
 8005632:	e039      	b.n	80056a8 <_printf_i+0xd8>
 8005634:	2973      	cmp	r1, #115	; 0x73
 8005636:	f000 809d 	beq.w	8005774 <_printf_i+0x1a4>
 800563a:	d808      	bhi.n	800564e <_printf_i+0x7e>
 800563c:	296f      	cmp	r1, #111	; 0x6f
 800563e:	d020      	beq.n	8005682 <_printf_i+0xb2>
 8005640:	2970      	cmp	r1, #112	; 0x70
 8005642:	d1dd      	bne.n	8005600 <_printf_i+0x30>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	e003      	b.n	8005656 <_printf_i+0x86>
 800564e:	2975      	cmp	r1, #117	; 0x75
 8005650:	d017      	beq.n	8005682 <_printf_i+0xb2>
 8005652:	2978      	cmp	r1, #120	; 0x78
 8005654:	d1d4      	bne.n	8005600 <_printf_i+0x30>
 8005656:	2378      	movs	r3, #120	; 0x78
 8005658:	4865      	ldr	r0, [pc, #404]	; (80057f0 <_printf_i+0x220>)
 800565a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800565e:	e055      	b.n	800570c <_printf_i+0x13c>
 8005660:	6813      	ldr	r3, [r2, #0]
 8005662:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005666:	1d19      	adds	r1, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6011      	str	r1, [r2, #0]
 800566c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005670:	2301      	movs	r3, #1
 8005672:	e08c      	b.n	800578e <_printf_i+0x1be>
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800567a:	6011      	str	r1, [r2, #0]
 800567c:	bf18      	it	ne
 800567e:	b21b      	sxthne	r3, r3
 8005680:	e7cf      	b.n	8005622 <_printf_i+0x52>
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	1d18      	adds	r0, r3, #4
 8005688:	6010      	str	r0, [r2, #0]
 800568a:	0628      	lsls	r0, r5, #24
 800568c:	d501      	bpl.n	8005692 <_printf_i+0xc2>
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	e002      	b.n	8005698 <_printf_i+0xc8>
 8005692:	0668      	lsls	r0, r5, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0xbe>
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	296f      	cmp	r1, #111	; 0x6f
 800569a:	bf14      	ite	ne
 800569c:	220a      	movne	r2, #10
 800569e:	2208      	moveq	r2, #8
 80056a0:	4852      	ldr	r0, [pc, #328]	; (80057ec <_printf_i+0x21c>)
 80056a2:	2100      	movs	r1, #0
 80056a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056a8:	6865      	ldr	r5, [r4, #4]
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	60a5      	str	r5, [r4, #8]
 80056ae:	f2c0 8095 	blt.w	80057dc <_printf_i+0x20c>
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	f021 0104 	bic.w	r1, r1, #4
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <_printf_i+0x16a>
 80056be:	2d00      	cmp	r5, #0
 80056c0:	f040 808e 	bne.w	80057e0 <_printf_i+0x210>
 80056c4:	4665      	mov	r5, ip
 80056c6:	2a08      	cmp	r2, #8
 80056c8:	d10b      	bne.n	80056e2 <_printf_i+0x112>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	07db      	lsls	r3, r3, #31
 80056ce:	d508      	bpl.n	80056e2 <_printf_i+0x112>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bfde      	ittt	le
 80056d8:	2330      	movle	r3, #48	; 0x30
 80056da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80056e2:	ebac 0305 	sub.w	r3, ip, r5
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	f8cd 8000 	str.w	r8, [sp]
 80056ec:	463b      	mov	r3, r7
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fef6 	bl	80054e4 <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14d      	bne.n	8005798 <_printf_i+0x1c8>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005700:	b005      	add	sp, #20
 8005702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005706:	4839      	ldr	r0, [pc, #228]	; (80057ec <_printf_i+0x21c>)
 8005708:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800570c:	6813      	ldr	r3, [r2, #0]
 800570e:	6821      	ldr	r1, [r4, #0]
 8005710:	1d1d      	adds	r5, r3, #4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6015      	str	r5, [r2, #0]
 8005716:	060a      	lsls	r2, r1, #24
 8005718:	d50b      	bpl.n	8005732 <_printf_i+0x162>
 800571a:	07ca      	lsls	r2, r1, #31
 800571c:	bf44      	itt	mi
 800571e:	f041 0120 	orrmi.w	r1, r1, #32
 8005722:	6021      	strmi	r1, [r4, #0]
 8005724:	b91b      	cbnz	r3, 800572e <_printf_i+0x15e>
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	f022 0220 	bic.w	r2, r2, #32
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	e7b7      	b.n	80056a2 <_printf_i+0xd2>
 8005732:	064d      	lsls	r5, r1, #25
 8005734:	bf48      	it	mi
 8005736:	b29b      	uxthmi	r3, r3
 8005738:	e7ef      	b.n	800571a <_printf_i+0x14a>
 800573a:	4665      	mov	r5, ip
 800573c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005740:	fb02 3311 	mls	r3, r2, r1, r3
 8005744:	5cc3      	ldrb	r3, [r0, r3]
 8005746:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800574a:	460b      	mov	r3, r1
 800574c:	2900      	cmp	r1, #0
 800574e:	d1f5      	bne.n	800573c <_printf_i+0x16c>
 8005750:	e7b9      	b.n	80056c6 <_printf_i+0xf6>
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	1d18      	adds	r0, r3, #4
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	0628      	lsls	r0, r5, #24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	d501      	bpl.n	8005766 <_printf_i+0x196>
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x19c>
 8005766:	066a      	lsls	r2, r5, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x192>
 800576a:	8019      	strh	r1, [r3, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	4665      	mov	r5, ip
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	e7b9      	b.n	80056e8 <_printf_i+0x118>
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	1d19      	adds	r1, r3, #4
 8005778:	6011      	str	r1, [r2, #0]
 800577a:	681d      	ldr	r5, [r3, #0]
 800577c:	6862      	ldr	r2, [r4, #4]
 800577e:	2100      	movs	r1, #0
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fb45 	bl	8005e10 <memchr>
 8005786:	b108      	cbz	r0, 800578c <_printf_i+0x1bc>
 8005788:	1b40      	subs	r0, r0, r5
 800578a:	6060      	str	r0, [r4, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005796:	e7a7      	b.n	80056e8 <_printf_i+0x118>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	462a      	mov	r2, r5
 800579c:	4639      	mov	r1, r7
 800579e:	4630      	mov	r0, r6
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0aa      	beq.n	80056fc <_printf_i+0x12c>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	079b      	lsls	r3, r3, #30
 80057aa:	d413      	bmi.n	80057d4 <_printf_i+0x204>
 80057ac:	68e0      	ldr	r0, [r4, #12]
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	4298      	cmp	r0, r3
 80057b2:	bfb8      	it	lt
 80057b4:	4618      	movlt	r0, r3
 80057b6:	e7a3      	b.n	8005700 <_printf_i+0x130>
 80057b8:	2301      	movs	r3, #1
 80057ba:	464a      	mov	r2, r9
 80057bc:	4639      	mov	r1, r7
 80057be:	4630      	mov	r0, r6
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d09a      	beq.n	80056fc <_printf_i+0x12c>
 80057c6:	3501      	adds	r5, #1
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	42ab      	cmp	r3, r5
 80057d0:	dcf2      	bgt.n	80057b8 <_printf_i+0x1e8>
 80057d2:	e7eb      	b.n	80057ac <_printf_i+0x1dc>
 80057d4:	2500      	movs	r5, #0
 80057d6:	f104 0919 	add.w	r9, r4, #25
 80057da:	e7f5      	b.n	80057c8 <_printf_i+0x1f8>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1ac      	bne.n	800573a <_printf_i+0x16a>
 80057e0:	7803      	ldrb	r3, [r0, #0]
 80057e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ea:	e76c      	b.n	80056c6 <_printf_i+0xf6>
 80057ec:	080062e9 	.word	0x080062e9
 80057f0:	080062fa 	.word	0x080062fa

080057f4 <_scanf_chars>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	4615      	mov	r5, r2
 80057fa:	688a      	ldr	r2, [r1, #8]
 80057fc:	4680      	mov	r8, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b932      	cbnz	r2, 8005810 <_scanf_chars+0x1c>
 8005802:	698a      	ldr	r2, [r1, #24]
 8005804:	2a00      	cmp	r2, #0
 8005806:	bf14      	ite	ne
 8005808:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800580c:	2201      	moveq	r2, #1
 800580e:	608a      	str	r2, [r1, #8]
 8005810:	2600      	movs	r6, #0
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	06d1      	lsls	r1, r2, #27
 8005816:	bf5f      	itttt	pl
 8005818:	681a      	ldrpl	r2, [r3, #0]
 800581a:	1d11      	addpl	r1, r2, #4
 800581c:	6019      	strpl	r1, [r3, #0]
 800581e:	6817      	ldrpl	r7, [r2, #0]
 8005820:	69a3      	ldr	r3, [r4, #24]
 8005822:	b1db      	cbz	r3, 800585c <_scanf_chars+0x68>
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <_scanf_chars+0x44>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	6962      	ldr	r2, [r4, #20]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	5cd3      	ldrb	r3, [r2, r3]
 8005830:	b9a3      	cbnz	r3, 800585c <_scanf_chars+0x68>
 8005832:	2e00      	cmp	r6, #0
 8005834:	d131      	bne.n	800589a <_scanf_chars+0xa6>
 8005836:	e006      	b.n	8005846 <_scanf_chars+0x52>
 8005838:	2b02      	cmp	r3, #2
 800583a:	d007      	beq.n	800584c <_scanf_chars+0x58>
 800583c:	2e00      	cmp	r6, #0
 800583e:	d12c      	bne.n	800589a <_scanf_chars+0xa6>
 8005840:	69a3      	ldr	r3, [r4, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d129      	bne.n	800589a <_scanf_chars+0xa6>
 8005846:	2001      	movs	r0, #1
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	f000 fac0 	bl	8005dd0 <__locale_ctype_ptr>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4418      	add	r0, r3
 8005856:	7843      	ldrb	r3, [r0, #1]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	d4ef      	bmi.n	800583c <_scanf_chars+0x48>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	3601      	adds	r6, #1
 8005860:	06da      	lsls	r2, r3, #27
 8005862:	bf5e      	ittt	pl
 8005864:	682b      	ldrpl	r3, [r5, #0]
 8005866:	781b      	ldrbpl	r3, [r3, #0]
 8005868:	703b      	strbpl	r3, [r7, #0]
 800586a:	682a      	ldr	r2, [r5, #0]
 800586c:	686b      	ldr	r3, [r5, #4]
 800586e:	f102 0201 	add.w	r2, r2, #1
 8005872:	602a      	str	r2, [r5, #0]
 8005874:	68a2      	ldr	r2, [r4, #8]
 8005876:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800587a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800587e:	606b      	str	r3, [r5, #4]
 8005880:	bf58      	it	pl
 8005882:	3701      	addpl	r7, #1
 8005884:	60a2      	str	r2, [r4, #8]
 8005886:	b142      	cbz	r2, 800589a <_scanf_chars+0xa6>
 8005888:	2b00      	cmp	r3, #0
 800588a:	dcc9      	bgt.n	8005820 <_scanf_chars+0x2c>
 800588c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	4798      	blx	r3
 8005896:	2800      	cmp	r0, #0
 8005898:	d0c2      	beq.n	8005820 <_scanf_chars+0x2c>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f013 0310 	ands.w	r3, r3, #16
 80058a0:	d105      	bne.n	80058ae <_scanf_chars+0xba>
 80058a2:	68e2      	ldr	r2, [r4, #12]
 80058a4:	3201      	adds	r2, #1
 80058a6:	60e2      	str	r2, [r4, #12]
 80058a8:	69a2      	ldr	r2, [r4, #24]
 80058aa:	b102      	cbz	r2, 80058ae <_scanf_chars+0xba>
 80058ac:	703b      	strb	r3, [r7, #0]
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	2000      	movs	r0, #0
 80058b2:	441e      	add	r6, r3
 80058b4:	6126      	str	r6, [r4, #16]
 80058b6:	e7c7      	b.n	8005848 <_scanf_chars+0x54>

080058b8 <_scanf_i>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	460c      	mov	r4, r1
 80058be:	469a      	mov	sl, r3
 80058c0:	4b74      	ldr	r3, [pc, #464]	; (8005a94 <_scanf_i+0x1dc>)
 80058c2:	b087      	sub	sp, #28
 80058c4:	4683      	mov	fp, r0
 80058c6:	4616      	mov	r6, r2
 80058c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058cc:	ab03      	add	r3, sp, #12
 80058ce:	68a7      	ldr	r7, [r4, #8]
 80058d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058d4:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <_scanf_i+0x1e0>)
 80058d6:	69a1      	ldr	r1, [r4, #24]
 80058d8:	4a70      	ldr	r2, [pc, #448]	; (8005a9c <_scanf_i+0x1e4>)
 80058da:	f104 091c 	add.w	r9, r4, #28
 80058de:	2903      	cmp	r1, #3
 80058e0:	bf08      	it	eq
 80058e2:	461a      	moveq	r2, r3
 80058e4:	1e7b      	subs	r3, r7, #1
 80058e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80058ea:	bf84      	itt	hi
 80058ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80058f0:	60a3      	strhi	r3, [r4, #8]
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	bf88      	it	hi
 80058f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80058fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	bf98      	it	ls
 8005902:	2700      	movls	r7, #0
 8005904:	464b      	mov	r3, r9
 8005906:	f04f 0800 	mov.w	r8, #0
 800590a:	9200      	str	r2, [sp, #0]
 800590c:	bf88      	it	hi
 800590e:	197f      	addhi	r7, r7, r5
 8005910:	6831      	ldr	r1, [r6, #0]
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	ab03      	add	r3, sp, #12
 8005916:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800591a:	2202      	movs	r2, #2
 800591c:	7809      	ldrb	r1, [r1, #0]
 800591e:	f000 fa77 	bl	8005e10 <memchr>
 8005922:	9b01      	ldr	r3, [sp, #4]
 8005924:	b330      	cbz	r0, 8005974 <_scanf_i+0xbc>
 8005926:	f1b8 0f01 	cmp.w	r8, #1
 800592a:	d15a      	bne.n	80059e2 <_scanf_i+0x12a>
 800592c:	6862      	ldr	r2, [r4, #4]
 800592e:	b92a      	cbnz	r2, 800593c <_scanf_i+0x84>
 8005930:	2108      	movs	r1, #8
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	6061      	str	r1, [r4, #4]
 8005936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593a:	6022      	str	r2, [r4, #0]
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	68a2      	ldr	r2, [r4, #8]
 8005946:	1e51      	subs	r1, r2, #1
 8005948:	60a1      	str	r1, [r4, #8]
 800594a:	b19a      	cbz	r2, 8005974 <_scanf_i+0xbc>
 800594c:	6832      	ldr	r2, [r6, #0]
 800594e:	1c5d      	adds	r5, r3, #1
 8005950:	1c51      	adds	r1, r2, #1
 8005952:	6031      	str	r1, [r6, #0]
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6873      	ldr	r3, [r6, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	6073      	str	r3, [r6, #4]
 8005960:	dc07      	bgt.n	8005972 <_scanf_i+0xba>
 8005962:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005966:	4631      	mov	r1, r6
 8005968:	4658      	mov	r0, fp
 800596a:	4798      	blx	r3
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 8087 	bne.w	8005a80 <_scanf_i+0x1c8>
 8005972:	462b      	mov	r3, r5
 8005974:	f108 0801 	add.w	r8, r8, #1
 8005978:	f1b8 0f03 	cmp.w	r8, #3
 800597c:	d1c8      	bne.n	8005910 <_scanf_i+0x58>
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	b90a      	cbnz	r2, 8005986 <_scanf_i+0xce>
 8005982:	220a      	movs	r2, #10
 8005984:	6062      	str	r2, [r4, #4]
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	4945      	ldr	r1, [pc, #276]	; (8005aa0 <_scanf_i+0x1e8>)
 800598a:	6960      	ldr	r0, [r4, #20]
 800598c:	1a89      	subs	r1, r1, r2
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	f000 f898 	bl	8005ac4 <__sccl>
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	461d      	mov	r5, r3
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03b      	beq.n	8005a1c <_scanf_i+0x164>
 80059a4:	6831      	ldr	r1, [r6, #0]
 80059a6:	6960      	ldr	r0, [r4, #20]
 80059a8:	f891 c000 	ldrb.w	ip, [r1]
 80059ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d033      	beq.n	8005a1c <_scanf_i+0x164>
 80059b4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80059b8:	d121      	bne.n	80059fe <_scanf_i+0x146>
 80059ba:	0510      	lsls	r0, r2, #20
 80059bc:	d51f      	bpl.n	80059fe <_scanf_i+0x146>
 80059be:	f108 0801 	add.w	r8, r8, #1
 80059c2:	b117      	cbz	r7, 80059ca <_scanf_i+0x112>
 80059c4:	3301      	adds	r3, #1
 80059c6:	3f01      	subs	r7, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6873      	ldr	r3, [r6, #4]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	6073      	str	r3, [r6, #4]
 80059d2:	dd1c      	ble.n	8005a0e <_scanf_i+0x156>
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	6033      	str	r3, [r6, #0]
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	3b01      	subs	r3, #1
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	e7dc      	b.n	800599c <_scanf_i+0xe4>
 80059e2:	f1b8 0f02 	cmp.w	r8, #2
 80059e6:	d1ad      	bne.n	8005944 <_scanf_i+0x8c>
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80059ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80059f2:	d1bf      	bne.n	8005974 <_scanf_i+0xbc>
 80059f4:	2110      	movs	r1, #16
 80059f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fa:	6061      	str	r1, [r4, #4]
 80059fc:	e7a1      	b.n	8005942 <_scanf_i+0x8a>
 80059fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005a02:	6022      	str	r2, [r4, #0]
 8005a04:	780b      	ldrb	r3, [r1, #0]
 8005a06:	3501      	adds	r5, #1
 8005a08:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005a0c:	e7dd      	b.n	80059ca <_scanf_i+0x112>
 8005a0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a12:	4631      	mov	r1, r6
 8005a14:	4658      	mov	r0, fp
 8005a16:	4798      	blx	r3
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d0de      	beq.n	80059da <_scanf_i+0x122>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	05d9      	lsls	r1, r3, #23
 8005a20:	d50c      	bpl.n	8005a3c <_scanf_i+0x184>
 8005a22:	454d      	cmp	r5, r9
 8005a24:	d908      	bls.n	8005a38 <_scanf_i+0x180>
 8005a26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a2a:	1e6f      	subs	r7, r5, #1
 8005a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a30:	4632      	mov	r2, r6
 8005a32:	4658      	mov	r0, fp
 8005a34:	4798      	blx	r3
 8005a36:	463d      	mov	r5, r7
 8005a38:	454d      	cmp	r5, r9
 8005a3a:	d029      	beq.n	8005a90 <_scanf_i+0x1d8>
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	f012 0210 	ands.w	r2, r2, #16
 8005a42:	d113      	bne.n	8005a6c <_scanf_i+0x1b4>
 8005a44:	702a      	strb	r2, [r5, #0]
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4658      	mov	r0, fp
 8005a4c:	9e00      	ldr	r6, [sp, #0]
 8005a4e:	47b0      	blx	r6
 8005a50:	f8da 3000 	ldr.w	r3, [sl]
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	f8ca 2000 	str.w	r2, [sl]
 8005a5c:	f011 0f20 	tst.w	r1, #32
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	d010      	beq.n	8005a86 <_scanf_i+0x1ce>
 8005a64:	6018      	str	r0, [r3, #0]
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60e3      	str	r3, [r4, #12]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	eba5 0509 	sub.w	r5, r5, r9
 8005a72:	44a8      	add	r8, r5
 8005a74:	6925      	ldr	r5, [r4, #16]
 8005a76:	4445      	add	r5, r8
 8005a78:	6125      	str	r5, [r4, #16]
 8005a7a:	b007      	add	sp, #28
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	f04f 0800 	mov.w	r8, #0
 8005a84:	e7ca      	b.n	8005a1c <_scanf_i+0x164>
 8005a86:	07ca      	lsls	r2, r1, #31
 8005a88:	bf4c      	ite	mi
 8005a8a:	8018      	strhmi	r0, [r3, #0]
 8005a8c:	6018      	strpl	r0, [r3, #0]
 8005a8e:	e7ea      	b.n	8005a66 <_scanf_i+0x1ae>
 8005a90:	2001      	movs	r0, #1
 8005a92:	e7f2      	b.n	8005a7a <_scanf_i+0x1c2>
 8005a94:	080062b4 	.word	0x080062b4
 8005a98:	08005c1d 	.word	0x08005c1d
 8005a9c:	08005d35 	.word	0x08005d35
 8005aa0:	0800631b 	.word	0x0800631b

08005aa4 <_sbrk_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4c05      	ldr	r4, [pc, #20]	; (8005ac0 <_sbrk_r+0x1c>)
 8005aaa:	4605      	mov	r5, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	f7fc f852 	bl	8001b58 <_sbrk>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_sbrk_r+0x1a>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_sbrk_r+0x1a>
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	2000339c 	.word	0x2000339c

08005ac4 <__sccl>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	780b      	ldrb	r3, [r1, #0]
 8005ac8:	1e44      	subs	r4, r0, #1
 8005aca:	2b5e      	cmp	r3, #94	; 0x5e
 8005acc:	bf13      	iteet	ne
 8005ace:	1c4a      	addne	r2, r1, #1
 8005ad0:	1c8a      	addeq	r2, r1, #2
 8005ad2:	784b      	ldrbeq	r3, [r1, #1]
 8005ad4:	2100      	movne	r1, #0
 8005ad6:	bf08      	it	eq
 8005ad8:	2101      	moveq	r1, #1
 8005ada:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005ade:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005ae2:	42ac      	cmp	r4, r5
 8005ae4:	d1fb      	bne.n	8005ade <__sccl+0x1a>
 8005ae6:	b913      	cbnz	r3, 8005aee <__sccl+0x2a>
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	4610      	mov	r0, r2
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	f081 0401 	eor.w	r4, r1, #1
 8005af2:	54c4      	strb	r4, [r0, r3]
 8005af4:	1c51      	adds	r1, r2, #1
 8005af6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8005afa:	1e4e      	subs	r6, r1, #1
 8005afc:	2d2d      	cmp	r5, #45	; 0x2d
 8005afe:	460a      	mov	r2, r1
 8005b00:	d006      	beq.n	8005b10 <__sccl+0x4c>
 8005b02:	2d5d      	cmp	r5, #93	; 0x5d
 8005b04:	d0f1      	beq.n	8005aea <__sccl+0x26>
 8005b06:	b90d      	cbnz	r5, 8005b0c <__sccl+0x48>
 8005b08:	4632      	mov	r2, r6
 8005b0a:	e7ee      	b.n	8005aea <__sccl+0x26>
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	e7f0      	b.n	8005af2 <__sccl+0x2e>
 8005b10:	780e      	ldrb	r6, [r1, #0]
 8005b12:	2e5d      	cmp	r6, #93	; 0x5d
 8005b14:	d0fa      	beq.n	8005b0c <__sccl+0x48>
 8005b16:	42b3      	cmp	r3, r6
 8005b18:	dcf8      	bgt.n	8005b0c <__sccl+0x48>
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	429e      	cmp	r6, r3
 8005b1e:	54c4      	strb	r4, [r0, r3]
 8005b20:	dcfb      	bgt.n	8005b1a <__sccl+0x56>
 8005b22:	3102      	adds	r1, #2
 8005b24:	e7e7      	b.n	8005af6 <__sccl+0x32>

08005b26 <_strtol_l.isra.0>:
 8005b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	4692      	mov	sl, r2
 8005b30:	461e      	mov	r6, r3
 8005b32:	460f      	mov	r7, r1
 8005b34:	463d      	mov	r5, r7
 8005b36:	9808      	ldr	r0, [sp, #32]
 8005b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b3c:	f000 f944 	bl	8005dc8 <__locale_ctype_ptr_l>
 8005b40:	4420      	add	r0, r4
 8005b42:	7843      	ldrb	r3, [r0, #1]
 8005b44:	f013 0308 	ands.w	r3, r3, #8
 8005b48:	d132      	bne.n	8005bb0 <_strtol_l.isra.0+0x8a>
 8005b4a:	2c2d      	cmp	r4, #45	; 0x2d
 8005b4c:	d132      	bne.n	8005bb4 <_strtol_l.isra.0+0x8e>
 8005b4e:	2201      	movs	r2, #1
 8005b50:	787c      	ldrb	r4, [r7, #1]
 8005b52:	1cbd      	adds	r5, r7, #2
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	d05d      	beq.n	8005c14 <_strtol_l.isra.0+0xee>
 8005b58:	2e10      	cmp	r6, #16
 8005b5a:	d109      	bne.n	8005b70 <_strtol_l.isra.0+0x4a>
 8005b5c:	2c30      	cmp	r4, #48	; 0x30
 8005b5e:	d107      	bne.n	8005b70 <_strtol_l.isra.0+0x4a>
 8005b60:	782b      	ldrb	r3, [r5, #0]
 8005b62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b66:	2b58      	cmp	r3, #88	; 0x58
 8005b68:	d14f      	bne.n	8005c0a <_strtol_l.isra.0+0xe4>
 8005b6a:	2610      	movs	r6, #16
 8005b6c:	786c      	ldrb	r4, [r5, #1]
 8005b6e:	3502      	adds	r5, #2
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	bf14      	ite	ne
 8005b74:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005b78:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005b7c:	2700      	movs	r7, #0
 8005b7e:	fbb1 fcf6 	udiv	ip, r1, r6
 8005b82:	4638      	mov	r0, r7
 8005b84:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005b88:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005b8c:	2b09      	cmp	r3, #9
 8005b8e:	d817      	bhi.n	8005bc0 <_strtol_l.isra.0+0x9a>
 8005b90:	461c      	mov	r4, r3
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	dd23      	ble.n	8005bde <_strtol_l.isra.0+0xb8>
 8005b96:	1c7b      	adds	r3, r7, #1
 8005b98:	d007      	beq.n	8005baa <_strtol_l.isra.0+0x84>
 8005b9a:	4584      	cmp	ip, r0
 8005b9c:	d31c      	bcc.n	8005bd8 <_strtol_l.isra.0+0xb2>
 8005b9e:	d101      	bne.n	8005ba4 <_strtol_l.isra.0+0x7e>
 8005ba0:	45a6      	cmp	lr, r4
 8005ba2:	db19      	blt.n	8005bd8 <_strtol_l.isra.0+0xb2>
 8005ba4:	2701      	movs	r7, #1
 8005ba6:	fb00 4006 	mla	r0, r0, r6, r4
 8005baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bae:	e7eb      	b.n	8005b88 <_strtol_l.isra.0+0x62>
 8005bb0:	462f      	mov	r7, r5
 8005bb2:	e7bf      	b.n	8005b34 <_strtol_l.isra.0+0xe>
 8005bb4:	2c2b      	cmp	r4, #43	; 0x2b
 8005bb6:	bf04      	itt	eq
 8005bb8:	1cbd      	addeq	r5, r7, #2
 8005bba:	787c      	ldrbeq	r4, [r7, #1]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	e7c9      	b.n	8005b54 <_strtol_l.isra.0+0x2e>
 8005bc0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005bc4:	2b19      	cmp	r3, #25
 8005bc6:	d801      	bhi.n	8005bcc <_strtol_l.isra.0+0xa6>
 8005bc8:	3c37      	subs	r4, #55	; 0x37
 8005bca:	e7e2      	b.n	8005b92 <_strtol_l.isra.0+0x6c>
 8005bcc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005bd0:	2b19      	cmp	r3, #25
 8005bd2:	d804      	bhi.n	8005bde <_strtol_l.isra.0+0xb8>
 8005bd4:	3c57      	subs	r4, #87	; 0x57
 8005bd6:	e7dc      	b.n	8005b92 <_strtol_l.isra.0+0x6c>
 8005bd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bdc:	e7e5      	b.n	8005baa <_strtol_l.isra.0+0x84>
 8005bde:	1c7b      	adds	r3, r7, #1
 8005be0:	d108      	bne.n	8005bf4 <_strtol_l.isra.0+0xce>
 8005be2:	2322      	movs	r3, #34	; 0x22
 8005be4:	4608      	mov	r0, r1
 8005be6:	f8c8 3000 	str.w	r3, [r8]
 8005bea:	f1ba 0f00 	cmp.w	sl, #0
 8005bee:	d107      	bne.n	8005c00 <_strtol_l.isra.0+0xda>
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	b102      	cbz	r2, 8005bf8 <_strtol_l.isra.0+0xd2>
 8005bf6:	4240      	negs	r0, r0
 8005bf8:	f1ba 0f00 	cmp.w	sl, #0
 8005bfc:	d0f8      	beq.n	8005bf0 <_strtol_l.isra.0+0xca>
 8005bfe:	b10f      	cbz	r7, 8005c04 <_strtol_l.isra.0+0xde>
 8005c00:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005c04:	f8ca 9000 	str.w	r9, [sl]
 8005c08:	e7f2      	b.n	8005bf0 <_strtol_l.isra.0+0xca>
 8005c0a:	2430      	movs	r4, #48	; 0x30
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	d1af      	bne.n	8005b70 <_strtol_l.isra.0+0x4a>
 8005c10:	2608      	movs	r6, #8
 8005c12:	e7ad      	b.n	8005b70 <_strtol_l.isra.0+0x4a>
 8005c14:	2c30      	cmp	r4, #48	; 0x30
 8005c16:	d0a3      	beq.n	8005b60 <_strtol_l.isra.0+0x3a>
 8005c18:	260a      	movs	r6, #10
 8005c1a:	e7a9      	b.n	8005b70 <_strtol_l.isra.0+0x4a>

08005c1c <_strtol_r>:
 8005c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c1e:	4c06      	ldr	r4, [pc, #24]	; (8005c38 <_strtol_r+0x1c>)
 8005c20:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_strtol_r+0x20>)
 8005c22:	6824      	ldr	r4, [r4, #0]
 8005c24:	6a24      	ldr	r4, [r4, #32]
 8005c26:	2c00      	cmp	r4, #0
 8005c28:	bf08      	it	eq
 8005c2a:	462c      	moveq	r4, r5
 8005c2c:	9400      	str	r4, [sp, #0]
 8005c2e:	f7ff ff7a 	bl	8005b26 <_strtol_l.isra.0>
 8005c32:	b003      	add	sp, #12
 8005c34:	bd30      	pop	{r4, r5, pc}
 8005c36:	bf00      	nop
 8005c38:	20000014 	.word	0x20000014
 8005c3c:	20000078 	.word	0x20000078

08005c40 <_strtoul_l.isra.0>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	4680      	mov	r8, r0
 8005c46:	4689      	mov	r9, r1
 8005c48:	4692      	mov	sl, r2
 8005c4a:	461e      	mov	r6, r3
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	463d      	mov	r5, r7
 8005c50:	9808      	ldr	r0, [sp, #32]
 8005c52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c56:	f000 f8b7 	bl	8005dc8 <__locale_ctype_ptr_l>
 8005c5a:	4420      	add	r0, r4
 8005c5c:	7843      	ldrb	r3, [r0, #1]
 8005c5e:	f013 0308 	ands.w	r3, r3, #8
 8005c62:	d130      	bne.n	8005cc6 <_strtoul_l.isra.0+0x86>
 8005c64:	2c2d      	cmp	r4, #45	; 0x2d
 8005c66:	d130      	bne.n	8005cca <_strtoul_l.isra.0+0x8a>
 8005c68:	2101      	movs	r1, #1
 8005c6a:	787c      	ldrb	r4, [r7, #1]
 8005c6c:	1cbd      	adds	r5, r7, #2
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	d05c      	beq.n	8005d2c <_strtoul_l.isra.0+0xec>
 8005c72:	2e10      	cmp	r6, #16
 8005c74:	d109      	bne.n	8005c8a <_strtoul_l.isra.0+0x4a>
 8005c76:	2c30      	cmp	r4, #48	; 0x30
 8005c78:	d107      	bne.n	8005c8a <_strtoul_l.isra.0+0x4a>
 8005c7a:	782b      	ldrb	r3, [r5, #0]
 8005c7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c80:	2b58      	cmp	r3, #88	; 0x58
 8005c82:	d14e      	bne.n	8005d22 <_strtoul_l.isra.0+0xe2>
 8005c84:	2610      	movs	r6, #16
 8005c86:	786c      	ldrb	r4, [r5, #1]
 8005c88:	3502      	adds	r5, #2
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8e:	fbb2 f2f6 	udiv	r2, r2, r6
 8005c92:	2300      	movs	r3, #0
 8005c94:	fb06 fc02 	mul.w	ip, r6, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	ea6f 0c0c 	mvn.w	ip, ip
 8005c9e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005ca2:	2f09      	cmp	r7, #9
 8005ca4:	d817      	bhi.n	8005cd6 <_strtoul_l.isra.0+0x96>
 8005ca6:	463c      	mov	r4, r7
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	dd23      	ble.n	8005cf4 <_strtoul_l.isra.0+0xb4>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db1e      	blt.n	8005cee <_strtoul_l.isra.0+0xae>
 8005cb0:	4282      	cmp	r2, r0
 8005cb2:	d31c      	bcc.n	8005cee <_strtoul_l.isra.0+0xae>
 8005cb4:	d101      	bne.n	8005cba <_strtoul_l.isra.0+0x7a>
 8005cb6:	45a4      	cmp	ip, r4
 8005cb8:	db19      	blt.n	8005cee <_strtoul_l.isra.0+0xae>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	fb00 4006 	mla	r0, r0, r6, r4
 8005cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cc4:	e7eb      	b.n	8005c9e <_strtoul_l.isra.0+0x5e>
 8005cc6:	462f      	mov	r7, r5
 8005cc8:	e7c1      	b.n	8005c4e <_strtoul_l.isra.0+0xe>
 8005cca:	2c2b      	cmp	r4, #43	; 0x2b
 8005ccc:	bf04      	itt	eq
 8005cce:	1cbd      	addeq	r5, r7, #2
 8005cd0:	787c      	ldrbeq	r4, [r7, #1]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	e7cb      	b.n	8005c6e <_strtoul_l.isra.0+0x2e>
 8005cd6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005cda:	2f19      	cmp	r7, #25
 8005cdc:	d801      	bhi.n	8005ce2 <_strtoul_l.isra.0+0xa2>
 8005cde:	3c37      	subs	r4, #55	; 0x37
 8005ce0:	e7e2      	b.n	8005ca8 <_strtoul_l.isra.0+0x68>
 8005ce2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005ce6:	2f19      	cmp	r7, #25
 8005ce8:	d804      	bhi.n	8005cf4 <_strtoul_l.isra.0+0xb4>
 8005cea:	3c57      	subs	r4, #87	; 0x57
 8005cec:	e7dc      	b.n	8005ca8 <_strtoul_l.isra.0+0x68>
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf2:	e7e5      	b.n	8005cc0 <_strtoul_l.isra.0+0x80>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da09      	bge.n	8005d0c <_strtoul_l.isra.0+0xcc>
 8005cf8:	2322      	movs	r3, #34	; 0x22
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cfe:	f8c8 3000 	str.w	r3, [r8]
 8005d02:	f1ba 0f00 	cmp.w	sl, #0
 8005d06:	d107      	bne.n	8005d18 <_strtoul_l.isra.0+0xd8>
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	b101      	cbz	r1, 8005d10 <_strtoul_l.isra.0+0xd0>
 8005d0e:	4240      	negs	r0, r0
 8005d10:	f1ba 0f00 	cmp.w	sl, #0
 8005d14:	d0f8      	beq.n	8005d08 <_strtoul_l.isra.0+0xc8>
 8005d16:	b10b      	cbz	r3, 8005d1c <_strtoul_l.isra.0+0xdc>
 8005d18:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005d1c:	f8ca 9000 	str.w	r9, [sl]
 8005d20:	e7f2      	b.n	8005d08 <_strtoul_l.isra.0+0xc8>
 8005d22:	2430      	movs	r4, #48	; 0x30
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d1b0      	bne.n	8005c8a <_strtoul_l.isra.0+0x4a>
 8005d28:	2608      	movs	r6, #8
 8005d2a:	e7ae      	b.n	8005c8a <_strtoul_l.isra.0+0x4a>
 8005d2c:	2c30      	cmp	r4, #48	; 0x30
 8005d2e:	d0a4      	beq.n	8005c7a <_strtoul_l.isra.0+0x3a>
 8005d30:	260a      	movs	r6, #10
 8005d32:	e7aa      	b.n	8005c8a <_strtoul_l.isra.0+0x4a>

08005d34 <_strtoul_r>:
 8005d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d36:	4c06      	ldr	r4, [pc, #24]	; (8005d50 <_strtoul_r+0x1c>)
 8005d38:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_strtoul_r+0x20>)
 8005d3a:	6824      	ldr	r4, [r4, #0]
 8005d3c:	6a24      	ldr	r4, [r4, #32]
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	bf08      	it	eq
 8005d42:	462c      	moveq	r4, r5
 8005d44:	9400      	str	r4, [sp, #0]
 8005d46:	f7ff ff7b 	bl	8005c40 <_strtoul_l.isra.0>
 8005d4a:	b003      	add	sp, #12
 8005d4c:	bd30      	pop	{r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000014 	.word	0x20000014
 8005d54:	20000078 	.word	0x20000078

08005d58 <__submore>:
 8005d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d11b      	bne.n	8005da0 <__submore+0x48>
 8005d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d6c:	f7ff f864 	bl	8004e38 <_malloc_r>
 8005d70:	b918      	cbnz	r0, 8005d7a <__submore+0x22>
 8005d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005d84:	6360      	str	r0, [r4, #52]	; 0x34
 8005d86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005d8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d8e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005d92:	7043      	strb	r3, [r0, #1]
 8005d94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d98:	7003      	strb	r3, [r0, #0]
 8005d9a:	6020      	str	r0, [r4, #0]
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e7ea      	b.n	8005d76 <__submore+0x1e>
 8005da0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005da2:	0077      	lsls	r7, r6, #1
 8005da4:	463a      	mov	r2, r7
 8005da6:	f000 f85c 	bl	8005e62 <_realloc_r>
 8005daa:	4605      	mov	r5, r0
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0e0      	beq.n	8005d72 <__submore+0x1a>
 8005db0:	eb00 0806 	add.w	r8, r0, r6
 8005db4:	4601      	mov	r1, r0
 8005db6:	4632      	mov	r2, r6
 8005db8:	4640      	mov	r0, r8
 8005dba:	f7fe ff05 	bl	8004bc8 <memcpy>
 8005dbe:	f8c4 8000 	str.w	r8, [r4]
 8005dc2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005dc6:	e7e9      	b.n	8005d9c <__submore+0x44>

08005dc8 <__locale_ctype_ptr_l>:
 8005dc8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005dcc:	4770      	bx	lr
	...

08005dd0 <__locale_ctype_ptr>:
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <__locale_ctype_ptr+0x14>)
 8005dd2:	4a05      	ldr	r2, [pc, #20]	; (8005de8 <__locale_ctype_ptr+0x18>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf08      	it	eq
 8005ddc:	4613      	moveq	r3, r2
 8005dde:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005de2:	4770      	bx	lr
 8005de4:	20000014 	.word	0x20000014
 8005de8:	20000078 	.word	0x20000078

08005dec <__ascii_mbtowc>:
 8005dec:	b082      	sub	sp, #8
 8005dee:	b901      	cbnz	r1, 8005df2 <__ascii_mbtowc+0x6>
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	b142      	cbz	r2, 8005e06 <__ascii_mbtowc+0x1a>
 8005df4:	b14b      	cbz	r3, 8005e0a <__ascii_mbtowc+0x1e>
 8005df6:	7813      	ldrb	r3, [r2, #0]
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	1c10      	adds	r0, r2, #0
 8005dfe:	bf18      	it	ne
 8005e00:	2001      	movne	r0, #1
 8005e02:	b002      	add	sp, #8
 8005e04:	4770      	bx	lr
 8005e06:	4610      	mov	r0, r2
 8005e08:	e7fb      	b.n	8005e02 <__ascii_mbtowc+0x16>
 8005e0a:	f06f 0001 	mvn.w	r0, #1
 8005e0e:	e7f8      	b.n	8005e02 <__ascii_mbtowc+0x16>

08005e10 <memchr>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	b2c9      	uxtb	r1, r1
 8005e14:	4402      	add	r2, r0
 8005e16:	4290      	cmp	r0, r2
 8005e18:	4603      	mov	r3, r0
 8005e1a:	d101      	bne.n	8005e20 <memchr+0x10>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e003      	b.n	8005e28 <memchr+0x18>
 8005e20:	781c      	ldrb	r4, [r3, #0]
 8005e22:	3001      	adds	r0, #1
 8005e24:	428c      	cmp	r4, r1
 8005e26:	d1f6      	bne.n	8005e16 <memchr+0x6>
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <memmove>:
 8005e2c:	4288      	cmp	r0, r1
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	eb01 0302 	add.w	r3, r1, r2
 8005e34:	d807      	bhi.n	8005e46 <memmove+0x1a>
 8005e36:	1e42      	subs	r2, r0, #1
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	d00a      	beq.n	8005e52 <memmove+0x26>
 8005e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e44:	e7f8      	b.n	8005e38 <memmove+0xc>
 8005e46:	4283      	cmp	r3, r0
 8005e48:	d9f5      	bls.n	8005e36 <memmove+0xa>
 8005e4a:	1881      	adds	r1, r0, r2
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	42d3      	cmn	r3, r2
 8005e50:	d100      	bne.n	8005e54 <memmove+0x28>
 8005e52:	bd10      	pop	{r4, pc}
 8005e54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e5c:	e7f7      	b.n	8005e4e <memmove+0x22>

08005e5e <__malloc_lock>:
 8005e5e:	4770      	bx	lr

08005e60 <__malloc_unlock>:
 8005e60:	4770      	bx	lr

08005e62 <_realloc_r>:
 8005e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e64:	4607      	mov	r7, r0
 8005e66:	4614      	mov	r4, r2
 8005e68:	460e      	mov	r6, r1
 8005e6a:	b921      	cbnz	r1, 8005e76 <_realloc_r+0x14>
 8005e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e70:	4611      	mov	r1, r2
 8005e72:	f7fe bfe1 	b.w	8004e38 <_malloc_r>
 8005e76:	b922      	cbnz	r2, 8005e82 <_realloc_r+0x20>
 8005e78:	f7fe ff92 	bl	8004da0 <_free_r>
 8005e7c:	4625      	mov	r5, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e82:	f000 f821 	bl	8005ec8 <_malloc_usable_size_r>
 8005e86:	42a0      	cmp	r0, r4
 8005e88:	d20f      	bcs.n	8005eaa <_realloc_r+0x48>
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7fe ffd3 	bl	8004e38 <_malloc_r>
 8005e92:	4605      	mov	r5, r0
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d0f2      	beq.n	8005e7e <_realloc_r+0x1c>
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	f7fe fe94 	bl	8004bc8 <memcpy>
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7fe ff7c 	bl	8004da0 <_free_r>
 8005ea8:	e7e9      	b.n	8005e7e <_realloc_r+0x1c>
 8005eaa:	4635      	mov	r5, r6
 8005eac:	e7e7      	b.n	8005e7e <_realloc_r+0x1c>

08005eae <__ascii_wctomb>:
 8005eae:	b149      	cbz	r1, 8005ec4 <__ascii_wctomb+0x16>
 8005eb0:	2aff      	cmp	r2, #255	; 0xff
 8005eb2:	bf8b      	itete	hi
 8005eb4:	238a      	movhi	r3, #138	; 0x8a
 8005eb6:	700a      	strbls	r2, [r1, #0]
 8005eb8:	6003      	strhi	r3, [r0, #0]
 8005eba:	2001      	movls	r0, #1
 8005ebc:	bf88      	it	hi
 8005ebe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ec2:	4770      	bx	lr
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4770      	bx	lr

08005ec8 <_malloc_usable_size_r>:
 8005ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ecc:	1f18      	subs	r0, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfbc      	itt	lt
 8005ed2:	580b      	ldrlt	r3, [r1, r0]
 8005ed4:	18c0      	addlt	r0, r0, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
