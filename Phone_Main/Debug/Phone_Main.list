
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002150  08002150  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002150  08002150  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002150  08002150  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  080021c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080021c8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005aa6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000127b  00000000  00000000  00025b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  00026dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000540  00000000  00000000  000273a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bee  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005591  00000000  00000000  0003e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081f43  00000000  00000000  00043a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c59aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  000c5a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080020bc 	.word	0x080020bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080020bc 	.word	0x080020bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <pSendAtCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char at_response[100];

void pSendAtCommand(const char *command, uint32_t response_time)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	char command_buffer[30] = {0};
 8000166:	f107 0308 	add.w	r3, r7, #8
 800016a:	221e      	movs	r2, #30
 800016c:	2100      	movs	r1, #0
 800016e:	4618      	mov	r0, r3
 8000170:	f001 fb8a 	bl	8001888 <memset>
	sprintf(command_buffer, "%s\r\n", command);
 8000174:	f107 0308 	add.w	r3, r7, #8
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	490d      	ldr	r1, [pc, #52]	; (80001b0 <pSendAtCommand+0x54>)
 800017c:	4618      	mov	r0, r3
 800017e:	f001 fb8b 	bl	8001898 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)&command_buffer[0], strlen(command_buffer), 100);
 8000182:	f107 0308 	add.w	r3, r7, #8
 8000186:	4618      	mov	r0, r3
 8000188:	f7ff ffe0 	bl	800014c <strlen>
 800018c:	4603      	mov	r3, r0
 800018e:	b29a      	uxth	r2, r3
 8000190:	f107 0108 	add.w	r1, r7, #8
 8000194:	2364      	movs	r3, #100	; 0x64
 8000196:	4807      	ldr	r0, [pc, #28]	; (80001b4 <pSendAtCommand+0x58>)
 8000198:	f001 f943 	bl	8001422 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)&at_response[0], 100, response_time);
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	2264      	movs	r2, #100	; 0x64
 80001a0:	4905      	ldr	r1, [pc, #20]	; (80001b8 <pSendAtCommand+0x5c>)
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <pSendAtCommand+0x58>)
 80001a4:	f001 f9cf 	bl	8001546 <HAL_UART_Receive>
}
 80001a8:	bf00      	nop
 80001aa:	3728      	adds	r7, #40	; 0x28
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	080020d4 	.word	0x080020d4
 80001b4:	20000098 	.word	0x20000098
 80001b8:	20000118 	.word	0x20000118

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c0:	f000 fa26 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c4:	f000 f824 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c8:	f000 f8bc 	bl	8000344 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001cc:	f000 f866 	bl	800029c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001d0:	f000 f88e 	bl	80002f0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
  pSendAtCommand("ATE0", 400);
 80001d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <main+0x48>)
 80001da:	f7ff ffbf 	bl	800015c <pSendAtCommand>
  memset(at_response, 0, sizeof(at_response));
 80001de:	2264      	movs	r2, #100	; 0x64
 80001e0:	2100      	movs	r1, #0
 80001e2:	4809      	ldr	r0, [pc, #36]	; (8000208 <main+0x4c>)
 80001e4:	f001 fb50 	bl	8001888 <memset>

  pSendAtCommand("AT+COPS?", 300);
 80001e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80001ec:	4807      	ldr	r0, [pc, #28]	; (800020c <main+0x50>)
 80001ee:	f7ff ffb5 	bl	800015c <pSendAtCommand>
  memset(at_response, 0, sizeof(at_response));
 80001f2:	2264      	movs	r2, #100	; 0x64
 80001f4:	2100      	movs	r1, #0
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x4c>)
 80001f8:	f001 fb46 	bl	8001888 <memset>
 80001fc:	2300      	movs	r3, #0

	/* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80001fe:	4618      	mov	r0, r3
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	080020dc 	.word	0x080020dc
 8000208:	20000118 	.word	0x20000118
 800020c:	080020e4 	.word	0x080020e4

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fb32 	bl	8001888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000232:	2301      	movs	r3, #1
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000244:	2302      	movs	r3, #2
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fc79 	bl	8000b50 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000264:	f000 f890 	bl	8000388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fee4 	bl	8001050 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028e:	f000 f87b 	bl	8000388 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <MX_USART1_UART_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f001 f858 	bl	8001388 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002de:	f000 f853 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000098 	.word	0x20000098
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f001 f82e 	bl	8001388 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f829 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000d8 	.word	0x200000d8
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <MX_GPIO_Init+0x40>)
 8000350:	f043 0320 	orr.w	r3, r3, #32
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0320 	and.w	r3, r3, #32
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_GPIO_Init+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <MX_GPIO_Init+0x40>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_GPIO_Init+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0304 	and.w	r3, r3, #4
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038e:	e7fe      	b.n	800038e <Error_Handler+0x6>

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a37      	ldr	r2, [pc, #220]	; (80004ec <HAL_UART_MspInit+0xf8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d132      	bne.n	800047a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000414:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a35      	ldr	r2, [pc, #212]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2f      	ldr	r2, [pc, #188]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	4619      	mov	r1, r3
 8000458:	4826      	ldr	r0, [pc, #152]	; (80004f4 <HAL_UART_MspInit+0x100>)
 800045a:	f000 fa1f 	bl	800089c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0318 	add.w	r3, r7, #24
 8000470:	4619      	mov	r1, r3
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <HAL_UART_MspInit+0x100>)
 8000474:	f000 fa12 	bl	800089c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000478:	e034      	b.n	80004e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <HAL_UART_MspInit+0x104>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d12f      	bne.n	80004e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 800048a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_UART_MspInit+0xfc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004b4:	2304      	movs	r3, #4
 80004b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004bc:	2303      	movs	r3, #3
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	4619      	mov	r1, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_UART_MspInit+0x100>)
 80004c8:	f000 f9e8 	bl	800089c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004cc:	2308      	movs	r3, #8
 80004ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_UART_MspInit+0x100>)
 80004e0:	f000 f9dc 	bl	800089c <HAL_GPIO_Init>
}
 80004e4:	bf00      	nop
 80004e6:	3728      	adds	r7, #40	; 0x28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800
 80004f8:	40004400 	.word	0x40004400

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000542:	f000 f8ab 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <_sbrk+0x5c>)
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <_sbrk+0x60>)
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <_sbrk+0x64>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <_sbrk+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	429a      	cmp	r2, r3
 800057a:	d207      	bcs.n	800058c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800057c:	f001 f95a 	bl	8001834 <__errno>
 8000580:	4602      	mov	r2, r0
 8000582:	230c      	movs	r3, #12
 8000584:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058a:	e009      	b.n	80005a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <_sbrk+0x64>)
 800059c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20005000 	.word	0x20005000
 80005ac:	00000400 	.word	0x00000400
 80005b0:	2000008c 	.word	0x2000008c
 80005b4:	20000188 	.word	0x20000188

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffe5 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 f927 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff fde3 	bl	80001bc <main>
  bx lr
 80005f6:	4770      	bx	lr
  ldr r3, =_sidata
 80005f8:	08002158 	.word	0x08002158
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000600:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000604:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000608:	20000184 	.word	0x20000184

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x28>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f907 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f808 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f7ff feb0 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f911 	bl	8000882 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000678:	f000 f8e7 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <HAL_IncTick+0x20>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000008 	.word	0x20000008
 80006bc:	2000017c 	.word	0x2000017c

080006c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <HAL_GetTick+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	2000017c 	.word	0x2000017c

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000814:	f7ff ff90 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff49 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff5e 	bl	800071c <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff90 	bl	800078c <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5f 	bl	8000738 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffb0 	bl	80007f0 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b08b      	sub	sp, #44	; 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e127      	b.n	8000b00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008b0:	2201      	movs	r2, #1
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	69fa      	ldr	r2, [r7, #28]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f040 8116 	bne.w	8000afa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d034      	beq.n	8000940 <HAL_GPIO_Init+0xa4>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d80d      	bhi.n	80008f6 <HAL_GPIO_Init+0x5a>
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d02b      	beq.n	8000936 <HAL_GPIO_Init+0x9a>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d804      	bhi.n	80008ec <HAL_GPIO_Init+0x50>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d031      	beq.n	800094a <HAL_GPIO_Init+0xae>
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d01c      	beq.n	8000924 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ea:	e048      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d043      	beq.n	8000978 <HAL_GPIO_Init+0xdc>
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	d01b      	beq.n	800092c <HAL_GPIO_Init+0x90>
          break;
 80008f4:	e043      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f6:	4a89      	ldr	r2, [pc, #548]	; (8000b1c <HAL_GPIO_Init+0x280>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d026      	beq.n	800094a <HAL_GPIO_Init+0xae>
 80008fc:	4a87      	ldr	r2, [pc, #540]	; (8000b1c <HAL_GPIO_Init+0x280>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d806      	bhi.n	8000910 <HAL_GPIO_Init+0x74>
 8000902:	4a87      	ldr	r2, [pc, #540]	; (8000b20 <HAL_GPIO_Init+0x284>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d020      	beq.n	800094a <HAL_GPIO_Init+0xae>
 8000908:	4a86      	ldr	r2, [pc, #536]	; (8000b24 <HAL_GPIO_Init+0x288>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d01d      	beq.n	800094a <HAL_GPIO_Init+0xae>
          break;
 800090e:	e036      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000910:	4a85      	ldr	r2, [pc, #532]	; (8000b28 <HAL_GPIO_Init+0x28c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d019      	beq.n	800094a <HAL_GPIO_Init+0xae>
 8000916:	4a85      	ldr	r2, [pc, #532]	; (8000b2c <HAL_GPIO_Init+0x290>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d016      	beq.n	800094a <HAL_GPIO_Init+0xae>
 800091c:	4a84      	ldr	r2, [pc, #528]	; (8000b30 <HAL_GPIO_Init+0x294>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d013      	beq.n	800094a <HAL_GPIO_Init+0xae>
          break;
 8000922:	e02c      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e028      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	3304      	adds	r3, #4
 8000932:	623b      	str	r3, [r7, #32]
          break;
 8000934:	e023      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	3308      	adds	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e01e      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	330c      	adds	r3, #12
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e019      	b.n	800097e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000952:	2304      	movs	r3, #4
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e012      	b.n	800097e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d105      	bne.n	800096c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	611a      	str	r2, [r3, #16]
          break;
 800096a:	e008      	b.n	800097e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	615a      	str	r2, [r3, #20]
          break;
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2bff      	cmp	r3, #255	; 0xff
 8000982:	d801      	bhi.n	8000988 <HAL_GPIO_Init+0xec>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	e001      	b.n	800098c <HAL_GPIO_Init+0xf0>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3304      	adds	r3, #4
 800098c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d802      	bhi.n	800099a <HAL_GPIO_Init+0xfe>
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x104>
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	3b08      	subs	r3, #8
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	210f      	movs	r1, #15
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	401a      	ands	r2, r3
 80009b2:	6a39      	ldr	r1, [r7, #32]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	431a      	orrs	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 8096 	beq.w	8000afa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ce:	4b59      	ldr	r3, [pc, #356]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e6:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <HAL_GPIO_Init+0x29c>)
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x2a0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x19e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x19a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <HAL_GPIO_Init+0x2a8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x196>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <HAL_GPIO_Init+0x2ac>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x192>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4c:	493a      	ldr	r1, [pc, #232]	; (8000b38 <HAL_GPIO_Init+0x29c>)
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4938      	ldr	r1, [pc, #224]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	4933      	ldr	r1, [pc, #204]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	492e      	ldr	r1, [pc, #184]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	604b      	str	r3, [r1, #4]
 8000a9a:	e006      	b.n	8000aaa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4929      	ldr	r1, [pc, #164]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4924      	ldr	r1, [pc, #144]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	608b      	str	r3, [r1, #8]
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	491f      	ldr	r1, [pc, #124]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60cb      	str	r3, [r1, #12]
 8000aea:	e006      	b.n	8000afa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4915      	ldr	r1, [pc, #84]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	3301      	adds	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f47f aed0 	bne.w	80008b0 <HAL_GPIO_Init+0x14>
  }
}
 8000b10:	bf00      	nop
 8000b12:	372c      	adds	r7, #44	; 0x2c
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	10210000 	.word	0x10210000
 8000b20:	10110000 	.word	0x10110000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10310000 	.word	0x10310000
 8000b2c:	10320000 	.word	0x10320000
 8000b30:	10220000 	.word	0x10220000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	40011000 	.word	0x40011000
 8000b48:	40011400 	.word	0x40011400
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e26c      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8087 	beq.w	8000c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b70:	4b92      	ldr	r3, [pc, #584]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d00c      	beq.n	8000b96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b7c:	4b8f      	ldr	r3, [pc, #572]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d112      	bne.n	8000bae <HAL_RCC_OscConfig+0x5e>
 8000b88:	4b8c      	ldr	r3, [pc, #560]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b94:	d10b      	bne.n	8000bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b96:	4b89      	ldr	r3, [pc, #548]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d06c      	beq.n	8000c7c <HAL_RCC_OscConfig+0x12c>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d168      	bne.n	8000c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e246      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb6:	d106      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x76>
 8000bb8:	4b80      	ldr	r3, [pc, #512]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a7f      	ldr	r2, [pc, #508]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e02e      	b.n	8000c24 <HAL_RCC_OscConfig+0xd4>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x98>
 8000bce:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a7a      	ldr	r2, [pc, #488]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b78      	ldr	r3, [pc, #480]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a77      	ldr	r2, [pc, #476]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e01d      	b.n	8000c24 <HAL_RCC_OscConfig+0xd4>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_OscConfig+0xbc>
 8000bf2:	4b72      	ldr	r3, [pc, #456]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a71      	ldr	r2, [pc, #452]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a6e      	ldr	r2, [pc, #440]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e00b      	b.n	8000c24 <HAL_RCC_OscConfig+0xd4>
 8000c0c:	4b6b      	ldr	r3, [pc, #428]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a6a      	ldr	r2, [pc, #424]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b68      	ldr	r3, [pc, #416]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a67      	ldr	r2, [pc, #412]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d013      	beq.n	8000c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fd48 	bl	80006c0 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fd44 	bl	80006c0 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e1fa      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f0      	beq.n	8000c34 <HAL_RCC_OscConfig+0xe4>
 8000c52:	e014      	b.n	8000c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fd34 	bl	80006c0 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fd30 	bl	80006c0 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e1e6      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x10c>
 8000c7a:	e000      	b.n	8000c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d063      	beq.n	8000d52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8a:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c96:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d11c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x18c>
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d116      	bne.n	8000cdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x176>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e1ba      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4939      	ldr	r1, [pc, #228]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	e03a      	b.n	8000d52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d020      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_RCC_OscConfig+0x270>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cea:	f7ff fce9 	bl	80006c0 <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fce5 	bl	80006c0 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e19b      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4927      	ldr	r1, [pc, #156]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
 8000d24:	e015      	b.n	8000d52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_RCC_OscConfig+0x270>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fcc8 	bl	80006c0 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d34:	f7ff fcc4 	bl	80006c0 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e17a      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f0      	bne.n	8000d34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d03a      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d019      	beq.n	8000d9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_RCC_OscConfig+0x274>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fca8 	bl	80006c0 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d74:	f7ff fca4 	bl	80006c0 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e15a      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_RCC_OscConfig+0x26c>)
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fada 	bl	800134c <RCC_Delay>
 8000d98:	e01c      	b.n	8000dd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fc8e 	bl	80006c0 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da6:	e00f      	b.n	8000dc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc8a 	bl	80006c0 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d908      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e140      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	42420000 	.word	0x42420000
 8000dc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e9      	bne.n	8000da8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80a6 	beq.w	8000f2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de6:	4b97      	ldr	r3, [pc, #604]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10d      	bne.n	8000e0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b94      	ldr	r3, [pc, #592]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a93      	ldr	r2, [pc, #588]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b91      	ldr	r3, [pc, #580]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0e:	4b8e      	ldr	r3, [pc, #568]	; (8001048 <HAL_RCC_OscConfig+0x4f8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d118      	bne.n	8000e4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1a:	4b8b      	ldr	r3, [pc, #556]	; (8001048 <HAL_RCC_OscConfig+0x4f8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a8a      	ldr	r2, [pc, #552]	; (8001048 <HAL_RCC_OscConfig+0x4f8>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e26:	f7ff fc4b 	bl	80006c0 <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2e:	f7ff fc47 	bl	80006c0 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b64      	cmp	r3, #100	; 0x64
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0fd      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e40:	4b81      	ldr	r3, [pc, #516]	; (8001048 <HAL_RCC_OscConfig+0x4f8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f0      	beq.n	8000e2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d106      	bne.n	8000e62 <HAL_RCC_OscConfig+0x312>
 8000e54:	4b7b      	ldr	r3, [pc, #492]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4a7a      	ldr	r2, [pc, #488]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6213      	str	r3, [r2, #32]
 8000e60:	e02d      	b.n	8000ebe <HAL_RCC_OscConfig+0x36e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x334>
 8000e6a:	4b76      	ldr	r3, [pc, #472]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4a75      	ldr	r2, [pc, #468]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	6213      	str	r3, [r2, #32]
 8000e76:	4b73      	ldr	r3, [pc, #460]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a72      	ldr	r2, [pc, #456]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	f023 0304 	bic.w	r3, r3, #4
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	e01c      	b.n	8000ebe <HAL_RCC_OscConfig+0x36e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d10c      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x356>
 8000e8c:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a6c      	ldr	r2, [pc, #432]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a69      	ldr	r2, [pc, #420]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	e00b      	b.n	8000ebe <HAL_RCC_OscConfig+0x36e>
 8000ea6:	4b67      	ldr	r3, [pc, #412]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a66      	ldr	r2, [pc, #408]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a63      	ldr	r2, [pc, #396]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d015      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fbfb 	bl	80006c0 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fbf7 	bl	80006c0 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e0ab      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0ee      	beq.n	8000ece <HAL_RCC_OscConfig+0x37e>
 8000ef0:	e014      	b.n	8000f1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fbe5 	bl	80006c0 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	e00a      	b.n	8000f10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efa:	f7ff fbe1 	bl	80006c0 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e095      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1ee      	bne.n	8000efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d105      	bne.n	8000f2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a47      	ldr	r2, [pc, #284]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8081 	beq.w	800103a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f38:	4b42      	ldr	r3, [pc, #264]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d061      	beq.n	8001008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d146      	bne.n	8000fda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <HAL_RCC_OscConfig+0x4fc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fbb5 	bl	80006c0 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fbb1 	bl	80006c0 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e067      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f80:	d108      	bne.n	8000f94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	492d      	ldr	r1, [pc, #180]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a19      	ldr	r1, [r3, #32]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	4927      	ldr	r1, [pc, #156]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_RCC_OscConfig+0x4fc>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fb85 	bl	80006c0 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fba:	f7ff fb81 	bl	80006c0 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e037      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x46a>
 8000fd8:	e02f      	b.n	800103a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_RCC_OscConfig+0x4fc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb6e 	bl	80006c0 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fb6a 	bl	80006c0 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e020      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x498>
 8001006:	e018      	b.n	800103a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e013      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	429a      	cmp	r2, r3
 8001026:	d106      	bne.n	8001036 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001032:	429a      	cmp	r2, r3
 8001034:	d001      	beq.n	800103a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40007000 	.word	0x40007000
 800104c:	42420060 	.word	0x42420060

08001050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0d0      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d910      	bls.n	8001094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b67      	ldr	r3, [pc, #412]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 0207 	bic.w	r2, r3, #7
 800107a:	4965      	ldr	r1, [pc, #404]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0b8      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ac:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	494d      	ldr	r1, [pc, #308]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d040      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d115      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e073      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e06b      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4936      	ldr	r1, [pc, #216]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fabe 	bl	80006c0 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff faba 	bl	80006c0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	; 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e053      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d210      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 0207 	bic.w	r2, r3, #7
 8001186:	4922      	ldr	r1, [pc, #136]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e032      	b.n	8001206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011de:	f000 f821 	bl	8001224 <HAL_RCC_GetSysClockFreq>
 80011e2:	4601      	mov	r1, r0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1c8>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	fa21 f303 	lsr.w	r3, r1, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1cc>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1d0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fa1c 	bl	800063c <HAL_InitTick>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000
 8001214:	40021000 	.word	0x40021000
 8001218:	08002104 	.word	0x08002104
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001224:	b490      	push	{r4, r7}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800122c:	1d3c      	adds	r4, r7, #4
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d002      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x40>
 800125e:	2b08      	cmp	r3, #8
 8001260:	d003      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x46>
 8001262:	e02d      	b.n	80012c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001266:	623b      	str	r3, [r7, #32]
      break;
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001276:	4413      	add	r3, r2
 8001278:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800127c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	0c5b      	lsrs	r3, r3, #17
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001296:	4413      	add	r3, r2
 8001298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800129c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a2:	fb02 f203 	mul.w	r2, r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	e004      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	623b      	str	r3, [r7, #32]
      break;
 80012be:	e002      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c2:	623b      	str	r3, [r7, #32]
      break;
 80012c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012c6:	6a3b      	ldr	r3, [r7, #32]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc90      	pop	{r4, r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	080020f0 	.word	0x080020f0
 80012d8:	08002100 	.word	0x08002100
 80012dc:	40021000 	.word	0x40021000
 80012e0:	007a1200 	.word	0x007a1200
 80012e4:	003d0900 	.word	0x003d0900

080012e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000000 	.word	0x20000000

080012fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001300:	f7ff fff2 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 8001304:	4601      	mov	r1, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	08002114 	.word	0x08002114

08001324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001328:	f7ff ffde 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 800132c:	4601      	mov	r1, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0adb      	lsrs	r3, r3, #11
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	08002114 	.word	0x08002114

0800134c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <RCC_Delay+0x34>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <RCC_Delay+0x38>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001368:	bf00      	nop
  }
  while (Delay --);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	60fa      	str	r2, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <RCC_Delay+0x1c>
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	10624dd3 	.word	0x10624dd3

08001388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e03f      	b.n	800141a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f820 	bl	80003f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f9a3 	bl	8001718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b08a      	sub	sp, #40	; 0x28
 8001426:	af02      	add	r7, sp, #8
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b20      	cmp	r3, #32
 8001440:	d17c      	bne.n	800153c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_UART_Transmit+0x2c>
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e075      	b.n	800153e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_UART_Transmit+0x3e>
 800145c:	2302      	movs	r3, #2
 800145e:	e06e      	b.n	800153e <HAL_UART_Transmit+0x11c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001476:	f7ff f923 	bl	80006c0 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001490:	d108      	bne.n	80014a4 <HAL_UART_Transmit+0x82>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e003      	b.n	80014ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80014b4:	e02a      	b.n	800150c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2200      	movs	r2, #0
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f8df 	bl	8001684 <UART_WaitOnFlagUntilTimeout>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e036      	b.n	800153e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3302      	adds	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e007      	b.n	80014fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1cf      	bne.n	80014b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f8af 	bl	8001684 <UART_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b08a      	sub	sp, #40	; 0x28
 800154a:	af02      	add	r7, sp, #8
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b20      	cmp	r3, #32
 8001564:	f040 8089 	bne.w	800167a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_UART_Receive+0x2e>
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e081      	b.n	800167c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_UART_Receive+0x40>
 8001582:	2302      	movs	r3, #2
 8001584:	e07a      	b.n	800167c <HAL_UART_Receive+0x136>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2222      	movs	r2, #34	; 0x22
 8001598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800159c:	f7ff f890 	bl	80006c0 <HAL_GetTick>
 80015a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b6:	d108      	bne.n	80015ca <HAL_UART_Receive+0x84>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e003      	b.n	80015d2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80015da:	e043      	b.n	8001664 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2200      	movs	r2, #0
 80015e4:	2120      	movs	r1, #32
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f84c 	bl	8001684 <UART_WaitOnFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e042      	b.n	800167c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001608:	b29a      	uxth	r2, r3
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	3302      	adds	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	e01f      	b.n	8001656 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161e:	d007      	beq.n	8001630 <HAL_UART_Receive+0xea>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_UART_Receive+0xf8>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d106      	bne.n	800163e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e008      	b.n	8001650 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	3301      	adds	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001668:	b29b      	uxth	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1b6      	bne.n	80015dc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
  }
}
 800167c:	4618      	mov	r0, r3
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001694:	e02c      	b.n	80016f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800169c:	d028      	beq.n	80016f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d007      	beq.n	80016b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80016a4:	f7ff f80c 	bl	80006c0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d21d      	bcs.n	80016f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e00f      	b.n	8001710 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4013      	ands	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	429a      	cmp	r2, r3
 800170c:	d0c3      	beq.n	8001696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001752:	f023 030c 	bic.w	r3, r3, #12
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	430b      	orrs	r3, r1
 800175e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2c      	ldr	r2, [pc, #176]	; (800182c <UART_SetConfig+0x114>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d103      	bne.n	8001788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001780:	f7ff fdd0 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	e002      	b.n	800178e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001788:	f7ff fdb8 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 800178c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009a      	lsls	r2, r3, #2
 8001798:	441a      	add	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4a22      	ldr	r2, [pc, #136]	; (8001830 <UART_SetConfig+0x118>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	0119      	lsls	r1, r3, #4
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <UART_SetConfig+0x118>)
 80017c6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2064      	movs	r0, #100	; 0x64
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	3332      	adds	r3, #50	; 0x32
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <UART_SetConfig+0x118>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e4:	4419      	add	r1, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	441a      	add	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <UART_SetConfig+0x118>)
 80017fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	fb00 f303 	mul.w	r3, r0, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	3332      	adds	r3, #50	; 0x32
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <UART_SetConfig+0x118>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	f003 020f 	and.w	r2, r3, #15
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	440a      	add	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	51eb851f 	.word	0x51eb851f

08001834 <__errno>:
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <__errno+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	2500      	movs	r5, #0
 8001844:	4e0c      	ldr	r6, [pc, #48]	; (8001878 <__libc_init_array+0x38>)
 8001846:	4c0d      	ldr	r4, [pc, #52]	; (800187c <__libc_init_array+0x3c>)
 8001848:	1ba4      	subs	r4, r4, r6
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	42a5      	cmp	r5, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	f000 fc34 	bl	80020bc <_init>
 8001854:	2500      	movs	r5, #0
 8001856:	4e0a      	ldr	r6, [pc, #40]	; (8001880 <__libc_init_array+0x40>)
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <__libc_init_array+0x44>)
 800185a:	1ba4      	subs	r4, r4, r6
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	42a5      	cmp	r5, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001868:	4798      	blx	r3
 800186a:	3501      	adds	r5, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001872:	4798      	blx	r3
 8001874:	3501      	adds	r5, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	08002150 	.word	0x08002150
 800187c:	08002150 	.word	0x08002150
 8001880:	08002150 	.word	0x08002150
 8001884:	08002154 	.word	0x08002154

08001888 <memset>:
 8001888:	4603      	mov	r3, r0
 800188a:	4402      	add	r2, r0
 800188c:	4293      	cmp	r3, r2
 800188e:	d100      	bne.n	8001892 <memset+0xa>
 8001890:	4770      	bx	lr
 8001892:	f803 1b01 	strb.w	r1, [r3], #1
 8001896:	e7f9      	b.n	800188c <memset+0x4>

08001898 <siprintf>:
 8001898:	b40e      	push	{r1, r2, r3}
 800189a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800189e:	b500      	push	{lr}
 80018a0:	b09c      	sub	sp, #112	; 0x70
 80018a2:	ab1d      	add	r3, sp, #116	; 0x74
 80018a4:	9002      	str	r0, [sp, #8]
 80018a6:	9006      	str	r0, [sp, #24]
 80018a8:	9107      	str	r1, [sp, #28]
 80018aa:	9104      	str	r1, [sp, #16]
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <siprintf+0x38>)
 80018ae:	4909      	ldr	r1, [pc, #36]	; (80018d4 <siprintf+0x3c>)
 80018b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80018b4:	9105      	str	r1, [sp, #20]
 80018b6:	6800      	ldr	r0, [r0, #0]
 80018b8:	a902      	add	r1, sp, #8
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	f000 f866 	bl	800198c <_svfiprintf_r>
 80018c0:	2200      	movs	r2, #0
 80018c2:	9b02      	ldr	r3, [sp, #8]
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	b01c      	add	sp, #112	; 0x70
 80018c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80018cc:	b003      	add	sp, #12
 80018ce:	4770      	bx	lr
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	ffff0208 	.word	0xffff0208

080018d8 <__ssputs_r>:
 80018d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018dc:	688e      	ldr	r6, [r1, #8]
 80018de:	4682      	mov	sl, r0
 80018e0:	429e      	cmp	r6, r3
 80018e2:	460c      	mov	r4, r1
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	d837      	bhi.n	800195a <__ssputs_r+0x82>
 80018ea:	898a      	ldrh	r2, [r1, #12]
 80018ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80018f0:	d031      	beq.n	8001956 <__ssputs_r+0x7e>
 80018f2:	2302      	movs	r3, #2
 80018f4:	6825      	ldr	r5, [r4, #0]
 80018f6:	6909      	ldr	r1, [r1, #16]
 80018f8:	1a6f      	subs	r7, r5, r1
 80018fa:	6965      	ldr	r5, [r4, #20]
 80018fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001900:	fb95 f5f3 	sdiv	r5, r5, r3
 8001904:	f109 0301 	add.w	r3, r9, #1
 8001908:	443b      	add	r3, r7
 800190a:	429d      	cmp	r5, r3
 800190c:	bf38      	it	cc
 800190e:	461d      	movcc	r5, r3
 8001910:	0553      	lsls	r3, r2, #21
 8001912:	d530      	bpl.n	8001976 <__ssputs_r+0x9e>
 8001914:	4629      	mov	r1, r5
 8001916:	f000 fb37 	bl	8001f88 <_malloc_r>
 800191a:	4606      	mov	r6, r0
 800191c:	b950      	cbnz	r0, 8001934 <__ssputs_r+0x5c>
 800191e:	230c      	movs	r3, #12
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001924:	f8ca 3000 	str.w	r3, [sl]
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192e:	81a3      	strh	r3, [r4, #12]
 8001930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001934:	463a      	mov	r2, r7
 8001936:	6921      	ldr	r1, [r4, #16]
 8001938:	f000 fab6 	bl	8001ea8 <memcpy>
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001946:	81a3      	strh	r3, [r4, #12]
 8001948:	6126      	str	r6, [r4, #16]
 800194a:	443e      	add	r6, r7
 800194c:	6026      	str	r6, [r4, #0]
 800194e:	464e      	mov	r6, r9
 8001950:	6165      	str	r5, [r4, #20]
 8001952:	1bed      	subs	r5, r5, r7
 8001954:	60a5      	str	r5, [r4, #8]
 8001956:	454e      	cmp	r6, r9
 8001958:	d900      	bls.n	800195c <__ssputs_r+0x84>
 800195a:	464e      	mov	r6, r9
 800195c:	4632      	mov	r2, r6
 800195e:	4641      	mov	r1, r8
 8001960:	6820      	ldr	r0, [r4, #0]
 8001962:	f000 faac 	bl	8001ebe <memmove>
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	2000      	movs	r0, #0
 800196a:	1b9b      	subs	r3, r3, r6
 800196c:	60a3      	str	r3, [r4, #8]
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	441e      	add	r6, r3
 8001972:	6026      	str	r6, [r4, #0]
 8001974:	e7dc      	b.n	8001930 <__ssputs_r+0x58>
 8001976:	462a      	mov	r2, r5
 8001978:	f000 fb60 	bl	800203c <_realloc_r>
 800197c:	4606      	mov	r6, r0
 800197e:	2800      	cmp	r0, #0
 8001980:	d1e2      	bne.n	8001948 <__ssputs_r+0x70>
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	4650      	mov	r0, sl
 8001986:	f000 fab3 	bl	8001ef0 <_free_r>
 800198a:	e7c8      	b.n	800191e <__ssputs_r+0x46>

0800198c <_svfiprintf_r>:
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	461d      	mov	r5, r3
 8001992:	898b      	ldrh	r3, [r1, #12]
 8001994:	b09d      	sub	sp, #116	; 0x74
 8001996:	061f      	lsls	r7, r3, #24
 8001998:	4680      	mov	r8, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4616      	mov	r6, r2
 800199e:	d50f      	bpl.n	80019c0 <_svfiprintf_r+0x34>
 80019a0:	690b      	ldr	r3, [r1, #16]
 80019a2:	b96b      	cbnz	r3, 80019c0 <_svfiprintf_r+0x34>
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	f000 faef 	bl	8001f88 <_malloc_r>
 80019aa:	6020      	str	r0, [r4, #0]
 80019ac:	6120      	str	r0, [r4, #16]
 80019ae:	b928      	cbnz	r0, 80019bc <_svfiprintf_r+0x30>
 80019b0:	230c      	movs	r3, #12
 80019b2:	f8c8 3000 	str.w	r3, [r8]
 80019b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ba:	e0c8      	b.n	8001b4e <_svfiprintf_r+0x1c2>
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	6163      	str	r3, [r4, #20]
 80019c0:	2300      	movs	r3, #0
 80019c2:	9309      	str	r3, [sp, #36]	; 0x24
 80019c4:	2320      	movs	r3, #32
 80019c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019ca:	2330      	movs	r3, #48	; 0x30
 80019cc:	f04f 0b01 	mov.w	fp, #1
 80019d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019d4:	9503      	str	r5, [sp, #12]
 80019d6:	4637      	mov	r7, r6
 80019d8:	463d      	mov	r5, r7
 80019da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019de:	b10b      	cbz	r3, 80019e4 <_svfiprintf_r+0x58>
 80019e0:	2b25      	cmp	r3, #37	; 0x25
 80019e2:	d13e      	bne.n	8001a62 <_svfiprintf_r+0xd6>
 80019e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80019e8:	d00b      	beq.n	8001a02 <_svfiprintf_r+0x76>
 80019ea:	4653      	mov	r3, sl
 80019ec:	4632      	mov	r2, r6
 80019ee:	4621      	mov	r1, r4
 80019f0:	4640      	mov	r0, r8
 80019f2:	f7ff ff71 	bl	80018d8 <__ssputs_r>
 80019f6:	3001      	adds	r0, #1
 80019f8:	f000 80a4 	beq.w	8001b44 <_svfiprintf_r+0x1b8>
 80019fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019fe:	4453      	add	r3, sl
 8001a00:	9309      	str	r3, [sp, #36]	; 0x24
 8001a02:	783b      	ldrb	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 809d 	beq.w	8001b44 <_svfiprintf_r+0x1b8>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	9307      	str	r3, [sp, #28]
 8001a18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a1c:	931a      	str	r3, [sp, #104]	; 0x68
 8001a1e:	462f      	mov	r7, r5
 8001a20:	2205      	movs	r2, #5
 8001a22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001a26:	4850      	ldr	r0, [pc, #320]	; (8001b68 <_svfiprintf_r+0x1dc>)
 8001a28:	f000 fa30 	bl	8001e8c <memchr>
 8001a2c:	9b04      	ldr	r3, [sp, #16]
 8001a2e:	b9d0      	cbnz	r0, 8001a66 <_svfiprintf_r+0xda>
 8001a30:	06d9      	lsls	r1, r3, #27
 8001a32:	bf44      	itt	mi
 8001a34:	2220      	movmi	r2, #32
 8001a36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a3a:	071a      	lsls	r2, r3, #28
 8001a3c:	bf44      	itt	mi
 8001a3e:	222b      	movmi	r2, #43	; 0x2b
 8001a40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a44:	782a      	ldrb	r2, [r5, #0]
 8001a46:	2a2a      	cmp	r2, #42	; 0x2a
 8001a48:	d015      	beq.n	8001a76 <_svfiprintf_r+0xea>
 8001a4a:	462f      	mov	r7, r5
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	250a      	movs	r5, #10
 8001a50:	9a07      	ldr	r2, [sp, #28]
 8001a52:	4639      	mov	r1, r7
 8001a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a58:	3b30      	subs	r3, #48	; 0x30
 8001a5a:	2b09      	cmp	r3, #9
 8001a5c:	d94d      	bls.n	8001afa <_svfiprintf_r+0x16e>
 8001a5e:	b1b8      	cbz	r0, 8001a90 <_svfiprintf_r+0x104>
 8001a60:	e00f      	b.n	8001a82 <_svfiprintf_r+0xf6>
 8001a62:	462f      	mov	r7, r5
 8001a64:	e7b8      	b.n	80019d8 <_svfiprintf_r+0x4c>
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <_svfiprintf_r+0x1dc>)
 8001a68:	463d      	mov	r5, r7
 8001a6a:	1a80      	subs	r0, r0, r2
 8001a6c:	fa0b f000 	lsl.w	r0, fp, r0
 8001a70:	4318      	orrs	r0, r3
 8001a72:	9004      	str	r0, [sp, #16]
 8001a74:	e7d3      	b.n	8001a1e <_svfiprintf_r+0x92>
 8001a76:	9a03      	ldr	r2, [sp, #12]
 8001a78:	1d11      	adds	r1, r2, #4
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	9103      	str	r1, [sp, #12]
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	db01      	blt.n	8001a86 <_svfiprintf_r+0xfa>
 8001a82:	9207      	str	r2, [sp, #28]
 8001a84:	e004      	b.n	8001a90 <_svfiprintf_r+0x104>
 8001a86:	4252      	negs	r2, r2
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	9207      	str	r2, [sp, #28]
 8001a8e:	9304      	str	r3, [sp, #16]
 8001a90:	783b      	ldrb	r3, [r7, #0]
 8001a92:	2b2e      	cmp	r3, #46	; 0x2e
 8001a94:	d10c      	bne.n	8001ab0 <_svfiprintf_r+0x124>
 8001a96:	787b      	ldrb	r3, [r7, #1]
 8001a98:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9a:	d133      	bne.n	8001b04 <_svfiprintf_r+0x178>
 8001a9c:	9b03      	ldr	r3, [sp, #12]
 8001a9e:	3702      	adds	r7, #2
 8001aa0:	1d1a      	adds	r2, r3, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	9203      	str	r2, [sp, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bfb8      	it	lt
 8001aaa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001aae:	9305      	str	r3, [sp, #20]
 8001ab0:	4d2e      	ldr	r5, [pc, #184]	; (8001b6c <_svfiprintf_r+0x1e0>)
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	7839      	ldrb	r1, [r7, #0]
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f9e8 	bl	8001e8c <memchr>
 8001abc:	b138      	cbz	r0, 8001ace <_svfiprintf_r+0x142>
 8001abe:	2340      	movs	r3, #64	; 0x40
 8001ac0:	1b40      	subs	r0, r0, r5
 8001ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8001ac6:	9b04      	ldr	r3, [sp, #16]
 8001ac8:	3701      	adds	r7, #1
 8001aca:	4303      	orrs	r3, r0
 8001acc:	9304      	str	r3, [sp, #16]
 8001ace:	7839      	ldrb	r1, [r7, #0]
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	4827      	ldr	r0, [pc, #156]	; (8001b70 <_svfiprintf_r+0x1e4>)
 8001ad4:	1c7e      	adds	r6, r7, #1
 8001ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ada:	f000 f9d7 	bl	8001e8c <memchr>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d038      	beq.n	8001b54 <_svfiprintf_r+0x1c8>
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <_svfiprintf_r+0x1e8>)
 8001ae4:	bb13      	cbnz	r3, 8001b2c <_svfiprintf_r+0x1a0>
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	3307      	adds	r3, #7
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	3308      	adds	r3, #8
 8001af0:	9303      	str	r3, [sp, #12]
 8001af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001af4:	444b      	add	r3, r9
 8001af6:	9309      	str	r3, [sp, #36]	; 0x24
 8001af8:	e76d      	b.n	80019d6 <_svfiprintf_r+0x4a>
 8001afa:	fb05 3202 	mla	r2, r5, r2, r3
 8001afe:	2001      	movs	r0, #1
 8001b00:	460f      	mov	r7, r1
 8001b02:	e7a6      	b.n	8001a52 <_svfiprintf_r+0xc6>
 8001b04:	2300      	movs	r3, #0
 8001b06:	250a      	movs	r5, #10
 8001b08:	4619      	mov	r1, r3
 8001b0a:	3701      	adds	r7, #1
 8001b0c:	9305      	str	r3, [sp, #20]
 8001b0e:	4638      	mov	r0, r7
 8001b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b14:	3a30      	subs	r2, #48	; 0x30
 8001b16:	2a09      	cmp	r2, #9
 8001b18:	d903      	bls.n	8001b22 <_svfiprintf_r+0x196>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0c8      	beq.n	8001ab0 <_svfiprintf_r+0x124>
 8001b1e:	9105      	str	r1, [sp, #20]
 8001b20:	e7c6      	b.n	8001ab0 <_svfiprintf_r+0x124>
 8001b22:	fb05 2101 	mla	r1, r5, r1, r2
 8001b26:	2301      	movs	r3, #1
 8001b28:	4607      	mov	r7, r0
 8001b2a:	e7f0      	b.n	8001b0e <_svfiprintf_r+0x182>
 8001b2c:	ab03      	add	r3, sp, #12
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4622      	mov	r2, r4
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <_svfiprintf_r+0x1ec>)
 8001b34:	a904      	add	r1, sp, #16
 8001b36:	4640      	mov	r0, r8
 8001b38:	f3af 8000 	nop.w
 8001b3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b40:	4681      	mov	r9, r0
 8001b42:	d1d6      	bne.n	8001af2 <_svfiprintf_r+0x166>
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	065b      	lsls	r3, r3, #25
 8001b48:	f53f af35 	bmi.w	80019b6 <_svfiprintf_r+0x2a>
 8001b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b4e:	b01d      	add	sp, #116	; 0x74
 8001b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b54:	ab03      	add	r3, sp, #12
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_svfiprintf_r+0x1ec>)
 8001b5c:	a904      	add	r1, sp, #16
 8001b5e:	4640      	mov	r0, r8
 8001b60:	f000 f882 	bl	8001c68 <_printf_i>
 8001b64:	e7ea      	b.n	8001b3c <_svfiprintf_r+0x1b0>
 8001b66:	bf00      	nop
 8001b68:	0800211c 	.word	0x0800211c
 8001b6c:	08002122 	.word	0x08002122
 8001b70:	08002126 	.word	0x08002126
 8001b74:	00000000 	.word	0x00000000
 8001b78:	080018d9 	.word	0x080018d9

08001b7c <_printf_common>:
 8001b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b80:	4691      	mov	r9, r2
 8001b82:	461f      	mov	r7, r3
 8001b84:	688a      	ldr	r2, [r1, #8]
 8001b86:	690b      	ldr	r3, [r1, #16]
 8001b88:	4606      	mov	r6, r0
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	bfb8      	it	lt
 8001b8e:	4613      	movlt	r3, r2
 8001b90:	f8c9 3000 	str.w	r3, [r9]
 8001b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b98:	460c      	mov	r4, r1
 8001b9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b9e:	b112      	cbz	r2, 8001ba6 <_printf_common+0x2a>
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f8c9 3000 	str.w	r3, [r9]
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	0699      	lsls	r1, r3, #26
 8001baa:	bf42      	ittt	mi
 8001bac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bb0:	3302      	addmi	r3, #2
 8001bb2:	f8c9 3000 	strmi.w	r3, [r9]
 8001bb6:	6825      	ldr	r5, [r4, #0]
 8001bb8:	f015 0506 	ands.w	r5, r5, #6
 8001bbc:	d107      	bne.n	8001bce <_printf_common+0x52>
 8001bbe:	f104 0a19 	add.w	sl, r4, #25
 8001bc2:	68e3      	ldr	r3, [r4, #12]
 8001bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	42ab      	cmp	r3, r5
 8001bcc:	dc29      	bgt.n	8001c22 <_printf_common+0xa6>
 8001bce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	3300      	adds	r3, #0
 8001bd6:	bf18      	it	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	0692      	lsls	r2, r2, #26
 8001bdc:	d42e      	bmi.n	8001c3c <_printf_common+0xc0>
 8001bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001be2:	4639      	mov	r1, r7
 8001be4:	4630      	mov	r0, r6
 8001be6:	47c0      	blx	r8
 8001be8:	3001      	adds	r0, #1
 8001bea:	d021      	beq.n	8001c30 <_printf_common+0xb4>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	68e5      	ldr	r5, [r4, #12]
 8001bf0:	f003 0306 	and.w	r3, r3, #6
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	bf18      	it	ne
 8001bf8:	2500      	movne	r5, #0
 8001bfa:	f8d9 2000 	ldr.w	r2, [r9]
 8001bfe:	f04f 0900 	mov.w	r9, #0
 8001c02:	bf08      	it	eq
 8001c04:	1aad      	subeq	r5, r5, r2
 8001c06:	68a3      	ldr	r3, [r4, #8]
 8001c08:	6922      	ldr	r2, [r4, #16]
 8001c0a:	bf08      	it	eq
 8001c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c10:	4293      	cmp	r3, r2
 8001c12:	bfc4      	itt	gt
 8001c14:	1a9b      	subgt	r3, r3, r2
 8001c16:	18ed      	addgt	r5, r5, r3
 8001c18:	341a      	adds	r4, #26
 8001c1a:	454d      	cmp	r5, r9
 8001c1c:	d11a      	bne.n	8001c54 <_printf_common+0xd8>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e008      	b.n	8001c34 <_printf_common+0xb8>
 8001c22:	2301      	movs	r3, #1
 8001c24:	4652      	mov	r2, sl
 8001c26:	4639      	mov	r1, r7
 8001c28:	4630      	mov	r0, r6
 8001c2a:	47c0      	blx	r8
 8001c2c:	3001      	adds	r0, #1
 8001c2e:	d103      	bne.n	8001c38 <_printf_common+0xbc>
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c38:	3501      	adds	r5, #1
 8001c3a:	e7c2      	b.n	8001bc2 <_printf_common+0x46>
 8001c3c:	2030      	movs	r0, #48	; 0x30
 8001c3e:	18e1      	adds	r1, r4, r3
 8001c40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c4a:	4422      	add	r2, r4
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c52:	e7c4      	b.n	8001bde <_printf_common+0x62>
 8001c54:	2301      	movs	r3, #1
 8001c56:	4622      	mov	r2, r4
 8001c58:	4639      	mov	r1, r7
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	47c0      	blx	r8
 8001c5e:	3001      	adds	r0, #1
 8001c60:	d0e6      	beq.n	8001c30 <_printf_common+0xb4>
 8001c62:	f109 0901 	add.w	r9, r9, #1
 8001c66:	e7d8      	b.n	8001c1a <_printf_common+0x9e>

08001c68 <_printf_i>:
 8001c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c70:	460c      	mov	r4, r1
 8001c72:	7e09      	ldrb	r1, [r1, #24]
 8001c74:	b085      	sub	sp, #20
 8001c76:	296e      	cmp	r1, #110	; 0x6e
 8001c78:	4617      	mov	r7, r2
 8001c7a:	4606      	mov	r6, r0
 8001c7c:	4698      	mov	r8, r3
 8001c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c80:	f000 80b3 	beq.w	8001dea <_printf_i+0x182>
 8001c84:	d822      	bhi.n	8001ccc <_printf_i+0x64>
 8001c86:	2963      	cmp	r1, #99	; 0x63
 8001c88:	d036      	beq.n	8001cf8 <_printf_i+0x90>
 8001c8a:	d80a      	bhi.n	8001ca2 <_printf_i+0x3a>
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	f000 80b9 	beq.w	8001e04 <_printf_i+0x19c>
 8001c92:	2958      	cmp	r1, #88	; 0x58
 8001c94:	f000 8083 	beq.w	8001d9e <_printf_i+0x136>
 8001c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001ca0:	e032      	b.n	8001d08 <_printf_i+0xa0>
 8001ca2:	2964      	cmp	r1, #100	; 0x64
 8001ca4:	d001      	beq.n	8001caa <_printf_i+0x42>
 8001ca6:	2969      	cmp	r1, #105	; 0x69
 8001ca8:	d1f6      	bne.n	8001c98 <_printf_i+0x30>
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	0605      	lsls	r5, r0, #24
 8001cb0:	f103 0104 	add.w	r1, r3, #4
 8001cb4:	d52a      	bpl.n	8001d0c <_printf_i+0xa4>
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6011      	str	r1, [r2, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da03      	bge.n	8001cc6 <_printf_i+0x5e>
 8001cbe:	222d      	movs	r2, #45	; 0x2d
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001cc6:	486f      	ldr	r0, [pc, #444]	; (8001e84 <_printf_i+0x21c>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	e039      	b.n	8001d40 <_printf_i+0xd8>
 8001ccc:	2973      	cmp	r1, #115	; 0x73
 8001cce:	f000 809d 	beq.w	8001e0c <_printf_i+0x1a4>
 8001cd2:	d808      	bhi.n	8001ce6 <_printf_i+0x7e>
 8001cd4:	296f      	cmp	r1, #111	; 0x6f
 8001cd6:	d020      	beq.n	8001d1a <_printf_i+0xb2>
 8001cd8:	2970      	cmp	r1, #112	; 0x70
 8001cda:	d1dd      	bne.n	8001c98 <_printf_i+0x30>
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f043 0320 	orr.w	r3, r3, #32
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	e003      	b.n	8001cee <_printf_i+0x86>
 8001ce6:	2975      	cmp	r1, #117	; 0x75
 8001ce8:	d017      	beq.n	8001d1a <_printf_i+0xb2>
 8001cea:	2978      	cmp	r1, #120	; 0x78
 8001cec:	d1d4      	bne.n	8001c98 <_printf_i+0x30>
 8001cee:	2378      	movs	r3, #120	; 0x78
 8001cf0:	4865      	ldr	r0, [pc, #404]	; (8001e88 <_printf_i+0x220>)
 8001cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cf6:	e055      	b.n	8001da4 <_printf_i+0x13c>
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cfe:	1d19      	adds	r1, r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6011      	str	r1, [r2, #0]
 8001d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e08c      	b.n	8001e26 <_printf_i+0x1be>
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d12:	6011      	str	r1, [r2, #0]
 8001d14:	bf18      	it	ne
 8001d16:	b21b      	sxthne	r3, r3
 8001d18:	e7cf      	b.n	8001cba <_printf_i+0x52>
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	6825      	ldr	r5, [r4, #0]
 8001d1e:	1d18      	adds	r0, r3, #4
 8001d20:	6010      	str	r0, [r2, #0]
 8001d22:	0628      	lsls	r0, r5, #24
 8001d24:	d501      	bpl.n	8001d2a <_printf_i+0xc2>
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e002      	b.n	8001d30 <_printf_i+0xc8>
 8001d2a:	0668      	lsls	r0, r5, #25
 8001d2c:	d5fb      	bpl.n	8001d26 <_printf_i+0xbe>
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	296f      	cmp	r1, #111	; 0x6f
 8001d32:	bf14      	ite	ne
 8001d34:	220a      	movne	r2, #10
 8001d36:	2208      	moveq	r2, #8
 8001d38:	4852      	ldr	r0, [pc, #328]	; (8001e84 <_printf_i+0x21c>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d40:	6865      	ldr	r5, [r4, #4]
 8001d42:	2d00      	cmp	r5, #0
 8001d44:	60a5      	str	r5, [r4, #8]
 8001d46:	f2c0 8095 	blt.w	8001e74 <_printf_i+0x20c>
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	f021 0104 	bic.w	r1, r1, #4
 8001d50:	6021      	str	r1, [r4, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d13d      	bne.n	8001dd2 <_printf_i+0x16a>
 8001d56:	2d00      	cmp	r5, #0
 8001d58:	f040 808e 	bne.w	8001e78 <_printf_i+0x210>
 8001d5c:	4665      	mov	r5, ip
 8001d5e:	2a08      	cmp	r2, #8
 8001d60:	d10b      	bne.n	8001d7a <_printf_i+0x112>
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	07db      	lsls	r3, r3, #31
 8001d66:	d508      	bpl.n	8001d7a <_printf_i+0x112>
 8001d68:	6923      	ldr	r3, [r4, #16]
 8001d6a:	6862      	ldr	r2, [r4, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	bfde      	ittt	le
 8001d70:	2330      	movle	r3, #48	; 0x30
 8001d72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d76:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d7a:	ebac 0305 	sub.w	r3, ip, r5
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	f8cd 8000 	str.w	r8, [sp]
 8001d84:	463b      	mov	r3, r7
 8001d86:	aa03      	add	r2, sp, #12
 8001d88:	4621      	mov	r1, r4
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fef6 	bl	8001b7c <_printf_common>
 8001d90:	3001      	adds	r0, #1
 8001d92:	d14d      	bne.n	8001e30 <_printf_i+0x1c8>
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d9e:	4839      	ldr	r0, [pc, #228]	; (8001e84 <_printf_i+0x21c>)
 8001da0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	6821      	ldr	r1, [r4, #0]
 8001da8:	1d1d      	adds	r5, r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6015      	str	r5, [r2, #0]
 8001dae:	060a      	lsls	r2, r1, #24
 8001db0:	d50b      	bpl.n	8001dca <_printf_i+0x162>
 8001db2:	07ca      	lsls	r2, r1, #31
 8001db4:	bf44      	itt	mi
 8001db6:	f041 0120 	orrmi.w	r1, r1, #32
 8001dba:	6021      	strmi	r1, [r4, #0]
 8001dbc:	b91b      	cbnz	r3, 8001dc6 <_printf_i+0x15e>
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	f022 0220 	bic.w	r2, r2, #32
 8001dc4:	6022      	str	r2, [r4, #0]
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	e7b7      	b.n	8001d3a <_printf_i+0xd2>
 8001dca:	064d      	lsls	r5, r1, #25
 8001dcc:	bf48      	it	mi
 8001dce:	b29b      	uxthmi	r3, r3
 8001dd0:	e7ef      	b.n	8001db2 <_printf_i+0x14a>
 8001dd2:	4665      	mov	r5, ip
 8001dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dd8:	fb02 3311 	mls	r3, r2, r1, r3
 8001ddc:	5cc3      	ldrb	r3, [r0, r3]
 8001dde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001de2:	460b      	mov	r3, r1
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d1f5      	bne.n	8001dd4 <_printf_i+0x16c>
 8001de8:	e7b9      	b.n	8001d5e <_printf_i+0xf6>
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	6825      	ldr	r5, [r4, #0]
 8001dee:	1d18      	adds	r0, r3, #4
 8001df0:	6961      	ldr	r1, [r4, #20]
 8001df2:	6010      	str	r0, [r2, #0]
 8001df4:	0628      	lsls	r0, r5, #24
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	d501      	bpl.n	8001dfe <_printf_i+0x196>
 8001dfa:	6019      	str	r1, [r3, #0]
 8001dfc:	e002      	b.n	8001e04 <_printf_i+0x19c>
 8001dfe:	066a      	lsls	r2, r5, #25
 8001e00:	d5fb      	bpl.n	8001dfa <_printf_i+0x192>
 8001e02:	8019      	strh	r1, [r3, #0]
 8001e04:	2300      	movs	r3, #0
 8001e06:	4665      	mov	r5, ip
 8001e08:	6123      	str	r3, [r4, #16]
 8001e0a:	e7b9      	b.n	8001d80 <_printf_i+0x118>
 8001e0c:	6813      	ldr	r3, [r2, #0]
 8001e0e:	1d19      	adds	r1, r3, #4
 8001e10:	6011      	str	r1, [r2, #0]
 8001e12:	681d      	ldr	r5, [r3, #0]
 8001e14:	6862      	ldr	r2, [r4, #4]
 8001e16:	2100      	movs	r1, #0
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f837 	bl	8001e8c <memchr>
 8001e1e:	b108      	cbz	r0, 8001e24 <_printf_i+0x1bc>
 8001e20:	1b40      	subs	r0, r0, r5
 8001e22:	6060      	str	r0, [r4, #4]
 8001e24:	6863      	ldr	r3, [r4, #4]
 8001e26:	6123      	str	r3, [r4, #16]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e2e:	e7a7      	b.n	8001d80 <_printf_i+0x118>
 8001e30:	6923      	ldr	r3, [r4, #16]
 8001e32:	462a      	mov	r2, r5
 8001e34:	4639      	mov	r1, r7
 8001e36:	4630      	mov	r0, r6
 8001e38:	47c0      	blx	r8
 8001e3a:	3001      	adds	r0, #1
 8001e3c:	d0aa      	beq.n	8001d94 <_printf_i+0x12c>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	079b      	lsls	r3, r3, #30
 8001e42:	d413      	bmi.n	8001e6c <_printf_i+0x204>
 8001e44:	68e0      	ldr	r0, [r4, #12]
 8001e46:	9b03      	ldr	r3, [sp, #12]
 8001e48:	4298      	cmp	r0, r3
 8001e4a:	bfb8      	it	lt
 8001e4c:	4618      	movlt	r0, r3
 8001e4e:	e7a3      	b.n	8001d98 <_printf_i+0x130>
 8001e50:	2301      	movs	r3, #1
 8001e52:	464a      	mov	r2, r9
 8001e54:	4639      	mov	r1, r7
 8001e56:	4630      	mov	r0, r6
 8001e58:	47c0      	blx	r8
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	d09a      	beq.n	8001d94 <_printf_i+0x12c>
 8001e5e:	3501      	adds	r5, #1
 8001e60:	68e3      	ldr	r3, [r4, #12]
 8001e62:	9a03      	ldr	r2, [sp, #12]
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	dcf2      	bgt.n	8001e50 <_printf_i+0x1e8>
 8001e6a:	e7eb      	b.n	8001e44 <_printf_i+0x1dc>
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	f104 0919 	add.w	r9, r4, #25
 8001e72:	e7f5      	b.n	8001e60 <_printf_i+0x1f8>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ac      	bne.n	8001dd2 <_printf_i+0x16a>
 8001e78:	7803      	ldrb	r3, [r0, #0]
 8001e7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e82:	e76c      	b.n	8001d5e <_printf_i+0xf6>
 8001e84:	0800212d 	.word	0x0800212d
 8001e88:	0800213e 	.word	0x0800213e

08001e8c <memchr>:
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	4402      	add	r2, r0
 8001e92:	4290      	cmp	r0, r2
 8001e94:	4603      	mov	r3, r0
 8001e96:	d101      	bne.n	8001e9c <memchr+0x10>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e003      	b.n	8001ea4 <memchr+0x18>
 8001e9c:	781c      	ldrb	r4, [r3, #0]
 8001e9e:	3001      	adds	r0, #1
 8001ea0:	428c      	cmp	r4, r1
 8001ea2:	d1f6      	bne.n	8001e92 <memchr+0x6>
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd10      	pop	{r4, pc}

08001ea8 <memcpy>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	1e43      	subs	r3, r0, #1
 8001eac:	440a      	add	r2, r1
 8001eae:	4291      	cmp	r1, r2
 8001eb0:	d100      	bne.n	8001eb4 <memcpy+0xc>
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ebc:	e7f7      	b.n	8001eae <memcpy+0x6>

08001ebe <memmove>:
 8001ebe:	4288      	cmp	r0, r1
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	eb01 0302 	add.w	r3, r1, r2
 8001ec6:	d807      	bhi.n	8001ed8 <memmove+0x1a>
 8001ec8:	1e42      	subs	r2, r0, #1
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	d00a      	beq.n	8001ee4 <memmove+0x26>
 8001ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ed2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001ed6:	e7f8      	b.n	8001eca <memmove+0xc>
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	d9f5      	bls.n	8001ec8 <memmove+0xa>
 8001edc:	1881      	adds	r1, r0, r2
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	42d3      	cmn	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <memmove+0x28>
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001eee:	e7f7      	b.n	8001ee0 <memmove+0x22>

08001ef0 <_free_r>:
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	4605      	mov	r5, r0
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d043      	beq.n	8001f80 <_free_r+0x90>
 8001ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001efc:	1f0c      	subs	r4, r1, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bfb8      	it	lt
 8001f02:	18e4      	addlt	r4, r4, r3
 8001f04:	f000 f8d0 	bl	80020a8 <__malloc_lock>
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <_free_r+0x94>)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	b933      	cbnz	r3, 8001f1e <_free_r+0x2e>
 8001f10:	6063      	str	r3, [r4, #4]
 8001f12:	6014      	str	r4, [r2, #0]
 8001f14:	4628      	mov	r0, r5
 8001f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f1a:	f000 b8c6 	b.w	80020aa <__malloc_unlock>
 8001f1e:	42a3      	cmp	r3, r4
 8001f20:	d90b      	bls.n	8001f3a <_free_r+0x4a>
 8001f22:	6821      	ldr	r1, [r4, #0]
 8001f24:	1862      	adds	r2, r4, r1
 8001f26:	4293      	cmp	r3, r2
 8001f28:	bf01      	itttt	eq
 8001f2a:	681a      	ldreq	r2, [r3, #0]
 8001f2c:	685b      	ldreq	r3, [r3, #4]
 8001f2e:	1852      	addeq	r2, r2, r1
 8001f30:	6022      	streq	r2, [r4, #0]
 8001f32:	6063      	str	r3, [r4, #4]
 8001f34:	6004      	str	r4, [r0, #0]
 8001f36:	e7ed      	b.n	8001f14 <_free_r+0x24>
 8001f38:	4613      	mov	r3, r2
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	b10a      	cbz	r2, 8001f42 <_free_r+0x52>
 8001f3e:	42a2      	cmp	r2, r4
 8001f40:	d9fa      	bls.n	8001f38 <_free_r+0x48>
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	1858      	adds	r0, r3, r1
 8001f46:	42a0      	cmp	r0, r4
 8001f48:	d10b      	bne.n	8001f62 <_free_r+0x72>
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	4401      	add	r1, r0
 8001f4e:	1858      	adds	r0, r3, r1
 8001f50:	4282      	cmp	r2, r0
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	d1de      	bne.n	8001f14 <_free_r+0x24>
 8001f56:	6810      	ldr	r0, [r2, #0]
 8001f58:	6852      	ldr	r2, [r2, #4]
 8001f5a:	4401      	add	r1, r0
 8001f5c:	6019      	str	r1, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	e7d8      	b.n	8001f14 <_free_r+0x24>
 8001f62:	d902      	bls.n	8001f6a <_free_r+0x7a>
 8001f64:	230c      	movs	r3, #12
 8001f66:	602b      	str	r3, [r5, #0]
 8001f68:	e7d4      	b.n	8001f14 <_free_r+0x24>
 8001f6a:	6820      	ldr	r0, [r4, #0]
 8001f6c:	1821      	adds	r1, r4, r0
 8001f6e:	428a      	cmp	r2, r1
 8001f70:	bf01      	itttt	eq
 8001f72:	6811      	ldreq	r1, [r2, #0]
 8001f74:	6852      	ldreq	r2, [r2, #4]
 8001f76:	1809      	addeq	r1, r1, r0
 8001f78:	6021      	streq	r1, [r4, #0]
 8001f7a:	6062      	str	r2, [r4, #4]
 8001f7c:	605c      	str	r4, [r3, #4]
 8001f7e:	e7c9      	b.n	8001f14 <_free_r+0x24>
 8001f80:	bd38      	pop	{r3, r4, r5, pc}
 8001f82:	bf00      	nop
 8001f84:	20000090 	.word	0x20000090

08001f88 <_malloc_r>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	1ccd      	adds	r5, r1, #3
 8001f8c:	f025 0503 	bic.w	r5, r5, #3
 8001f90:	3508      	adds	r5, #8
 8001f92:	2d0c      	cmp	r5, #12
 8001f94:	bf38      	it	cc
 8001f96:	250c      	movcc	r5, #12
 8001f98:	2d00      	cmp	r5, #0
 8001f9a:	4606      	mov	r6, r0
 8001f9c:	db01      	blt.n	8001fa2 <_malloc_r+0x1a>
 8001f9e:	42a9      	cmp	r1, r5
 8001fa0:	d903      	bls.n	8001faa <_malloc_r+0x22>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6033      	str	r3, [r6, #0]
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	f000 f87d 	bl	80020a8 <__malloc_lock>
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <_malloc_r+0xac>)
 8001fb0:	6814      	ldr	r4, [r2, #0]
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	b991      	cbnz	r1, 8001fdc <_malloc_r+0x54>
 8001fb6:	4c20      	ldr	r4, [pc, #128]	; (8002038 <_malloc_r+0xb0>)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	b91b      	cbnz	r3, 8001fc4 <_malloc_r+0x3c>
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f000 f863 	bl	8002088 <_sbrk_r>
 8001fc2:	6020      	str	r0, [r4, #0]
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	f000 f85e 	bl	8002088 <_sbrk_r>
 8001fcc:	1c43      	adds	r3, r0, #1
 8001fce:	d124      	bne.n	800201a <_malloc_r+0x92>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	6033      	str	r3, [r6, #0]
 8001fd6:	f000 f868 	bl	80020aa <__malloc_unlock>
 8001fda:	e7e4      	b.n	8001fa6 <_malloc_r+0x1e>
 8001fdc:	680b      	ldr	r3, [r1, #0]
 8001fde:	1b5b      	subs	r3, r3, r5
 8001fe0:	d418      	bmi.n	8002014 <_malloc_r+0x8c>
 8001fe2:	2b0b      	cmp	r3, #11
 8001fe4:	d90f      	bls.n	8002006 <_malloc_r+0x7e>
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	18cc      	adds	r4, r1, r3
 8001fea:	50cd      	str	r5, [r1, r3]
 8001fec:	4630      	mov	r0, r6
 8001fee:	f000 f85c 	bl	80020aa <__malloc_unlock>
 8001ff2:	f104 000b 	add.w	r0, r4, #11
 8001ff6:	1d23      	adds	r3, r4, #4
 8001ff8:	f020 0007 	bic.w	r0, r0, #7
 8001ffc:	1ac3      	subs	r3, r0, r3
 8001ffe:	d0d3      	beq.n	8001fa8 <_malloc_r+0x20>
 8002000:	425a      	negs	r2, r3
 8002002:	50e2      	str	r2, [r4, r3]
 8002004:	e7d0      	b.n	8001fa8 <_malloc_r+0x20>
 8002006:	684b      	ldr	r3, [r1, #4]
 8002008:	428c      	cmp	r4, r1
 800200a:	bf16      	itet	ne
 800200c:	6063      	strne	r3, [r4, #4]
 800200e:	6013      	streq	r3, [r2, #0]
 8002010:	460c      	movne	r4, r1
 8002012:	e7eb      	b.n	8001fec <_malloc_r+0x64>
 8002014:	460c      	mov	r4, r1
 8002016:	6849      	ldr	r1, [r1, #4]
 8002018:	e7cc      	b.n	8001fb4 <_malloc_r+0x2c>
 800201a:	1cc4      	adds	r4, r0, #3
 800201c:	f024 0403 	bic.w	r4, r4, #3
 8002020:	42a0      	cmp	r0, r4
 8002022:	d005      	beq.n	8002030 <_malloc_r+0xa8>
 8002024:	1a21      	subs	r1, r4, r0
 8002026:	4630      	mov	r0, r6
 8002028:	f000 f82e 	bl	8002088 <_sbrk_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d0cf      	beq.n	8001fd0 <_malloc_r+0x48>
 8002030:	6025      	str	r5, [r4, #0]
 8002032:	e7db      	b.n	8001fec <_malloc_r+0x64>
 8002034:	20000090 	.word	0x20000090
 8002038:	20000094 	.word	0x20000094

0800203c <_realloc_r>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	4607      	mov	r7, r0
 8002040:	4614      	mov	r4, r2
 8002042:	460e      	mov	r6, r1
 8002044:	b921      	cbnz	r1, 8002050 <_realloc_r+0x14>
 8002046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800204a:	4611      	mov	r1, r2
 800204c:	f7ff bf9c 	b.w	8001f88 <_malloc_r>
 8002050:	b922      	cbnz	r2, 800205c <_realloc_r+0x20>
 8002052:	f7ff ff4d 	bl	8001ef0 <_free_r>
 8002056:	4625      	mov	r5, r4
 8002058:	4628      	mov	r0, r5
 800205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205c:	f000 f826 	bl	80020ac <_malloc_usable_size_r>
 8002060:	42a0      	cmp	r0, r4
 8002062:	d20f      	bcs.n	8002084 <_realloc_r+0x48>
 8002064:	4621      	mov	r1, r4
 8002066:	4638      	mov	r0, r7
 8002068:	f7ff ff8e 	bl	8001f88 <_malloc_r>
 800206c:	4605      	mov	r5, r0
 800206e:	2800      	cmp	r0, #0
 8002070:	d0f2      	beq.n	8002058 <_realloc_r+0x1c>
 8002072:	4631      	mov	r1, r6
 8002074:	4622      	mov	r2, r4
 8002076:	f7ff ff17 	bl	8001ea8 <memcpy>
 800207a:	4631      	mov	r1, r6
 800207c:	4638      	mov	r0, r7
 800207e:	f7ff ff37 	bl	8001ef0 <_free_r>
 8002082:	e7e9      	b.n	8002058 <_realloc_r+0x1c>
 8002084:	4635      	mov	r5, r6
 8002086:	e7e7      	b.n	8002058 <_realloc_r+0x1c>

08002088 <_sbrk_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	2300      	movs	r3, #0
 800208c:	4c05      	ldr	r4, [pc, #20]	; (80020a4 <_sbrk_r+0x1c>)
 800208e:	4605      	mov	r5, r0
 8002090:	4608      	mov	r0, r1
 8002092:	6023      	str	r3, [r4, #0]
 8002094:	f7fe fa5a 	bl	800054c <_sbrk>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_sbrk_r+0x1a>
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_sbrk_r+0x1a>
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	20000180 	.word	0x20000180

080020a8 <__malloc_lock>:
 80020a8:	4770      	bx	lr

080020aa <__malloc_unlock>:
 80020aa:	4770      	bx	lr

080020ac <_malloc_usable_size_r>:
 80020ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020b0:	1f18      	subs	r0, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bfbc      	itt	lt
 80020b6:	580b      	ldrlt	r3, [r1, r0]
 80020b8:	18c0      	addlt	r0, r0, r3
 80020ba:	4770      	bx	lr

080020bc <_init>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr

080020c8 <_fini>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr
