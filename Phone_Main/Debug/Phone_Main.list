
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021cc  080021cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021cc  080021cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021cc  080021cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d0  080021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  20000070  08002244  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08002244  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b2a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001295  00000000  00000000  00025bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bee  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005567  00000000  00000000  0003e57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081f84  00000000  00000000  00043ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d4  00000000  00000000  000c5ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002108 	.word	0x08002108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002108 	.word	0x08002108

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <pSendAtCommand>:
/* USER CODE BEGIN 0 */
char at_response[1000];
char display_response[1000];

void pSendAtCommand(const char *command, uint32_t response_time)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	char command_buffer[30] = {0};
 8000166:	f107 0308 	add.w	r3, r7, #8
 800016a:	221e      	movs	r2, #30
 800016c:	2100      	movs	r1, #0
 800016e:	4618      	mov	r0, r3
 8000170:	f001 fbb0 	bl	80018d4 <memset>
	sprintf(command_buffer, "%s\r\n", command);
 8000174:	f107 0308 	add.w	r3, r7, #8
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	490e      	ldr	r1, [pc, #56]	; (80001b4 <pSendAtCommand+0x58>)
 800017c:	4618      	mov	r0, r3
 800017e:	f001 fbb1 	bl	80018e4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)&command_buffer[0], strlen(command_buffer), 100);
 8000182:	f107 0308 	add.w	r3, r7, #8
 8000186:	4618      	mov	r0, r3
 8000188:	f7ff ffe0 	bl	800014c <strlen>
 800018c:	4603      	mov	r3, r0
 800018e:	b29a      	uxth	r2, r3
 8000190:	f107 0108 	add.w	r1, r7, #8
 8000194:	2364      	movs	r3, #100	; 0x64
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <pSendAtCommand+0x5c>)
 8000198:	f001 f969 	bl	800146e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)&at_response[0], sizeof(at_response), response_time);
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001a2:	4906      	ldr	r1, [pc, #24]	; (80001bc <pSendAtCommand+0x60>)
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <pSendAtCommand+0x5c>)
 80001a6:	f001 f9f4 	bl	8001592 <HAL_UART_Receive>
}
 80001aa:	bf00      	nop
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	08002120 	.word	0x08002120
 80001b8:	20000098 	.word	0x20000098
 80001bc:	20000500 	.word	0x20000500

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 fa49 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f847 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f8df 	bl	8000390 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d2:	f000 f889 	bl	80002e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001d6:	f000 f8b1 	bl	800033c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
  while(1)
  {
	  HAL_UART_Receive(&huart2, &display_response[0], sizeof(display_response), 500);
 80001da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001e2:	4918      	ldr	r1, [pc, #96]	; (8000244 <main+0x84>)
 80001e4:	4818      	ldr	r0, [pc, #96]	; (8000248 <main+0x88>)
 80001e6:	f001 f9d4 	bl	8001592 <HAL_UART_Receive>
	  if(display_response[1] == 1 && display_response[2] == 16)
 80001ea:	4b16      	ldr	r3, [pc, #88]	; (8000244 <main+0x84>)
 80001ec:	785b      	ldrb	r3, [r3, #1]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d120      	bne.n	8000234 <main+0x74>
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <main+0x84>)
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	2b10      	cmp	r3, #16
 80001f8:	d11c      	bne.n	8000234 <main+0x74>
	  {
		  char command[18];
		  sprintf(&command[0], "ATD%si;", &display_response[8]);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4a13      	ldr	r2, [pc, #76]	; (800024c <main+0x8c>)
 80001fe:	4914      	ldr	r1, [pc, #80]	; (8000250 <main+0x90>)
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fb6f 	bl	80018e4 <siprintf>
		    pSendAtCommand("ATE0", 400);
 8000206:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800020a:	4812      	ldr	r0, [pc, #72]	; (8000254 <main+0x94>)
 800020c:	f7ff ffa6 	bl	800015c <pSendAtCommand>
		    memset(at_response, 0, sizeof(at_response));
 8000210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000214:	2100      	movs	r1, #0
 8000216:	4810      	ldr	r0, [pc, #64]	; (8000258 <main+0x98>)
 8000218:	f001 fb5c 	bl	80018d4 <memset>

		    pSendAtCommand(&command[0], 5000);
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ff9a 	bl	800015c <pSendAtCommand>
		    memset(at_response, 0, sizeof(at_response));
 8000228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800022c:	2100      	movs	r1, #0
 800022e:	480a      	ldr	r0, [pc, #40]	; (8000258 <main+0x98>)
 8000230:	f001 fb50 	bl	80018d4 <memset>
	  }
	  memset(display_response, 0, sizeof(display_response));
 8000234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000238:	2100      	movs	r1, #0
 800023a:	4802      	ldr	r0, [pc, #8]	; (8000244 <main+0x84>)
 800023c:	f001 fb4a 	bl	80018d4 <memset>
	  HAL_UART_Receive(&huart2, &display_response[0], sizeof(display_response), 500);
 8000240:	e7cb      	b.n	80001da <main+0x1a>
 8000242:	bf00      	nop
 8000244:	20000118 	.word	0x20000118
 8000248:	200000d8 	.word	0x200000d8
 800024c:	20000120 	.word	0x20000120
 8000250:	0800215c 	.word	0x0800215c
 8000254:	08002164 	.word	0x08002164
 8000258:	20000500 	.word	0x20000500

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fb32 	bl	80018d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc79 	bl	8000b9c <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b0:	f000 f890 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fee4 	bl	800109c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002da:	f000 f87b 	bl	80003d4 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART1_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000320:	f001 f858 	bl	80013d4 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f853 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000098 	.word	0x20000098
 8000338:	40013800 	.word	0x40013800

0800033c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_USART2_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000374:	f001 f82e 	bl	80013d4 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f829 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000d8 	.word	0x200000d8
 800038c:	40004400 	.word	0x40004400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <MX_GPIO_Init+0x40>)
 800039c:	f043 0320 	orr.w	r3, r3, #32
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_GPIO_Init+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <MX_GPIO_Init+0x40>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_GPIO_Init+0x40>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]

}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003da:	e7fe      	b.n	80003da <Error_Handler+0x6>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a37      	ldr	r2, [pc, #220]	; (8000538 <HAL_UART_MspInit+0xf8>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d132      	bne.n	80004c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000460:	4b36      	ldr	r3, [pc, #216]	; (800053c <HAL_UART_MspInit+0xfc>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a35      	ldr	r2, [pc, #212]	; (800053c <HAL_UART_MspInit+0xfc>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b33      	ldr	r3, [pc, #204]	; (800053c <HAL_UART_MspInit+0xfc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b30      	ldr	r3, [pc, #192]	; (800053c <HAL_UART_MspInit+0xfc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2f      	ldr	r2, [pc, #188]	; (800053c <HAL_UART_MspInit+0xfc>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <HAL_UART_MspInit+0xfc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	4619      	mov	r1, r3
 80004a4:	4826      	ldr	r0, [pc, #152]	; (8000540 <HAL_UART_MspInit+0x100>)
 80004a6:	f000 fa1f 	bl	80008e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4619      	mov	r1, r3
 80004be:	4820      	ldr	r0, [pc, #128]	; (8000540 <HAL_UART_MspInit+0x100>)
 80004c0:	f000 fa12 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004c4:	e034      	b.n	8000530 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <HAL_UART_MspInit+0x104>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d12f      	bne.n	8000530 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004da:	61d3      	str	r3, [r2, #28]
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_UART_MspInit+0xfc>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000500:	2304      	movs	r3, #4
 8000502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4619      	mov	r1, r3
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_UART_MspInit+0x100>)
 8000514:	f000 f9e8 	bl	80008e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000518:	2308      	movs	r3, #8
 800051a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_UART_MspInit+0x100>)
 800052c:	f000 f9dc 	bl	80008e8 <HAL_GPIO_Init>
}
 8000530:	bf00      	nop
 8000532:	3728      	adds	r7, #40	; 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013800 	.word	0x40013800
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800
 8000544:	40004400 	.word	0x40004400

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058e:	f000 f8ab 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <_sbrk+0x5c>)
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <_sbrk+0x60>)
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <_sbrk+0x64>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <_sbrk+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d207      	bcs.n	80005d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c8:	f001 f95a 	bl	8001880 <__errno>
 80005cc:	4602      	mov	r2, r0
 80005ce:	230c      	movs	r3, #12
 80005d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d6:	e009      	b.n	80005ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <_sbrk+0x64>)
 80005e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ea:	68fb      	ldr	r3, [r7, #12]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20005000 	.word	0x20005000
 80005f8:	00000400 	.word	0x00000400
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	200008f0 	.word	0x200008f0

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000610:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000612:	e003      	b.n	800061c <LoopCopyDataInit>

08000614 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000616:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000618:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800061a:	3104      	adds	r1, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000620:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000622:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000624:	d3f6      	bcc.n	8000614 <CopyDataInit>
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000628:	e002      	b.n	8000630 <LoopFillZerobss>

0800062a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800062c:	f842 3b04 	str.w	r3, [r2], #4

08000630 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000632:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000634:	d3f9      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffe5 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f001 f927 	bl	800188c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fdbf 	bl	80001c0 <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r3, =_sidata
 8000644:	080021d4 	.word	0x080021d4
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800064c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000650:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000654:	200008f0 	.word	0x200008f0

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f907 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f808 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff feb0 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x54>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x58>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f911 	bl	80008ce <HAL_SYSTICK_Config>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00e      	b.n	80006d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d80a      	bhi.n	80006d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c4:	f000 f8e7 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_InitTick+0x5c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e000      	b.n	80006d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <HAL_IncTick+0x20>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000008 	.word	0x20000008
 8000708:	200008e8 	.word	0x200008e8

0800070c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	200008e8 	.word	0x200008e8

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff90 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff49 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5e 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5f 	bl	8000784 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b08b      	sub	sp, #44	; 0x2c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e127      	b.n	8000b4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008fc:	2201      	movs	r2, #1
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	4013      	ands	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	429a      	cmp	r2, r3
 8000916:	f040 8116 	bne.w	8000b46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b12      	cmp	r3, #18
 8000920:	d034      	beq.n	800098c <HAL_GPIO_Init+0xa4>
 8000922:	2b12      	cmp	r3, #18
 8000924:	d80d      	bhi.n	8000942 <HAL_GPIO_Init+0x5a>
 8000926:	2b02      	cmp	r3, #2
 8000928:	d02b      	beq.n	8000982 <HAL_GPIO_Init+0x9a>
 800092a:	2b02      	cmp	r3, #2
 800092c:	d804      	bhi.n	8000938 <HAL_GPIO_Init+0x50>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d031      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d01c      	beq.n	8000970 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000936:	e048      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000938:	2b03      	cmp	r3, #3
 800093a:	d043      	beq.n	80009c4 <HAL_GPIO_Init+0xdc>
 800093c:	2b11      	cmp	r3, #17
 800093e:	d01b      	beq.n	8000978 <HAL_GPIO_Init+0x90>
          break;
 8000940:	e043      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000942:	4a89      	ldr	r2, [pc, #548]	; (8000b68 <HAL_GPIO_Init+0x280>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d026      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000948:	4a87      	ldr	r2, [pc, #540]	; (8000b68 <HAL_GPIO_Init+0x280>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d806      	bhi.n	800095c <HAL_GPIO_Init+0x74>
 800094e:	4a87      	ldr	r2, [pc, #540]	; (8000b6c <HAL_GPIO_Init+0x284>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d020      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000954:	4a86      	ldr	r2, [pc, #536]	; (8000b70 <HAL_GPIO_Init+0x288>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01d      	beq.n	8000996 <HAL_GPIO_Init+0xae>
          break;
 800095a:	e036      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800095c:	4a85      	ldr	r2, [pc, #532]	; (8000b74 <HAL_GPIO_Init+0x28c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000962:	4a85      	ldr	r2, [pc, #532]	; (8000b78 <HAL_GPIO_Init+0x290>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d016      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000968:	4a84      	ldr	r2, [pc, #528]	; (8000b7c <HAL_GPIO_Init+0x294>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0xae>
          break;
 800096e:	e02c      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e028      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	3304      	adds	r3, #4
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e023      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	3308      	adds	r3, #8
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e01e      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	330c      	adds	r3, #12
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e019      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099e:	2304      	movs	r3, #4
 80009a0:	623b      	str	r3, [r7, #32]
          break;
 80009a2:	e012      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d105      	bne.n	80009b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ac:	2308      	movs	r3, #8
 80009ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	611a      	str	r2, [r3, #16]
          break;
 80009b6:	e008      	b.n	80009ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	615a      	str	r2, [r3, #20]
          break;
 80009c2:	e002      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d801      	bhi.n	80009d4 <HAL_GPIO_Init+0xec>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	e001      	b.n	80009d8 <HAL_GPIO_Init+0xf0>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3304      	adds	r3, #4
 80009d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d802      	bhi.n	80009e6 <HAL_GPIO_Init+0xfe>
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x104>
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	3b08      	subs	r3, #8
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	210f      	movs	r1, #15
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	401a      	ands	r2, r3
 80009fe:	6a39      	ldr	r1, [r7, #32]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	431a      	orrs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 8096 	beq.w	8000b46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1a:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <HAL_GPIO_Init+0x298>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a58      	ldr	r2, [pc, #352]	; (8000b80 <HAL_GPIO_Init+0x298>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a32:	4a54      	ldr	r2, [pc, #336]	; (8000b84 <HAL_GPIO_Init+0x29c>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4b      	ldr	r2, [pc, #300]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0x19e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4a      	ldr	r2, [pc, #296]	; (8000b8c <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_GPIO_Init+0x19a>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a49      	ldr	r2, [pc, #292]	; (8000b90 <HAL_GPIO_Init+0x2a8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x196>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a48      	ldr	r2, [pc, #288]	; (8000b94 <HAL_GPIO_Init+0x2ac>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_GPIO_Init+0x192>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x1a0>
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x1a0>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x1a0>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x1a0>
 8000a86:	2300      	movs	r3, #0
 8000a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a8a:	f002 0203 	and.w	r2, r2, #3
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	4093      	lsls	r3, r2
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a98:	493a      	ldr	r1, [pc, #232]	; (8000b84 <HAL_GPIO_Init+0x29c>)
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4938      	ldr	r1, [pc, #224]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4933      	ldr	r1, [pc, #204]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	492e      	ldr	r1, [pc, #184]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	604b      	str	r3, [r1, #4]
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	4929      	ldr	r1, [pc, #164]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	4924      	ldr	r1, [pc, #144]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	608b      	str	r3, [r1, #8]
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	491f      	ldr	r1, [pc, #124]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	491a      	ldr	r1, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4915      	ldr	r1, [pc, #84]	; (8000b98 <HAL_GPIO_Init+0x2b0>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	3301      	adds	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f47f aed0 	bne.w	80008fc <HAL_GPIO_Init+0x14>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	372c      	adds	r7, #44	; 0x2c
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	10210000 	.word	0x10210000
 8000b6c:	10110000 	.word	0x10110000
 8000b70:	10120000 	.word	0x10120000
 8000b74:	10310000 	.word	0x10310000
 8000b78:	10320000 	.word	0x10320000
 8000b7c:	10220000 	.word	0x10220000
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40011400 	.word	0x40011400
 8000b98:	40010400 	.word	0x40010400

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e26c      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8087 	beq.w	8000cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bbc:	4b92      	ldr	r3, [pc, #584]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d00c      	beq.n	8000be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc8:	4b8f      	ldr	r3, [pc, #572]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d112      	bne.n	8000bfa <HAL_RCC_OscConfig+0x5e>
 8000bd4:	4b8c      	ldr	r3, [pc, #560]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be0:	d10b      	bne.n	8000bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be2:	4b89      	ldr	r3, [pc, #548]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d06c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x12c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d168      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e246      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c02:	d106      	bne.n	8000c12 <HAL_RCC_OscConfig+0x76>
 8000c04:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a7f      	ldr	r2, [pc, #508]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e02e      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x98>
 8000c1a:	4b7b      	ldr	r3, [pc, #492]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a7a      	ldr	r2, [pc, #488]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b78      	ldr	r3, [pc, #480]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a77      	ldr	r2, [pc, #476]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e01d      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0xbc>
 8000c3e:	4b72      	ldr	r3, [pc, #456]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a71      	ldr	r2, [pc, #452]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a6e      	ldr	r2, [pc, #440]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e00b      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c58:	4b6b      	ldr	r3, [pc, #428]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a6a      	ldr	r2, [pc, #424]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a67      	ldr	r2, [pc, #412]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d013      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fd48 	bl	800070c <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c80:	f7ff fd44 	bl	800070c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e1fa      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c92:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0xe4>
 8000c9e:	e014      	b.n	8000cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fd34 	bl	800070c <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fd30 	bl	800070c <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e1e6      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cba:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f0      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x10c>
 8000cc6:	e000      	b.n	8000cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d063      	beq.n	8000d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d11c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x18c>
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d116      	bne.n	8000d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfa:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <HAL_RCC_OscConfig+0x176>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d001      	beq.n	8000d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e1ba      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4939      	ldr	r1, [pc, #228]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d26:	e03a      	b.n	8000d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d020      	beq.n	8000d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fce9 	bl	800070c <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fce5 	bl	800070c <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e19b      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f0      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4927      	ldr	r1, [pc, #156]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e015      	b.n	8000d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fcc8 	bl	800070c <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d80:	f7ff fcc4 	bl	800070c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e17a      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d03a      	beq.n	8000e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d019      	beq.n	8000de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_RCC_OscConfig+0x274>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db8:	f7ff fca8 	bl	800070c <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fca4 	bl	800070c <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e15a      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 fada 	bl	8001398 <RCC_Delay>
 8000de4:	e01c      	b.n	8000e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_RCC_OscConfig+0x274>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dec:	f7ff fc8e 	bl	800070c <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df2:	e00f      	b.n	8000e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc8a 	bl	800070c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d908      	bls.n	8000e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e140      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	42420000 	.word	0x42420000
 8000e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	4b9e      	ldr	r3, [pc, #632]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e9      	bne.n	8000df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80a6 	beq.w	8000f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e32:	4b97      	ldr	r3, [pc, #604]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10d      	bne.n	8000e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b94      	ldr	r3, [pc, #592]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a93      	ldr	r2, [pc, #588]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b91      	ldr	r3, [pc, #580]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d118      	bne.n	8000e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4b8b      	ldr	r3, [pc, #556]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a8a      	ldr	r2, [pc, #552]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fc4b 	bl	800070c <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e7a:	f7ff fc47 	bl	800070c <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b64      	cmp	r3, #100	; 0x64
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e0fd      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	4b81      	ldr	r3, [pc, #516]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f0      	beq.n	8000e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x312>
 8000ea0:	4b7b      	ldr	r3, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a7a      	ldr	r2, [pc, #488]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6213      	str	r3, [r2, #32]
 8000eac:	e02d      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x334>
 8000eb6:	4b76      	ldr	r3, [pc, #472]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a75      	ldr	r2, [pc, #468]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	4b73      	ldr	r3, [pc, #460]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a72      	ldr	r2, [pc, #456]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	e01c      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x356>
 8000ed8:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a6c      	ldr	r2, [pc, #432]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a69      	ldr	r2, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	e00b      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000ef2:	4b67      	ldr	r3, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a66      	ldr	r2, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	4b64      	ldr	r3, [pc, #400]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a63      	ldr	r2, [pc, #396]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 0304 	bic.w	r3, r3, #4
 8000f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d015      	beq.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fbfb 	bl	800070c <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fbf7 	bl	800070c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0ab      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0ee      	beq.n	8000f1a <HAL_RCC_OscConfig+0x37e>
 8000f3c:	e014      	b.n	8000f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fbe5 	bl	800070c <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fbe1 	bl	800070c <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e095      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	4b4c      	ldr	r3, [pc, #304]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ee      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d105      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6e:	4b48      	ldr	r3, [pc, #288]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8081 	beq.w	8001086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f84:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d061      	beq.n	8001054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d146      	bne.n	8001026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <HAL_RCC_OscConfig+0x4fc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fbb5 	bl	800070c <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa6:	f7ff fbb1 	bl	800070c <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e067      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d108      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	492d      	ldr	r1, [pc, #180]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a19      	ldr	r1, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	4927      	ldr	r1, [pc, #156]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_RCC_OscConfig+0x4fc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb85 	bl	800070c <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fb81 	bl	800070c <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e037      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x46a>
 8001024:	e02f      	b.n	8001086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_RCC_OscConfig+0x4fc>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fb6e 	bl	800070c <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001034:	f7ff fb6a 	bl	800070c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e020      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x498>
 8001052:	e018      	b.n	8001086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e013      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	40007000 	.word	0x40007000
 8001098:	42420060 	.word	0x42420060

0800109c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0d0      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b0:	4b6a      	ldr	r3, [pc, #424]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d910      	bls.n	80010e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 0207 	bic.w	r2, r3, #7
 80010c6:	4965      	ldr	r1, [pc, #404]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d001      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0b8      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f8:	4b59      	ldr	r3, [pc, #356]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a58      	ldr	r2, [pc, #352]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001110:	4b53      	ldr	r3, [pc, #332]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800111a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	494d      	ldr	r1, [pc, #308]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d040      	beq.n	80011bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d107      	bne.n	8001152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d115      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e07f      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d107      	bne.n	800116a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e073      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06b      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f023 0203 	bic.w	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4936      	ldr	r1, [pc, #216]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800118c:	f7ff fabe 	bl	800070c <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001192:	e00a      	b.n	80011aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	f7ff faba 	bl	800070c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e053      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 020c 	and.w	r2, r3, #12
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1eb      	bne.n	8001194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d210      	bcs.n	80011ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 0207 	bic.w	r2, r3, #7
 80011d2:	4922      	ldr	r1, [pc, #136]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e032      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4916      	ldr	r1, [pc, #88]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	490e      	ldr	r1, [pc, #56]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800122a:	f000 f821 	bl	8001270 <HAL_RCC_GetSysClockFreq>
 800122e:	4601      	mov	r1, r0
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_RCC_ClockConfig+0x1c8>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	fa21 f303 	lsr.w	r3, r1, r3
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x1cc>)
 8001244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_RCC_ClockConfig+0x1d0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fa1c 	bl	8000688 <HAL_InitTick>

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000
 8001260:	40021000 	.word	0x40021000
 8001264:	08002180 	.word	0x08002180
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001270:	b490      	push	{r4, r7}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001278:	1d3c      	adds	r4, r7, #4
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0x40>
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d003      	beq.n	80012b6 <HAL_RCC_GetSysClockFreq+0x46>
 80012ae:	e02d      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012b2:	623b      	str	r3, [r7, #32]
      break;
 80012b4:	e02d      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0c5b      	lsrs	r3, r3, #17
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012e2:	4413      	add	r3, r2
 80012e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012ee:	fb02 f203 	mul.w	r2, r2, r3
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	e004      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	623b      	str	r3, [r7, #32]
      break;
 800130a:	e002      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_RCC_GetSysClockFreq+0xbc>)
 800130e:	623b      	str	r3, [r7, #32]
      break;
 8001310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001312:	6a3b      	ldr	r3, [r7, #32]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bc90      	pop	{r4, r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	0800216c 	.word	0x0800216c
 8001324:	0800217c 	.word	0x0800217c
 8001328:	40021000 	.word	0x40021000
 800132c:	007a1200 	.word	0x007a1200
 8001330:	003d0900 	.word	0x003d0900

08001334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <HAL_RCC_GetHCLKFreq+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134c:	f7ff fff2 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001350:	4601      	mov	r1, r0
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_RCC_GetPCLK1Freq+0x24>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	08002190 	.word	0x08002190

08001370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001374:	f7ff ffde 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001378:	4601      	mov	r1, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0adb      	lsrs	r3, r3, #11
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	08002190 	.word	0x08002190

08001398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <RCC_Delay+0x34>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <RCC_Delay+0x38>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0a5b      	lsrs	r3, r3, #9
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013b4:	bf00      	nop
  }
  while (Delay --);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1e5a      	subs	r2, r3, #1
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f9      	bne.n	80013b4 <RCC_Delay+0x1c>
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e03f      	b.n	8001466 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f820 	bl	8000440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2224      	movs	r2, #36	; 0x24
 8001404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9a3 	bl	8001764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800142c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800143c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800144c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2220      	movs	r2, #32
 8001458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b08a      	sub	sp, #40	; 0x28
 8001472:	af02      	add	r7, sp, #8
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d17c      	bne.n	8001588 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_UART_Transmit+0x2c>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e075      	b.n	800158a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_UART_Transmit+0x3e>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e06e      	b.n	800158a <HAL_UART_Transmit+0x11c>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2221      	movs	r2, #33	; 0x21
 80014be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014c2:	f7ff f923 	bl	800070c <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d108      	bne.n	80014f0 <HAL_UART_Transmit+0x82>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d104      	bne.n	80014f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	e003      	b.n	80014f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001500:	e02a      	b.n	8001558 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f8df 	bl	80016d0 <UART_WaitOnFlagUntilTimeout>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e036      	b.n	800158a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10b      	bne.n	800153a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3302      	adds	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	e007      	b.n	800154a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	3301      	adds	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800155c:	b29b      	uxth	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1cf      	bne.n	8001502 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f8af 	bl	80016d0 <UART_WaitOnFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e006      	b.n	800158a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	e000      	b.n	800158a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001588:	2302      	movs	r3, #2
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b08a      	sub	sp, #40	; 0x28
 8001596:	af02      	add	r7, sp, #8
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	f040 8089 	bne.w	80016c6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_UART_Receive+0x2e>
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e081      	b.n	80016c8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_UART_Receive+0x40>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e07a      	b.n	80016c8 <HAL_UART_Receive+0x136>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2222      	movs	r2, #34	; 0x22
 80015e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f890 	bl	800070c <HAL_GetTick>
 80015ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001602:	d108      	bne.n	8001616 <HAL_UART_Receive+0x84>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	e003      	b.n	800161e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001626:	e043      	b.n	80016b0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2200      	movs	r2, #0
 8001630:	2120      	movs	r1, #32
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f84c 	bl	80016d0 <UART_WaitOnFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e042      	b.n	80016c8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10c      	bne.n	8001662 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001654:	b29a      	uxth	r2, r3
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	3302      	adds	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	e01f      	b.n	80016a2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166a:	d007      	beq.n	800167c <HAL_UART_Receive+0xea>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_UART_Receive+0xf8>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e008      	b.n	800169c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001696:	b2da      	uxtb	r2, r3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	3301      	adds	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1b6      	bne.n	8001628 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e0:	e02c      	b.n	800173c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d028      	beq.n	800173c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <UART_WaitOnFlagUntilTimeout+0x30>
 80016f0:	f7ff f80c 	bl	800070c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d21d      	bcs.n	800173c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800170e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e00f      	b.n	800175c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4013      	ands	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	429a      	cmp	r2, r3
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	429a      	cmp	r2, r3
 8001758:	d0c3      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800179e:	f023 030c 	bic.w	r3, r3, #12
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <UART_SetConfig+0x114>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d103      	bne.n	80017d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017cc:	f7ff fdd0 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	e002      	b.n	80017da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017d4:	f7ff fdb8 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 80017d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009a      	lsls	r2, r3, #2
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <UART_SetConfig+0x118>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	0119      	lsls	r1, r3, #4
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009a      	lsls	r2, r3, #2
 8001804:	441a      	add	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <UART_SetConfig+0x118>)
 8001812:	fba3 0302 	umull	r0, r3, r3, r2
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	3332      	adds	r3, #50	; 0x32
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <UART_SetConfig+0x118>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001830:	4419      	add	r1, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009a      	lsls	r2, r3, #2
 800183c:	441a      	add	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fbb2 f2f3 	udiv	r2, r2, r3
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <UART_SetConfig+0x118>)
 800184a:	fba3 0302 	umull	r0, r3, r3, r2
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2064      	movs	r0, #100	; 0x64
 8001852:	fb00 f303 	mul.w	r3, r0, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	3332      	adds	r3, #50	; 0x32
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <UART_SetConfig+0x118>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	f003 020f 	and.w	r2, r3, #15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	440a      	add	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013800 	.word	0x40013800
 800187c:	51eb851f 	.word	0x51eb851f

08001880 <__errno>:
 8001880:	4b01      	ldr	r3, [pc, #4]	; (8001888 <__errno+0x8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000000c 	.word	0x2000000c

0800188c <__libc_init_array>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	2500      	movs	r5, #0
 8001890:	4e0c      	ldr	r6, [pc, #48]	; (80018c4 <__libc_init_array+0x38>)
 8001892:	4c0d      	ldr	r4, [pc, #52]	; (80018c8 <__libc_init_array+0x3c>)
 8001894:	1ba4      	subs	r4, r4, r6
 8001896:	10a4      	asrs	r4, r4, #2
 8001898:	42a5      	cmp	r5, r4
 800189a:	d109      	bne.n	80018b0 <__libc_init_array+0x24>
 800189c:	f000 fc34 	bl	8002108 <_init>
 80018a0:	2500      	movs	r5, #0
 80018a2:	4e0a      	ldr	r6, [pc, #40]	; (80018cc <__libc_init_array+0x40>)
 80018a4:	4c0a      	ldr	r4, [pc, #40]	; (80018d0 <__libc_init_array+0x44>)
 80018a6:	1ba4      	subs	r4, r4, r6
 80018a8:	10a4      	asrs	r4, r4, #2
 80018aa:	42a5      	cmp	r5, r4
 80018ac:	d105      	bne.n	80018ba <__libc_init_array+0x2e>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018b4:	4798      	blx	r3
 80018b6:	3501      	adds	r5, #1
 80018b8:	e7ee      	b.n	8001898 <__libc_init_array+0xc>
 80018ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018be:	4798      	blx	r3
 80018c0:	3501      	adds	r5, #1
 80018c2:	e7f2      	b.n	80018aa <__libc_init_array+0x1e>
 80018c4:	080021cc 	.word	0x080021cc
 80018c8:	080021cc 	.word	0x080021cc
 80018cc:	080021cc 	.word	0x080021cc
 80018d0:	080021d0 	.word	0x080021d0

080018d4 <memset>:
 80018d4:	4603      	mov	r3, r0
 80018d6:	4402      	add	r2, r0
 80018d8:	4293      	cmp	r3, r2
 80018da:	d100      	bne.n	80018de <memset+0xa>
 80018dc:	4770      	bx	lr
 80018de:	f803 1b01 	strb.w	r1, [r3], #1
 80018e2:	e7f9      	b.n	80018d8 <memset+0x4>

080018e4 <siprintf>:
 80018e4:	b40e      	push	{r1, r2, r3}
 80018e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018ea:	b500      	push	{lr}
 80018ec:	b09c      	sub	sp, #112	; 0x70
 80018ee:	ab1d      	add	r3, sp, #116	; 0x74
 80018f0:	9002      	str	r0, [sp, #8]
 80018f2:	9006      	str	r0, [sp, #24]
 80018f4:	9107      	str	r1, [sp, #28]
 80018f6:	9104      	str	r1, [sp, #16]
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <siprintf+0x38>)
 80018fa:	4909      	ldr	r1, [pc, #36]	; (8001920 <siprintf+0x3c>)
 80018fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001900:	9105      	str	r1, [sp, #20]
 8001902:	6800      	ldr	r0, [r0, #0]
 8001904:	a902      	add	r1, sp, #8
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f000 f866 	bl	80019d8 <_svfiprintf_r>
 800190c:	2200      	movs	r2, #0
 800190e:	9b02      	ldr	r3, [sp, #8]
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	b01c      	add	sp, #112	; 0x70
 8001914:	f85d eb04 	ldr.w	lr, [sp], #4
 8001918:	b003      	add	sp, #12
 800191a:	4770      	bx	lr
 800191c:	2000000c 	.word	0x2000000c
 8001920:	ffff0208 	.word	0xffff0208

08001924 <__ssputs_r>:
 8001924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001928:	688e      	ldr	r6, [r1, #8]
 800192a:	4682      	mov	sl, r0
 800192c:	429e      	cmp	r6, r3
 800192e:	460c      	mov	r4, r1
 8001930:	4690      	mov	r8, r2
 8001932:	4699      	mov	r9, r3
 8001934:	d837      	bhi.n	80019a6 <__ssputs_r+0x82>
 8001936:	898a      	ldrh	r2, [r1, #12]
 8001938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800193c:	d031      	beq.n	80019a2 <__ssputs_r+0x7e>
 800193e:	2302      	movs	r3, #2
 8001940:	6825      	ldr	r5, [r4, #0]
 8001942:	6909      	ldr	r1, [r1, #16]
 8001944:	1a6f      	subs	r7, r5, r1
 8001946:	6965      	ldr	r5, [r4, #20]
 8001948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800194c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001950:	f109 0301 	add.w	r3, r9, #1
 8001954:	443b      	add	r3, r7
 8001956:	429d      	cmp	r5, r3
 8001958:	bf38      	it	cc
 800195a:	461d      	movcc	r5, r3
 800195c:	0553      	lsls	r3, r2, #21
 800195e:	d530      	bpl.n	80019c2 <__ssputs_r+0x9e>
 8001960:	4629      	mov	r1, r5
 8001962:	f000 fb37 	bl	8001fd4 <_malloc_r>
 8001966:	4606      	mov	r6, r0
 8001968:	b950      	cbnz	r0, 8001980 <__ssputs_r+0x5c>
 800196a:	230c      	movs	r3, #12
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001970:	f8ca 3000 	str.w	r3, [sl]
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197a:	81a3      	strh	r3, [r4, #12]
 800197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001980:	463a      	mov	r2, r7
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	f000 fab6 	bl	8001ef4 <memcpy>
 8001988:	89a3      	ldrh	r3, [r4, #12]
 800198a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	81a3      	strh	r3, [r4, #12]
 8001994:	6126      	str	r6, [r4, #16]
 8001996:	443e      	add	r6, r7
 8001998:	6026      	str	r6, [r4, #0]
 800199a:	464e      	mov	r6, r9
 800199c:	6165      	str	r5, [r4, #20]
 800199e:	1bed      	subs	r5, r5, r7
 80019a0:	60a5      	str	r5, [r4, #8]
 80019a2:	454e      	cmp	r6, r9
 80019a4:	d900      	bls.n	80019a8 <__ssputs_r+0x84>
 80019a6:	464e      	mov	r6, r9
 80019a8:	4632      	mov	r2, r6
 80019aa:	4641      	mov	r1, r8
 80019ac:	6820      	ldr	r0, [r4, #0]
 80019ae:	f000 faac 	bl	8001f0a <memmove>
 80019b2:	68a3      	ldr	r3, [r4, #8]
 80019b4:	2000      	movs	r0, #0
 80019b6:	1b9b      	subs	r3, r3, r6
 80019b8:	60a3      	str	r3, [r4, #8]
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	441e      	add	r6, r3
 80019be:	6026      	str	r6, [r4, #0]
 80019c0:	e7dc      	b.n	800197c <__ssputs_r+0x58>
 80019c2:	462a      	mov	r2, r5
 80019c4:	f000 fb60 	bl	8002088 <_realloc_r>
 80019c8:	4606      	mov	r6, r0
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d1e2      	bne.n	8001994 <__ssputs_r+0x70>
 80019ce:	6921      	ldr	r1, [r4, #16]
 80019d0:	4650      	mov	r0, sl
 80019d2:	f000 fab3 	bl	8001f3c <_free_r>
 80019d6:	e7c8      	b.n	800196a <__ssputs_r+0x46>

080019d8 <_svfiprintf_r>:
 80019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019dc:	461d      	mov	r5, r3
 80019de:	898b      	ldrh	r3, [r1, #12]
 80019e0:	b09d      	sub	sp, #116	; 0x74
 80019e2:	061f      	lsls	r7, r3, #24
 80019e4:	4680      	mov	r8, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4616      	mov	r6, r2
 80019ea:	d50f      	bpl.n	8001a0c <_svfiprintf_r+0x34>
 80019ec:	690b      	ldr	r3, [r1, #16]
 80019ee:	b96b      	cbnz	r3, 8001a0c <_svfiprintf_r+0x34>
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	f000 faef 	bl	8001fd4 <_malloc_r>
 80019f6:	6020      	str	r0, [r4, #0]
 80019f8:	6120      	str	r0, [r4, #16]
 80019fa:	b928      	cbnz	r0, 8001a08 <_svfiprintf_r+0x30>
 80019fc:	230c      	movs	r3, #12
 80019fe:	f8c8 3000 	str.w	r3, [r8]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a06:	e0c8      	b.n	8001b9a <_svfiprintf_r+0x1c2>
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	6163      	str	r3, [r4, #20]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a10:	2320      	movs	r3, #32
 8001a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a16:	2330      	movs	r3, #48	; 0x30
 8001a18:	f04f 0b01 	mov.w	fp, #1
 8001a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a20:	9503      	str	r5, [sp, #12]
 8001a22:	4637      	mov	r7, r6
 8001a24:	463d      	mov	r5, r7
 8001a26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001a2a:	b10b      	cbz	r3, 8001a30 <_svfiprintf_r+0x58>
 8001a2c:	2b25      	cmp	r3, #37	; 0x25
 8001a2e:	d13e      	bne.n	8001aae <_svfiprintf_r+0xd6>
 8001a30:	ebb7 0a06 	subs.w	sl, r7, r6
 8001a34:	d00b      	beq.n	8001a4e <_svfiprintf_r+0x76>
 8001a36:	4653      	mov	r3, sl
 8001a38:	4632      	mov	r2, r6
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	f7ff ff71 	bl	8001924 <__ssputs_r>
 8001a42:	3001      	adds	r0, #1
 8001a44:	f000 80a4 	beq.w	8001b90 <_svfiprintf_r+0x1b8>
 8001a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a4a:	4453      	add	r3, sl
 8001a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a4e:	783b      	ldrb	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 809d 	beq.w	8001b90 <_svfiprintf_r+0x1b8>
 8001a56:	2300      	movs	r3, #0
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a60:	9304      	str	r3, [sp, #16]
 8001a62:	9307      	str	r3, [sp, #28]
 8001a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a68:	931a      	str	r3, [sp, #104]	; 0x68
 8001a6a:	462f      	mov	r7, r5
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001a72:	4850      	ldr	r0, [pc, #320]	; (8001bb4 <_svfiprintf_r+0x1dc>)
 8001a74:	f000 fa30 	bl	8001ed8 <memchr>
 8001a78:	9b04      	ldr	r3, [sp, #16]
 8001a7a:	b9d0      	cbnz	r0, 8001ab2 <_svfiprintf_r+0xda>
 8001a7c:	06d9      	lsls	r1, r3, #27
 8001a7e:	bf44      	itt	mi
 8001a80:	2220      	movmi	r2, #32
 8001a82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a86:	071a      	lsls	r2, r3, #28
 8001a88:	bf44      	itt	mi
 8001a8a:	222b      	movmi	r2, #43	; 0x2b
 8001a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a90:	782a      	ldrb	r2, [r5, #0]
 8001a92:	2a2a      	cmp	r2, #42	; 0x2a
 8001a94:	d015      	beq.n	8001ac2 <_svfiprintf_r+0xea>
 8001a96:	462f      	mov	r7, r5
 8001a98:	2000      	movs	r0, #0
 8001a9a:	250a      	movs	r5, #10
 8001a9c:	9a07      	ldr	r2, [sp, #28]
 8001a9e:	4639      	mov	r1, r7
 8001aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d94d      	bls.n	8001b46 <_svfiprintf_r+0x16e>
 8001aaa:	b1b8      	cbz	r0, 8001adc <_svfiprintf_r+0x104>
 8001aac:	e00f      	b.n	8001ace <_svfiprintf_r+0xf6>
 8001aae:	462f      	mov	r7, r5
 8001ab0:	e7b8      	b.n	8001a24 <_svfiprintf_r+0x4c>
 8001ab2:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <_svfiprintf_r+0x1dc>)
 8001ab4:	463d      	mov	r5, r7
 8001ab6:	1a80      	subs	r0, r0, r2
 8001ab8:	fa0b f000 	lsl.w	r0, fp, r0
 8001abc:	4318      	orrs	r0, r3
 8001abe:	9004      	str	r0, [sp, #16]
 8001ac0:	e7d3      	b.n	8001a6a <_svfiprintf_r+0x92>
 8001ac2:	9a03      	ldr	r2, [sp, #12]
 8001ac4:	1d11      	adds	r1, r2, #4
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	9103      	str	r1, [sp, #12]
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	db01      	blt.n	8001ad2 <_svfiprintf_r+0xfa>
 8001ace:	9207      	str	r2, [sp, #28]
 8001ad0:	e004      	b.n	8001adc <_svfiprintf_r+0x104>
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	9207      	str	r2, [sp, #28]
 8001ada:	9304      	str	r3, [sp, #16]
 8001adc:	783b      	ldrb	r3, [r7, #0]
 8001ade:	2b2e      	cmp	r3, #46	; 0x2e
 8001ae0:	d10c      	bne.n	8001afc <_svfiprintf_r+0x124>
 8001ae2:	787b      	ldrb	r3, [r7, #1]
 8001ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ae6:	d133      	bne.n	8001b50 <_svfiprintf_r+0x178>
 8001ae8:	9b03      	ldr	r3, [sp, #12]
 8001aea:	3702      	adds	r7, #2
 8001aec:	1d1a      	adds	r2, r3, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	9203      	str	r2, [sp, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bfb8      	it	lt
 8001af6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	4d2e      	ldr	r5, [pc, #184]	; (8001bb8 <_svfiprintf_r+0x1e0>)
 8001afe:	2203      	movs	r2, #3
 8001b00:	7839      	ldrb	r1, [r7, #0]
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 f9e8 	bl	8001ed8 <memchr>
 8001b08:	b138      	cbz	r0, 8001b1a <_svfiprintf_r+0x142>
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	3701      	adds	r7, #1
 8001b16:	4303      	orrs	r3, r0
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	7839      	ldrb	r1, [r7, #0]
 8001b1c:	2206      	movs	r2, #6
 8001b1e:	4827      	ldr	r0, [pc, #156]	; (8001bbc <_svfiprintf_r+0x1e4>)
 8001b20:	1c7e      	adds	r6, r7, #1
 8001b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b26:	f000 f9d7 	bl	8001ed8 <memchr>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d038      	beq.n	8001ba0 <_svfiprintf_r+0x1c8>
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_svfiprintf_r+0x1e8>)
 8001b30:	bb13      	cbnz	r3, 8001b78 <_svfiprintf_r+0x1a0>
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	3307      	adds	r3, #7
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b40:	444b      	add	r3, r9
 8001b42:	9309      	str	r3, [sp, #36]	; 0x24
 8001b44:	e76d      	b.n	8001a22 <_svfiprintf_r+0x4a>
 8001b46:	fb05 3202 	mla	r2, r5, r2, r3
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	460f      	mov	r7, r1
 8001b4e:	e7a6      	b.n	8001a9e <_svfiprintf_r+0xc6>
 8001b50:	2300      	movs	r3, #0
 8001b52:	250a      	movs	r5, #10
 8001b54:	4619      	mov	r1, r3
 8001b56:	3701      	adds	r7, #1
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b60:	3a30      	subs	r2, #48	; 0x30
 8001b62:	2a09      	cmp	r2, #9
 8001b64:	d903      	bls.n	8001b6e <_svfiprintf_r+0x196>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0c8      	beq.n	8001afc <_svfiprintf_r+0x124>
 8001b6a:	9105      	str	r1, [sp, #20]
 8001b6c:	e7c6      	b.n	8001afc <_svfiprintf_r+0x124>
 8001b6e:	fb05 2101 	mla	r1, r5, r1, r2
 8001b72:	2301      	movs	r3, #1
 8001b74:	4607      	mov	r7, r0
 8001b76:	e7f0      	b.n	8001b5a <_svfiprintf_r+0x182>
 8001b78:	ab03      	add	r3, sp, #12
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_svfiprintf_r+0x1ec>)
 8001b80:	a904      	add	r1, sp, #16
 8001b82:	4640      	mov	r0, r8
 8001b84:	f3af 8000 	nop.w
 8001b88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b8c:	4681      	mov	r9, r0
 8001b8e:	d1d6      	bne.n	8001b3e <_svfiprintf_r+0x166>
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	065b      	lsls	r3, r3, #25
 8001b94:	f53f af35 	bmi.w	8001a02 <_svfiprintf_r+0x2a>
 8001b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b9a:	b01d      	add	sp, #116	; 0x74
 8001b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba0:	ab03      	add	r3, sp, #12
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_svfiprintf_r+0x1ec>)
 8001ba8:	a904      	add	r1, sp, #16
 8001baa:	4640      	mov	r0, r8
 8001bac:	f000 f882 	bl	8001cb4 <_printf_i>
 8001bb0:	e7ea      	b.n	8001b88 <_svfiprintf_r+0x1b0>
 8001bb2:	bf00      	nop
 8001bb4:	08002198 	.word	0x08002198
 8001bb8:	0800219e 	.word	0x0800219e
 8001bbc:	080021a2 	.word	0x080021a2
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	08001925 	.word	0x08001925

08001bc8 <_printf_common>:
 8001bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	4691      	mov	r9, r2
 8001bce:	461f      	mov	r7, r3
 8001bd0:	688a      	ldr	r2, [r1, #8]
 8001bd2:	690b      	ldr	r3, [r1, #16]
 8001bd4:	4606      	mov	r6, r0
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	bfb8      	it	lt
 8001bda:	4613      	movlt	r3, r2
 8001bdc:	f8c9 3000 	str.w	r3, [r9]
 8001be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001be4:	460c      	mov	r4, r1
 8001be6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bea:	b112      	cbz	r2, 8001bf2 <_printf_common+0x2a>
 8001bec:	3301      	adds	r3, #1
 8001bee:	f8c9 3000 	str.w	r3, [r9]
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	0699      	lsls	r1, r3, #26
 8001bf6:	bf42      	ittt	mi
 8001bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bfc:	3302      	addmi	r3, #2
 8001bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	f015 0506 	ands.w	r5, r5, #6
 8001c08:	d107      	bne.n	8001c1a <_printf_common+0x52>
 8001c0a:	f104 0a19 	add.w	sl, r4, #25
 8001c0e:	68e3      	ldr	r3, [r4, #12]
 8001c10:	f8d9 2000 	ldr.w	r2, [r9]
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	42ab      	cmp	r3, r5
 8001c18:	dc29      	bgt.n	8001c6e <_printf_common+0xa6>
 8001c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	3300      	adds	r3, #0
 8001c22:	bf18      	it	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	0692      	lsls	r2, r2, #26
 8001c28:	d42e      	bmi.n	8001c88 <_printf_common+0xc0>
 8001c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c2e:	4639      	mov	r1, r7
 8001c30:	4630      	mov	r0, r6
 8001c32:	47c0      	blx	r8
 8001c34:	3001      	adds	r0, #1
 8001c36:	d021      	beq.n	8001c7c <_printf_common+0xb4>
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	68e5      	ldr	r5, [r4, #12]
 8001c3c:	f003 0306 	and.w	r3, r3, #6
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	bf18      	it	ne
 8001c44:	2500      	movne	r5, #0
 8001c46:	f8d9 2000 	ldr.w	r2, [r9]
 8001c4a:	f04f 0900 	mov.w	r9, #0
 8001c4e:	bf08      	it	eq
 8001c50:	1aad      	subeq	r5, r5, r2
 8001c52:	68a3      	ldr	r3, [r4, #8]
 8001c54:	6922      	ldr	r2, [r4, #16]
 8001c56:	bf08      	it	eq
 8001c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bfc4      	itt	gt
 8001c60:	1a9b      	subgt	r3, r3, r2
 8001c62:	18ed      	addgt	r5, r5, r3
 8001c64:	341a      	adds	r4, #26
 8001c66:	454d      	cmp	r5, r9
 8001c68:	d11a      	bne.n	8001ca0 <_printf_common+0xd8>
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e008      	b.n	8001c80 <_printf_common+0xb8>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4652      	mov	r2, sl
 8001c72:	4639      	mov	r1, r7
 8001c74:	4630      	mov	r0, r6
 8001c76:	47c0      	blx	r8
 8001c78:	3001      	adds	r0, #1
 8001c7a:	d103      	bne.n	8001c84 <_printf_common+0xbc>
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7c2      	b.n	8001c0e <_printf_common+0x46>
 8001c88:	2030      	movs	r0, #48	; 0x30
 8001c8a:	18e1      	adds	r1, r4, r3
 8001c8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c96:	4422      	add	r2, r4
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c9e:	e7c4      	b.n	8001c2a <_printf_common+0x62>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	47c0      	blx	r8
 8001caa:	3001      	adds	r0, #1
 8001cac:	d0e6      	beq.n	8001c7c <_printf_common+0xb4>
 8001cae:	f109 0901 	add.w	r9, r9, #1
 8001cb2:	e7d8      	b.n	8001c66 <_printf_common+0x9e>

08001cb4 <_printf_i>:
 8001cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	7e09      	ldrb	r1, [r1, #24]
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	296e      	cmp	r1, #110	; 0x6e
 8001cc4:	4617      	mov	r7, r2
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	4698      	mov	r8, r3
 8001cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ccc:	f000 80b3 	beq.w	8001e36 <_printf_i+0x182>
 8001cd0:	d822      	bhi.n	8001d18 <_printf_i+0x64>
 8001cd2:	2963      	cmp	r1, #99	; 0x63
 8001cd4:	d036      	beq.n	8001d44 <_printf_i+0x90>
 8001cd6:	d80a      	bhi.n	8001cee <_printf_i+0x3a>
 8001cd8:	2900      	cmp	r1, #0
 8001cda:	f000 80b9 	beq.w	8001e50 <_printf_i+0x19c>
 8001cde:	2958      	cmp	r1, #88	; 0x58
 8001ce0:	f000 8083 	beq.w	8001dea <_printf_i+0x136>
 8001ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ce8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001cec:	e032      	b.n	8001d54 <_printf_i+0xa0>
 8001cee:	2964      	cmp	r1, #100	; 0x64
 8001cf0:	d001      	beq.n	8001cf6 <_printf_i+0x42>
 8001cf2:	2969      	cmp	r1, #105	; 0x69
 8001cf4:	d1f6      	bne.n	8001ce4 <_printf_i+0x30>
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	0605      	lsls	r5, r0, #24
 8001cfc:	f103 0104 	add.w	r1, r3, #4
 8001d00:	d52a      	bpl.n	8001d58 <_printf_i+0xa4>
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da03      	bge.n	8001d12 <_printf_i+0x5e>
 8001d0a:	222d      	movs	r2, #45	; 0x2d
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d12:	486f      	ldr	r0, [pc, #444]	; (8001ed0 <_printf_i+0x21c>)
 8001d14:	220a      	movs	r2, #10
 8001d16:	e039      	b.n	8001d8c <_printf_i+0xd8>
 8001d18:	2973      	cmp	r1, #115	; 0x73
 8001d1a:	f000 809d 	beq.w	8001e58 <_printf_i+0x1a4>
 8001d1e:	d808      	bhi.n	8001d32 <_printf_i+0x7e>
 8001d20:	296f      	cmp	r1, #111	; 0x6f
 8001d22:	d020      	beq.n	8001d66 <_printf_i+0xb2>
 8001d24:	2970      	cmp	r1, #112	; 0x70
 8001d26:	d1dd      	bne.n	8001ce4 <_printf_i+0x30>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f043 0320 	orr.w	r3, r3, #32
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	e003      	b.n	8001d3a <_printf_i+0x86>
 8001d32:	2975      	cmp	r1, #117	; 0x75
 8001d34:	d017      	beq.n	8001d66 <_printf_i+0xb2>
 8001d36:	2978      	cmp	r1, #120	; 0x78
 8001d38:	d1d4      	bne.n	8001ce4 <_printf_i+0x30>
 8001d3a:	2378      	movs	r3, #120	; 0x78
 8001d3c:	4865      	ldr	r0, [pc, #404]	; (8001ed4 <_printf_i+0x220>)
 8001d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d42:	e055      	b.n	8001df0 <_printf_i+0x13c>
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d4a:	1d19      	adds	r1, r3, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6011      	str	r1, [r2, #0]
 8001d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d54:	2301      	movs	r3, #1
 8001d56:	e08c      	b.n	8001e72 <_printf_i+0x1be>
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d5e:	6011      	str	r1, [r2, #0]
 8001d60:	bf18      	it	ne
 8001d62:	b21b      	sxthne	r3, r3
 8001d64:	e7cf      	b.n	8001d06 <_printf_i+0x52>
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	6825      	ldr	r5, [r4, #0]
 8001d6a:	1d18      	adds	r0, r3, #4
 8001d6c:	6010      	str	r0, [r2, #0]
 8001d6e:	0628      	lsls	r0, r5, #24
 8001d70:	d501      	bpl.n	8001d76 <_printf_i+0xc2>
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e002      	b.n	8001d7c <_printf_i+0xc8>
 8001d76:	0668      	lsls	r0, r5, #25
 8001d78:	d5fb      	bpl.n	8001d72 <_printf_i+0xbe>
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	296f      	cmp	r1, #111	; 0x6f
 8001d7e:	bf14      	ite	ne
 8001d80:	220a      	movne	r2, #10
 8001d82:	2208      	moveq	r2, #8
 8001d84:	4852      	ldr	r0, [pc, #328]	; (8001ed0 <_printf_i+0x21c>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d8c:	6865      	ldr	r5, [r4, #4]
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	60a5      	str	r5, [r4, #8]
 8001d92:	f2c0 8095 	blt.w	8001ec0 <_printf_i+0x20c>
 8001d96:	6821      	ldr	r1, [r4, #0]
 8001d98:	f021 0104 	bic.w	r1, r1, #4
 8001d9c:	6021      	str	r1, [r4, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <_printf_i+0x16a>
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	f040 808e 	bne.w	8001ec4 <_printf_i+0x210>
 8001da8:	4665      	mov	r5, ip
 8001daa:	2a08      	cmp	r2, #8
 8001dac:	d10b      	bne.n	8001dc6 <_printf_i+0x112>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	07db      	lsls	r3, r3, #31
 8001db2:	d508      	bpl.n	8001dc6 <_printf_i+0x112>
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	6862      	ldr	r2, [r4, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	bfde      	ittt	le
 8001dbc:	2330      	movle	r3, #48	; 0x30
 8001dbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001dc6:	ebac 0305 	sub.w	r3, ip, r5
 8001dca:	6123      	str	r3, [r4, #16]
 8001dcc:	f8cd 8000 	str.w	r8, [sp]
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	aa03      	add	r2, sp, #12
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fef6 	bl	8001bc8 <_printf_common>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d14d      	bne.n	8001e7c <_printf_i+0x1c8>
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de4:	b005      	add	sp, #20
 8001de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dea:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <_printf_i+0x21c>)
 8001dec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	1d1d      	adds	r5, r3, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6015      	str	r5, [r2, #0]
 8001dfa:	060a      	lsls	r2, r1, #24
 8001dfc:	d50b      	bpl.n	8001e16 <_printf_i+0x162>
 8001dfe:	07ca      	lsls	r2, r1, #31
 8001e00:	bf44      	itt	mi
 8001e02:	f041 0120 	orrmi.w	r1, r1, #32
 8001e06:	6021      	strmi	r1, [r4, #0]
 8001e08:	b91b      	cbnz	r3, 8001e12 <_printf_i+0x15e>
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	f022 0220 	bic.w	r2, r2, #32
 8001e10:	6022      	str	r2, [r4, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	e7b7      	b.n	8001d86 <_printf_i+0xd2>
 8001e16:	064d      	lsls	r5, r1, #25
 8001e18:	bf48      	it	mi
 8001e1a:	b29b      	uxthmi	r3, r3
 8001e1c:	e7ef      	b.n	8001dfe <_printf_i+0x14a>
 8001e1e:	4665      	mov	r5, ip
 8001e20:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e24:	fb02 3311 	mls	r3, r2, r1, r3
 8001e28:	5cc3      	ldrb	r3, [r0, r3]
 8001e2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e2e:	460b      	mov	r3, r1
 8001e30:	2900      	cmp	r1, #0
 8001e32:	d1f5      	bne.n	8001e20 <_printf_i+0x16c>
 8001e34:	e7b9      	b.n	8001daa <_printf_i+0xf6>
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	6825      	ldr	r5, [r4, #0]
 8001e3a:	1d18      	adds	r0, r3, #4
 8001e3c:	6961      	ldr	r1, [r4, #20]
 8001e3e:	6010      	str	r0, [r2, #0]
 8001e40:	0628      	lsls	r0, r5, #24
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	d501      	bpl.n	8001e4a <_printf_i+0x196>
 8001e46:	6019      	str	r1, [r3, #0]
 8001e48:	e002      	b.n	8001e50 <_printf_i+0x19c>
 8001e4a:	066a      	lsls	r2, r5, #25
 8001e4c:	d5fb      	bpl.n	8001e46 <_printf_i+0x192>
 8001e4e:	8019      	strh	r1, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	4665      	mov	r5, ip
 8001e54:	6123      	str	r3, [r4, #16]
 8001e56:	e7b9      	b.n	8001dcc <_printf_i+0x118>
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	1d19      	adds	r1, r3, #4
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	681d      	ldr	r5, [r3, #0]
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4628      	mov	r0, r5
 8001e66:	f000 f837 	bl	8001ed8 <memchr>
 8001e6a:	b108      	cbz	r0, 8001e70 <_printf_i+0x1bc>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	6060      	str	r0, [r4, #4]
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	6123      	str	r3, [r4, #16]
 8001e74:	2300      	movs	r3, #0
 8001e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e7a:	e7a7      	b.n	8001dcc <_printf_i+0x118>
 8001e7c:	6923      	ldr	r3, [r4, #16]
 8001e7e:	462a      	mov	r2, r5
 8001e80:	4639      	mov	r1, r7
 8001e82:	4630      	mov	r0, r6
 8001e84:	47c0      	blx	r8
 8001e86:	3001      	adds	r0, #1
 8001e88:	d0aa      	beq.n	8001de0 <_printf_i+0x12c>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	079b      	lsls	r3, r3, #30
 8001e8e:	d413      	bmi.n	8001eb8 <_printf_i+0x204>
 8001e90:	68e0      	ldr	r0, [r4, #12]
 8001e92:	9b03      	ldr	r3, [sp, #12]
 8001e94:	4298      	cmp	r0, r3
 8001e96:	bfb8      	it	lt
 8001e98:	4618      	movlt	r0, r3
 8001e9a:	e7a3      	b.n	8001de4 <_printf_i+0x130>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	464a      	mov	r2, r9
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	47c0      	blx	r8
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d09a      	beq.n	8001de0 <_printf_i+0x12c>
 8001eaa:	3501      	adds	r5, #1
 8001eac:	68e3      	ldr	r3, [r4, #12]
 8001eae:	9a03      	ldr	r2, [sp, #12]
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	42ab      	cmp	r3, r5
 8001eb4:	dcf2      	bgt.n	8001e9c <_printf_i+0x1e8>
 8001eb6:	e7eb      	b.n	8001e90 <_printf_i+0x1dc>
 8001eb8:	2500      	movs	r5, #0
 8001eba:	f104 0919 	add.w	r9, r4, #25
 8001ebe:	e7f5      	b.n	8001eac <_printf_i+0x1f8>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ac      	bne.n	8001e1e <_printf_i+0x16a>
 8001ec4:	7803      	ldrb	r3, [r0, #0]
 8001ec6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ece:	e76c      	b.n	8001daa <_printf_i+0xf6>
 8001ed0:	080021a9 	.word	0x080021a9
 8001ed4:	080021ba 	.word	0x080021ba

08001ed8 <memchr>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	b2c9      	uxtb	r1, r1
 8001edc:	4402      	add	r2, r0
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	d101      	bne.n	8001ee8 <memchr+0x10>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e003      	b.n	8001ef0 <memchr+0x18>
 8001ee8:	781c      	ldrb	r4, [r3, #0]
 8001eea:	3001      	adds	r0, #1
 8001eec:	428c      	cmp	r4, r1
 8001eee:	d1f6      	bne.n	8001ede <memchr+0x6>
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <memcpy>:
 8001ef4:	b510      	push	{r4, lr}
 8001ef6:	1e43      	subs	r3, r0, #1
 8001ef8:	440a      	add	r2, r1
 8001efa:	4291      	cmp	r1, r2
 8001efc:	d100      	bne.n	8001f00 <memcpy+0xc>
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f08:	e7f7      	b.n	8001efa <memcpy+0x6>

08001f0a <memmove>:
 8001f0a:	4288      	cmp	r0, r1
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	eb01 0302 	add.w	r3, r1, r2
 8001f12:	d807      	bhi.n	8001f24 <memmove+0x1a>
 8001f14:	1e42      	subs	r2, r0, #1
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d00a      	beq.n	8001f30 <memmove+0x26>
 8001f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001f22:	e7f8      	b.n	8001f16 <memmove+0xc>
 8001f24:	4283      	cmp	r3, r0
 8001f26:	d9f5      	bls.n	8001f14 <memmove+0xa>
 8001f28:	1881      	adds	r1, r0, r2
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	42d3      	cmn	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memmove+0x28>
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001f3a:	e7f7      	b.n	8001f2c <memmove+0x22>

08001f3c <_free_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4605      	mov	r5, r0
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d043      	beq.n	8001fcc <_free_r+0x90>
 8001f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f48:	1f0c      	subs	r4, r1, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	18e4      	addlt	r4, r4, r3
 8001f50:	f000 f8d0 	bl	80020f4 <__malloc_lock>
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <_free_r+0x94>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	b933      	cbnz	r3, 8001f6a <_free_r+0x2e>
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	6014      	str	r4, [r2, #0]
 8001f60:	4628      	mov	r0, r5
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f000 b8c6 	b.w	80020f6 <__malloc_unlock>
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	d90b      	bls.n	8001f86 <_free_r+0x4a>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	1862      	adds	r2, r4, r1
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bf01      	itttt	eq
 8001f76:	681a      	ldreq	r2, [r3, #0]
 8001f78:	685b      	ldreq	r3, [r3, #4]
 8001f7a:	1852      	addeq	r2, r2, r1
 8001f7c:	6022      	streq	r2, [r4, #0]
 8001f7e:	6063      	str	r3, [r4, #4]
 8001f80:	6004      	str	r4, [r0, #0]
 8001f82:	e7ed      	b.n	8001f60 <_free_r+0x24>
 8001f84:	4613      	mov	r3, r2
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	b10a      	cbz	r2, 8001f8e <_free_r+0x52>
 8001f8a:	42a2      	cmp	r2, r4
 8001f8c:	d9fa      	bls.n	8001f84 <_free_r+0x48>
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	1858      	adds	r0, r3, r1
 8001f92:	42a0      	cmp	r0, r4
 8001f94:	d10b      	bne.n	8001fae <_free_r+0x72>
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	4401      	add	r1, r0
 8001f9a:	1858      	adds	r0, r3, r1
 8001f9c:	4282      	cmp	r2, r0
 8001f9e:	6019      	str	r1, [r3, #0]
 8001fa0:	d1de      	bne.n	8001f60 <_free_r+0x24>
 8001fa2:	6810      	ldr	r0, [r2, #0]
 8001fa4:	6852      	ldr	r2, [r2, #4]
 8001fa6:	4401      	add	r1, r0
 8001fa8:	6019      	str	r1, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	e7d8      	b.n	8001f60 <_free_r+0x24>
 8001fae:	d902      	bls.n	8001fb6 <_free_r+0x7a>
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	e7d4      	b.n	8001f60 <_free_r+0x24>
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	1821      	adds	r1, r4, r0
 8001fba:	428a      	cmp	r2, r1
 8001fbc:	bf01      	itttt	eq
 8001fbe:	6811      	ldreq	r1, [r2, #0]
 8001fc0:	6852      	ldreq	r2, [r2, #4]
 8001fc2:	1809      	addeq	r1, r1, r0
 8001fc4:	6021      	streq	r1, [r4, #0]
 8001fc6:	6062      	str	r2, [r4, #4]
 8001fc8:	605c      	str	r4, [r3, #4]
 8001fca:	e7c9      	b.n	8001f60 <_free_r+0x24>
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000090 	.word	0x20000090

08001fd4 <_malloc_r>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	1ccd      	adds	r5, r1, #3
 8001fd8:	f025 0503 	bic.w	r5, r5, #3
 8001fdc:	3508      	adds	r5, #8
 8001fde:	2d0c      	cmp	r5, #12
 8001fe0:	bf38      	it	cc
 8001fe2:	250c      	movcc	r5, #12
 8001fe4:	2d00      	cmp	r5, #0
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	db01      	blt.n	8001fee <_malloc_r+0x1a>
 8001fea:	42a9      	cmp	r1, r5
 8001fec:	d903      	bls.n	8001ff6 <_malloc_r+0x22>
 8001fee:	230c      	movs	r3, #12
 8001ff0:	6033      	str	r3, [r6, #0]
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	f000 f87d 	bl	80020f4 <__malloc_lock>
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <_malloc_r+0xac>)
 8001ffc:	6814      	ldr	r4, [r2, #0]
 8001ffe:	4621      	mov	r1, r4
 8002000:	b991      	cbnz	r1, 8002028 <_malloc_r+0x54>
 8002002:	4c20      	ldr	r4, [pc, #128]	; (8002084 <_malloc_r+0xb0>)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	b91b      	cbnz	r3, 8002010 <_malloc_r+0x3c>
 8002008:	4630      	mov	r0, r6
 800200a:	f000 f863 	bl	80020d4 <_sbrk_r>
 800200e:	6020      	str	r0, [r4, #0]
 8002010:	4629      	mov	r1, r5
 8002012:	4630      	mov	r0, r6
 8002014:	f000 f85e 	bl	80020d4 <_sbrk_r>
 8002018:	1c43      	adds	r3, r0, #1
 800201a:	d124      	bne.n	8002066 <_malloc_r+0x92>
 800201c:	230c      	movs	r3, #12
 800201e:	4630      	mov	r0, r6
 8002020:	6033      	str	r3, [r6, #0]
 8002022:	f000 f868 	bl	80020f6 <__malloc_unlock>
 8002026:	e7e4      	b.n	8001ff2 <_malloc_r+0x1e>
 8002028:	680b      	ldr	r3, [r1, #0]
 800202a:	1b5b      	subs	r3, r3, r5
 800202c:	d418      	bmi.n	8002060 <_malloc_r+0x8c>
 800202e:	2b0b      	cmp	r3, #11
 8002030:	d90f      	bls.n	8002052 <_malloc_r+0x7e>
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	18cc      	adds	r4, r1, r3
 8002036:	50cd      	str	r5, [r1, r3]
 8002038:	4630      	mov	r0, r6
 800203a:	f000 f85c 	bl	80020f6 <__malloc_unlock>
 800203e:	f104 000b 	add.w	r0, r4, #11
 8002042:	1d23      	adds	r3, r4, #4
 8002044:	f020 0007 	bic.w	r0, r0, #7
 8002048:	1ac3      	subs	r3, r0, r3
 800204a:	d0d3      	beq.n	8001ff4 <_malloc_r+0x20>
 800204c:	425a      	negs	r2, r3
 800204e:	50e2      	str	r2, [r4, r3]
 8002050:	e7d0      	b.n	8001ff4 <_malloc_r+0x20>
 8002052:	684b      	ldr	r3, [r1, #4]
 8002054:	428c      	cmp	r4, r1
 8002056:	bf16      	itet	ne
 8002058:	6063      	strne	r3, [r4, #4]
 800205a:	6013      	streq	r3, [r2, #0]
 800205c:	460c      	movne	r4, r1
 800205e:	e7eb      	b.n	8002038 <_malloc_r+0x64>
 8002060:	460c      	mov	r4, r1
 8002062:	6849      	ldr	r1, [r1, #4]
 8002064:	e7cc      	b.n	8002000 <_malloc_r+0x2c>
 8002066:	1cc4      	adds	r4, r0, #3
 8002068:	f024 0403 	bic.w	r4, r4, #3
 800206c:	42a0      	cmp	r0, r4
 800206e:	d005      	beq.n	800207c <_malloc_r+0xa8>
 8002070:	1a21      	subs	r1, r4, r0
 8002072:	4630      	mov	r0, r6
 8002074:	f000 f82e 	bl	80020d4 <_sbrk_r>
 8002078:	3001      	adds	r0, #1
 800207a:	d0cf      	beq.n	800201c <_malloc_r+0x48>
 800207c:	6025      	str	r5, [r4, #0]
 800207e:	e7db      	b.n	8002038 <_malloc_r+0x64>
 8002080:	20000090 	.word	0x20000090
 8002084:	20000094 	.word	0x20000094

08002088 <_realloc_r>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	4607      	mov	r7, r0
 800208c:	4614      	mov	r4, r2
 800208e:	460e      	mov	r6, r1
 8002090:	b921      	cbnz	r1, 800209c <_realloc_r+0x14>
 8002092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002096:	4611      	mov	r1, r2
 8002098:	f7ff bf9c 	b.w	8001fd4 <_malloc_r>
 800209c:	b922      	cbnz	r2, 80020a8 <_realloc_r+0x20>
 800209e:	f7ff ff4d 	bl	8001f3c <_free_r>
 80020a2:	4625      	mov	r5, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a8:	f000 f826 	bl	80020f8 <_malloc_usable_size_r>
 80020ac:	42a0      	cmp	r0, r4
 80020ae:	d20f      	bcs.n	80020d0 <_realloc_r+0x48>
 80020b0:	4621      	mov	r1, r4
 80020b2:	4638      	mov	r0, r7
 80020b4:	f7ff ff8e 	bl	8001fd4 <_malloc_r>
 80020b8:	4605      	mov	r5, r0
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d0f2      	beq.n	80020a4 <_realloc_r+0x1c>
 80020be:	4631      	mov	r1, r6
 80020c0:	4622      	mov	r2, r4
 80020c2:	f7ff ff17 	bl	8001ef4 <memcpy>
 80020c6:	4631      	mov	r1, r6
 80020c8:	4638      	mov	r0, r7
 80020ca:	f7ff ff37 	bl	8001f3c <_free_r>
 80020ce:	e7e9      	b.n	80020a4 <_realloc_r+0x1c>
 80020d0:	4635      	mov	r5, r6
 80020d2:	e7e7      	b.n	80020a4 <_realloc_r+0x1c>

080020d4 <_sbrk_r>:
 80020d4:	b538      	push	{r3, r4, r5, lr}
 80020d6:	2300      	movs	r3, #0
 80020d8:	4c05      	ldr	r4, [pc, #20]	; (80020f0 <_sbrk_r+0x1c>)
 80020da:	4605      	mov	r5, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	6023      	str	r3, [r4, #0]
 80020e0:	f7fe fa5a 	bl	8000598 <_sbrk>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d102      	bne.n	80020ee <_sbrk_r+0x1a>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	b103      	cbz	r3, 80020ee <_sbrk_r+0x1a>
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	200008ec 	.word	0x200008ec

080020f4 <__malloc_lock>:
 80020f4:	4770      	bx	lr

080020f6 <__malloc_unlock>:
 80020f6:	4770      	bx	lr

080020f8 <_malloc_usable_size_r>:
 80020f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020fc:	1f18      	subs	r0, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bfbc      	itt	lt
 8002102:	580b      	ldrlt	r3, [r1, r0]
 8002104:	18c0      	addlt	r0, r0, r3
 8002106:	4770      	bx	lr

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
