
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043dc  080043dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080043dc  080043dc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043dc  080043dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b8  20000074  08004458  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  2000262c  08004458  0002262c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f899  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000262d  00000000  00000000  0002f936  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00032e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019252  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbf5  00000000  00000000  0004ce02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000917ac  00000000  00000000  000599f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f84  00000000  00000000  000eb220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004310 	.word	0x08004310

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004310 	.word	0x08004310

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000090 	.word	0x20000090
 800018c:	200000e4 	.word	0x200000e4

08000190 <HAL_UART_RxCpltCallback>:
te_call_state CALL_STATE = NO_CALL;
te_phone_state PHONE_STATE = IDLE;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	2b0a      	cmp	r3, #10
 80001a2:	d10f      	bne.n	80001c4 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_UART_RxCpltCallback+0x60>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 80001b6:	4413      	add	r3, r2
 80001b8:	2201      	movs	r2, #1
 80001ba:	4619      	mov	r1, r3
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <HAL_UART_RxCpltCallback+0x64>)
 80001be:	f001 ff3d 	bl	800203c <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001c2:	e00d      	b.n	80001e0 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	4a07      	ldr	r2, [pc, #28]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001cc:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001ce:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <HAL_UART_RxCpltCallback+0x58>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a06      	ldr	r2, [pc, #24]	; (80001ec <HAL_UART_RxCpltCallback+0x5c>)
 80001d4:	4413      	add	r3, r2
 80001d6:	2201      	movs	r2, #1
 80001d8:	4619      	mov	r1, r3
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <HAL_UART_RxCpltCallback+0x64>)
 80001dc:	f001 ff2e 	bl	800203c <HAL_UART_Receive_IT>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	20002448 	.word	0x20002448
 80001f0:	200002e8 	.word	0x200002e8
 80001f4:	20002598 	.word	0x20002598

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fe:	f000 fc27 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000202:	f000 f867 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000206:	f000 f8fd 	bl	8000404 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800020a:	f000 f8a7 	bl	800035c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800020e:	f000 f8cf 	bl	80003b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //pSendAtCommand("ATE0", 400);
  /* USER CODE END 2 */
  char close_echo[] = "ATE0\r\n";
 8000212:	4a28      	ldr	r2, [pc, #160]	; (80002b4 <main+0xbc>)
 8000214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021c:	6018      	str	r0, [r3, #0]
 800021e:	3304      	adds	r3, #4
 8000220:	8019      	strh	r1, [r3, #0]
 8000222:	3302      	adds	r3, #2
 8000224:	0c0a      	lsrs	r2, r1, #16
 8000226:	701a      	strb	r2, [r3, #0]
//  char call_command[] = "ATD+905383674319i;\r\n";
//  char call_status[] = "AT+CPAS\r\n";
//  char baud_rate[] = "AT+IPR?\r\n";
  char response[64] = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2240      	movs	r2, #64	; 0x40
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fc5d 	bl	8003aee <memset>
  HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ff89 	bl	8000150 <strlen>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000246:	23c8      	movs	r3, #200	; 0xc8
 8000248:	481b      	ldr	r0, [pc, #108]	; (80002b8 <main+0xc0>)
 800024a:	f001 fdc6 	bl	8001dda <HAL_UART_Transmit>
  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 800024e:	4639      	mov	r1, r7
 8000250:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000254:	2240      	movs	r2, #64	; 0x40
 8000256:	4818      	ldr	r0, [pc, #96]	; (80002b8 <main+0xc0>)
 8000258:	f001 fe51 	bl	8001efe <HAL_UART_Receive>
  memset(response, 0, sizeof(response));
 800025c:	463b      	mov	r3, r7
 800025e:	2240      	movs	r2, #64	; 0x40
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fc43 	bl	8003aee <memset>
////  if(DISPLAY_TO_GSM_Q == NULL)
//  {
//	  __NOP();
//  }

  if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0xc4>)
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	2303      	movs	r3, #3
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2300      	movs	r3, #0
 8000272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <main+0xc8>)
 8000278:	4812      	ldr	r0, [pc, #72]	; (80002c4 <main+0xcc>)
 800027a:	f002 fb3d 	bl	80028f8 <xTaskCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	2b01      	cmp	r3, #1
 8000282:	d000      	beq.n	8000286 <main+0x8e>
  {
	  __NOP();
 8000284:	bf00      	nop
  }
  if(xTaskCreate(display_task_func, "display", 256, NULL, 3, &display_task) != pdPASS)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <main+0xd0>)
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	2303      	movs	r3, #3
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000294:	490d      	ldr	r1, [pc, #52]	; (80002cc <main+0xd4>)
 8000296:	480e      	ldr	r0, [pc, #56]	; (80002d0 <main+0xd8>)
 8000298:	f002 fb2e 	bl	80028f8 <xTaskCreate>
 800029c:	4603      	mov	r3, r0
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d000      	beq.n	80002a4 <main+0xac>
  {
	  __NOP();
 80002a2:	bf00      	nop
  }
  vTaskStartScheduler();
 80002a4:	f002 fd18 	bl	8002cd8 <vTaskStartScheduler>
 80002a8:	2300      	movs	r3, #0

}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3748      	adds	r7, #72	; 0x48
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	08004340 	.word	0x08004340
 80002b8:	20002550 	.word	0x20002550
 80002bc:	200025d8 	.word	0x200025d8
 80002c0:	08004328 	.word	0x08004328
 80002c4:	080004e1 	.word	0x080004e1
 80002c8:	2000254c 	.word	0x2000254c
 80002cc:	08004338 	.word	0x08004338
 80002d0:	08000555 	.word	0x08000555

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fc03 	bl	8003aee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000312:	2300      	movs	r3, #0
 8000314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fe7a 	bl	8001014 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000326:	f000 f9e9 	bl	80006fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2302      	movs	r3, #2
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f001 f8e5 	bl	8001514 <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000350:	f000 f9d4 	bl	80006fc <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3740      	adds	r7, #64	; 0x40
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART1_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000394:	f001 fcd4 	bl	8001d40 <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 f9ad 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20002550 	.word	0x20002550
 80003ac:	40013800 	.word	0x40013800

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_USART2_UART_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e8:	f001 fcaa 	bl	8001d40 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003f2:	f000 f983 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20002598 	.word	0x20002598
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_GPIO_Init+0x40>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <MX_GPIO_Init+0x40>)
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0320 	and.w	r3, r3, #32
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a07      	ldr	r2, [pc, #28]	; (8000444 <MX_GPIO_Init+0x40>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <parse_display_request>:

/* USER CODE BEGIN 4 */
void parse_display_request(char *data)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af02      	add	r7, sp, #8
 800044e:	6078      	str	r0, [r7, #4]
	if(data[1] == 0x01 && data[2] == 0x10) //call
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d114      	bne.n	8000484 <parse_display_request+0x3c>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3302      	adds	r3, #2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b10      	cmp	r3, #16
 8000462:	d10f      	bne.n	8000484 <parse_display_request+0x3c>
	{
		if(xTaskCreate(call_task_func, "call_task", 512, data, 3, &call_task) != pdPASS)
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <parse_display_request+0x88>)
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	2303      	movs	r3, #3
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	4918      	ldr	r1, [pc, #96]	; (80004d4 <parse_display_request+0x8c>)
 8000474:	4818      	ldr	r0, [pc, #96]	; (80004d8 <parse_display_request+0x90>)
 8000476:	f002 fa3f 	bl	80028f8 <xTaskCreate>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d022      	beq.n	80004c6 <parse_display_request+0x7e>
		{
		  __NOP();
 8000480:	bf00      	nop
		if(xTaskCreate(call_task_func, "call_task", 512, data, 3, &call_task) != pdPASS)
 8000482:	e020      	b.n	80004c6 <parse_display_request+0x7e>
		}
//		request.op = MAKE_CALL;
//		memcpy(request.data, data, RX_SIZE);
	}
	else if(data[1] = 0x03 && data[2] == 0x02)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3302      	adds	r3, #2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b02      	cmp	r3, #2
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2da      	uxtb	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00d      	beq.n	80004bc <parse_display_request+0x74>
	{
		CALL_STATE = TERMINATE_CALL;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <parse_display_request+0x94>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	701a      	strb	r2, [r3, #0]
		while(CALL_STATE != NO_CALL);
 80004a6:	bf00      	nop
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <parse_display_request+0x94>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1fb      	bne.n	80004a8 <parse_display_request+0x60>
		vTaskDelete(call_task);
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <parse_display_request+0x88>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fb4d 	bl	8002b54 <vTaskDelete>
	}
	else if(data[1] == 0x01 && data[2] == 0x39)//Send sms
	{

	}
}
 80004ba:	e004      	b.n	80004c6 <parse_display_request+0x7e>
	else if(data[1] == 0x01 && data[2] == 0x39)//Send sms
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b01      	cmp	r3, #1
}
 80004c4:	e7ff      	b.n	80004c6 <parse_display_request+0x7e>
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20002548 	.word	0x20002548
 80004d4:	08004348 	.word	0x08004348
 80004d8:	08000561 	.word	0x08000561
 80004dc:	200002e9 	.word	0x200002e9

080004e0 <display_uart_task_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_display_task_func */
void display_uart_task_func(void *argument)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0c2      	sub	sp, #264	; 0x108
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	6018      	str	r0, [r3, #0]
	char data[RX_SIZE] = {0};
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	4618      	mov	r0, r3
 80004f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f4:	461a      	mov	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 faf9 	bl	8003aee <memset>
  /* USER CODE BEGIN 5 */
	HAL_UART_Receive_IT(DISPLAY_UART, &display_rx[display_rx_index], 1);
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <display_uart_task_func+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <display_uart_task_func+0x68>)
 8000502:	4413      	add	r3, r2
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <display_uart_task_func+0x6c>)
 800050a:	f001 fd97 	bl	800203c <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  if(display_rec_flag)
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <display_uart_task_func+0x70>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0fb      	beq.n	800050e <display_uart_task_func+0x2e>
	  {
		  memcpy(&data[0], &display_rx[0], RX_SIZE);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <display_uart_task_func+0x68>)
 8000520:	4618      	mov	r0, r3
 8000522:	f003 fad9 	bl	8003ad8 <memcpy>
		  memset(&display_rx[0], 0, RX_SIZE);
 8000526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052a:	2100      	movs	r1, #0
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <display_uart_task_func+0x68>)
 800052e:	f003 fade 	bl	8003aee <memset>
		  display_rec_flag = FALSE;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <display_uart_task_func+0x70>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		  parse_display_request(&data[0]);
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff83 	bl	8000448 <parse_display_request>
	  if(display_rec_flag)
 8000542:	e7e4      	b.n	800050e <display_uart_task_func+0x2e>
 8000544:	200002e4 	.word	0x200002e4
 8000548:	20002448 	.word	0x20002448
 800054c:	20002598 	.word	0x20002598
 8000550:	200002e8 	.word	0x200002e8

08000554 <display_task_func>:
  }
  /* USER CODE END 5 */
}

void display_task_func(void *argument)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  for(;;)
 800055c:	e7fe      	b.n	800055c <display_task_func+0x8>
	...

08000560 <call_task_func>:
  }
  /* USER CODE END gsm_task_func */
}

void call_task_func(void *argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0f8      	sub	sp, #480	; 0x1e0
 8000564:	af00      	add	r7, sp, #0
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  char data[RX_SIZE] = {0};
 800056a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800056e:	4618      	mov	r0, r3
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	461a      	mov	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 fab9 	bl	8003aee <memset>
  char response[128] = {0};
 800057c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000580:	4618      	mov	r0, r3
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	461a      	mov	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 fab1 	bl	8003aee <memset>
  char custom_command[64] = {0};
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4618      	mov	r0, r3
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	461a      	mov	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f003 faa9 	bl	8003aee <memset>
  char check_status[] = "AT+CPAS\r\n";
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4a48      	ldr	r2, [pc, #288]	; (80006c4 <call_task_func+0x164>)
 80005a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a4:	c303      	stmia	r3!, {r0, r1}
 80005a6:	801a      	strh	r2, [r3, #0]
  char terminate_call[] = "ATH0\r\n";
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <call_task_func+0x168>)
 80005ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b2:	6018      	str	r0, [r3, #0]
 80005b4:	3304      	adds	r3, #4
 80005b6:	8019      	strh	r1, [r3, #0]
 80005b8:	3302      	adds	r3, #2
 80005ba:	0c0a      	lsrs	r2, r1, #16
 80005bc:	701a      	strb	r2, [r3, #0]
  const TickType_t delay = 500 / portTICK_PERIOD_MS;
 80005be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  memcpy(&data[0], (char*)&argument[0], RX_SIZE);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 80005cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	f003 fa81 	bl	8003ad8 <memcpy>
  memset(&argument[0], 0, RX_SIZE);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005dc:	2100      	movs	r1, #0
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	f003 fa85 	bl	8003aee <memset>
  CALL_STATE = INITIATE_CALL;
 80005e4:	4b39      	ldr	r3, [pc, #228]	; (80006cc <call_task_func+0x16c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
  while(1)
  {
	  switch(CALL_STATE)
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <call_task_func+0x16c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d033      	beq.n	800065a <call_task_func+0xfa>
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d047      	beq.n	8000686 <call_task_func+0x126>
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d000      	beq.n	80005fc <call_task_func+0x9c>
		  HAL_UART_Transmit(GSM_UART, &terminate_call, strlen(terminate_call), 200);
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
		  CALL_STATE = NO_CALL;
		  break;
	  default:
		  break;
 80005fa:	e05d      	b.n	80006b8 <call_task_func+0x158>
		  data[strlen(data)-1] = '\0';
 80005fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fda5 	bl	8000150 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	3b01      	subs	r3, #1
 800060a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800060e:	2100      	movs	r1, #0
 8000610:	54d1      	strb	r1, [r2, r3]
		  sprintf(&custom_command[0], "ATD%si;\r\n", &data[8]);
 8000612:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000616:	f103 0208 	add.w	r2, r3, #8
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	492c      	ldr	r1, [pc, #176]	; (80006d0 <call_task_func+0x170>)
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fa6d 	bl	8003b00 <siprintf>
		  HAL_UART_Transmit(GSM_UART, &custom_command, strlen(custom_command), 300);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd90 	bl	8000150 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f107 011c 	add.w	r1, r7, #28
 8000638:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800063c:	4825      	ldr	r0, [pc, #148]	; (80006d4 <call_task_func+0x174>)
 800063e:	f001 fbcc 	bl	8001dda <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 5000);
 8000642:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000646:	f241 3388 	movw	r3, #5000	; 0x1388
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <call_task_func+0x174>)
 800064e:	f001 fc56 	bl	8001efe <HAL_UART_Receive>
		  CALL_STATE = CHECK_CALL_STATE;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <call_task_func+0x16c>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
		  break;
 8000658:	e02e      	b.n	80006b8 <call_task_func+0x158>
		  HAL_UART_Transmit(GSM_UART, &check_status, strlen(check_status), 200);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fd76 	bl	8000150 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	f107 0110 	add.w	r1, r7, #16
 800066c:	23c8      	movs	r3, #200	; 0xc8
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <call_task_func+0x174>)
 8000670:	f001 fbb3 	bl	8001dda <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
 8000674:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000678:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <call_task_func+0x174>)
 8000680:	f001 fc3d 	bl	8001efe <HAL_UART_Receive>
		  break;
 8000684:	e018      	b.n	80006b8 <call_task_func+0x158>
		  HAL_UART_Transmit(GSM_UART, &terminate_call, strlen(terminate_call), 200);
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fd60 	bl	8000150 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	f107 0108 	add.w	r1, r7, #8
 8000698:	23c8      	movs	r3, #200	; 0xc8
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <call_task_func+0x174>)
 800069c:	f001 fb9d 	bl	8001dda <HAL_UART_Transmit>
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
 80006a0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80006a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <call_task_func+0x174>)
 80006ac:	f001 fc27 	bl	8001efe <HAL_UART_Receive>
		  CALL_STATE = NO_CALL;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <call_task_func+0x16c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
		  break;
 80006b6:	bf00      	nop
	  }
	  vTaskDelay(delay);
 80006b8:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 80006bc:	f002 fad8 	bl	8002c70 <vTaskDelay>
	  switch(CALL_STATE)
 80006c0:	e793      	b.n	80005ea <call_task_func+0x8a>
 80006c2:	bf00      	nop
 80006c4:	08004360 	.word	0x08004360
 80006c8:	0800436c 	.word	0x0800436c
 80006cc:	200002e9 	.word	0x200002e9
 80006d0:	08004354 	.word	0x08004354
 80006d4:	20002550 	.word	0x20002550

080006d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d101      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ea:	f000 f9c7 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012c00 	.word	0x40012c00

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000702:	e7fe      	b.n	8000702 <Error_Handler+0x6>

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_MspInit+0x68>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_MspInit+0x68>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_MspInit+0x68>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x68>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <HAL_MspInit+0x68>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x68>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	f06f 0001 	mvn.w	r0, #1
 8000742:	f000 fa6c 	bl	8000c1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_MspInit+0x6c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_MspInit+0x6c>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a3b      	ldr	r2, [pc, #236]	; (800087c <HAL_UART_MspInit+0x108>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d132      	bne.n	80007fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <HAL_UART_MspInit+0x10c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a39      	ldr	r2, [pc, #228]	; (8000880 <HAL_UART_MspInit+0x10c>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <HAL_UART_MspInit+0x10c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <HAL_UART_MspInit+0x10c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a33      	ldr	r2, [pc, #204]	; (8000880 <HAL_UART_MspInit+0x10c>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <HAL_UART_MspInit+0x10c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	4619      	mov	r1, r3
 80007d8:	482a      	ldr	r0, [pc, #168]	; (8000884 <HAL_UART_MspInit+0x110>)
 80007da:	f000 fac1 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4824      	ldr	r0, [pc, #144]	; (8000884 <HAL_UART_MspInit+0x110>)
 80007f4:	f000 fab4 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f8:	e03c      	b.n	8000874 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_UART_MspInit+0x114>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d137      	bne.n	8000874 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_UART_MspInit+0x10c>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_UART_MspInit+0x10c>)
 800080a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080e:	61d3      	str	r3, [r2, #28]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x10c>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x10c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x10c>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_UART_MspInit+0x10c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000834:	2304      	movs	r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4619      	mov	r1, r3
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <HAL_UART_MspInit+0x110>)
 8000848:	f000 fa8a 	bl	8000d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800084c:	2308      	movs	r3, #8
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4619      	mov	r1, r3
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <HAL_UART_MspInit+0x110>)
 8000860:	f000 fa7e 	bl	8000d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2026      	movs	r0, #38	; 0x26
 800086a:	f000 f9d8 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800086e:	2026      	movs	r0, #38	; 0x26
 8000870:	f000 f9f1 	bl	8000c56 <HAL_NVIC_EnableIRQ>
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40013800 	.word	0x40013800
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800
 8000888:	40004400 	.word	0x40004400

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2019      	movs	r0, #25
 80008a2:	f000 f9bc 	bl	8000c1e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008a6:	2019      	movs	r0, #25
 80008a8:	f000 f9d5 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <HAL_InitTick+0x9c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <HAL_InitTick+0x9c>)
 80008b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_InitTick+0x9c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c4:	f107 0210 	add.w	r2, r7, #16
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 ff9e 	bl	8001810 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008d4:	f000 ff88 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 80008d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_InitTick+0xa0>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_InitTick+0xa4>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <HAL_InitTick+0xa8>)
 80008ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_InitTick+0xa4>)
 80008f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_InitTick+0xa4>)
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_InitTick+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_InitTick+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <HAL_InitTick+0xa4>)
 800090a:	f000 ffcf 	bl	80018ac <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d104      	bne.n	800091e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <HAL_InitTick+0xa4>)
 8000916:	f001 f821 	bl	800195c <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3730      	adds	r7, #48	; 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000
 800092c:	431bde83 	.word	0x431bde83
 8000930:	200025dc 	.word	0x200025dc
 8000934:	40012c00 	.word	0x40012c00

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM1_UP_IRQHandler+0x10>)
 800096a:	f001 f849 	bl	8001a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200025dc 	.word	0x200025dc

08000978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <USART2_IRQHandler+0x10>)
 800097e:	f001 fbb1 	bl	80020e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20002598 	.word	0x20002598

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f003 f862 	bl	8003a84 <__errno>
 80009c0:	4602      	mov	r2, r0
 80009c2:	230c      	movs	r3, #12
 80009c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20005000 	.word	0x20005000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200002ec 	.word	0x200002ec
 80009f4:	20002630 	.word	0x20002630

080009f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffe5 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f003 f82f 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fbe1 	bl	80001f8 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r3, =_sidata
 8000a38:	080043e4 	.word	0x080043e4
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a40:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000a44:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000a48:	2000262c 	.word	0x2000262c

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8d1 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff10 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe4a 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20002624 	.word	0x20002624

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20002624 	.word	0x20002624

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4906      	ldr	r1, [pc, #24]	; (8000b4c <__NVIC_EnableIRQ+0x34>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff4f 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff64 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ffb2 	bl	8000ba4 <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff81 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff57 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d005      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e051      	b.n	8000d3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 020e 	bic.w	r2, r2, #14
 8000ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <HAL_DMA_Abort_IT+0xd0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d029      	beq.n	8000d14 <HAL_DMA_Abort_IT+0xa0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <HAL_DMA_Abort_IT+0xd4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d022      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x9c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_DMA_Abort_IT+0xd8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d01a      	beq.n	8000d0a <HAL_DMA_Abort_IT+0x96>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_DMA_Abort_IT+0xdc>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d012      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x90>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_DMA_Abort_IT+0xe0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00a      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x8a>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <HAL_DMA_Abort_IT+0xe4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d102      	bne.n	8000cf8 <HAL_DMA_Abort_IT+0x84>
 8000cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cf6:	e00e      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cfc:	e00b      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	e008      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	e005      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0e:	e002      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000d10:	2310      	movs	r3, #16
 8000d12:	e000      	b.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000d14:	2301      	movs	r3, #1
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <HAL_DMA_Abort_IT+0xe8>)
 8000d18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	4798      	blx	r3
    } 
  }
  return status;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020008 	.word	0x40020008
 8000d48:	4002001c 	.word	0x4002001c
 8000d4c:	40020030 	.word	0x40020030
 8000d50:	40020044 	.word	0x40020044
 8000d54:	40020058 	.word	0x40020058
 8000d58:	4002006c 	.word	0x4002006c
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	; 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e127      	b.n	8000fc4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d74:	2201      	movs	r2, #1
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8116 	bne.w	8000fbe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d034      	beq.n	8000e04 <HAL_GPIO_Init+0xa4>
 8000d9a:	2b12      	cmp	r3, #18
 8000d9c:	d80d      	bhi.n	8000dba <HAL_GPIO_Init+0x5a>
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d02b      	beq.n	8000dfa <HAL_GPIO_Init+0x9a>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d804      	bhi.n	8000db0 <HAL_GPIO_Init+0x50>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d031      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d01c      	beq.n	8000de8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dae:	e048      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d043      	beq.n	8000e3c <HAL_GPIO_Init+0xdc>
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d01b      	beq.n	8000df0 <HAL_GPIO_Init+0x90>
          break;
 8000db8:	e043      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dba:	4a89      	ldr	r2, [pc, #548]	; (8000fe0 <HAL_GPIO_Init+0x280>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d026      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
 8000dc0:	4a87      	ldr	r2, [pc, #540]	; (8000fe0 <HAL_GPIO_Init+0x280>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d806      	bhi.n	8000dd4 <HAL_GPIO_Init+0x74>
 8000dc6:	4a87      	ldr	r2, [pc, #540]	; (8000fe4 <HAL_GPIO_Init+0x284>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d020      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
 8000dcc:	4a86      	ldr	r2, [pc, #536]	; (8000fe8 <HAL_GPIO_Init+0x288>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01d      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
          break;
 8000dd2:	e036      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dd4:	4a85      	ldr	r2, [pc, #532]	; (8000fec <HAL_GPIO_Init+0x28c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
 8000dda:	4a85      	ldr	r2, [pc, #532]	; (8000ff0 <HAL_GPIO_Init+0x290>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d016      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
 8000de0:	4a84      	ldr	r2, [pc, #528]	; (8000ff4 <HAL_GPIO_Init+0x294>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0xae>
          break;
 8000de6:	e02c      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e028      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e023      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e01e      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e019      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e16:	2304      	movs	r3, #4
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e012      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	611a      	str	r2, [r3, #16]
          break;
 8000e2e:	e008      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	615a      	str	r2, [r3, #20]
          break;
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2bff      	cmp	r3, #255	; 0xff
 8000e46:	d801      	bhi.n	8000e4c <HAL_GPIO_Init+0xec>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	e001      	b.n	8000e50 <HAL_GPIO_Init+0xf0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3304      	adds	r3, #4
 8000e50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	2bff      	cmp	r3, #255	; 0xff
 8000e56:	d802      	bhi.n	8000e5e <HAL_GPIO_Init+0xfe>
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x104>
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	3b08      	subs	r3, #8
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	6a39      	ldr	r1, [r7, #32]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 8096 	beq.w	8000fbe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e92:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <HAL_GPIO_Init+0x298>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a58      	ldr	r2, [pc, #352]	; (8000ff8 <HAL_GPIO_Init+0x298>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <HAL_GPIO_Init+0x298>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eaa:	4a54      	ldr	r2, [pc, #336]	; (8000ffc <HAL_GPIO_Init+0x29c>)
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x19e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x19a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x196>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x192>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x1a0>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x1a0>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x1a0>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x1a0>
 8000efe:	2300      	movs	r3, #0
 8000f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f10:	493a      	ldr	r1, [pc, #232]	; (8000ffc <HAL_GPIO_Init+0x29c>)
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f2a:	4b39      	ldr	r3, [pc, #228]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4938      	ldr	r1, [pc, #224]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4933      	ldr	r1, [pc, #204]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	492e      	ldr	r1, [pc, #184]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4929      	ldr	r1, [pc, #164]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	4924      	ldr	r1, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	608b      	str	r3, [r1, #8]
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	491f      	ldr	r1, [pc, #124]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	491a      	ldr	r1, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	fa22 f303 	lsr.w	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f47f aed0 	bne.w	8000d74 <HAL_GPIO_Init+0x14>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	372c      	adds	r7, #44	; 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	10210000 	.word	0x10210000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10310000 	.word	0x10310000
 8000ff0:	10320000 	.word	0x10320000
 8000ff4:	10220000 	.word	0x10220000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000
 800100c:	40011400 	.word	0x40011400
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e26c      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
 800104c:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d10b      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d06c      	beq.n	8001140 <HAL_RCC_OscConfig+0x12c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d168      	bne.n	8001140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e246      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x76>
 800107c:	4b80      	ldr	r3, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7f      	ldr	r2, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e02e      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcd6 	bl	8000aa0 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcd2 	bl	8000aa0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1fa      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe4>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcc2 	bl	8000aa0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcbe 	bl	8000aa0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1e6      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x10c>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1ba      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4939      	ldr	r1, [pc, #228]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc77 	bl	8000aa0 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc73 	bl	8000aa0 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e19b      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc56 	bl	8000aa0 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc52 	bl	8000aa0 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e17a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03a      	beq.n	8001298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d019      	beq.n	800125e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc36 	bl	8000aa0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc32 	bl	8000aa0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e15a      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fb0a 	bl	8001870 <RCC_Delay>
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc1c 	bl	8000aa0 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e00f      	b.n	800128c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc18 	bl	8000aa0 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d908      	bls.n	800128c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e140      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	42420000 	.word	0x42420000
 8001288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a6 	beq.w	80013f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a93      	ldr	r2, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b8e      	ldr	r3, [pc, #568]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fbd9 	bl	8000aa0 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fbd5 	bl	8000aa0 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0fd      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x4f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x334>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x356>
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 800136a:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb89 	bl	8000aa0 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb85 	bl	8000aa0 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0ab      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ee      	beq.n	8001392 <HAL_RCC_OscConfig+0x37e>
 80013b4:	e014      	b.n	80013e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb73 	bl	8000aa0 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb6f 	bl	8000aa0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e095      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8081 	beq.w	80014fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fc:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d061      	beq.n	80014cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d146      	bne.n	800149e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb43 	bl	8000aa0 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb3f 	bl	8000aa0 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e067      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	492d      	ldr	r1, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a19      	ldr	r1, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	430b      	orrs	r3, r1
 800146a:	4927      	ldr	r1, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb13 	bl	8000aa0 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb0f 	bl	8000aa0 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e037      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
 800149c:	e02f      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_RCC_OscConfig+0x4fc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fafc 	bl	8000aa0 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff faf8 	bl	8000aa0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e020      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x498>
 80014ca:	e018      	b.n	80014fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000
 8001510:	42420060 	.word	0x42420060

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa4c 	bl	8000aa0 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa48 	bl	8000aa0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f8e2 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08004390 	.word	0x08004390
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b490      	push	{r4, r7}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f0:	1d3c      	adds	r4, r7, #4
 80016f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x40>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x46>
 8001726:	e02d      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800172a:	623b      	str	r3, [r7, #32]
      break;
 800172c:	e02d      	b.n	800178a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800173a:	4413      	add	r3, r2
 800173c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001740:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c5b      	lsrs	r3, r3, #17
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800175a:	4413      	add	r3, r2
 800175c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001760:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001766:	fb02 f203 	mul.w	r2, r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	e004      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	623b      	str	r3, [r7, #32]
      break;
 8001782:	e002      	b.n	800178a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001786:	623b      	str	r3, [r7, #32]
      break;
 8001788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178a:	6a3b      	ldr	r3, [r7, #32]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	08004374 	.word	0x08004374
 800179c:	08004384 	.word	0x08004384
 80017a0:	40021000 	.word	0x40021000
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	003d0900 	.word	0x003d0900

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_GetHCLKFreq+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c4:	f7ff fff2 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	080043a0 	.word	0x080043a0

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017ec:	f7ff ffde 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0adb      	lsrs	r3, r3, #11
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	080043a0 	.word	0x080043a0

08001810 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	220f      	movs	r2, #15
 800181e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_RCC_GetClockConfig+0x58>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_RCC_GetClockConfig+0x58>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_GetClockConfig+0x58>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_RCC_GetClockConfig+0x58>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_GetClockConfig+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0207 	and.w	r2, r3, #7
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40022000 	.word	0x40022000

08001870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <RCC_Delay+0x34>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <RCC_Delay+0x38>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800188c:	bf00      	nop
  }
  while (Delay --);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <RCC_Delay+0x1c>
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e041      	b.n	8001942 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f839 	bl	800194a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3304      	adds	r3, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 f9b4 	bl	8001c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d001      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e03a      	b.n	80019ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_TIM_Base_Start_IT+0x98>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199e:	d009      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_TIM_Base_Start_IT+0xa0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d111      	bne.n	80019d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d010      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d6:	e007      	b.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800

08001a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d122      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11b      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0202 	mvn.w	r2, #2
 8001a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8ed 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8e0 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8ef 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0204 	mvn.w	r2, #4
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8c3 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8b6 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8c5 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0208 	mvn.w	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f899 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f88c 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f89b 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0210 	mvn.w	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f86f 	bl	8001c22 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f862 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f871 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0201 	mvn.w	r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fdaa 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8bf 	bl	8001d2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f835 	bl	8001c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f88a 	bl	8001d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <TIM_Base_SetConfig+0xb8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00b      	beq.n	8001c88 <TIM_Base_SetConfig+0x30>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d007      	beq.n	8001c88 <TIM_Base_SetConfig+0x30>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <TIM_Base_SetConfig+0xbc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d003      	beq.n	8001c88 <TIM_Base_SetConfig+0x30>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <TIM_Base_SetConfig+0xc0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d108      	bne.n	8001c9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <TIM_Base_SetConfig+0xb8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00b      	beq.n	8001cba <TIM_Base_SetConfig+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d007      	beq.n	8001cba <TIM_Base_SetConfig+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <TIM_Base_SetConfig+0xbc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d003      	beq.n	8001cba <TIM_Base_SetConfig+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <TIM_Base_SetConfig+0xc0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d108      	bne.n	8001ccc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <TIM_Base_SetConfig+0xb8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d103      	bne.n	8001d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	615a      	str	r2, [r3, #20]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800

08001d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e03f      	b.n	8001dd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fd04 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fc21 	bl	80025cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b08a      	sub	sp, #40	; 0x28
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d17c      	bne.n	8001ef4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_UART_Transmit+0x2c>
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e075      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Transmit+0x3e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e06e      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2221      	movs	r2, #33	; 0x21
 8001e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fe37 	bl	8000aa0 <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e48:	d108      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e003      	b.n	8001e64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e6c:	e02a      	b.n	8001ec4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fa45 	bl	8002308 <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e036      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e007      	b.n	8001eb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1cf      	bne.n	8001e6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa15 	bl	8002308 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08a      	sub	sp, #40	; 0x28
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	f040 8089 	bne.w	8002032 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_UART_Receive+0x2e>
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e081      	b.n	8002034 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_UART_Receive+0x40>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e07a      	b.n	8002034 <HAL_UART_Receive+0x136>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2222      	movs	r2, #34	; 0x22
 8001f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fda4 	bl	8000aa0 <HAL_GetTick>
 8001f58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6e:	d108      	bne.n	8001f82 <HAL_UART_Receive+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d104      	bne.n	8001f82 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e003      	b.n	8001f8a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f92:	e043      	b.n	800201c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f9b2 	bl	8002308 <UART_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e042      	b.n	8002034 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e01f      	b.n	800200e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd6:	d007      	beq.n	8001fe8 <HAL_UART_Receive+0xea>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <HAL_UART_Receive+0xf8>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e008      	b.n	8002008 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002002:	b2da      	uxtb	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3301      	adds	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1b6      	bne.n	8001f94 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	d140      	bne.n	80020d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_UART_Receive_IT+0x26>
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e039      	b.n	80020da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_UART_Receive_IT+0x38>
 8002070:	2302      	movs	r3, #2
 8002072:	e032      	b.n	80020da <HAL_UART_Receive_IT+0x9e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2222      	movs	r2, #34	; 0x22
 8002098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_UART_IRQHandler+0x52>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9cc 	bl	80024cc <UART_Receive_IT>
      return;
 8002134:	e0d1      	b.n	80022da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80b0 	beq.w	800229e <HAL_UART_IRQHandler+0x1ba>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_UART_IRQHandler+0x70>
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80a5 	beq.w	800229e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_UART_IRQHandler+0x90>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_UART_IRQHandler+0xb0>
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	f043 0202 	orr.w	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_UART_IRQHandler+0xd0>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00f      	beq.n	80021de <HAL_UART_IRQHandler+0xfa>
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_UART_IRQHandler+0xee>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	f043 0208 	orr.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d078      	beq.n	80022d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_UART_IRQHandler+0x11c>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f966 	bl	80024cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_UART_IRQHandler+0x144>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d031      	beq.n	800228c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8b7 	bl	800239c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800224a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_UART_IRQHandler+0x1fc>)
 800225a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fd07 	bl	8000c74 <HAL_DMA_Abort_IT>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002276:	4610      	mov	r0, r2
 8002278:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227a:	e00e      	b.n	800229a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f83a 	bl	80022f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002282:	e00a      	b.n	800229a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f836 	bl	80022f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228a:	e006      	b.n	800229a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f832 	bl	80022f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002298:	e01e      	b.n	80022d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229a:	bf00      	nop
    return;
 800229c:	e01c      	b.n	80022d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_UART_IRQHandler+0x1d6>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8a3 	bl	80023fe <UART_Transmit_IT>
    return;
 80022b8:	e00f      	b.n	80022da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_UART_IRQHandler+0x1f6>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8e4 	bl	800249c <UART_EndTransmit_IT>
    return;
 80022d4:	bf00      	nop
 80022d6:	e000      	b.n	80022da <HAL_UART_IRQHandler+0x1f6>
    return;
 80022d8:	bf00      	nop
  }
}
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	080023d7 	.word	0x080023d7

080022e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002318:	e02c      	b.n	8002374 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002320:	d028      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <UART_WaitOnFlagUntilTimeout+0x30>
 8002328:	f7fe fbba 	bl	8000aa0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	429a      	cmp	r2, r3
 8002336:	d21d      	bcs.n	8002374 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002346:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e00f      	b.n	8002394 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	429a      	cmp	r2, r3
 8002390:	d0c3      	beq.n	800231a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff ff80 	bl	80022f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b21      	cmp	r3, #33	; 0x21
 8002410:	d13e      	bne.n	8002490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241a:	d114      	bne.n	8002446 <UART_Transmit_IT+0x48>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d110      	bne.n	8002446 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	e008      	b.n	8002458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6211      	str	r1, [r2, #32]
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29b      	uxth	r3, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4619      	mov	r1, r3
 8002466:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10f      	bne.n	800248c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff11 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b22      	cmp	r3, #34	; 0x22
 80024de:	d170      	bne.n	80025c2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e8:	d117      	bne.n	800251a <UART_Receive_IT+0x4e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d113      	bne.n	800251a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	b29a      	uxth	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
 8002518:	e026      	b.n	8002568 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d007      	beq.n	800253e <UART_Receive_IT+0x72>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <UART_Receive_IT+0x80>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e008      	b.n	800255e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4619      	mov	r1, r3
 8002576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002578:	2b00      	cmp	r3, #0
 800257a:	d120      	bne.n	80025be <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0220 	bic.w	r2, r2, #32
 800258a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd fdeb 	bl	8000190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e002      	b.n	80025c4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002606:	f023 030c 	bic.w	r3, r3, #12
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	430b      	orrs	r3, r1
 8002612:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <UART_SetConfig+0x114>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d103      	bne.n	800263c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002634:	f7ff f8d8 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	e002      	b.n	8002642 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800263c:	f7ff f8c0 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8002640:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <UART_SetConfig+0x118>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	0119      	lsls	r1, r3, #4
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb2 f2f3 	udiv	r2, r2, r3
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <UART_SetConfig+0x118>)
 800267a:	fba3 0302 	umull	r0, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	3332      	adds	r3, #50	; 0x32
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002698:	4419      	add	r1, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <UART_SetConfig+0x118>)
 80026b2:	fba3 0302 	umull	r0, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	fb00 f303 	mul.w	r3, r0, r3
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	3332      	adds	r3, #50	; 0x32
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <UART_SetConfig+0x118>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	440a      	add	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013800 	.word	0x40013800
 80026e4:	51eb851f 	.word	0x51eb851f

080026e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 0208 	add.w	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002700:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0208 	add.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 0208 	add.w	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279a:	d103      	bne.n	80027a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e00c      	b.n	80027be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3308      	adds	r3, #8
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e002      	b.n	80027b2 <vListInsert+0x2e>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d2f6      	bcs.n	80027ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6892      	ldr	r2, [r2, #8]
 800280a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6852      	ldr	r2, [r2, #4]
 8002814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d103      	bne.n	8002828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002846:	b580      	push	{r7, lr}
 8002848:	b08e      	sub	sp, #56	; 0x38
 800284a:	af04      	add	r7, sp, #16
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	e7fe      	b.n	800286c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <xTaskCreateStatic+0x42>
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e7fe      	b.n	8002886 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002888:	2354      	movs	r3, #84	; 0x54
 800288a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b54      	cmp	r3, #84	; 0x54
 8002890:	d009      	beq.n	80028a6 <xTaskCreateStatic+0x60>
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e7fe      	b.n	80028a4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01e      	beq.n	80028ea <xTaskCreateStatic+0xa4>
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01b      	beq.n	80028ea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028c4:	2300      	movs	r3, #0
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f850 	bl	8002982 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e4:	f000 f8cc 	bl	8002a80 <prvAddNewTaskToReadyList>
 80028e8:	e001      	b.n	80028ee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028ee:	697b      	ldr	r3, [r7, #20]
	}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fee5 	bl	80036dc <pvPortMalloc>
 8002912:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800291a:	2054      	movs	r0, #84	; 0x54
 800291c:	f000 fede 	bl	80036dc <pvPortMalloc>
 8002920:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
 800292e:	e005      	b.n	800293c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f000 ff95 	bl	8003860 <vPortFree>
 8002936:	e001      	b.n	800293c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d017      	beq.n	8002972 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	2300      	movs	r3, #0
 800294e:	9303      	str	r3, [sp, #12]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f80e 	bl	8002982 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002966:	69f8      	ldr	r0, [r7, #28]
 8002968:	f000 f88a 	bl	8002a80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800296c:	2301      	movs	r3, #1
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	e002      	b.n	8002978 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002978:	69bb      	ldr	r3, [r7, #24]
	}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800299a:	3b01      	subs	r3, #1
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f023 0307 	bic.w	r3, r3, #7
 80029a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <prvInitialiseNewTask+0x46>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e7fe      	b.n	80029c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e012      	b.n	80029f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	7819      	ldrb	r1, [r3, #0]
 80029d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	3334      	adds	r3, #52	; 0x34
 80029de:	460a      	mov	r2, r1
 80029e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d9e9      	bls.n	80029ce <prvInitialiseNewTask+0x4c>
 80029fa:	e000      	b.n	80029fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80029fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d901      	bls.n	8002a10 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	2200      	movs	r2, #0
 8002a20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	3304      	adds	r3, #4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe7d 	bl	8002726 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	3318      	adds	r3, #24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe78 	bl	8002726 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	f1c3 0207 	rsb	r2, r3, #7
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	2200      	movs	r2, #0
 8002a50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	69b8      	ldr	r0, [r7, #24]
 8002a60:	f000 fc94 	bl	800338c <pxPortInitialiseStack>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a76:	bf00      	nop
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a88:	f000 fd6e 	bl	8003568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <prvAddNewTaskToReadyList+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <prvAddNewTaskToReadyList+0xb8>)
 8002a94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <prvAddNewTaskToReadyList+0xbc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a9e:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <prvAddNewTaskToReadyList+0xbc>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <prvAddNewTaskToReadyList+0xb8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002aac:	f000 fb4a 	bl	8003144 <prvInitialiseTaskLists>
 8002ab0:	e00d      	b.n	8002ace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <prvAddNewTaskToReadyList+0xc0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <prvAddNewTaskToReadyList+0xbc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d802      	bhi.n	8002ace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ac8:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <prvAddNewTaskToReadyList+0xbc>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <prvAddNewTaskToReadyList+0xc4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <prvAddNewTaskToReadyList+0xc4>)
 8002ad6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <prvAddNewTaskToReadyList+0xc8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <prvAddNewTaskToReadyList+0xc8>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <prvAddNewTaskToReadyList+0xcc>)
 8002af8:	441a      	add	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7ff fe1c 	bl	800273e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b06:	f000 fd5d 	bl	80035c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <prvAddNewTaskToReadyList+0xc0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00e      	beq.n	8002b30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <prvAddNewTaskToReadyList+0xbc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <prvAddNewTaskToReadyList+0xd0>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200003f0 	.word	0x200003f0
 8002b3c:	200002f0 	.word	0x200002f0
 8002b40:	200003fc 	.word	0x200003fc
 8002b44:	2000040c 	.word	0x2000040c
 8002b48:	200003f8 	.word	0x200003f8
 8002b4c:	200002f4 	.word	0x200002f4
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002b5c:	f000 fd04 	bl	8003568 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <vTaskDelete+0x18>
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <vTaskDelete+0xf4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	e000      	b.n	8002b6e <vTaskDelete+0x1a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe3d 	bl	80027f4 <uxListRemove>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4931      	ldr	r1, [pc, #196]	; (8002c4c <vTaskDelete+0xf8>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <vTaskDelete+0x58>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <vTaskDelete+0xfc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <vTaskDelete+0xfc>)
 8002baa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe1b 	bl	80027f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <vTaskDelete+0x100>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <vTaskDelete+0x100>)
 8002bc6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <vTaskDelete+0xf4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10b      	bne.n	8002bea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	481f      	ldr	r0, [pc, #124]	; (8002c58 <vTaskDelete+0x104>)
 8002bda:	f7ff fdb0 	bl	800273e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <vTaskDelete+0x108>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <vTaskDelete+0x108>)
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e009      	b.n	8002bfe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <vTaskDelete+0x10c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <vTaskDelete+0x10c>)
 8002bf2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb11 	bl	800321c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002bfa:	f000 fb3d 	bl	8003278 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002bfe:	f000 fce1 	bl	80035c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <vTaskDelete+0x110>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01a      	beq.n	8002c40 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <vTaskDelete+0xf4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d115      	bne.n	8002c40 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <vTaskDelete+0x114>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <vTaskDelete+0xdc>
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	e7fe      	b.n	8002c2e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <vTaskDelete+0x118>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200002f0 	.word	0x200002f0
 8002c4c:	200002f4 	.word	0x200002f4
 8002c50:	200003f8 	.word	0x200003f8
 8002c54:	2000040c 	.word	0x2000040c
 8002c58:	200003c4 	.word	0x200003c4
 8002c5c:	200003d8 	.word	0x200003d8
 8002c60:	200003f0 	.word	0x200003f0
 8002c64:	200003fc 	.word	0x200003fc
 8002c68:	20000418 	.word	0x20000418
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <vTaskDelay+0x60>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <vTaskDelay+0x2e>
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	e7fe      	b.n	8002c9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002c9e:	f000 f879 	bl	8002d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb0b 	bl	80032c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002caa:	f000 f881 	bl	8002db0 <xTaskResumeAll>
 8002cae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <vTaskDelay+0x64>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000418 	.word	0x20000418
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ce6:	463a      	mov	r2, r7
 8002ce8:	1d39      	adds	r1, r7, #4
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fa36 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	9202      	str	r2, [sp, #8]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2300      	movs	r3, #0
 8002d04:	460a      	mov	r2, r1
 8002d06:	491d      	ldr	r1, [pc, #116]	; (8002d7c <vTaskStartScheduler+0xa4>)
 8002d08:	481d      	ldr	r0, [pc, #116]	; (8002d80 <vTaskStartScheduler+0xa8>)
 8002d0a:	f7ff fd9c 	bl	8002846 <xTaskCreateStatic>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <vTaskStartScheduler+0xac>)
 8002d12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <vTaskStartScheduler+0xac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e001      	b.n	8002d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d115      	bne.n	8002d58 <vTaskStartScheduler+0x80>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <vTaskStartScheduler+0xb0>)
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <vTaskStartScheduler+0xb4>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <vTaskStartScheduler+0xb8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d52:	f000 fb99 	bl	8003488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d56:	e00d      	b.n	8002d74 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5e:	d109      	bne.n	8002d74 <vTaskStartScheduler+0x9c>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e7fe      	b.n	8002d72 <vTaskStartScheduler+0x9a>
}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08004388 	.word	0x08004388
 8002d80:	08003115 	.word	0x08003115
 8002d84:	20000414 	.word	0x20000414
 8002d88:	20000410 	.word	0x20000410
 8002d8c:	200003fc 	.word	0x200003fc
 8002d90:	200003f4 	.word	0x200003f4

08002d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <vTaskSuspendAll+0x18>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a03      	ldr	r2, [pc, #12]	; (8002dac <vTaskSuspendAll+0x18>)
 8002da0:	6013      	str	r3, [r2, #0]
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000418 	.word	0x20000418

08002db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <xTaskResumeAll+0x114>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <xTaskResumeAll+0x2a>
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	e7fe      	b.n	8002dd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dda:	f000 fbc5 	bl	8003568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <xTaskResumeAll+0x114>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <xTaskResumeAll+0x114>)
 8002de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <xTaskResumeAll+0x114>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d161      	bne.n	8002eb4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <xTaskResumeAll+0x118>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05d      	beq.n	8002eb4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df8:	e02e      	b.n	8002e58 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <xTaskResumeAll+0x11c>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3318      	adds	r3, #24
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fcf4 	bl	80027f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fcef 	bl	80027f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <xTaskResumeAll+0x120>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <xTaskResumeAll+0x120>)
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <xTaskResumeAll+0x124>)
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fc7d 	bl	800273e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <xTaskResumeAll+0x128>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <xTaskResumeAll+0x12c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <xTaskResumeAll+0x11c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1cc      	bne.n	8002dfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e66:	f000 fa07 	bl	8003278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <xTaskResumeAll+0x130>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e76:	f000 f837 	bl	8002ee8 <xTaskIncrementTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <xTaskResumeAll+0x12c>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f1      	bne.n	8002e76 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <xTaskResumeAll+0x130>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <xTaskResumeAll+0x12c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <xTaskResumeAll+0x134>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb4:	f000 fb86 	bl	80035c4 <vPortExitCritical>

	return xAlreadyYielded;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000418 	.word	0x20000418
 8002ec8:	200003f0 	.word	0x200003f0
 8002ecc:	200003b0 	.word	0x200003b0
 8002ed0:	200003f8 	.word	0x200003f8
 8002ed4:	200002f4 	.word	0x200002f4
 8002ed8:	200002f0 	.word	0x200002f0
 8002edc:	20000404 	.word	0x20000404
 8002ee0:	20000400 	.word	0x20000400
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <xTaskIncrementTick+0x14c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 808c 	bne.w	8003014 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002efc:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <xTaskIncrementTick+0x150>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <xTaskIncrementTick+0x150>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11f      	bne.n	8002f50 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f10:	4b4a      	ldr	r3, [pc, #296]	; (800303c <xTaskIncrementTick+0x154>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <xTaskIncrementTick+0x46>
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	e7fe      	b.n	8002f2c <xTaskIncrementTick+0x44>
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <xTaskIncrementTick+0x154>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <xTaskIncrementTick+0x158>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a40      	ldr	r2, [pc, #256]	; (800303c <xTaskIncrementTick+0x154>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4a40      	ldr	r2, [pc, #256]	; (8003040 <xTaskIncrementTick+0x158>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b40      	ldr	r3, [pc, #256]	; (8003044 <xTaskIncrementTick+0x15c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a3e      	ldr	r2, [pc, #248]	; (8003044 <xTaskIncrementTick+0x15c>)
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	f000 f994 	bl	8003278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f50:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <xTaskIncrementTick+0x160>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d34d      	bcc.n	8002ff6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <xTaskIncrementTick+0x154>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <xTaskIncrementTick+0x80>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <xTaskIncrementTick+0x82>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <xTaskIncrementTick+0x160>)
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f74:	601a      	str	r2, [r3, #0]
					break;
 8002f76:	e03e      	b.n	8002ff6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <xTaskIncrementTick+0x154>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d203      	bcs.n	8002f98 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f90:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <xTaskIncrementTick+0x160>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
						break;
 8002f96:	e02e      	b.n	8002ff6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc29 	bl	80027f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3318      	adds	r3, #24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fc20 	bl	80027f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <xTaskIncrementTick+0x164>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <xTaskIncrementTick+0x164>)
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <xTaskIncrementTick+0x168>)
 8002fd4:	441a      	add	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7ff fbae 	bl	800273e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <xTaskIncrementTick+0x16c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3b4      	bcc.n	8002f5a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff4:	e7b1      	b.n	8002f5a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <xTaskIncrementTick+0x16c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4914      	ldr	r1, [pc, #80]	; (8003050 <xTaskIncrementTick+0x168>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d907      	bls.n	800301e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e004      	b.n	800301e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <xTaskIncrementTick+0x170>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <xTaskIncrementTick+0x170>)
 800301c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <xTaskIncrementTick+0x174>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003026:	2301      	movs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800302a:	697b      	ldr	r3, [r7, #20]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000418 	.word	0x20000418
 8003038:	200003f4 	.word	0x200003f4
 800303c:	200003a8 	.word	0x200003a8
 8003040:	200003ac 	.word	0x200003ac
 8003044:	20000408 	.word	0x20000408
 8003048:	20000410 	.word	0x20000410
 800304c:	200003f8 	.word	0x200003f8
 8003050:	200002f4 	.word	0x200002f4
 8003054:	200002f0 	.word	0x200002f0
 8003058:	20000400 	.word	0x20000400
 800305c:	20000404 	.word	0x20000404

08003060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <vTaskSwitchContext+0xa0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <vTaskSwitchContext+0xa4>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003074:	e03e      	b.n	80030f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <vTaskSwitchContext+0xa4>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <vTaskSwitchContext+0xa8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	f1c3 031f 	rsb	r3, r3, #31
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	491e      	ldr	r1, [pc, #120]	; (800310c <vTaskSwitchContext+0xac>)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e7fe      	b.n	80030b8 <vTaskSwitchContext+0x58>
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <vTaskSwitchContext+0xac>)
 80030c6:	4413      	add	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3308      	adds	r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d104      	bne.n	80030ea <vTaskSwitchContext+0x8a>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <vTaskSwitchContext+0xb0>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000418 	.word	0x20000418
 8003104:	20000404 	.word	0x20000404
 8003108:	200003f8 	.word	0x200003f8
 800310c:	200002f4 	.word	0x200002f4
 8003110:	200002f0 	.word	0x200002f0

08003114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800311c:	f000 f852 	bl	80031c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <prvIdleTask+0x28>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d9f9      	bls.n	800311c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <prvIdleTask+0x2c>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003138:	e7f0      	b.n	800311c <prvIdleTask+0x8>
 800313a:	bf00      	nop
 800313c:	200002f4 	.word	0x200002f4
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e00c      	b.n	800316a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <prvInitialiseTaskLists+0x60>)
 800315c:	4413      	add	r3, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fac2 	bl	80026e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d9ef      	bls.n	8003150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <prvInitialiseTaskLists+0x64>)
 8003172:	f7ff fab9 	bl	80026e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <prvInitialiseTaskLists+0x68>)
 8003178:	f7ff fab6 	bl	80026e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <prvInitialiseTaskLists+0x6c>)
 800317e:	f7ff fab3 	bl	80026e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <prvInitialiseTaskLists+0x70>)
 8003184:	f7ff fab0 	bl	80026e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <prvInitialiseTaskLists+0x74>)
 800318a:	f7ff faad 	bl	80026e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <prvInitialiseTaskLists+0x78>)
 8003190:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <prvInitialiseTaskLists+0x64>)
 8003192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <prvInitialiseTaskLists+0x7c>)
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <prvInitialiseTaskLists+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200002f4 	.word	0x200002f4
 80031a8:	20000380 	.word	0x20000380
 80031ac:	20000394 	.word	0x20000394
 80031b0:	200003b0 	.word	0x200003b0
 80031b4:	200003c4 	.word	0x200003c4
 80031b8:	200003dc 	.word	0x200003dc
 80031bc:	200003a8 	.word	0x200003a8
 80031c0:	200003ac 	.word	0x200003ac

080031c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ca:	e019      	b.n	8003200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031cc:	f000 f9cc 	bl	8003568 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <prvCheckTasksWaitingTermination+0x4c>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb09 	bl	80027f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <prvCheckTasksWaitingTermination+0x50>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <prvCheckTasksWaitingTermination+0x50>)
 80031ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031f6:	f000 f9e5 	bl	80035c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f80e 	bl	800321c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e1      	bne.n	80031cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200003c4 	.word	0x200003c4
 8003214:	200003f0 	.word	0x200003f0
 8003218:	200003d8 	.word	0x200003d8

0800321c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fb14 	bl	8003860 <vPortFree>
				vPortFree( pxTCB );
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fb11 	bl	8003860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800323e:	e017      	b.n	8003270 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003246:	2b01      	cmp	r3, #1
 8003248:	d103      	bne.n	8003252 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fb08 	bl	8003860 <vPortFree>
	}
 8003250:	e00e      	b.n	8003270 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003258:	2b02      	cmp	r3, #2
 800325a:	d009      	beq.n	8003270 <prvDeleteTCB+0x54>
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e7fe      	b.n	800326e <prvDeleteTCB+0x52>
	}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <prvResetNextTaskUnblockTime+0x40>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <prvResetNextTaskUnblockTime+0x14>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <prvResetNextTaskUnblockTime+0x16>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <prvResetNextTaskUnblockTime+0x44>)
 8003294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003298:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800329a:	e008      	b.n	80032ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <prvResetNextTaskUnblockTime+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a04      	ldr	r2, [pc, #16]	; (80032bc <prvResetNextTaskUnblockTime+0x44>)
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	200003a8 	.word	0x200003a8
 80032bc:	20000410 	.word	0x20000410

080032c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3304      	adds	r3, #4
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fa8c 	bl	80027f4 <uxListRemove>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4013      	ands	r3, r2
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003300:	d10a      	bne.n	8003318 <prvAddCurrentTaskToDelayedList+0x58>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003312:	f7ff fa14 	bl	800273e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003316:	e026      	b.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d209      	bcs.n	8003344 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7ff fa21 	bl	8002784 <vListInsert>
}
 8003342:	e010      	b.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7ff fa17 	bl	8002784 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d202      	bcs.n	8003366 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200003f4 	.word	0x200003f4
 8003374:	200002f0 	.word	0x200002f0
 8003378:	200003f8 	.word	0x200003f8
 800337c:	200003dc 	.word	0x200003dc
 8003380:	200003ac 	.word	0x200003ac
 8003384:	200003a8 	.word	0x200003a8
 8003388:	20000410 	.word	0x20000410

0800338c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3b04      	subs	r3, #4
 800339c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b04      	subs	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3b04      	subs	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033bc:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <pxPortInitialiseStack+0x54>)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3b14      	subs	r3, #20
 80033c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3b20      	subs	r3, #32
 80033d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	080033e5 	.word	0x080033e5

080033e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <prvTaskExitError+0x4c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f6:	d009      	beq.n	800340c <prvTaskExitError+0x28>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e7fe      	b.n	800340a <prvTaskExitError+0x26>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800341e:	bf00      	nop
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0fc      	beq.n	8003420 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	2000000c 	.word	0x2000000c
	...

08003440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <pxCurrentTCBConst2>)
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	6808      	ldr	r0, [r1, #0]
 8003446:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800344a:	f380 8809 	msr	PSP, r0
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f380 8811 	msr	BASEPRI, r0
 800345a:	f04e 0e0d 	orr.w	lr, lr, #13
 800345e:	4770      	bx	lr

08003460 <pxCurrentTCBConst2>:
 8003460:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop

08003468 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003468:	4806      	ldr	r0, [pc, #24]	; (8003484 <prvPortStartFirstTask+0x1c>)
 800346a:	6800      	ldr	r0, [r0, #0]
 800346c:	6800      	ldr	r0, [r0, #0]
 800346e:	f380 8808 	msr	MSP, r0
 8003472:	b662      	cpsie	i
 8003474:	b661      	cpsie	f
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	df00      	svc	0
 8003480:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003482:	bf00      	nop
 8003484:	e000ed08 	.word	0xe000ed08

08003488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <xPortStartScheduler+0xcc>)
 8003490:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <xPortStartScheduler+0xd0>)
 80034b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <xPortStartScheduler+0xd4>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034bc:	e009      	b.n	80034d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <xPortStartScheduler+0xd4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <xPortStartScheduler+0xd4>)
 80034c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d0ef      	beq.n	80034be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034de:	4b1f      	ldr	r3, [pc, #124]	; (800355c <xPortStartScheduler+0xd4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d009      	beq.n	80034fe <xPortStartScheduler+0x76>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	e7fe      	b.n	80034fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <xPortStartScheduler+0xd4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <xPortStartScheduler+0xd4>)
 8003506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <xPortStartScheduler+0xd4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003510:	4a12      	ldr	r2, [pc, #72]	; (800355c <xPortStartScheduler+0xd4>)
 8003512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <xPortStartScheduler+0xd8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <xPortStartScheduler+0xd8>)
 8003522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <xPortStartScheduler+0xd8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <xPortStartScheduler+0xd8>)
 800352e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003534:	f000 f8b0 	bl	8003698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <xPortStartScheduler+0xdc>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800353e:	f7ff ff93 	bl	8003468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003542:	f7ff fd8d 	bl	8003060 <vTaskSwitchContext>
	prvTaskExitError();
 8003546:	f7ff ff4d 	bl	80033e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	e000e400 	.word	0xe000e400
 8003558:	2000041c 	.word	0x2000041c
 800355c:	20000420 	.word	0x20000420
 8003560:	e000ed20 	.word	0xe000ed20
 8003564:	2000000c 	.word	0x2000000c

08003568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <vPortEnterCritical+0x54>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <vPortEnterCritical+0x54>)
 8003588:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <vPortEnterCritical+0x54>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10e      	bne.n	80035b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <vPortEnterCritical+0x58>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <vPortEnterCritical+0x48>
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	e7fe      	b.n	80035ae <vPortEnterCritical+0x46>
	}
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000000c 	.word	0x2000000c
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <vPortExitCritical+0x48>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <vPortExitCritical+0x22>
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	e7fe      	b.n	80035e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <vPortExitCritical+0x48>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <vPortExitCritical+0x48>)
 80035ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <vPortExitCritical+0x48>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <vPortExitCritical+0x3e>
 80035f8:	2300      	movs	r3, #0
 80035fa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	2000000c 	.word	0x2000000c

08003610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003610:	f3ef 8009 	mrs	r0, PSP
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <pxCurrentTCBConst>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003620:	6010      	str	r0, [r2, #0]
 8003622:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003626:	f04f 0050 	mov.w	r0, #80	; 0x50
 800362a:	f380 8811 	msr	BASEPRI, r0
 800362e:	f7ff fd17 	bl	8003060 <vTaskSwitchContext>
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	6808      	ldr	r0, [r1, #0]
 8003642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003646:	f380 8809 	msr	PSP, r0
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	4770      	bx	lr

08003650 <pxCurrentTCBConst>:
 8003650:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003670:	f7ff fc3a 	bl	8002ee8 <xTaskIncrementTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <SysTick_Handler+0x3c>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <vPortSetupTimerInterrupt+0x30>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <vPortSetupTimerInterrupt+0x34>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <vPortSetupTimerInterrupt+0x38>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <vPortSetupTimerInterrupt+0x3c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <vPortSetupTimerInterrupt+0x40>)
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ba:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <vPortSetupTimerInterrupt+0x30>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	e000e010 	.word	0xe000e010
 80036cc:	e000e018 	.word	0xe000e018
 80036d0:	20000000 	.word	0x20000000
 80036d4:	10624dd3 	.word	0x10624dd3
 80036d8:	e000e014 	.word	0xe000e014

080036dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036e8:	f7ff fb54 	bl	8002d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036ec:	4b57      	ldr	r3, [pc, #348]	; (800384c <pvPortMalloc+0x170>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036f4:	f000 f90c 	bl	8003910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036f8:	4b55      	ldr	r3, [pc, #340]	; (8003850 <pvPortMalloc+0x174>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 808c 	bne.w	800381e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800370c:	2208      	movs	r2, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	2b00      	cmp	r3, #0
 800371c:	d013      	beq.n	8003746 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f023 0307 	bic.w	r3, r3, #7
 8003724:	3308      	adds	r3, #8
 8003726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <pvPortMalloc+0x6a>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e7fe      	b.n	8003744 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d068      	beq.n	800381e <pvPortMalloc+0x142>
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <pvPortMalloc+0x178>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d863      	bhi.n	800381e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003756:	4b40      	ldr	r3, [pc, #256]	; (8003858 <pvPortMalloc+0x17c>)
 8003758:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800375a:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <pvPortMalloc+0x17c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003760:	e004      	b.n	800376c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d903      	bls.n	800377e <pvPortMalloc+0xa2>
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f1      	bne.n	8003762 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800377e:	4b33      	ldr	r3, [pc, #204]	; (800384c <pvPortMalloc+0x170>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	429a      	cmp	r2, r3
 8003786:	d04a      	beq.n	800381e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	4413      	add	r3, r2
 8003790:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	2308      	movs	r3, #8
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d91e      	bls.n	80037e8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <pvPortMalloc+0xf4>
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e7fe      	b.n	80037ce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037e2:	69b8      	ldr	r0, [r7, #24]
 80037e4:	f000 f8f6 	bl	80039d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <pvPortMalloc+0x178>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <pvPortMalloc+0x178>)
 80037f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <pvPortMalloc+0x178>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b18      	ldr	r3, [pc, #96]	; (800385c <pvPortMalloc+0x180>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d203      	bcs.n	800380a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <pvPortMalloc+0x178>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <pvPortMalloc+0x180>)
 8003808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <pvPortMalloc+0x174>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	431a      	orrs	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800381e:	f7ff fac7 	bl	8002db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <pvPortMalloc+0x164>
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e7fe      	b.n	800383e <pvPortMalloc+0x162>
	return pvReturn;
 8003840:	69fb      	ldr	r3, [r7, #28]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000242c 	.word	0x2000242c
 8003850:	20002438 	.word	0x20002438
 8003854:	20002430 	.word	0x20002430
 8003858:	20002424 	.word	0x20002424
 800385c:	20002434 	.word	0x20002434

08003860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d046      	beq.n	8003900 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003872:	2308      	movs	r3, #8
 8003874:	425b      	negs	r3, r3
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <vPortFree+0xa8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <vPortFree+0x42>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e7fe      	b.n	80038a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <vPortFree+0x5e>
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	e7fe      	b.n	80038bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <vPortFree+0xa8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d115      	bne.n	8003900 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <vPortFree+0xa8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	43db      	mvns	r3, r3
 80038de:	401a      	ands	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038e4:	f7ff fa56 	bl	8002d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <vPortFree+0xac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	4a06      	ldr	r2, [pc, #24]	; (800390c <vPortFree+0xac>)
 80038f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038f6:	6938      	ldr	r0, [r7, #16]
 80038f8:	f000 f86c 	bl	80039d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038fc:	f7ff fa58 	bl	8002db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003900:	bf00      	nop
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20002438 	.word	0x20002438
 800390c:	20002430 	.word	0x20002430

08003910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800391a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <prvHeapInit+0xac>)
 800391e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3307      	adds	r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0307 	bic.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <prvHeapInit+0xac>)
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <prvHeapInit+0xb0>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <prvHeapInit+0xb0>)
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800395c:	2208      	movs	r2, #8
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <prvHeapInit+0xb4>)
 8003970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <prvHeapInit+0xb4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <prvHeapInit+0xb4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	1ad2      	subs	r2, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <prvHeapInit+0xb4>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <prvHeapInit+0xb8>)
 800399e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <prvHeapInit+0xbc>)
 80039a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <prvHeapInit+0xc0>)
 80039aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000424 	.word	0x20000424
 80039c0:	20002424 	.word	0x20002424
 80039c4:	2000242c 	.word	0x2000242c
 80039c8:	20002434 	.word	0x20002434
 80039cc:	20002430 	.word	0x20002430
 80039d0:	20002438 	.word	0x20002438

080039d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <prvInsertBlockIntoFreeList+0xa8>)
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e002      	b.n	80039e8 <prvInsertBlockIntoFreeList+0x14>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d8f7      	bhi.n	80039e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4413      	add	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d108      	bne.n	8003a16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	441a      	add	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d118      	bne.n	8003a5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <prvInsertBlockIntoFreeList+0xac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d00d      	beq.n	8003a52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e008      	b.n	8003a64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <prvInsertBlockIntoFreeList+0xac>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e003      	b.n	8003a64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d002      	beq.n	8003a72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20002424 	.word	0x20002424
 8003a80:	2000242c 	.word	0x2000242c

08003a84 <__errno>:
 8003a84:	4b01      	ldr	r3, [pc, #4]	; (8003a8c <__errno+0x8>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000010 	.word	0x20000010

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	2500      	movs	r5, #0
 8003a94:	4e0c      	ldr	r6, [pc, #48]	; (8003ac8 <__libc_init_array+0x38>)
 8003a96:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a98:	1ba4      	subs	r4, r4, r6
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	42a5      	cmp	r5, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	f000 fc36 	bl	8004310 <_init>
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	4e0a      	ldr	r6, [pc, #40]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa8:	4c0a      	ldr	r4, [pc, #40]	; (8003ad4 <__libc_init_array+0x44>)
 8003aaa:	1ba4      	subs	r4, r4, r6
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	42a5      	cmp	r5, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ab8:	4798      	blx	r3
 8003aba:	3501      	adds	r5, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac2:	4798      	blx	r3
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	080043dc 	.word	0x080043dc
 8003acc:	080043dc 	.word	0x080043dc
 8003ad0:	080043dc 	.word	0x080043dc
 8003ad4:	080043e0 	.word	0x080043e0

08003ad8 <memcpy>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	1e43      	subs	r3, r0, #1
 8003adc:	440a      	add	r2, r1
 8003ade:	4291      	cmp	r1, r2
 8003ae0:	d100      	bne.n	8003ae4 <memcpy+0xc>
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aec:	e7f7      	b.n	8003ade <memcpy+0x6>

08003aee <memset>:
 8003aee:	4603      	mov	r3, r0
 8003af0:	4402      	add	r2, r0
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d100      	bne.n	8003af8 <memset+0xa>
 8003af6:	4770      	bx	lr
 8003af8:	f803 1b01 	strb.w	r1, [r3], #1
 8003afc:	e7f9      	b.n	8003af2 <memset+0x4>
	...

08003b00 <siprintf>:
 8003b00:	b40e      	push	{r1, r2, r3}
 8003b02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b06:	b500      	push	{lr}
 8003b08:	b09c      	sub	sp, #112	; 0x70
 8003b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b0c:	9002      	str	r0, [sp, #8]
 8003b0e:	9006      	str	r0, [sp, #24]
 8003b10:	9107      	str	r1, [sp, #28]
 8003b12:	9104      	str	r1, [sp, #16]
 8003b14:	4808      	ldr	r0, [pc, #32]	; (8003b38 <siprintf+0x38>)
 8003b16:	4909      	ldr	r1, [pc, #36]	; (8003b3c <siprintf+0x3c>)
 8003b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b1c:	9105      	str	r1, [sp, #20]
 8003b1e:	6800      	ldr	r0, [r0, #0]
 8003b20:	a902      	add	r1, sp, #8
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f000 f866 	bl	8003bf4 <_svfiprintf_r>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	9b02      	ldr	r3, [sp, #8]
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	b01c      	add	sp, #112	; 0x70
 8003b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b34:	b003      	add	sp, #12
 8003b36:	4770      	bx	lr
 8003b38:	20000010 	.word	0x20000010
 8003b3c:	ffff0208 	.word	0xffff0208

08003b40 <__ssputs_r>:
 8003b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b44:	688e      	ldr	r6, [r1, #8]
 8003b46:	4682      	mov	sl, r0
 8003b48:	429e      	cmp	r6, r3
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	4690      	mov	r8, r2
 8003b4e:	4699      	mov	r9, r3
 8003b50:	d837      	bhi.n	8003bc2 <__ssputs_r+0x82>
 8003b52:	898a      	ldrh	r2, [r1, #12]
 8003b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b58:	d031      	beq.n	8003bbe <__ssputs_r+0x7e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	6909      	ldr	r1, [r1, #16]
 8003b60:	1a6f      	subs	r7, r5, r1
 8003b62:	6965      	ldr	r5, [r4, #20]
 8003b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b68:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b6c:	f109 0301 	add.w	r3, r9, #1
 8003b70:	443b      	add	r3, r7
 8003b72:	429d      	cmp	r5, r3
 8003b74:	bf38      	it	cc
 8003b76:	461d      	movcc	r5, r3
 8003b78:	0553      	lsls	r3, r2, #21
 8003b7a:	d530      	bpl.n	8003bde <__ssputs_r+0x9e>
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f000 fb2d 	bl	80041dc <_malloc_r>
 8003b82:	4606      	mov	r6, r0
 8003b84:	b950      	cbnz	r0, 8003b9c <__ssputs_r+0x5c>
 8003b86:	230c      	movs	r3, #12
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b8c:	f8ca 3000 	str.w	r3, [sl]
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9c:	463a      	mov	r2, r7
 8003b9e:	6921      	ldr	r1, [r4, #16]
 8003ba0:	f7ff ff9a 	bl	8003ad8 <memcpy>
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	6126      	str	r6, [r4, #16]
 8003bb2:	443e      	add	r6, r7
 8003bb4:	6026      	str	r6, [r4, #0]
 8003bb6:	464e      	mov	r6, r9
 8003bb8:	6165      	str	r5, [r4, #20]
 8003bba:	1bed      	subs	r5, r5, r7
 8003bbc:	60a5      	str	r5, [r4, #8]
 8003bbe:	454e      	cmp	r6, r9
 8003bc0:	d900      	bls.n	8003bc4 <__ssputs_r+0x84>
 8003bc2:	464e      	mov	r6, r9
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	f000 faa1 	bl	8004110 <memmove>
 8003bce:	68a3      	ldr	r3, [r4, #8]
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	1b9b      	subs	r3, r3, r6
 8003bd4:	60a3      	str	r3, [r4, #8]
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	441e      	add	r6, r3
 8003bda:	6026      	str	r6, [r4, #0]
 8003bdc:	e7dc      	b.n	8003b98 <__ssputs_r+0x58>
 8003bde:	462a      	mov	r2, r5
 8003be0:	f000 fb56 	bl	8004290 <_realloc_r>
 8003be4:	4606      	mov	r6, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d1e2      	bne.n	8003bb0 <__ssputs_r+0x70>
 8003bea:	6921      	ldr	r1, [r4, #16]
 8003bec:	4650      	mov	r0, sl
 8003bee:	f000 faa9 	bl	8004144 <_free_r>
 8003bf2:	e7c8      	b.n	8003b86 <__ssputs_r+0x46>

08003bf4 <_svfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	898b      	ldrh	r3, [r1, #12]
 8003bfc:	b09d      	sub	sp, #116	; 0x74
 8003bfe:	061f      	lsls	r7, r3, #24
 8003c00:	4680      	mov	r8, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	4616      	mov	r6, r2
 8003c06:	d50f      	bpl.n	8003c28 <_svfiprintf_r+0x34>
 8003c08:	690b      	ldr	r3, [r1, #16]
 8003c0a:	b96b      	cbnz	r3, 8003c28 <_svfiprintf_r+0x34>
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	f000 fae5 	bl	80041dc <_malloc_r>
 8003c12:	6020      	str	r0, [r4, #0]
 8003c14:	6120      	str	r0, [r4, #16]
 8003c16:	b928      	cbnz	r0, 8003c24 <_svfiprintf_r+0x30>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	f8c8 3000 	str.w	r3, [r8]
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c22:	e0c8      	b.n	8003db6 <_svfiprintf_r+0x1c2>
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	6163      	str	r3, [r4, #20]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	f04f 0b01 	mov.w	fp, #1
 8003c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c3c:	9503      	str	r5, [sp, #12]
 8003c3e:	4637      	mov	r7, r6
 8003c40:	463d      	mov	r5, r7
 8003c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c46:	b10b      	cbz	r3, 8003c4c <_svfiprintf_r+0x58>
 8003c48:	2b25      	cmp	r3, #37	; 0x25
 8003c4a:	d13e      	bne.n	8003cca <_svfiprintf_r+0xd6>
 8003c4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c50:	d00b      	beq.n	8003c6a <_svfiprintf_r+0x76>
 8003c52:	4653      	mov	r3, sl
 8003c54:	4632      	mov	r2, r6
 8003c56:	4621      	mov	r1, r4
 8003c58:	4640      	mov	r0, r8
 8003c5a:	f7ff ff71 	bl	8003b40 <__ssputs_r>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f000 80a4 	beq.w	8003dac <_svfiprintf_r+0x1b8>
 8003c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c66:	4453      	add	r3, sl
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	783b      	ldrb	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 809d 	beq.w	8003dac <_svfiprintf_r+0x1b8>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7c:	9304      	str	r3, [sp, #16]
 8003c7e:	9307      	str	r3, [sp, #28]
 8003c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c84:	931a      	str	r3, [sp, #104]	; 0x68
 8003c86:	462f      	mov	r7, r5
 8003c88:	2205      	movs	r2, #5
 8003c8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c8e:	4850      	ldr	r0, [pc, #320]	; (8003dd0 <_svfiprintf_r+0x1dc>)
 8003c90:	f000 fa30 	bl	80040f4 <memchr>
 8003c94:	9b04      	ldr	r3, [sp, #16]
 8003c96:	b9d0      	cbnz	r0, 8003cce <_svfiprintf_r+0xda>
 8003c98:	06d9      	lsls	r1, r3, #27
 8003c9a:	bf44      	itt	mi
 8003c9c:	2220      	movmi	r2, #32
 8003c9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ca2:	071a      	lsls	r2, r3, #28
 8003ca4:	bf44      	itt	mi
 8003ca6:	222b      	movmi	r2, #43	; 0x2b
 8003ca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cac:	782a      	ldrb	r2, [r5, #0]
 8003cae:	2a2a      	cmp	r2, #42	; 0x2a
 8003cb0:	d015      	beq.n	8003cde <_svfiprintf_r+0xea>
 8003cb2:	462f      	mov	r7, r5
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	250a      	movs	r5, #10
 8003cb8:	9a07      	ldr	r2, [sp, #28]
 8003cba:	4639      	mov	r1, r7
 8003cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc0:	3b30      	subs	r3, #48	; 0x30
 8003cc2:	2b09      	cmp	r3, #9
 8003cc4:	d94d      	bls.n	8003d62 <_svfiprintf_r+0x16e>
 8003cc6:	b1b8      	cbz	r0, 8003cf8 <_svfiprintf_r+0x104>
 8003cc8:	e00f      	b.n	8003cea <_svfiprintf_r+0xf6>
 8003cca:	462f      	mov	r7, r5
 8003ccc:	e7b8      	b.n	8003c40 <_svfiprintf_r+0x4c>
 8003cce:	4a40      	ldr	r2, [pc, #256]	; (8003dd0 <_svfiprintf_r+0x1dc>)
 8003cd0:	463d      	mov	r5, r7
 8003cd2:	1a80      	subs	r0, r0, r2
 8003cd4:	fa0b f000 	lsl.w	r0, fp, r0
 8003cd8:	4318      	orrs	r0, r3
 8003cda:	9004      	str	r0, [sp, #16]
 8003cdc:	e7d3      	b.n	8003c86 <_svfiprintf_r+0x92>
 8003cde:	9a03      	ldr	r2, [sp, #12]
 8003ce0:	1d11      	adds	r1, r2, #4
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	9103      	str	r1, [sp, #12]
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	db01      	blt.n	8003cee <_svfiprintf_r+0xfa>
 8003cea:	9207      	str	r2, [sp, #28]
 8003cec:	e004      	b.n	8003cf8 <_svfiprintf_r+0x104>
 8003cee:	4252      	negs	r2, r2
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	9207      	str	r2, [sp, #28]
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	783b      	ldrb	r3, [r7, #0]
 8003cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8003cfc:	d10c      	bne.n	8003d18 <_svfiprintf_r+0x124>
 8003cfe:	787b      	ldrb	r3, [r7, #1]
 8003d00:	2b2a      	cmp	r3, #42	; 0x2a
 8003d02:	d133      	bne.n	8003d6c <_svfiprintf_r+0x178>
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	3702      	adds	r7, #2
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	9203      	str	r2, [sp, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d16:	9305      	str	r3, [sp, #20]
 8003d18:	4d2e      	ldr	r5, [pc, #184]	; (8003dd4 <_svfiprintf_r+0x1e0>)
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	7839      	ldrb	r1, [r7, #0]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f9e8 	bl	80040f4 <memchr>
 8003d24:	b138      	cbz	r0, 8003d36 <_svfiprintf_r+0x142>
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	1b40      	subs	r0, r0, r5
 8003d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d2e:	9b04      	ldr	r3, [sp, #16]
 8003d30:	3701      	adds	r7, #1
 8003d32:	4303      	orrs	r3, r0
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	7839      	ldrb	r1, [r7, #0]
 8003d38:	2206      	movs	r2, #6
 8003d3a:	4827      	ldr	r0, [pc, #156]	; (8003dd8 <_svfiprintf_r+0x1e4>)
 8003d3c:	1c7e      	adds	r6, r7, #1
 8003d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d42:	f000 f9d7 	bl	80040f4 <memchr>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d038      	beq.n	8003dbc <_svfiprintf_r+0x1c8>
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <_svfiprintf_r+0x1e8>)
 8003d4c:	bb13      	cbnz	r3, 8003d94 <_svfiprintf_r+0x1a0>
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	3307      	adds	r3, #7
 8003d52:	f023 0307 	bic.w	r3, r3, #7
 8003d56:	3308      	adds	r3, #8
 8003d58:	9303      	str	r3, [sp, #12]
 8003d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d5c:	444b      	add	r3, r9
 8003d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d60:	e76d      	b.n	8003c3e <_svfiprintf_r+0x4a>
 8003d62:	fb05 3202 	mla	r2, r5, r2, r3
 8003d66:	2001      	movs	r0, #1
 8003d68:	460f      	mov	r7, r1
 8003d6a:	e7a6      	b.n	8003cba <_svfiprintf_r+0xc6>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	250a      	movs	r5, #10
 8003d70:	4619      	mov	r1, r3
 8003d72:	3701      	adds	r7, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	4638      	mov	r0, r7
 8003d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d7c:	3a30      	subs	r2, #48	; 0x30
 8003d7e:	2a09      	cmp	r2, #9
 8003d80:	d903      	bls.n	8003d8a <_svfiprintf_r+0x196>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c8      	beq.n	8003d18 <_svfiprintf_r+0x124>
 8003d86:	9105      	str	r1, [sp, #20]
 8003d88:	e7c6      	b.n	8003d18 <_svfiprintf_r+0x124>
 8003d8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4607      	mov	r7, r0
 8003d92:	e7f0      	b.n	8003d76 <_svfiprintf_r+0x182>
 8003d94:	ab03      	add	r3, sp, #12
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4622      	mov	r2, r4
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <_svfiprintf_r+0x1ec>)
 8003d9c:	a904      	add	r1, sp, #16
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f3af 8000 	nop.w
 8003da4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003da8:	4681      	mov	r9, r0
 8003daa:	d1d6      	bne.n	8003d5a <_svfiprintf_r+0x166>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	065b      	lsls	r3, r3, #25
 8003db0:	f53f af35 	bmi.w	8003c1e <_svfiprintf_r+0x2a>
 8003db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003db6:	b01d      	add	sp, #116	; 0x74
 8003db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbc:	ab03      	add	r3, sp, #12
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <_svfiprintf_r+0x1ec>)
 8003dc4:	a904      	add	r1, sp, #16
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f000 f882 	bl	8003ed0 <_printf_i>
 8003dcc:	e7ea      	b.n	8003da4 <_svfiprintf_r+0x1b0>
 8003dce:	bf00      	nop
 8003dd0:	080043a8 	.word	0x080043a8
 8003dd4:	080043ae 	.word	0x080043ae
 8003dd8:	080043b2 	.word	0x080043b2
 8003ddc:	00000000 	.word	0x00000000
 8003de0:	08003b41 	.word	0x08003b41

08003de4 <_printf_common>:
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	4691      	mov	r9, r2
 8003dea:	461f      	mov	r7, r3
 8003dec:	688a      	ldr	r2, [r1, #8]
 8003dee:	690b      	ldr	r3, [r1, #16]
 8003df0:	4606      	mov	r6, r0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	bfb8      	it	lt
 8003df6:	4613      	movlt	r3, r2
 8003df8:	f8c9 3000 	str.w	r3, [r9]
 8003dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e00:	460c      	mov	r4, r1
 8003e02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e06:	b112      	cbz	r2, 8003e0e <_printf_common+0x2a>
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f8c9 3000 	str.w	r3, [r9]
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	0699      	lsls	r1, r3, #26
 8003e12:	bf42      	ittt	mi
 8003e14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e18:	3302      	addmi	r3, #2
 8003e1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	f015 0506 	ands.w	r5, r5, #6
 8003e24:	d107      	bne.n	8003e36 <_printf_common+0x52>
 8003e26:	f104 0a19 	add.w	sl, r4, #25
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	dc29      	bgt.n	8003e8a <_printf_common+0xa6>
 8003e36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	3300      	adds	r3, #0
 8003e3e:	bf18      	it	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	0692      	lsls	r2, r2, #26
 8003e44:	d42e      	bmi.n	8003ea4 <_printf_common+0xc0>
 8003e46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	47c0      	blx	r8
 8003e50:	3001      	adds	r0, #1
 8003e52:	d021      	beq.n	8003e98 <_printf_common+0xb4>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	68e5      	ldr	r5, [r4, #12]
 8003e58:	f003 0306 	and.w	r3, r3, #6
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	bf18      	it	ne
 8003e60:	2500      	movne	r5, #0
 8003e62:	f8d9 2000 	ldr.w	r2, [r9]
 8003e66:	f04f 0900 	mov.w	r9, #0
 8003e6a:	bf08      	it	eq
 8003e6c:	1aad      	subeq	r5, r5, r2
 8003e6e:	68a3      	ldr	r3, [r4, #8]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	bf08      	it	eq
 8003e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bfc4      	itt	gt
 8003e7c:	1a9b      	subgt	r3, r3, r2
 8003e7e:	18ed      	addgt	r5, r5, r3
 8003e80:	341a      	adds	r4, #26
 8003e82:	454d      	cmp	r5, r9
 8003e84:	d11a      	bne.n	8003ebc <_printf_common+0xd8>
 8003e86:	2000      	movs	r0, #0
 8003e88:	e008      	b.n	8003e9c <_printf_common+0xb8>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4652      	mov	r2, sl
 8003e8e:	4639      	mov	r1, r7
 8003e90:	4630      	mov	r0, r6
 8003e92:	47c0      	blx	r8
 8003e94:	3001      	adds	r0, #1
 8003e96:	d103      	bne.n	8003ea0 <_printf_common+0xbc>
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea0:	3501      	adds	r5, #1
 8003ea2:	e7c2      	b.n	8003e2a <_printf_common+0x46>
 8003ea4:	2030      	movs	r0, #48	; 0x30
 8003ea6:	18e1      	adds	r1, r4, r3
 8003ea8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eb2:	4422      	add	r2, r4
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eba:	e7c4      	b.n	8003e46 <_printf_common+0x62>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	47c0      	blx	r8
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d0e6      	beq.n	8003e98 <_printf_common+0xb4>
 8003eca:	f109 0901 	add.w	r9, r9, #1
 8003ece:	e7d8      	b.n	8003e82 <_printf_common+0x9e>

08003ed0 <_printf_i>:
 8003ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ed4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ed8:	460c      	mov	r4, r1
 8003eda:	7e09      	ldrb	r1, [r1, #24]
 8003edc:	b085      	sub	sp, #20
 8003ede:	296e      	cmp	r1, #110	; 0x6e
 8003ee0:	4617      	mov	r7, r2
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	4698      	mov	r8, r3
 8003ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ee8:	f000 80b3 	beq.w	8004052 <_printf_i+0x182>
 8003eec:	d822      	bhi.n	8003f34 <_printf_i+0x64>
 8003eee:	2963      	cmp	r1, #99	; 0x63
 8003ef0:	d036      	beq.n	8003f60 <_printf_i+0x90>
 8003ef2:	d80a      	bhi.n	8003f0a <_printf_i+0x3a>
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	f000 80b9 	beq.w	800406c <_printf_i+0x19c>
 8003efa:	2958      	cmp	r1, #88	; 0x58
 8003efc:	f000 8083 	beq.w	8004006 <_printf_i+0x136>
 8003f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f08:	e032      	b.n	8003f70 <_printf_i+0xa0>
 8003f0a:	2964      	cmp	r1, #100	; 0x64
 8003f0c:	d001      	beq.n	8003f12 <_printf_i+0x42>
 8003f0e:	2969      	cmp	r1, #105	; 0x69
 8003f10:	d1f6      	bne.n	8003f00 <_printf_i+0x30>
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	0605      	lsls	r5, r0, #24
 8003f18:	f103 0104 	add.w	r1, r3, #4
 8003f1c:	d52a      	bpl.n	8003f74 <_printf_i+0xa4>
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da03      	bge.n	8003f2e <_printf_i+0x5e>
 8003f26:	222d      	movs	r2, #45	; 0x2d
 8003f28:	425b      	negs	r3, r3
 8003f2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f2e:	486f      	ldr	r0, [pc, #444]	; (80040ec <_printf_i+0x21c>)
 8003f30:	220a      	movs	r2, #10
 8003f32:	e039      	b.n	8003fa8 <_printf_i+0xd8>
 8003f34:	2973      	cmp	r1, #115	; 0x73
 8003f36:	f000 809d 	beq.w	8004074 <_printf_i+0x1a4>
 8003f3a:	d808      	bhi.n	8003f4e <_printf_i+0x7e>
 8003f3c:	296f      	cmp	r1, #111	; 0x6f
 8003f3e:	d020      	beq.n	8003f82 <_printf_i+0xb2>
 8003f40:	2970      	cmp	r1, #112	; 0x70
 8003f42:	d1dd      	bne.n	8003f00 <_printf_i+0x30>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f043 0320 	orr.w	r3, r3, #32
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	e003      	b.n	8003f56 <_printf_i+0x86>
 8003f4e:	2975      	cmp	r1, #117	; 0x75
 8003f50:	d017      	beq.n	8003f82 <_printf_i+0xb2>
 8003f52:	2978      	cmp	r1, #120	; 0x78
 8003f54:	d1d4      	bne.n	8003f00 <_printf_i+0x30>
 8003f56:	2378      	movs	r3, #120	; 0x78
 8003f58:	4865      	ldr	r0, [pc, #404]	; (80040f0 <_printf_i+0x220>)
 8003f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f5e:	e055      	b.n	800400c <_printf_i+0x13c>
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f66:	1d19      	adds	r1, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6011      	str	r1, [r2, #0]
 8003f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f70:	2301      	movs	r3, #1
 8003f72:	e08c      	b.n	800408e <_printf_i+0x1be>
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f7a:	6011      	str	r1, [r2, #0]
 8003f7c:	bf18      	it	ne
 8003f7e:	b21b      	sxthne	r3, r3
 8003f80:	e7cf      	b.n	8003f22 <_printf_i+0x52>
 8003f82:	6813      	ldr	r3, [r2, #0]
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	1d18      	adds	r0, r3, #4
 8003f88:	6010      	str	r0, [r2, #0]
 8003f8a:	0628      	lsls	r0, r5, #24
 8003f8c:	d501      	bpl.n	8003f92 <_printf_i+0xc2>
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	e002      	b.n	8003f98 <_printf_i+0xc8>
 8003f92:	0668      	lsls	r0, r5, #25
 8003f94:	d5fb      	bpl.n	8003f8e <_printf_i+0xbe>
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	296f      	cmp	r1, #111	; 0x6f
 8003f9a:	bf14      	ite	ne
 8003f9c:	220a      	movne	r2, #10
 8003f9e:	2208      	moveq	r2, #8
 8003fa0:	4852      	ldr	r0, [pc, #328]	; (80040ec <_printf_i+0x21c>)
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fa8:	6865      	ldr	r5, [r4, #4]
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	60a5      	str	r5, [r4, #8]
 8003fae:	f2c0 8095 	blt.w	80040dc <_printf_i+0x20c>
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	f021 0104 	bic.w	r1, r1, #4
 8003fb8:	6021      	str	r1, [r4, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d13d      	bne.n	800403a <_printf_i+0x16a>
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	f040 808e 	bne.w	80040e0 <_printf_i+0x210>
 8003fc4:	4665      	mov	r5, ip
 8003fc6:	2a08      	cmp	r2, #8
 8003fc8:	d10b      	bne.n	8003fe2 <_printf_i+0x112>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	07db      	lsls	r3, r3, #31
 8003fce:	d508      	bpl.n	8003fe2 <_printf_i+0x112>
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	6862      	ldr	r2, [r4, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	bfde      	ittt	le
 8003fd8:	2330      	movle	r3, #48	; 0x30
 8003fda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fe2:	ebac 0305 	sub.w	r3, ip, r5
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	f8cd 8000 	str.w	r8, [sp]
 8003fec:	463b      	mov	r3, r7
 8003fee:	aa03      	add	r2, sp, #12
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7ff fef6 	bl	8003de4 <_printf_common>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d14d      	bne.n	8004098 <_printf_i+0x1c8>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004000:	b005      	add	sp, #20
 8004002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004006:	4839      	ldr	r0, [pc, #228]	; (80040ec <_printf_i+0x21c>)
 8004008:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800400c:	6813      	ldr	r3, [r2, #0]
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	1d1d      	adds	r5, r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6015      	str	r5, [r2, #0]
 8004016:	060a      	lsls	r2, r1, #24
 8004018:	d50b      	bpl.n	8004032 <_printf_i+0x162>
 800401a:	07ca      	lsls	r2, r1, #31
 800401c:	bf44      	itt	mi
 800401e:	f041 0120 	orrmi.w	r1, r1, #32
 8004022:	6021      	strmi	r1, [r4, #0]
 8004024:	b91b      	cbnz	r3, 800402e <_printf_i+0x15e>
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	f022 0220 	bic.w	r2, r2, #32
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	2210      	movs	r2, #16
 8004030:	e7b7      	b.n	8003fa2 <_printf_i+0xd2>
 8004032:	064d      	lsls	r5, r1, #25
 8004034:	bf48      	it	mi
 8004036:	b29b      	uxthmi	r3, r3
 8004038:	e7ef      	b.n	800401a <_printf_i+0x14a>
 800403a:	4665      	mov	r5, ip
 800403c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004040:	fb02 3311 	mls	r3, r2, r1, r3
 8004044:	5cc3      	ldrb	r3, [r0, r3]
 8004046:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800404a:	460b      	mov	r3, r1
 800404c:	2900      	cmp	r1, #0
 800404e:	d1f5      	bne.n	800403c <_printf_i+0x16c>
 8004050:	e7b9      	b.n	8003fc6 <_printf_i+0xf6>
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	6825      	ldr	r5, [r4, #0]
 8004056:	1d18      	adds	r0, r3, #4
 8004058:	6961      	ldr	r1, [r4, #20]
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	0628      	lsls	r0, r5, #24
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	d501      	bpl.n	8004066 <_printf_i+0x196>
 8004062:	6019      	str	r1, [r3, #0]
 8004064:	e002      	b.n	800406c <_printf_i+0x19c>
 8004066:	066a      	lsls	r2, r5, #25
 8004068:	d5fb      	bpl.n	8004062 <_printf_i+0x192>
 800406a:	8019      	strh	r1, [r3, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	4665      	mov	r5, ip
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	e7b9      	b.n	8003fe8 <_printf_i+0x118>
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	681d      	ldr	r5, [r3, #0]
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	2100      	movs	r1, #0
 8004080:	4628      	mov	r0, r5
 8004082:	f000 f837 	bl	80040f4 <memchr>
 8004086:	b108      	cbz	r0, 800408c <_printf_i+0x1bc>
 8004088:	1b40      	subs	r0, r0, r5
 800408a:	6060      	str	r0, [r4, #4]
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	e7a7      	b.n	8003fe8 <_printf_i+0x118>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	462a      	mov	r2, r5
 800409c:	4639      	mov	r1, r7
 800409e:	4630      	mov	r0, r6
 80040a0:	47c0      	blx	r8
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0aa      	beq.n	8003ffc <_printf_i+0x12c>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d413      	bmi.n	80040d4 <_printf_i+0x204>
 80040ac:	68e0      	ldr	r0, [r4, #12]
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	4298      	cmp	r0, r3
 80040b2:	bfb8      	it	lt
 80040b4:	4618      	movlt	r0, r3
 80040b6:	e7a3      	b.n	8004000 <_printf_i+0x130>
 80040b8:	2301      	movs	r3, #1
 80040ba:	464a      	mov	r2, r9
 80040bc:	4639      	mov	r1, r7
 80040be:	4630      	mov	r0, r6
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d09a      	beq.n	8003ffc <_printf_i+0x12c>
 80040c6:	3501      	adds	r5, #1
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	9a03      	ldr	r2, [sp, #12]
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	42ab      	cmp	r3, r5
 80040d0:	dcf2      	bgt.n	80040b8 <_printf_i+0x1e8>
 80040d2:	e7eb      	b.n	80040ac <_printf_i+0x1dc>
 80040d4:	2500      	movs	r5, #0
 80040d6:	f104 0919 	add.w	r9, r4, #25
 80040da:	e7f5      	b.n	80040c8 <_printf_i+0x1f8>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ac      	bne.n	800403a <_printf_i+0x16a>
 80040e0:	7803      	ldrb	r3, [r0, #0]
 80040e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ea:	e76c      	b.n	8003fc6 <_printf_i+0xf6>
 80040ec:	080043b9 	.word	0x080043b9
 80040f0:	080043ca 	.word	0x080043ca

080040f4 <memchr>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	b2c9      	uxtb	r1, r1
 80040f8:	4402      	add	r2, r0
 80040fa:	4290      	cmp	r0, r2
 80040fc:	4603      	mov	r3, r0
 80040fe:	d101      	bne.n	8004104 <memchr+0x10>
 8004100:	2300      	movs	r3, #0
 8004102:	e003      	b.n	800410c <memchr+0x18>
 8004104:	781c      	ldrb	r4, [r3, #0]
 8004106:	3001      	adds	r0, #1
 8004108:	428c      	cmp	r4, r1
 800410a:	d1f6      	bne.n	80040fa <memchr+0x6>
 800410c:	4618      	mov	r0, r3
 800410e:	bd10      	pop	{r4, pc}

08004110 <memmove>:
 8004110:	4288      	cmp	r0, r1
 8004112:	b510      	push	{r4, lr}
 8004114:	eb01 0302 	add.w	r3, r1, r2
 8004118:	d807      	bhi.n	800412a <memmove+0x1a>
 800411a:	1e42      	subs	r2, r0, #1
 800411c:	4299      	cmp	r1, r3
 800411e:	d00a      	beq.n	8004136 <memmove+0x26>
 8004120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004124:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004128:	e7f8      	b.n	800411c <memmove+0xc>
 800412a:	4283      	cmp	r3, r0
 800412c:	d9f5      	bls.n	800411a <memmove+0xa>
 800412e:	1881      	adds	r1, r0, r2
 8004130:	1ad2      	subs	r2, r2, r3
 8004132:	42d3      	cmn	r3, r2
 8004134:	d100      	bne.n	8004138 <memmove+0x28>
 8004136:	bd10      	pop	{r4, pc}
 8004138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800413c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004140:	e7f7      	b.n	8004132 <memmove+0x22>
	...

08004144 <_free_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4605      	mov	r5, r0
 8004148:	2900      	cmp	r1, #0
 800414a:	d043      	beq.n	80041d4 <_free_r+0x90>
 800414c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004150:	1f0c      	subs	r4, r1, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	bfb8      	it	lt
 8004156:	18e4      	addlt	r4, r4, r3
 8004158:	f000 f8d0 	bl	80042fc <__malloc_lock>
 800415c:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <_free_r+0x94>)
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	4610      	mov	r0, r2
 8004162:	b933      	cbnz	r3, 8004172 <_free_r+0x2e>
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	6014      	str	r4, [r2, #0]
 8004168:	4628      	mov	r0, r5
 800416a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800416e:	f000 b8c6 	b.w	80042fe <__malloc_unlock>
 8004172:	42a3      	cmp	r3, r4
 8004174:	d90b      	bls.n	800418e <_free_r+0x4a>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	1862      	adds	r2, r4, r1
 800417a:	4293      	cmp	r3, r2
 800417c:	bf01      	itttt	eq
 800417e:	681a      	ldreq	r2, [r3, #0]
 8004180:	685b      	ldreq	r3, [r3, #4]
 8004182:	1852      	addeq	r2, r2, r1
 8004184:	6022      	streq	r2, [r4, #0]
 8004186:	6063      	str	r3, [r4, #4]
 8004188:	6004      	str	r4, [r0, #0]
 800418a:	e7ed      	b.n	8004168 <_free_r+0x24>
 800418c:	4613      	mov	r3, r2
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	b10a      	cbz	r2, 8004196 <_free_r+0x52>
 8004192:	42a2      	cmp	r2, r4
 8004194:	d9fa      	bls.n	800418c <_free_r+0x48>
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	1858      	adds	r0, r3, r1
 800419a:	42a0      	cmp	r0, r4
 800419c:	d10b      	bne.n	80041b6 <_free_r+0x72>
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	4401      	add	r1, r0
 80041a2:	1858      	adds	r0, r3, r1
 80041a4:	4282      	cmp	r2, r0
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	d1de      	bne.n	8004168 <_free_r+0x24>
 80041aa:	6810      	ldr	r0, [r2, #0]
 80041ac:	6852      	ldr	r2, [r2, #4]
 80041ae:	4401      	add	r1, r0
 80041b0:	6019      	str	r1, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e7d8      	b.n	8004168 <_free_r+0x24>
 80041b6:	d902      	bls.n	80041be <_free_r+0x7a>
 80041b8:	230c      	movs	r3, #12
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	e7d4      	b.n	8004168 <_free_r+0x24>
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	1821      	adds	r1, r4, r0
 80041c2:	428a      	cmp	r2, r1
 80041c4:	bf01      	itttt	eq
 80041c6:	6811      	ldreq	r1, [r2, #0]
 80041c8:	6852      	ldreq	r2, [r2, #4]
 80041ca:	1809      	addeq	r1, r1, r0
 80041cc:	6021      	streq	r1, [r4, #0]
 80041ce:	6062      	str	r2, [r4, #4]
 80041d0:	605c      	str	r4, [r3, #4]
 80041d2:	e7c9      	b.n	8004168 <_free_r+0x24>
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	bf00      	nop
 80041d8:	2000243c 	.word	0x2000243c

080041dc <_malloc_r>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	1ccd      	adds	r5, r1, #3
 80041e0:	f025 0503 	bic.w	r5, r5, #3
 80041e4:	3508      	adds	r5, #8
 80041e6:	2d0c      	cmp	r5, #12
 80041e8:	bf38      	it	cc
 80041ea:	250c      	movcc	r5, #12
 80041ec:	2d00      	cmp	r5, #0
 80041ee:	4606      	mov	r6, r0
 80041f0:	db01      	blt.n	80041f6 <_malloc_r+0x1a>
 80041f2:	42a9      	cmp	r1, r5
 80041f4:	d903      	bls.n	80041fe <_malloc_r+0x22>
 80041f6:	230c      	movs	r3, #12
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	2000      	movs	r0, #0
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	f000 f87d 	bl	80042fc <__malloc_lock>
 8004202:	4a21      	ldr	r2, [pc, #132]	; (8004288 <_malloc_r+0xac>)
 8004204:	6814      	ldr	r4, [r2, #0]
 8004206:	4621      	mov	r1, r4
 8004208:	b991      	cbnz	r1, 8004230 <_malloc_r+0x54>
 800420a:	4c20      	ldr	r4, [pc, #128]	; (800428c <_malloc_r+0xb0>)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	b91b      	cbnz	r3, 8004218 <_malloc_r+0x3c>
 8004210:	4630      	mov	r0, r6
 8004212:	f000 f863 	bl	80042dc <_sbrk_r>
 8004216:	6020      	str	r0, [r4, #0]
 8004218:	4629      	mov	r1, r5
 800421a:	4630      	mov	r0, r6
 800421c:	f000 f85e 	bl	80042dc <_sbrk_r>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d124      	bne.n	800426e <_malloc_r+0x92>
 8004224:	230c      	movs	r3, #12
 8004226:	4630      	mov	r0, r6
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	f000 f868 	bl	80042fe <__malloc_unlock>
 800422e:	e7e4      	b.n	80041fa <_malloc_r+0x1e>
 8004230:	680b      	ldr	r3, [r1, #0]
 8004232:	1b5b      	subs	r3, r3, r5
 8004234:	d418      	bmi.n	8004268 <_malloc_r+0x8c>
 8004236:	2b0b      	cmp	r3, #11
 8004238:	d90f      	bls.n	800425a <_malloc_r+0x7e>
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	18cc      	adds	r4, r1, r3
 800423e:	50cd      	str	r5, [r1, r3]
 8004240:	4630      	mov	r0, r6
 8004242:	f000 f85c 	bl	80042fe <__malloc_unlock>
 8004246:	f104 000b 	add.w	r0, r4, #11
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	f020 0007 	bic.w	r0, r0, #7
 8004250:	1ac3      	subs	r3, r0, r3
 8004252:	d0d3      	beq.n	80041fc <_malloc_r+0x20>
 8004254:	425a      	negs	r2, r3
 8004256:	50e2      	str	r2, [r4, r3]
 8004258:	e7d0      	b.n	80041fc <_malloc_r+0x20>
 800425a:	684b      	ldr	r3, [r1, #4]
 800425c:	428c      	cmp	r4, r1
 800425e:	bf16      	itet	ne
 8004260:	6063      	strne	r3, [r4, #4]
 8004262:	6013      	streq	r3, [r2, #0]
 8004264:	460c      	movne	r4, r1
 8004266:	e7eb      	b.n	8004240 <_malloc_r+0x64>
 8004268:	460c      	mov	r4, r1
 800426a:	6849      	ldr	r1, [r1, #4]
 800426c:	e7cc      	b.n	8004208 <_malloc_r+0x2c>
 800426e:	1cc4      	adds	r4, r0, #3
 8004270:	f024 0403 	bic.w	r4, r4, #3
 8004274:	42a0      	cmp	r0, r4
 8004276:	d005      	beq.n	8004284 <_malloc_r+0xa8>
 8004278:	1a21      	subs	r1, r4, r0
 800427a:	4630      	mov	r0, r6
 800427c:	f000 f82e 	bl	80042dc <_sbrk_r>
 8004280:	3001      	adds	r0, #1
 8004282:	d0cf      	beq.n	8004224 <_malloc_r+0x48>
 8004284:	6025      	str	r5, [r4, #0]
 8004286:	e7db      	b.n	8004240 <_malloc_r+0x64>
 8004288:	2000243c 	.word	0x2000243c
 800428c:	20002440 	.word	0x20002440

08004290 <_realloc_r>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	4607      	mov	r7, r0
 8004294:	4614      	mov	r4, r2
 8004296:	460e      	mov	r6, r1
 8004298:	b921      	cbnz	r1, 80042a4 <_realloc_r+0x14>
 800429a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800429e:	4611      	mov	r1, r2
 80042a0:	f7ff bf9c 	b.w	80041dc <_malloc_r>
 80042a4:	b922      	cbnz	r2, 80042b0 <_realloc_r+0x20>
 80042a6:	f7ff ff4d 	bl	8004144 <_free_r>
 80042aa:	4625      	mov	r5, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	f000 f826 	bl	8004300 <_malloc_usable_size_r>
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d20f      	bcs.n	80042d8 <_realloc_r+0x48>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff ff8e 	bl	80041dc <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0f2      	beq.n	80042ac <_realloc_r+0x1c>
 80042c6:	4631      	mov	r1, r6
 80042c8:	4622      	mov	r2, r4
 80042ca:	f7ff fc05 	bl	8003ad8 <memcpy>
 80042ce:	4631      	mov	r1, r6
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff ff37 	bl	8004144 <_free_r>
 80042d6:	e7e9      	b.n	80042ac <_realloc_r+0x1c>
 80042d8:	4635      	mov	r5, r6
 80042da:	e7e7      	b.n	80042ac <_realloc_r+0x1c>

080042dc <_sbrk_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4c05      	ldr	r4, [pc, #20]	; (80042f8 <_sbrk_r+0x1c>)
 80042e2:	4605      	mov	r5, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	f7fc fb50 	bl	800098c <_sbrk>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_sbrk_r+0x1a>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_sbrk_r+0x1a>
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20002628 	.word	0x20002628

080042fc <__malloc_lock>:
 80042fc:	4770      	bx	lr

080042fe <__malloc_unlock>:
 80042fe:	4770      	bx	lr

08004300 <_malloc_usable_size_r>:
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbc      	itt	lt
 800430a:	580b      	ldrlt	r3, [r1, r0]
 800430c:	18c0      	addlt	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
