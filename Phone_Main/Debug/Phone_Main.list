
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b8c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f24  08004f24  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f24  08004f24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bd8  20000078  08004fa4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002c50  08004fa4  00022c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe88  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269a  00000000  00000000  0002ff29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  000334b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019266  00000000  00000000  00034260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd99  00000000  00000000  0004d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000919c7  00000000  00000000  0005a25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebc26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000ebca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c84 	.word	0x08004c84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004c84 	.word	0x08004c84

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000094 	.word	0x20000094
 80001a0:	200000e8 	.word	0x200000e8

080001a4 <HAL_UART_RxCpltCallback>:
te_phone_state PHONE_STATE = IDLE;
te_sms_state SMS_STATE = NO_SMS;
ts_phonebook_entry phonebook[25];
int phonebook_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b0a      	cmp	r3, #10
 80001b6:	d10f      	bne.n	80001d8 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x60>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001ca:	4413      	add	r3, r2
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001d2:	f002 fc0f 	bl	80029f4 <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001d6:	e00d      	b.n	80001f4 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001e8:	4413      	add	r3, r2
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	f002 fc00 	bl	80029f4 <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200003e8 	.word	0x200003e8
 8000200:	200002e8 	.word	0x200002e8
 8000204:	200006ec 	.word	0x200006ec
 8000208:	20002bb8 	.word	0x20002bb8

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b590      	push	{r4, r7, lr}
 800020e:	b0ab      	sub	sp, #172	; 0xac
 8000210:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000212:	f001 f8d7 	bl	80013c4 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8000216:	f000 f9d9 	bl	80005cc <MX_GPIO_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021a:	f000 f93f 	bl	800049c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800021e:	f000 f9d5 	bl	80005cc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000222:	f000 f97f 	bl	8000524 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000226:	f000 f9a7 	bl	8000578 <MX_USART2_UART_Init>


	char close_echo[] = "AT+CRSL=100\n";
 800022a:	4b8d      	ldr	r3, [pc, #564]	; (8000460 <main+0x254>)
 800022c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000232:	c407      	stmia	r4!, {r0, r1, r2}
 8000234:	7023      	strb	r3, [r4, #0]
	char response[64] = {0};
 8000236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800023a:	2240      	movs	r2, #64	; 0x40
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 f89d 	bl	800437e <memset>
	char get_entry[64] = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2240      	movs	r2, #64	; 0x40
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 f897 	bl	800437e <memset>
	char *p1;
	char *p2;
	int index = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 8000256:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff82 	bl	8000164 <strlen>
 8000260:	4603      	mov	r3, r0
 8000262:	b29a      	uxth	r2, r3
 8000264:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000268:	23c8      	movs	r3, #200	; 0xc8
 800026a:	487e      	ldr	r0, [pc, #504]	; (8000464 <main+0x258>)
 800026c:	f002 fa91 	bl	8002792 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 8000270:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000274:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000278:	2240      	movs	r2, #64	; 0x40
 800027a:	487a      	ldr	r0, [pc, #488]	; (8000464 <main+0x258>)
 800027c:	f002 fb1b 	bl	80028b6 <HAL_UART_Receive>
	memset(response, 0, sizeof(response));
 8000280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f004 f878 	bl	800437e <memset>
	for(int i = 1; i < 251; i++)
 800028e:	2301      	movs	r3, #1
 8000290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000294:	e0a9      	b.n	80003ea <main+0x1de>
	{
		sprintf(get_entry, "AT+CPBR=%d\r\n", i);
 8000296:	463b      	mov	r3, r7
 8000298:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800029c:	4972      	ldr	r1, [pc, #456]	; (8000468 <main+0x25c>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 f876 	bl	8004390 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff5c 	bl	8000164 <strlen>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4639      	mov	r1, r7
 80002b2:	23c8      	movs	r3, #200	; 0xc8
 80002b4:	486b      	ldr	r0, [pc, #428]	; (8000464 <main+0x258>)
 80002b6:	f002 fa6c 	bl	8002792 <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80002be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <main+0x258>)
 80002c6:	f002 faf6 	bl	80028b6 <HAL_UART_Receive>
		if(strcmp(response, "\r\nOK\r\n") == 0)
 80002ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002ce:	4967      	ldr	r1, [pc, #412]	; (800046c <main+0x260>)
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff3d 	bl	8000150 <strcmp>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	f000 808c 	beq.w	80003f6 <main+0x1ea>
			break;
		p1 = strstr(response, "\"");
 80002de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e2:	2122      	movs	r1, #34	; 0x22
 80002e4:	4618      	mov	r0, r3
 80002e6:	f004 f873 	bl	80043d0 <strchr>
 80002ea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		p1++;
 80002ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80002f2:	3301      	adds	r3, #1
 80002f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if(p1)
 80002f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d01e      	beq.n	800033e <main+0x132>
		  p2 = strstr(p1,"\"");
 8000300:	2122      	movs	r1, #34	; 0x22
 8000302:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000306:	f004 f863 	bl	80043d0 <strchr>
 800030a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		while(p1 != p2)
 800030e:	e016      	b.n	800033e <main+0x132>
		{
		  phonebook[i-1].number[index++] = *p1;
 8000310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000314:	1e5a      	subs	r2, r3, #1
 8000316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800031a:	1c59      	adds	r1, r3, #1
 800031c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000320:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000324:	7808      	ldrb	r0, [r1, #0]
 8000326:	4952      	ldr	r1, [pc, #328]	; (8000470 <main+0x264>)
 8000328:	0152      	lsls	r2, r2, #5
 800032a:	440a      	add	r2, r1
 800032c:	4413      	add	r3, r2
 800032e:	3310      	adds	r3, #16
 8000330:	4602      	mov	r2, r0
 8000332:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000338:	3301      	adds	r3, #1
 800033a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		while(p1 != p2)
 800033e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000346:	429a      	cmp	r2, r3
 8000348:	d1e2      	bne.n	8000310 <main+0x104>
		}
		p2++;
 800034a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800034e:	3301      	adds	r3, #1
 8000350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		p1 = strstr(p2, "\"");
 8000354:	2122      	movs	r1, #34	; 0x22
 8000356:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800035a:	f004 f839 	bl	80043d0 <strchr>
 800035e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		p1++;
 8000362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000366:	3301      	adds	r3, #1
 8000368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if(p1)
 800036c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000370:	2b00      	cmp	r3, #0
 8000372:	d006      	beq.n	8000382 <main+0x176>
		  p2 = strstr(p1,"\"");
 8000374:	2122      	movs	r1, #34	; 0x22
 8000376:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800037a:	f004 f829 	bl	80043d0 <strchr>
 800037e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		index = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(p1 != p2)
 8000388:	e015      	b.n	80003b6 <main+0x1aa>
		{
		  phonebook[i-1].name[index++] = *p1;
 800038a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800038e:	1e5a      	subs	r2, r3, #1
 8000390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000394:	1c59      	adds	r1, r3, #1
 8000396:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800039a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800039e:	7808      	ldrb	r0, [r1, #0]
 80003a0:	4933      	ldr	r1, [pc, #204]	; (8000470 <main+0x264>)
 80003a2:	0152      	lsls	r2, r2, #5
 80003a4:	440a      	add	r2, r1
 80003a6:	4413      	add	r3, r2
 80003a8:	4602      	mov	r2, r0
 80003aa:	701a      	strb	r2, [r3, #0]
		  p1++;
 80003ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003b0:	3301      	adds	r3, #1
 80003b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		while(p1 != p2)
 80003b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80003ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80003be:	429a      	cmp	r2, r3
 80003c0:	d1e3      	bne.n	800038a <main+0x17e>
		}
		memset(response, 0, sizeof(response));
 80003c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003c6:	2240      	movs	r2, #64	; 0x40
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 ffd7 	bl	800437e <memset>
		index = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		phonebook_index++;
 80003d6:	4b27      	ldr	r3, [pc, #156]	; (8000474 <main+0x268>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3301      	adds	r3, #1
 80003dc:	4a25      	ldr	r2, [pc, #148]	; (8000474 <main+0x268>)
 80003de:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 80003e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003e4:	3301      	adds	r3, #1
 80003e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80003ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003ee:	2bfa      	cmp	r3, #250	; 0xfa
 80003f0:	f77f af51 	ble.w	8000296 <main+0x8a>
 80003f4:	e000      	b.n	80003f8 <main+0x1ec>
			break;
 80003f6:	bf00      	nop
	}

	if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <main+0x26c>)
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2303      	movs	r3, #3
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000406:	491d      	ldr	r1, [pc, #116]	; (800047c <main+0x270>)
 8000408:	481d      	ldr	r0, [pc, #116]	; (8000480 <main+0x274>)
 800040a:	f002 ff51 	bl	80032b0 <xTaskCreate>
 800040e:	4603      	mov	r3, r0
 8000410:	2b01      	cmp	r3, #1
 8000412:	d000      	beq.n	8000416 <main+0x20a>
	{
		__NOP();
 8000414:	bf00      	nop
	}
	if(xTaskCreate(message_task_func, "sms_task", 256, NULL, 3, &sms_task) != pdPASS)
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <main+0x278>)
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2303      	movs	r3, #3
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2300      	movs	r3, #0
 8000420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000424:	4918      	ldr	r1, [pc, #96]	; (8000488 <main+0x27c>)
 8000426:	4819      	ldr	r0, [pc, #100]	; (800048c <main+0x280>)
 8000428:	f002 ff42 	bl	80032b0 <xTaskCreate>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	d000      	beq.n	8000434 <main+0x228>
	{
		__NOP();
 8000432:	bf00      	nop
	}

	if(xTaskCreate(call_task_func, "call_task", 512, NULL, 7, &call_task) != pdPASS)
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <main+0x284>)
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	2307      	movs	r3, #7
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2300      	movs	r3, #0
 800043e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <main+0x288>)
 8000444:	4814      	ldr	r0, [pc, #80]	; (8000498 <main+0x28c>)
 8000446:	f002 ff33 	bl	80032b0 <xTaskCreate>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d000      	beq.n	8000452 <main+0x246>
	{
		__NOP();
 8000450:	bf00      	nop
	}
	vTaskStartScheduler();
 8000452:	f003 f88f 	bl	8003574 <vTaskStartScheduler>
 8000456:	2300      	movs	r3, #0

}
 8000458:	4618      	mov	r0, r3
 800045a:	37a4      	adds	r7, #164	; 0xa4
 800045c:	46bd      	mov	sp, r7
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	08004cdc 	.word	0x08004cdc
 8000464:	20002b74 	.word	0x20002b74
 8000468:	08004c9c 	.word	0x08004c9c
 800046c:	08004cac 	.word	0x08004cac
 8000470:	2000284c 	.word	0x2000284c
 8000474:	200006f0 	.word	0x200006f0
 8000478:	20002bf8 	.word	0x20002bf8
 800047c:	08004cb4 	.word	0x08004cb4
 8000480:	08000971 	.word	0x08000971
 8000484:	20002bb4 	.word	0x20002bb4
 8000488:	08004cc4 	.word	0x08004cc4
 800048c:	080009b1 	.word	0x080009b1
 8000490:	20002b6c 	.word	0x20002b6c
 8000494:	08004cd0 	.word	0x08004cd0
 8000498:	08000b19 	.word	0x08000b19

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b090      	sub	sp, #64	; 0x40
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 ff67 	bl	800437e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	2301      	movs	r3, #1
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004da:	2300      	movs	r3, #0
 80004dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fa72 	bl	80019cc <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004ee:	f000 fdb7 	bl	8001060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	230f      	movs	r3, #15
 80004f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2302      	movs	r3, #2
 80004f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f001 fcdd 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000518:	f000 fda2 	bl	8001060 <Error_Handler>
  }
}
 800051c:	bf00      	nop
 800051e:	3740      	adds	r7, #64	; 0x40
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_USART1_UART_Init+0x50>)
 800052c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_USART1_UART_Init+0x4c>)
 800055c:	f002 f8cc 	bl	80026f8 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000566:	f000 fd7b 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20002b74 	.word	0x20002b74
 8000574:	40013800 	.word	0x40013800

08000578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART2_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005b0:	f002 f8a2 	bl	80026f8 <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ba:	f000 fd51 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20002bb8 	.word	0x20002bb8
 80005c8:	40004400 	.word	0x40004400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_GPIO_Init+0x8c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_GPIO_Init+0x8c>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_GPIO_Init+0x8c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_GPIO_Init+0x8c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_GPIO_Init+0x8c>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_GPIO_Init+0x8c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_GPIO_Init+0x8c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_GPIO_Init+0x8c>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_GPIO_Init+0x8c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000628:	2301      	movs	r3, #1
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_GPIO_Init+0x90>)
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_GPIO_Init+0x94>)
 800063c:	f001 f84a 	bl	80016d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2105      	movs	r1, #5
 8000644:	2006      	movs	r0, #6
 8000646:	f000 ffa4 	bl	8001592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064a:	2006      	movs	r0, #6
 800064c:	f000 ffbd 	bl	80015ca <HAL_NVIC_EnableIRQ>

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	10210000 	.word	0x10210000
 8000660:	40010c00 	.word	0x40010c00

08000664 <show_subscriber_with_index>:

void show_subscriber_with_index(int index)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0a8      	sub	sp, #160	; 0xa0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	char name[64] = {0};
 800066c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000670:	2240      	movs	r2, #64	; 0x40
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fe82 	bl	800437e <memset>
	char number[64] = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2240      	movs	r2, #64	; 0x40
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fe7b 	bl	800437e <memset>
	char active_button1[] = "vis b2,1\xFF\xFF\xFF";
 8000688:	4a36      	ldr	r2, [pc, #216]	; (8000764 <show_subscriber_with_index+0x100>)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000690:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char active_button2[] = "vis b3,1\xFF\xFF\xFF";
 8000694:	4a34      	ldr	r2, [pc, #208]	; (8000768 <show_subscriber_with_index+0x104>)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	ca07      	ldmia	r2, {r0, r1, r2}
 800069c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(index < phonebook_index)
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <show_subscriber_with_index+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	da15      	bge.n	80006d6 <show_subscriber_with_index+0x72>
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].name);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	015b      	lsls	r3, r3, #5
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <show_subscriber_with_index+0x10c>)
 80006b0:	441a      	add	r2, r3
 80006b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006b6:	492f      	ldr	r1, [pc, #188]	; (8000774 <show_subscriber_with_index+0x110>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fe69 	bl	8004390 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].number);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	015b      	lsls	r3, r3, #5
 80006c2:	3310      	adds	r3, #16
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <show_subscriber_with_index+0x10c>)
 80006c6:	441a      	add	r2, r3
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	492a      	ldr	r1, [pc, #168]	; (8000778 <show_subscriber_with_index+0x114>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fe5e 	bl	8004390 <siprintf>
 80006d4:	e00d      	b.n	80006f2 <show_subscriber_with_index+0x8e>
	}
	else
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", "empty");
 80006d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006da:	4a28      	ldr	r2, [pc, #160]	; (800077c <show_subscriber_with_index+0x118>)
 80006dc:	4925      	ldr	r1, [pc, #148]	; (8000774 <show_subscriber_with_index+0x110>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fe56 	bl	8004390 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF",  "empty");
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4a24      	ldr	r2, [pc, #144]	; (800077c <show_subscriber_with_index+0x118>)
 80006ea:	4923      	ldr	r1, [pc, #140]	; (8000778 <show_subscriber_with_index+0x114>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fe4f 	bl	8004390 <siprintf>
	}
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)name, strlen(name), 200);
 80006f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd34 	bl	8000164 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000704:	23c8      	movs	r3, #200	; 0xc8
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <show_subscriber_with_index+0x11c>)
 8000708:	f002 f843 	bl	8002792 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)number, strlen(number), 200);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd27 	bl	8000164 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f107 0120 	add.w	r1, r7, #32
 800071e:	23c8      	movs	r3, #200	; 0xc8
 8000720:	4817      	ldr	r0, [pc, #92]	; (8000780 <show_subscriber_with_index+0x11c>)
 8000722:	f002 f836 	bl	8002792 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button1, strlen(active_button1), 100);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd1a 	bl	8000164 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 0114 	add.w	r1, r7, #20
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <show_subscriber_with_index+0x11c>)
 800073c:	f002 f829 	bl	8002792 <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button2, strlen(active_button2), 100);
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f107 0108 	add.w	r1, r7, #8
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <show_subscriber_with_index+0x11c>)
 8000756:	f002 f81c 	bl	8002792 <HAL_UART_Transmit>
}
 800075a:	bf00      	nop
 800075c:	37a0      	adds	r7, #160	; 0xa0
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08004d34 	.word	0x08004d34
 8000768:	08004d40 	.word	0x08004d40
 800076c:	200006f0 	.word	0x200006f0
 8000770:	2000284c 	.word	0x2000284c
 8000774:	08004cec 	.word	0x08004cec
 8000778:	08004d0c 	.word	0x08004d0c
 800077c:	08004d2c 	.word	0x08004d2c
 8000780:	20002bb8 	.word	0x20002bb8

08000784 <add_subscriber>:

void add_subscriber(char *data)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	char *name = strtok(data, ">");
 800078c:	4925      	ldr	r1, [pc, #148]	; (8000824 <add_subscriber+0xa0>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f003 fe34 	bl	80043fc <strtok>
 8000794:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *number = strtok(NULL, ">");
 8000796:	4923      	ldr	r1, [pc, #140]	; (8000824 <add_subscriber+0xa0>)
 8000798:	2000      	movs	r0, #0
 800079a:	f003 fe2f 	bl	80043fc <strtok>
 800079e:	64b8      	str	r0, [r7, #72]	; 0x48
	number[strlen(number)-1] = '\0';
 80007a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80007a2:	f7ff fcdf 	bl	8000164 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	3b01      	subs	r3, #1
 80007aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007ac:	4413      	add	r3, r2
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	char sim_write_command[64] = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fddf 	bl	800437e <memset>
	sprintf(sim_write_command, "AT+CPBW=,\"%s\",145,\"%s\"", number, name);
 80007c0:	f107 0008 	add.w	r0, r7, #8
 80007c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007c8:	4917      	ldr	r1, [pc, #92]	; (8000828 <add_subscriber+0xa4>)
 80007ca:	f003 fde1 	bl	8004390 <siprintf>
	strcpy(phonebook[phonebook_index].name, name);
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <add_subscriber+0xa8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	015b      	lsls	r3, r3, #5
 80007d4:	4a16      	ldr	r2, [pc, #88]	; (8000830 <add_subscriber+0xac>)
 80007d6:	4413      	add	r3, r2
 80007d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fe05 	bl	80043ea <strcpy>
	strcpy(phonebook[phonebook_index].number, number);
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <add_subscriber+0xa8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	015b      	lsls	r3, r3, #5
 80007e6:	3310      	adds	r3, #16
 80007e8:	4a11      	ldr	r2, [pc, #68]	; (8000830 <add_subscriber+0xac>)
 80007ea:	4413      	add	r3, r2
 80007ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fdfb 	bl	80043ea <strcpy>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)sim_write_command, strlen(sim_write_command), 300);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcb3 	bl	8000164 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 0108 	add.w	r1, r7, #8
 8000806:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <add_subscriber+0xb0>)
 800080c:	f001 ffc1 	bl	8002792 <HAL_UART_Transmit>
	phonebook_index++;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <add_subscriber+0xa8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <add_subscriber+0xa8>)
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08004d4c 	.word	0x08004d4c
 8000828:	08004d50 	.word	0x08004d50
 800082c:	200006f0 	.word	0x200006f0
 8000830:	2000284c 	.word	0x2000284c
 8000834:	20002b74 	.word	0x20002b74

08000838 <parse_display_request>:

void parse_display_request()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if((display_rx[1] == 0x01 && display_rx[2] == 0x10) || (display_rx[1] == 0x05 && display_rx[2] == 0x05)) //call
 800083c:	4b44      	ldr	r3, [pc, #272]	; (8000950 <parse_display_request+0x118>)
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d103      	bne.n	800084c <parse_display_request+0x14>
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <parse_display_request+0x118>)
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	2b10      	cmp	r3, #16
 800084a:	d007      	beq.n	800085c <parse_display_request+0x24>
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <parse_display_request+0x118>)
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	2b05      	cmp	r3, #5
 8000852:	d116      	bne.n	8000882 <parse_display_request+0x4a>
 8000854:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <parse_display_request+0x118>)
 8000856:	789b      	ldrb	r3, [r3, #2]
 8000858:	2b05      	cmp	r3, #5
 800085a:	d112      	bne.n	8000882 <parse_display_request+0x4a>
	{
		memcpy(call_task_data, display_rx, RX_SIZE);
 800085c:	4a3d      	ldr	r2, [pc, #244]	; (8000954 <parse_display_request+0x11c>)
 800085e:	4b3c      	ldr	r3, [pc, #240]	; (8000950 <parse_display_request+0x118>)
 8000860:	4610      	mov	r0, r2
 8000862:	4619      	mov	r1, r3
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	461a      	mov	r2, r3
 800086a:	f003 fd7d 	bl	8004368 <memcpy>
		PHONE_STATE = BUSY;
 800086e:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <parse_display_request+0x120>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MO;
 8000874:	4b39      	ldr	r3, [pc, #228]	; (800095c <parse_display_request+0x124>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 800087a:	4b39      	ldr	r3, [pc, #228]	; (8000960 <parse_display_request+0x128>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e05d      	b.n	800093e <parse_display_request+0x106>
	}
	else if((display_rx[1] == 0x03 && display_rx[2] == 0x02) || (display_rx[1] == 0x04 && display_rx[2] == 0x02)) //Terminate call by user
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <parse_display_request+0x118>)
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d103      	bne.n	8000892 <parse_display_request+0x5a>
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <parse_display_request+0x118>)
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d007      	beq.n	80008a2 <parse_display_request+0x6a>
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <parse_display_request+0x118>)
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d107      	bne.n	80008aa <parse_display_request+0x72>
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <parse_display_request+0x118>)
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d103      	bne.n	80008aa <parse_display_request+0x72>
	{
		CALL_STATE = TERMINATE_CALL;
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <parse_display_request+0x128>)
 80008a4:	2206      	movs	r2, #6
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e049      	b.n	800093e <parse_display_request+0x106>
	}
	else if(display_rx[1] == 0x04 && display_rx[2] == 0x03) //Terminate call by user
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <parse_display_request+0x118>)
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d107      	bne.n	80008c2 <parse_display_request+0x8a>
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <parse_display_request+0x118>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d103      	bne.n	80008c2 <parse_display_request+0x8a>
	{
		CALL_STATE = ACCEPT_CALL;
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <parse_display_request+0x128>)
 80008bc:	2207      	movs	r2, #7
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	e03d      	b.n	800093e <parse_display_request+0x106>
	}
	else if((display_rx[1] == 0x06 && display_rx[2] == 0x05)) //Add subscriber to phone book
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <parse_display_request+0x118>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d107      	bne.n	80008da <parse_display_request+0xa2>
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <parse_display_request+0x118>)
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d103      	bne.n	80008da <parse_display_request+0xa2>
	{
		add_subscriber(&display_rx[7]);
 80008d2:	4824      	ldr	r0, [pc, #144]	; (8000964 <parse_display_request+0x12c>)
 80008d4:	f7ff ff56 	bl	8000784 <add_subscriber>
 80008d8:	e031      	b.n	800093e <parse_display_request+0x106>
	}
	else if((display_rx[1] == 0x05 && display_rx[2] == 0x06) || (display_rx[1] == 0x05 && display_rx[2] == 0x03) //Get phonebook entry
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <parse_display_request+0x118>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d103      	bne.n	80008ea <parse_display_request+0xb2>
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <parse_display_request+0x118>)
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d00f      	beq.n	800090a <parse_display_request+0xd2>
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <parse_display_request+0x118>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	d103      	bne.n	80008fa <parse_display_request+0xc2>
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <parse_display_request+0x118>)
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d007      	beq.n	800090a <parse_display_request+0xd2>
			|| (display_rx[1] == 0x05 && display_rx[2] == 0x07))
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <parse_display_request+0x118>)
 80008fc:	785b      	ldrb	r3, [r3, #1]
 80008fe:	2b05      	cmp	r3, #5
 8000900:	d109      	bne.n	8000916 <parse_display_request+0xde>
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <parse_display_request+0x118>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	2b07      	cmp	r3, #7
 8000908:	d105      	bne.n	8000916 <parse_display_request+0xde>
	{
		show_subscriber_with_index(display_rx[7]);
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <parse_display_request+0x118>)
 800090c:	79db      	ldrb	r3, [r3, #7]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea8 	bl	8000664 <show_subscriber_with_index>
 8000914:	e013      	b.n	800093e <parse_display_request+0x106>
	}
	else if(display_rx[1] == 0x02 && display_rx[2] == 0x39)//Send sms
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <parse_display_request+0x118>)
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d10f      	bne.n	800093e <parse_display_request+0x106>
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <parse_display_request+0x118>)
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	2b39      	cmp	r3, #57	; 0x39
 8000924:	d10b      	bne.n	800093e <parse_display_request+0x106>
	{
		memcpy(sms_task_data, display_rx, RX_SIZE);
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <parse_display_request+0x130>)
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <parse_display_request+0x118>)
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	461a      	mov	r2, r3
 8000934:	f003 fd18 	bl	8004368 <memcpy>
		SMS_STATE = SEND_SMS;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <parse_display_request+0x134>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
	}
	memset(display_rx, 0, RX_SIZE);
 800093e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000942:	2100      	movs	r1, #0
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <parse_display_request+0x118>)
 8000946:	f003 fd1a 	bl	800437e <memset>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002e8 	.word	0x200002e8
 8000954:	200004ec 	.word	0x200004ec
 8000958:	20000000 	.word	0x20000000
 800095c:	20002bfc 	.word	0x20002bfc
 8000960:	200006ed 	.word	0x200006ed
 8000964:	200002ef 	.word	0x200002ef
 8000968:	200003ec 	.word	0x200003ec
 800096c:	200006ee 	.word	0x200006ee

08000970 <display_uart_task_func>:

void display_uart_task_func(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <display_uart_task_func+0x30>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <display_uart_task_func+0x34>)
 800097e:	4413      	add	r3, r2
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <display_uart_task_func+0x38>)
 8000986:	f002 f835 	bl	80029f4 <HAL_UART_Receive_IT>
	while(1)
	{
		if(display_rec_flag)
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <display_uart_task_func+0x3c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0fb      	beq.n	800098a <display_uart_task_func+0x1a>
		{
			display_rec_flag = FALSE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <display_uart_task_func+0x3c>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
			parse_display_request();
 8000998:	f7ff ff4e 	bl	8000838 <parse_display_request>
		if(display_rec_flag)
 800099c:	e7f5      	b.n	800098a <display_uart_task_func+0x1a>
 800099e:	bf00      	nop
 80009a0:	200003e8 	.word	0x200003e8
 80009a4:	200002e8 	.word	0x200002e8
 80009a8:	20002bb8 	.word	0x20002bb8
 80009ac:	200006ec 	.word	0x200006ec

080009b0 <message_task_func>:
		}
	}
}

void message_task_func(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0c0      	sub	sp, #256	; 0x100
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	char text_mod[] = "AT+CMGF=1\r\n";
 80009b8:	4a4f      	ldr	r2, [pc, #316]	; (8000af8 <message_task_func+0x148>)
 80009ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80009be:	ca07      	ldmia	r2, {r0, r1, r2}
 80009c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 80009c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fcd6 	bl	800437e <memset>
	char message_command[160] = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	22a0      	movs	r2, #160	; 0xa0
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fccf 	bl	800437e <memset>
	char *number;
	char *message;
	while(1)
	{
		switch (SMS_STATE) {
 80009e0:	4b46      	ldr	r3, [pc, #280]	; (8000afc <message_task_func+0x14c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <message_task_func+0x3e>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d074      	beq.n	8000ad6 <message_task_func+0x126>
 80009ec:	e07d      	b.n	8000aea <message_task_func+0x13a>
			case SEND_SMS:
				memset(at_response, 0, RX_SIZE);
 80009ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f2:	2100      	movs	r1, #0
 80009f4:	4842      	ldr	r0, [pc, #264]	; (8000b00 <message_task_func+0x150>)
 80009f6:	f003 fcc2 	bl	800437e <memset>
				number = strtok(&sms_task_data[7], ">");
 80009fa:	4942      	ldr	r1, [pc, #264]	; (8000b04 <message_task_func+0x154>)
 80009fc:	4842      	ldr	r0, [pc, #264]	; (8000b08 <message_task_func+0x158>)
 80009fe:	f003 fcfd 	bl	80043fc <strtok>
 8000a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				message = strtok(NULL, ">");
 8000a06:	493f      	ldr	r1, [pc, #252]	; (8000b04 <message_task_func+0x154>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 fcf7 	bl	80043fc <strtok>
 8000a0e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 8000a12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a16:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000a1a:	493c      	ldr	r1, [pc, #240]	; (8000b0c <message_task_func+0x15c>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fcb7 	bl	8004390 <siprintf>
				sprintf(&message_command[0], "%s", message);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fcdd 	bl	80043ea <strcpy>
				message_command[strlen(message_command)-1] = 26;
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fb95 	bl	8000164 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000a42:	4413      	add	r3, r2
 8000a44:	221a      	movs	r2, #26
 8000a46:	f803 2cf4 	strb.w	r2, [r3, #-244]
				HAL_UART_Transmit(GSM_UART, (uint8_t*)text_mod, strlen(text_mod), 300);
 8000a4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fb88 	bl	8000164 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000a5c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a60:	482b      	ldr	r0, [pc, #172]	; (8000b10 <message_task_func+0x160>)
 8000a62:	f001 fe96 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000a66:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6e:	4924      	ldr	r1, [pc, #144]	; (8000b00 <message_task_func+0x150>)
 8000a70:	4827      	ldr	r0, [pc, #156]	; (8000b10 <message_task_func+0x160>)
 8000a72:	f001 ff20 	bl	80028b6 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)sender_command, strlen(sender_command), 300);
 8000a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fb72 	bl	8000164 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000a88:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a8c:	4820      	ldr	r0, [pc, #128]	; (8000b10 <message_task_func+0x160>)
 8000a8e:	f001 fe80 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000a92:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9a:	4919      	ldr	r1, [pc, #100]	; (8000b00 <message_task_func+0x150>)
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <message_task_func+0x160>)
 8000a9e:	f001 ff0a 	bl	80028b6 <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)message_command, strlen(sender_command), 300);
 8000aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb5c 	bl	8000164 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f107 010c 	add.w	r1, r7, #12
 8000ab4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ab8:	4815      	ldr	r0, [pc, #84]	; (8000b10 <message_task_func+0x160>)
 8000aba:	f001 fe6a 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000abe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <message_task_func+0x150>)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <message_task_func+0x160>)
 8000aca:	f001 fef4 	bl	80028b6 <HAL_UART_Receive>
				SMS_STATE = COMPLETED_SMS;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <message_task_func+0x14c>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	701a      	strb	r2, [r3, #0]
			break;
 8000ad4:	e00e      	b.n	8000af4 <message_task_func+0x144>
			case COMPLETED_SMS:
				memset(sms_task_data, 0, RX_SIZE);
 8000ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ada:	2100      	movs	r1, #0
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <message_task_func+0x164>)
 8000ade:	f003 fc4e 	bl	800437e <memset>
				SMS_STATE = NO_SMS;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <message_task_func+0x14c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
			break;
 8000ae8:	e004      	b.n	8000af4 <message_task_func+0x144>
			default:
				vTaskDelay(500 / portTICK_PERIOD_MS);
 8000aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aee:	f002 fd0d 	bl	800350c <vTaskDelay>
			break;
 8000af2:	bf00      	nop
		switch (SMS_STATE) {
 8000af4:	e774      	b.n	80009e0 <message_task_func+0x30>
 8000af6:	bf00      	nop
 8000af8:	08004d78 	.word	0x08004d78
 8000afc:	200006ee 	.word	0x200006ee
 8000b00:	200005ec 	.word	0x200005ec
 8000b04:	08004d4c 	.word	0x08004d4c
 8000b08:	200003f3 	.word	0x200003f3
 8000b0c:	08004d68 	.word	0x08004d68
 8000b10:	20002b74 	.word	0x20002b74
 8000b14:	200003ec 	.word	0x200003ec

08000b18 <call_task_func>:
		}
	}
}

void call_task_func(void *argument)
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b0d6      	sub	sp, #344	; 0x158
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	6018      	str	r0, [r3, #0]
	char custom_command[64] = {0};
 8000b22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fc27 	bl	800437e <memset>
	char check_status[] = "AT+CLCC\r\n";
 8000b30:	4aba      	ldr	r2, [pc, #744]	; (8000e1c <call_task_func+0x304>)
 8000b32:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b38:	c303      	stmia	r3!, {r0, r1}
 8000b3a:	801a      	strh	r2, [r3, #0]
	char terminate_call[] = "ATH0\r\n";
 8000b3c:	4ab8      	ldr	r2, [pc, #736]	; (8000e20 <call_task_func+0x308>)
 8000b3e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b46:	6018      	str	r0, [r3, #0]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	8019      	strh	r1, [r3, #0]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	0c0a      	lsrs	r2, r1, #16
 8000b50:	701a      	strb	r2, [r3, #0]
	char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000b52:	4bb4      	ldr	r3, [pc, #720]	; (8000e24 <call_task_func+0x30c>)
 8000b54:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b66:	6020      	str	r0, [r4, #0]
 8000b68:	3404      	adds	r4, #4
 8000b6a:	8021      	strh	r1, [r4, #0]
	char send_call_start[] = "call_progress.t1.txt=\"Call Active!!\"\xFF\xFF\xFF";
 8000b6c:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <call_task_func+0x310>)
 8000b6e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b80:	e884 0003 	stmia.w	r4, {r0, r1}
	char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 8000b84:	4ba9      	ldr	r3, [pc, #676]	; (8000e2c <call_task_func+0x314>)
 8000b86:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b94:	c403      	stmia	r4!, {r0, r1}
 8000b96:	8022      	strh	r2, [r4, #0]
	char send_call_start_incoming[] = "incoming_call.t2.txt=\"Call Active!\"\xFF\xFF\xFF";
 8000b98:	4ba5      	ldr	r3, [pc, #660]	; (8000e30 <call_task_func+0x318>)
 8000b9a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bac:	6020      	str	r0, [r4, #0]
 8000bae:	3404      	adds	r4, #4
 8000bb0:	8021      	strh	r1, [r4, #0]
 8000bb2:	3402      	adds	r4, #2
 8000bb4:	0c0b      	lsrs	r3, r1, #16
 8000bb6:	7023      	strb	r3, [r4, #0]
	char send_call_end_incoming[] = "incoming_call.t2.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000bb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bbc:	4a9d      	ldr	r2, [pc, #628]	; (8000e34 <call_task_func+0x31c>)
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bce:	6020      	str	r0, [r4, #0]
 8000bd0:	3404      	adds	r4, #4
 8000bd2:	8021      	strh	r1, [r4, #0]
	char answer_call[] = "ATA\r\n";
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	4a97      	ldr	r2, [pc, #604]	; (8000e38 <call_task_func+0x320>)
 8000bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bde:	6018      	str	r0, [r3, #0]
 8000be0:	3304      	adds	r3, #4
 8000be2:	8019      	strh	r1, [r3, #0]
	char incoming_page[] = "page incoming_call\xFF\xFF\xFF";
 8000be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be8:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <call_task_func+0x324>)
 8000bea:	461c      	mov	r4, r3
 8000bec:	4615      	mov	r5, r2
 8000bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bf6:	6020      	str	r0, [r4, #0]
 8000bf8:	3404      	adds	r4, #4
 8000bfa:	8021      	strh	r1, [r4, #0]
	char start_page_timer_incoming[] = "incoming_call.tm0.en=1\xFF\xFF\xFF";
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4a8f      	ldr	r2, [pc, #572]	; (8000e40 <call_task_func+0x328>)
 8000c02:	461c      	mov	r4, r3
 8000c04:	4615      	mov	r5, r2
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	c403      	stmia	r4!, {r0, r1}
 8000c10:	8022      	strh	r2, [r4, #0]
	while(1)
	{
		switch(CALL_STATE)
 8000c12:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <call_task_func+0x32c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	f200 8190 	bhi.w	8000f3e <call_task_func+0x426>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <call_task_func+0x10c>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c41 	.word	0x08000c41
 8000c28:	08000f3f 	.word	0x08000f3f
 8000c2c:	08000f3f 	.word	0x08000f3f
 8000c30:	08000d15 	.word	0x08000d15
 8000c34:	08000dcf 	.word	0x08000dcf
 8000c38:	08000e6d 	.word	0x08000e6d
 8000c3c:	08000d8f 	.word	0x08000d8f
		{
			case INITIATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	2100      	movs	r1, #0
 8000c46:	4880      	ldr	r0, [pc, #512]	; (8000e48 <call_task_func+0x330>)
 8000c48:	f003 fb99 	bl	800437e <memset>
				call_task_data[strlen(call_task_data)-1] = '\0';
 8000c4c:	487f      	ldr	r0, [pc, #508]	; (8000e4c <call_task_func+0x334>)
 8000c4e:	f7ff fa89 	bl	8000164 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4a7d      	ldr	r2, [pc, #500]	; (8000e4c <call_task_func+0x334>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	54d1      	strb	r1, [r2, r3]
				if(CALL_TYPE == MO)
 8000c5c:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <call_task_func+0x338>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d12b      	bne.n	8000cbc <call_task_func+0x1a4>
				{
					sprintf(&custom_command[0], "ATD+%si;\r\n", &call_task_data[8]);
 8000c64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c68:	4a7a      	ldr	r2, [pc, #488]	; (8000e54 <call_task_func+0x33c>)
 8000c6a:	497b      	ldr	r1, [pc, #492]	; (8000e58 <call_task_func+0x340>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb8f 	bl	8004390 <siprintf>
					HAL_UART_Transmit(GSM_UART, (uint8_t*)&custom_command[0], strlen(custom_command), 500);
 8000c72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fa74 	bl	8000164 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000c84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c88:	4874      	ldr	r0, [pc, #464]	; (8000e5c <call_task_func+0x344>)
 8000c8a:	f001 fd82 	bl	8002792 <HAL_UART_Transmit>
					HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 5000);
 8000c8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	496c      	ldr	r1, [pc, #432]	; (8000e48 <call_task_func+0x330>)
 8000c98:	4870      	ldr	r0, [pc, #448]	; (8000e5c <call_task_func+0x344>)
 8000c9a:	f001 fe0c 	bl	80028b6 <HAL_UART_Receive>
					if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000c9e:	4970      	ldr	r1, [pc, #448]	; (8000e60 <call_task_func+0x348>)
 8000ca0:	4869      	ldr	r0, [pc, #420]	; (8000e48 <call_task_func+0x330>)
 8000ca2:	f7ff fa55 	bl	8000150 <strcmp>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d103      	bne.n	8000cb4 <call_task_func+0x19c>
						CALL_STATE = DIALING;
 8000cac:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <call_task_func+0x32c>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	701a      	strb	r2, [r3, #0]
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
					CALL_STATE = CHECK_CALL_STATE;
				}
			break;
 8000cb2:	e146      	b.n	8000f42 <call_task_func+0x42a>
						CALL_STATE = TERMINATE_CALL;
 8000cb4:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <call_task_func+0x32c>)
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	701a      	strb	r2, [r3, #0]
			break;
 8000cba:	e142      	b.n	8000f42 <call_task_func+0x42a>
				else if(CALL_TYPE == MT)
 8000cbc:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <call_task_func+0x338>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f040 813e 	bne.w	8000f42 <call_task_func+0x42a>
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
 8000cc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cca:	4a60      	ldr	r2, [pc, #384]	; (8000e4c <call_task_func+0x334>)
 8000ccc:	4965      	ldr	r1, [pc, #404]	; (8000e64 <call_task_func+0x34c>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb5e 	bl	8004390 <siprintf>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
 8000cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa43 	bl	8000164 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ce6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cea:	485f      	ldr	r0, [pc, #380]	; (8000e68 <call_task_func+0x350>)
 8000cec:	f001 fd51 	bl	8002792 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
 8000cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa35 	bl	8000164 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000d02:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d06:	4858      	ldr	r0, [pc, #352]	; (8000e68 <call_task_func+0x350>)
 8000d08:	f001 fd43 	bl	8002792 <HAL_UART_Transmit>
					CALL_STATE = CHECK_CALL_STATE;
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <call_task_func+0x32c>)
 8000d0e:	2205      	movs	r2, #5
 8000d10:	701a      	strb	r2, [r3, #0]
			break;
 8000d12:	e116      	b.n	8000f42 <call_task_func+0x42a>
			case DIALING:
				memset(at_response, 0, RX_SIZE);
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	2100      	movs	r1, #0
 8000d1a:	484b      	ldr	r0, [pc, #300]	; (8000e48 <call_task_func+0x330>)
 8000d1c:	f003 fb2f 	bl	800437e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8000d20:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa1d 	bl	8000164 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000d32:	23c8      	movs	r3, #200	; 0xc8
 8000d34:	4849      	ldr	r0, [pc, #292]	; (8000e5c <call_task_func+0x344>)
 8000d36:	f001 fd2c 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000d3a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	4941      	ldr	r1, [pc, #260]	; (8000e48 <call_task_func+0x330>)
 8000d44:	4845      	ldr	r0, [pc, #276]	; (8000e5c <call_task_func+0x344>)
 8000d46:	f001 fdb6 	bl	80028b6 <HAL_UART_Receive>
				if(at_response[13] == '0')
 8000d4a:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <call_task_func+0x330>)
 8000d4c:	7b5b      	ldrb	r3, [r3, #13]
 8000d4e:	2b30      	cmp	r3, #48	; 0x30
 8000d50:	d111      	bne.n	8000d76 <call_task_func+0x25e>
				{
					CALL_STATE = CHECK_CALL_STATE;
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <call_task_func+0x32c>)
 8000d54:	2205      	movs	r2, #5
 8000d56:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start, strlen(send_call_start), 300);
 8000d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa01 	bl	8000164 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000d6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d6e:	483e      	ldr	r0, [pc, #248]	; (8000e68 <call_task_func+0x350>)
 8000d70:	f001 fd0f 	bl	8002792 <HAL_UART_Transmit>
				}
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
					CALL_STATE = TERMINATE_CALL;
			break;
 8000d74:	e0e7      	b.n	8000f46 <call_task_func+0x42e>
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000d76:	493a      	ldr	r1, [pc, #232]	; (8000e60 <call_task_func+0x348>)
 8000d78:	4833      	ldr	r0, [pc, #204]	; (8000e48 <call_task_func+0x330>)
 8000d7a:	f7ff f9e9 	bl	8000150 <strcmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f040 80e0 	bne.w	8000f46 <call_task_func+0x42e>
					CALL_STATE = TERMINATE_CALL;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <call_task_func+0x32c>)
 8000d88:	2206      	movs	r2, #6
 8000d8a:	701a      	strb	r2, [r3, #0]
			break;
 8000d8c:	e0db      	b.n	8000f46 <call_task_func+0x42e>
			case ACCEPT_CALL:
				HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start_incoming, strlen(send_call_start_incoming), 300);
 8000d8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff f9e6 	bl	8000164 <strlen>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000da0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000da4:	4830      	ldr	r0, [pc, #192]	; (8000e68 <call_task_func+0x350>)
 8000da6:	f001 fcf4 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)answer_call, strlen(answer_call), 300);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff f9d8 	bl	8000164 <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000dbc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000dc0:	4826      	ldr	r0, [pc, #152]	; (8000e5c <call_task_func+0x344>)
 8000dc2:	f001 fce6 	bl	8002792 <HAL_UART_Transmit>
				CALL_STATE = CHECK_CALL_STATE;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <call_task_func+0x32c>)
 8000dc8:	2205      	movs	r2, #5
 8000dca:	701a      	strb	r2, [r3, #0]
			break;
 8000dcc:	e0be      	b.n	8000f4c <call_task_func+0x434>
			case CHECK_CALL_STATE:
				memset(at_response, 0, RX_SIZE);
 8000dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <call_task_func+0x330>)
 8000dd6:	f003 fad2 	bl	800437e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8000dda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9c0 	bl	8000164 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000dec:	23c8      	movs	r3, #200	; 0xc8
 8000dee:	481b      	ldr	r0, [pc, #108]	; (8000e5c <call_task_func+0x344>)
 8000df0:	f001 fccf 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000df4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	4912      	ldr	r1, [pc, #72]	; (8000e48 <call_task_func+0x330>)
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <call_task_func+0x344>)
 8000e00:	f001 fd59 	bl	80028b6 <HAL_UART_Receive>
				if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000e04:	4916      	ldr	r1, [pc, #88]	; (8000e60 <call_task_func+0x348>)
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <call_task_func+0x330>)
 8000e08:	f7ff f9a2 	bl	8000150 <strcmp>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 809b 	bne.w	8000f4a <call_task_func+0x432>
					CALL_STATE = TERMINATE_CALL;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <call_task_func+0x32c>)
 8000e16:	2206      	movs	r2, #6
 8000e18:	701a      	strb	r2, [r3, #0]
			break;
 8000e1a:	e096      	b.n	8000f4a <call_task_func+0x432>
 8000e1c:	08004db0 	.word	0x08004db0
 8000e20:	08004dbc 	.word	0x08004dbc
 8000e24:	08004dc4 	.word	0x08004dc4
 8000e28:	08004dec 	.word	0x08004dec
 8000e2c:	08004e14 	.word	0x08004e14
 8000e30:	08004e30 	.word	0x08004e30
 8000e34:	08004e58 	.word	0x08004e58
 8000e38:	08004e80 	.word	0x08004e80
 8000e3c:	08004e88 	.word	0x08004e88
 8000e40:	08004ea0 	.word	0x08004ea0
 8000e44:	200006ed 	.word	0x200006ed
 8000e48:	200005ec 	.word	0x200005ec
 8000e4c:	200004ec 	.word	0x200004ec
 8000e50:	20002bfc 	.word	0x20002bfc
 8000e54:	200004f4 	.word	0x200004f4
 8000e58:	08004d84 	.word	0x08004d84
 8000e5c:	20002b74 	.word	0x20002b74
 8000e60:	08004cac 	.word	0x08004cac
 8000e64:	08004d90 	.word	0x08004d90
 8000e68:	20002bb8 	.word	0x20002bb8
			case TERMINATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e70:	2100      	movs	r1, #0
 8000e72:	4839      	ldr	r0, [pc, #228]	; (8000f58 <call_task_func+0x440>)
 8000e74:	f003 fa83 	bl	800437e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)terminate_call, strlen(terminate_call), 200);
 8000e78:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f971 	bl	8000164 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000e8a:	23c8      	movs	r3, #200	; 0xc8
 8000e8c:	4833      	ldr	r0, [pc, #204]	; (8000f5c <call_task_func+0x444>)
 8000e8e:	f001 fc80 	bl	8002792 <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000e92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9a:	492f      	ldr	r1, [pc, #188]	; (8000f58 <call_task_func+0x440>)
 8000e9c:	482f      	ldr	r0, [pc, #188]	; (8000f5c <call_task_func+0x444>)
 8000e9e:	f001 fd0a 	bl	80028b6 <HAL_UART_Receive>
				if(CALL_TYPE == MO)
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <call_task_func+0x448>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11c      	bne.n	8000ee4 <call_task_func+0x3cc>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end, strlen(send_call_end), 300);
 8000eaa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f958 	bl	8000164 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000ebc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ec0:	4828      	ldr	r0, [pc, #160]	; (8000f64 <call_task_func+0x44c>)
 8000ec2:	f001 fc66 	bl	8002792 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer, strlen(start_page_timer), 300);
 8000ec6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f94a 	bl	8000164 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000ed8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <call_task_func+0x44c>)
 8000ede:	f001 fc58 	bl	8002792 <HAL_UART_Transmit>
 8000ee2:	e01f      	b.n	8000f24 <call_task_func+0x40c>
				}
				else if(CALL_TYPE == MT)
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <call_task_func+0x448>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d11b      	bne.n	8000f24 <call_task_func+0x40c>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end_incoming, strlen(send_call_end_incoming), 300);
 8000eec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f937 	bl	8000164 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000efe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f02:	4818      	ldr	r0, [pc, #96]	; (8000f64 <call_task_func+0x44c>)
 8000f04:	f001 fc45 	bl	8002792 <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer_incoming, strlen(start_page_timer_incoming), 300);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f929 	bl	8000164 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f107 010c 	add.w	r1, r7, #12
 8000f1a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f1e:	4811      	ldr	r0, [pc, #68]	; (8000f64 <call_task_func+0x44c>)
 8000f20:	f001 fc37 	bl	8002792 <HAL_UART_Transmit>
				}
				memset(call_task_data, 0, RX_SIZE);
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <call_task_func+0x450>)
 8000f2c:	f003 fa27 	bl	800437e <memset>
				PHONE_STATE = IDLE;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <call_task_func+0x454>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
				CALL_STATE = NO_CALL;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <call_task_func+0x458>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			break;
 8000f3c:	e006      	b.n	8000f4c <call_task_func+0x434>
			default:
			break;
 8000f3e:	bf00      	nop
 8000f40:	e004      	b.n	8000f4c <call_task_func+0x434>
			break;
 8000f42:	bf00      	nop
 8000f44:	e002      	b.n	8000f4c <call_task_func+0x434>
			break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <call_task_func+0x434>
			break;
 8000f4a:	bf00      	nop
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f002 fadc 	bl	800350c <vTaskDelay>
		switch(CALL_STATE)
 8000f54:	e65d      	b.n	8000c12 <call_task_func+0xfa>
 8000f56:	bf00      	nop
 8000f58:	200005ec 	.word	0x200005ec
 8000f5c:	20002b74 	.word	0x20002b74
 8000f60:	20002bfc 	.word	0x20002bfc
 8000f64:	20002bb8 	.word	0x20002bb8
 8000f68:	200004ec 	.word	0x200004ec
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	200006ed 	.word	0x200006ed

08000f74 <call_detected>:
	}
}

void call_detected()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
	char check_call[] = "AT+CLCC\r\n";
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <call_detected+0xac>)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f80:	c303      	stmia	r3!, {r0, r1}
 8000f82:	801a      	strh	r2, [r3, #0]
	int index;
	char *p1, *p2;

	HAL_UART_Transmit(GSM_UART, (uint8_t*)check_call, strlen(check_call), 200);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f8ec 	bl	8000164 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4639      	mov	r1, r7
 8000f92:	23c8      	movs	r3, #200	; 0xc8
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <call_detected+0xb0>)
 8000f96:	f001 fbfc 	bl	8002792 <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 500);
 8000f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa2:	4921      	ldr	r1, [pc, #132]	; (8001028 <call_detected+0xb4>)
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <call_detected+0xb0>)
 8000fa6:	f001 fc86 	bl	80028b6 <HAL_UART_Receive>
	if(at_response[21] == '4' && PHONE_STATE == IDLE)
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <call_detected+0xb4>)
 8000fac:	7d5b      	ldrb	r3, [r3, #21]
 8000fae:	2b34      	cmp	r3, #52	; 0x34
 8000fb0:	d132      	bne.n	8001018 <call_detected+0xa4>
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <call_detected+0xb8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d12e      	bne.n	8001018 <call_detected+0xa4>
	{
		index = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
		p1 = strstr(at_response, "\"");
 8000fbe:	2122      	movs	r1, #34	; 0x22
 8000fc0:	4819      	ldr	r0, [pc, #100]	; (8001028 <call_detected+0xb4>)
 8000fc2:	f003 fa05 	bl	80043d0 <strchr>
 8000fc6:	6138      	str	r0, [r7, #16]
		p1++;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
		if(p1)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00f      	beq.n	8000ff4 <call_detected+0x80>
			p2 = strstr(p1,"\"");
 8000fd4:	2122      	movs	r1, #34	; 0x22
 8000fd6:	6938      	ldr	r0, [r7, #16]
 8000fd8:	f003 f9fa 	bl	80043d0 <strchr>
 8000fdc:	60f8      	str	r0, [r7, #12]
		while(p1 != p2)
 8000fde:	e009      	b.n	8000ff4 <call_detected+0x80>
		{
			call_task_data[index++] = *p1;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	617a      	str	r2, [r7, #20]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	7811      	ldrb	r1, [r2, #0]
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <call_detected+0xbc>)
 8000fec:	54d1      	strb	r1, [r2, r3]
			p1++;
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
		while(p1 != p2)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1f1      	bne.n	8000fe0 <call_detected+0x6c>
		}
		call_task_data[index] = '\n';
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <call_detected+0xbc>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	4413      	add	r3, r2
 8001002:	220a      	movs	r2, #10
 8001004:	701a      	strb	r2, [r3, #0]
		PHONE_STATE = BUSY;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <call_detected+0xb8>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
		CALL_TYPE = MT;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <call_detected+0xc0>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <call_detected+0xc4>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
	}
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08004db0 	.word	0x08004db0
 8001024:	20002b74 	.word	0x20002b74
 8001028:	200005ec 	.word	0x200005ec
 800102c:	20000000 	.word	0x20000000
 8001030:	200004ec 	.word	0x200004ec
 8001034:	20002bfc 	.word	0x20002bfc
 8001038:	200006ed 	.word	0x200006ed

0800103c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104e:	f000 f9cf 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40012c00 	.word	0x40012c00

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001066:	e7fe      	b.n	8001066 <Error_Handler+0x6>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_MspInit+0x68>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_MspInit+0x68>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x68>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_MspInit+0x68>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x68>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	210f      	movs	r1, #15
 80010a2:	f06f 0001 	mvn.w	r0, #1
 80010a6:	f000 fa74 	bl	8001592 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x6c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x6c>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a3b      	ldr	r2, [pc, #236]	; (80011e0 <HAL_UART_MspInit+0x108>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d132      	bne.n	800115e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a39      	ldr	r2, [pc, #228]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4619      	mov	r1, r3
 800113c:	482a      	ldr	r0, [pc, #168]	; (80011e8 <HAL_UART_MspInit+0x110>)
 800113e:	f000 fac9 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4619      	mov	r1, r3
 8001156:	4824      	ldr	r0, [pc, #144]	; (80011e8 <HAL_UART_MspInit+0x110>)
 8001158:	f000 fabc 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115c:	e03c      	b.n	80011d8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_UART_MspInit+0x114>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d137      	bne.n	80011d8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001172:	61d3      	str	r3, [r2, #28]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001198:	2304      	movs	r3, #4
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4619      	mov	r1, r3
 80011aa:	480f      	ldr	r0, [pc, #60]	; (80011e8 <HAL_UART_MspInit+0x110>)
 80011ac:	f000 fa92 	bl	80016d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b0:	2308      	movs	r3, #8
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_UART_MspInit+0x110>)
 80011c4:	f000 fa86 	bl	80016d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2105      	movs	r1, #5
 80011cc:	2026      	movs	r0, #38	; 0x26
 80011ce:	f000 f9e0 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d2:	2026      	movs	r0, #38	; 0x26
 80011d4:	f000 f9f9 	bl	80015ca <HAL_NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40004400 	.word	0x40004400

080011f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2019      	movs	r0, #25
 8001206:	f000 f9c4 	bl	8001592 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800120a:	2019      	movs	r0, #25
 800120c:	f000 f9dd 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_InitTick+0x9c>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_InitTick+0x9c>)
 8001216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_InitTick+0x9c>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001228:	f107 0210 	add.w	r2, r7, #16
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ffc8 	bl	80021c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001238:	f000 ffb2 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 800123c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	4a13      	ldr	r2, [pc, #76]	; (8001290 <HAL_InitTick+0xa0>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	3b01      	subs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_InitTick+0xa4>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_InitTick+0xa8>)
 8001250:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_InitTick+0xa4>)
 8001254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_InitTick+0xa4>)
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_InitTick+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_InitTick+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_InitTick+0xa4>)
 800126e:	f000 fff9 	bl	8002264 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <HAL_InitTick+0xa4>)
 800127a:	f001 f84b 	bl	8002314 <HAL_TIM_Base_Start_IT>
 800127e:	4603      	mov	r3, r0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	431bde83 	.word	0x431bde83
 8001294:	20002c00 	.word	0x20002c00
 8001298:	40012c00 	.word	0x40012c00

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	call_detected();
 80012ca:	f7ff fe53 	bl	8000f74 <call_detected>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fb5a 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM1_UP_IRQHandler+0x10>)
 80012de:	f001 f86b 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20002c00 	.word	0x20002c00

080012ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <USART2_IRQHandler+0x10>)
 80012f2:	f001 fbd3 	bl	8002a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20002bb8 	.word	0x20002bb8

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f002 fff0 	bl	8004314 <__errno>
 8001334:	4602      	mov	r2, r0
 8001336:	230c      	movs	r3, #12
 8001338:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400
 8001364:	200006f4 	.word	0x200006f4
 8001368:	20002c50 	.word	0x20002c50

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001378:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffe5 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f002 ffbd 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7fe ff31 	bl	800020c <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r3, =_sidata
 80013ac:	08004f2c 	.word	0x08004f2c
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013b4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80013b8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80013bc:	20002c50 	.word	0x20002c50

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f8d1 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff ff08 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fe42 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_IncTick+0x20>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20002c48 	.word	0x20002c48

08001414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_GetTick+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20002c48 	.word	0x20002c48

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4906      	ldr	r1, [pc, #24]	; (80014c0 <__NVIC_EnableIRQ+0x34>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff4f 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff64 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ffb2 	bl	8001518 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff81 	bl	80014c4 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff57 	bl	800148c <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d005      	beq.n	800160a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2204      	movs	r2, #4
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e051      	b.n	80016ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 020e 	bic.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_DMA_Abort_IT+0xd0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d029      	beq.n	8001688 <HAL_DMA_Abort_IT+0xa0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_DMA_Abort_IT+0xd4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d022      	beq.n	8001684 <HAL_DMA_Abort_IT+0x9c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <HAL_DMA_Abort_IT+0xd8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d01a      	beq.n	800167e <HAL_DMA_Abort_IT+0x96>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_DMA_Abort_IT+0xdc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d012      	beq.n	8001678 <HAL_DMA_Abort_IT+0x90>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_DMA_Abort_IT+0xe0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00a      	beq.n	8001672 <HAL_DMA_Abort_IT+0x8a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_DMA_Abort_IT+0xe4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d102      	bne.n	800166c <HAL_DMA_Abort_IT+0x84>
 8001666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800166a:	e00e      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 800166c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001670:	e00b      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	e008      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	e005      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	e002      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001684:	2310      	movs	r3, #16
 8001686:	e000      	b.n	800168a <HAL_DMA_Abort_IT+0xa2>
 8001688:	2301      	movs	r3, #1
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_DMA_Abort_IT+0xe8>)
 800168c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
    } 
  }
  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40020008 	.word	0x40020008
 80016bc:	4002001c 	.word	0x4002001c
 80016c0:	40020030 	.word	0x40020030
 80016c4:	40020044 	.word	0x40020044
 80016c8:	40020058 	.word	0x40020058
 80016cc:	4002006c 	.word	0x4002006c
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e127      	b.n	8001938 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8116 	bne.w	8001932 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b12      	cmp	r3, #18
 800170c:	d034      	beq.n	8001778 <HAL_GPIO_Init+0xa4>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d80d      	bhi.n	800172e <HAL_GPIO_Init+0x5a>
 8001712:	2b02      	cmp	r3, #2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x9a>
 8001716:	2b02      	cmp	r3, #2
 8001718:	d804      	bhi.n	8001724 <HAL_GPIO_Init+0x50>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d031      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d01c      	beq.n	800175c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001722:	e048      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	2b03      	cmp	r3, #3
 8001726:	d043      	beq.n	80017b0 <HAL_GPIO_Init+0xdc>
 8001728:	2b11      	cmp	r3, #17
 800172a:	d01b      	beq.n	8001764 <HAL_GPIO_Init+0x90>
          break;
 800172c:	e043      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800172e:	4a89      	ldr	r2, [pc, #548]	; (8001954 <HAL_GPIO_Init+0x280>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d026      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001734:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_GPIO_Init+0x280>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d806      	bhi.n	8001748 <HAL_GPIO_Init+0x74>
 800173a:	4a87      	ldr	r2, [pc, #540]	; (8001958 <HAL_GPIO_Init+0x284>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d020      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001740:	4a86      	ldr	r2, [pc, #536]	; (800195c <HAL_GPIO_Init+0x288>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01d      	beq.n	8001782 <HAL_GPIO_Init+0xae>
          break;
 8001746:	e036      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001748:	4a85      	ldr	r2, [pc, #532]	; (8001960 <HAL_GPIO_Init+0x28c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 800174e:	4a85      	ldr	r2, [pc, #532]	; (8001964 <HAL_GPIO_Init+0x290>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d016      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001754:	4a84      	ldr	r2, [pc, #528]	; (8001968 <HAL_GPIO_Init+0x294>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0xae>
          break;
 800175a:	e02c      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e028      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	3304      	adds	r3, #4
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e023      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	3308      	adds	r3, #8
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e01e      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	330c      	adds	r3, #12
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e019      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800178a:	2304      	movs	r3, #4
 800178c:	623b      	str	r3, [r7, #32]
          break;
 800178e:	e012      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	611a      	str	r2, [r3, #16]
          break;
 80017a2:	e008      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a4:	2308      	movs	r3, #8
 80017a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	615a      	str	r2, [r3, #20]
          break;
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
          break;
 80017b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2bff      	cmp	r3, #255	; 0xff
 80017ba:	d801      	bhi.n	80017c0 <HAL_GPIO_Init+0xec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	e001      	b.n	80017c4 <HAL_GPIO_Init+0xf0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d802      	bhi.n	80017d2 <HAL_GPIO_Init+0xfe>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x104>
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	3b08      	subs	r3, #8
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	210f      	movs	r1, #15
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	6a39      	ldr	r1, [r7, #32]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	431a      	orrs	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8096 	beq.w	8001932 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_GPIO_Init+0x298>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_GPIO_Init+0x298>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_GPIO_Init+0x298>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181e:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x29c>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x19e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4a      	ldr	r2, [pc, #296]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x19a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x196>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x192>
 8001862:	2303      	movs	r3, #3
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 8001866:	2304      	movs	r3, #4
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 8001872:	2300      	movs	r3, #0
 8001874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001884:	493a      	ldr	r1, [pc, #232]	; (8001970 <HAL_GPIO_Init+0x29c>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4933      	ldr	r1, [pc, #204]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	492e      	ldr	r1, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	43db      	mvns	r3, r3
 80018dc:	4929      	ldr	r1, [pc, #164]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018de:	4013      	ands	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4924      	ldr	r1, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	491f      	ldr	r1, [pc, #124]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001906:	4013      	ands	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	491a      	ldr	r1, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4915      	ldr	r1, [pc, #84]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800192e:	4013      	ands	r3, r2
 8001930:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f aed0 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 8001948:	bf00      	nop
 800194a:	372c      	adds	r7, #44	; 0x2c
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	10210000 	.word	0x10210000
 8001958:	10110000 	.word	0x10110000
 800195c:	10120000 	.word	0x10120000
 8001960:	10310000 	.word	0x10310000
 8001964:	10320000 	.word	0x10320000
 8001968:	10220000 	.word	0x10220000
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00
 800197c:	40011000 	.word	0x40011000
 8001980:	40011400 	.word	0x40011400
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f806 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e26c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8087 	beq.w	8001afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ec:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d00c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f8:	4b8f      	ldr	r3, [pc, #572]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d112      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
 8001a04:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d10b      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d06c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x12c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d168      	bne.n	8001af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e246      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x76>
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e02e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a77      	ldr	r2, [pc, #476]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xbc>
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a71      	ldr	r2, [pc, #452]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fcb4 	bl	8001414 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fcb0 	bl	8001414 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1fa      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xe4>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fca0 	bl	8001414 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fc9c 	bl	8001414 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1e6      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x10c>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e1ba      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4939      	ldr	r1, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	e03a      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fc55 	bl	8001414 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fc51 	bl	8001414 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e19b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fc34 	bl	8001414 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fc30 	bl	8001414 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e17a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03a      	beq.n	8001c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d019      	beq.n	8001c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fc14 	bl	8001414 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc10 	bl	8001414 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e15a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 fb0a 	bl	8002228 <RCC_Delay>
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fbfa 	bl	8001414 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fbf6 	bl	8001414 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d908      	bls.n	8001c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e140      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	42420000 	.word	0x42420000
 8001c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b9e      	ldr	r3, [pc, #632]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e9      	bne.n	8001c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a6 	beq.w	8001daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b97      	ldr	r3, [pc, #604]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b94      	ldr	r3, [pc, #592]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a93      	ldr	r2, [pc, #588]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b91      	ldr	r3, [pc, #580]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x4f8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fbb7 	bl	8001414 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7ff fbb3 	bl	8001414 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	; 0x64
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0fd      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x312>
 8001cd0:	4b7b      	ldr	r3, [pc, #492]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a7a      	ldr	r2, [pc, #488]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e02d      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x334>
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a75      	ldr	r2, [pc, #468]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a72      	ldr	r2, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	e01c      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x356>
 8001d08:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a6c      	ldr	r2, [pc, #432]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a66      	ldr	r2, [pc, #408]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b64      	ldr	r3, [pc, #400]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d015      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb67 	bl	8001414 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb63 	bl	8001414 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0ab      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	4b57      	ldr	r3, [pc, #348]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ee      	beq.n	8001d4a <HAL_RCC_OscConfig+0x37e>
 8001d6c:	e014      	b.n	8001d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb51 	bl	8001414 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fb4d 	bl	8001414 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e095      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ee      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9e:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8081 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d061      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d146      	bne.n	8001e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCC_OscConfig+0x4fc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fb21 	bl	8001414 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff fb1d 	bl	8001414 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e067      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d108      	bne.n	8001e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	492d      	ldr	r1, [pc, #180]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a19      	ldr	r1, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	430b      	orrs	r3, r1
 8001e22:	4927      	ldr	r1, [pc, #156]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x4fc>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff faf1 	bl	8001414 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff faed 	bl	8001414 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e037      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x46a>
 8001e54:	e02f      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_RCC_OscConfig+0x4fc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fada 	bl	8001414 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff fad6 	bl	8001414 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e020      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x498>
 8001e82:	e018      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e013      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	42420060 	.word	0x42420060

08001ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d0      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4965      	ldr	r1, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d040      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e073      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4936      	ldr	r1, [pc, #216]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fa2a 	bl	8001414 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff fa26 	bl	8001414 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e053      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d210      	bcs.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4601      	mov	r1, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	fa21 f303 	lsr.w	r3, r1, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f8b8 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	08004ed8 	.word	0x08004ed8
 8002098:	20000004 	.word	0x20000004
 800209c:	20000008 	.word	0x20000008

080020a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b490      	push	{r4, r7}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a8:	1d3c      	adds	r4, r7, #4
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x40>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x46>
 80020de:	e02d      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e2:	623b      	str	r3, [r7, #32]
      break;
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f2:	4413      	add	r3, r2
 80020f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c5b      	lsrs	r3, r3, #17
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002112:	4413      	add	r3, r2
 8002114:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002118:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_RCC_GetSysClockFreq+0xbc>)
 800211e:	fb02 f203 	mul.w	r2, r2, r3
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	e004      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	623b      	str	r3, [r7, #32]
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_RCC_GetSysClockFreq+0xbc>)
 800213e:	623b      	str	r3, [r7, #32]
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6a3b      	ldr	r3, [r7, #32]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bc90      	pop	{r4, r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	08004ebc 	.word	0x08004ebc
 8002154:	08004ecc 	.word	0x08004ecc
 8002158:	40021000 	.word	0x40021000
 800215c:	007a1200 	.word	0x007a1200
 8002160:	003d0900 	.word	0x003d0900

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <HAL_RCC_GetHCLKFreq+0x10>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800217c:	f7ff fff2 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002180:	4601      	mov	r1, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4a03      	ldr	r2, [pc, #12]	; (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08004ee8 	.word	0x08004ee8

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a4:	f7ff ffde 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021a8:	4601      	mov	r1, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0adb      	lsrs	r3, r3, #11
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08004ee8 	.word	0x08004ee8

080021c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	220f      	movs	r2, #15
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_GetClockConfig+0x58>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_RCC_GetClockConfig+0x58>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_GetClockConfig+0x58>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_GetClockConfig+0x58>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetClockConfig+0x5c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0207 	and.w	r2, r3, #7
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40022000 	.word	0x40022000

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000004 	.word	0x20000004
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f839 	bl	8002302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f9b4 	bl	8002610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d001      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e03a      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_TIM_Base_Start_IT+0x98>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00e      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x58>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002356:	d009      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x58>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x58>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d010      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e007      	b.n	80023a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0202 	mvn.w	r2, #2
 80023e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8ed 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8e0 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8ef 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0204 	mvn.w	r2, #4
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8c3 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8b6 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8c5 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f899 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f88c 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f89b 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d122      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f86f 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f862 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f871 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0201 	mvn.w	r2, #1
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fd80 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8bf 	bl	80026e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d10e      	bne.n	8002594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d107      	bne.n	8002594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f835 	bl	80025fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d10e      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d107      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0220 	mvn.w	r2, #32
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f88a 	bl	80026d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <TIM_Base_SetConfig+0xb8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <TIM_Base_SetConfig+0xbc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <TIM_Base_SetConfig+0xc0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <TIM_Base_SetConfig+0xb8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00b      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d007      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <TIM_Base_SetConfig+0xbc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <TIM_Base_SetConfig+0xc0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <TIM_Base_SetConfig+0xb8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	615a      	str	r2, [r3, #20]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800

080026d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e03f      	b.n	800278a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fcda 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fc21 	bl	8002f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b08a      	sub	sp, #40	; 0x28
 8002796:	af02      	add	r7, sp, #8
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d17c      	bne.n	80028ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_UART_Transmit+0x2c>
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e075      	b.n	80028ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_UART_Transmit+0x3e>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e06e      	b.n	80028ae <HAL_UART_Transmit+0x11c>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2221      	movs	r2, #33	; 0x21
 80027e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027e6:	f7fe fe15 	bl	8001414 <HAL_GetTick>
 80027ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d108      	bne.n	8002814 <HAL_UART_Transmit+0x82>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	e003      	b.n	800281c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002824:	e02a      	b.n	800287c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fa45 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e036      	b.n	80028ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3302      	adds	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e007      	b.n	800286e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	3301      	adds	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1cf      	bne.n	8002826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa15 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	f040 8089 	bne.w	80029ea <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Receive+0x2e>
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e081      	b.n	80029ec <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Receive+0x40>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e07a      	b.n	80029ec <HAL_UART_Receive+0x136>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2222      	movs	r2, #34	; 0x22
 8002908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800290c:	f7fe fd82 	bl	8001414 <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d108      	bne.n	800293a <HAL_UART_Receive+0x84>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e003      	b.n	8002942 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800294a:	e043      	b.n	80029d4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	2120      	movs	r1, #32
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f9b2 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e042      	b.n	80029ec <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002978:	b29a      	uxth	r2, r3
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	3302      	adds	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e01f      	b.n	80029c6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298e:	d007      	beq.n	80029a0 <HAL_UART_Receive+0xea>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_UART_Receive+0xf8>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e008      	b.n	80029c0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1b6      	bne.n	800294c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d140      	bne.n	8002a90 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_UART_Receive_IT+0x26>
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e039      	b.n	8002a92 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Receive_IT+0x38>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e032      	b.n	8002a92 <HAL_UART_Receive_IT+0x9e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2222      	movs	r2, #34	; 0x22
 8002a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_UART_IRQHandler+0x52>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9cc 	bl	8002e84 <UART_Receive_IT>
      return;
 8002aec:	e0d1      	b.n	8002c92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80b0 	beq.w	8002c56 <HAL_UART_IRQHandler+0x1ba>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_UART_IRQHandler+0x70>
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a5 	beq.w	8002c56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_UART_IRQHandler+0x90>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_UART_IRQHandler+0xb0>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	f043 0202 	orr.w	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_UART_IRQHandler+0xd0>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00f      	beq.n	8002b96 <HAL_UART_IRQHandler+0xfa>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_UART_IRQHandler+0xee>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d078      	beq.n	8002c90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x11c>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f966 	bl	8002e84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_UART_IRQHandler+0x144>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d031      	beq.n	8002c44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8b7 	bl	8002d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <HAL_UART_IRQHandler+0x1fc>)
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fce5 	bl	80015e8 <HAL_DMA_Abort_IT>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d016      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c32:	e00e      	b.n	8002c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f83a 	bl	8002cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3a:	e00a      	b.n	8002c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f836 	bl	8002cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	e006      	b.n	8002c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f832 	bl	8002cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c50:	e01e      	b.n	8002c90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c52:	bf00      	nop
    return;
 8002c54:	e01c      	b.n	8002c90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_UART_IRQHandler+0x1d6>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f8a3 	bl	8002db6 <UART_Transmit_IT>
    return;
 8002c70:	e00f      	b.n	8002c92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1f6>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8e4 	bl	8002e54 <UART_EndTransmit_IT>
    return;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c90:	bf00      	nop
  }
}
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	08002d8f 	.word	0x08002d8f

08002c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd0:	e02c      	b.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd8:	d028      	beq.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce0:	f7fe fb98 	bl	8001414 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d21d      	bcs.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e00f      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d0c3      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff ff80 	bl	8002cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b21      	cmp	r3, #33	; 0x21
 8002dc8:	d13e      	bne.n	8002e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d114      	bne.n	8002dfe <UART_Transmit_IT+0x48>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d110      	bne.n	8002dfe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	1c9a      	adds	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	621a      	str	r2, [r3, #32]
 8002dfc:	e008      	b.n	8002e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6211      	str	r1, [r2, #32]
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10f      	bne.n	8002e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff11 	bl	8002c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b22      	cmp	r3, #34	; 0x22
 8002e96:	d170      	bne.n	8002f7a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d117      	bne.n	8002ed2 <UART_Receive_IT+0x4e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed0:	e026      	b.n	8002f20 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d007      	beq.n	8002ef6 <UART_Receive_IT+0x72>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <UART_Receive_IT+0x80>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e008      	b.n	8002f16 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d120      	bne.n	8002f76 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0220 	bic.w	r2, r2, #32
 8002f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd f919 	bl	80001a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e002      	b.n	8002f7c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fbe:	f023 030c 	bic.w	r3, r3, #12
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <UART_SetConfig+0x114>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7ff f8d8 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	e002      	b.n	8002ffa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f8c0 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <UART_SetConfig+0x118>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	0119      	lsls	r1, r3, #4
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009a      	lsls	r2, r3, #2
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <UART_SetConfig+0x118>)
 8003032:	fba3 0302 	umull	r0, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2064      	movs	r0, #100	; 0x64
 800303a:	fb00 f303 	mul.w	r3, r0, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <UART_SetConfig+0x118>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003050:	4419      	add	r1, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fbb2 f2f3 	udiv	r2, r2, r3
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <UART_SetConfig+0x118>)
 800306a:	fba3 0302 	umull	r0, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a07      	ldr	r2, [pc, #28]	; (800309c <UART_SetConfig+0x118>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	440a      	add	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40013800 	.word	0x40013800
 800309c:	51eb851f 	.word	0x51eb851f

080030a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 0208 	add.w	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f103 0208 	add.w	r2, r3, #8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f103 0208 	add.w	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003152:	d103      	bne.n	800315c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e00c      	b.n	8003176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3308      	adds	r3, #8
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	e002      	b.n	800316a <vListInsert+0x2e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d2f6      	bcs.n	8003164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6852      	ldr	r2, [r2, #4]
 80031cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d103      	bne.n	80031e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b08e      	sub	sp, #56	; 0x38
 8003202:	af04      	add	r7, sp, #16
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	e7fe      	b.n	8003224 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <xTaskCreateStatic+0x42>
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e7fe      	b.n	800323e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003240:	2354      	movs	r3, #84	; 0x54
 8003242:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b54      	cmp	r3, #84	; 0x54
 8003248:	d009      	beq.n	800325e <xTaskCreateStatic+0x60>
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e7fe      	b.n	800325c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01e      	beq.n	80032a2 <xTaskCreateStatic+0xa4>
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01b      	beq.n	80032a2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800327c:	2300      	movs	r3, #0
 800327e:	9303      	str	r3, [sp, #12]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	9302      	str	r3, [sp, #8]
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f850 	bl	800333a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800329c:	f000 f8cc 	bl	8003438 <prvAddNewTaskToReadyList>
 80032a0:	e001      	b.n	80032a6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032a6:	697b      	ldr	r3, [r7, #20]
	}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fe51 	bl	8003f6c <pvPortMalloc>
 80032ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00e      	beq.n	80032f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032d2:	2054      	movs	r0, #84	; 0x54
 80032d4:	f000 fe4a 	bl	8003f6c <pvPortMalloc>
 80032d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
 80032e6:	e005      	b.n	80032f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032e8:	6978      	ldr	r0, [r7, #20]
 80032ea:	f000 ff01 	bl	80040f0 <vPortFree>
 80032ee:	e001      	b.n	80032f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	2300      	movs	r3, #0
 8003306:	9303      	str	r3, [sp, #12]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f80e 	bl	800333a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800331e:	69f8      	ldr	r0, [r7, #28]
 8003320:	f000 f88a 	bl	8003438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003324:	2301      	movs	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e002      	b.n	8003330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800332e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003330:	69bb      	ldr	r3, [r7, #24]
	}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b088      	sub	sp, #32
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003352:	3b01      	subs	r3, #1
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f023 0307 	bic.w	r3, r3, #7
 8003360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <prvInitialiseNewTask+0x46>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e7fe      	b.n	800337e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e012      	b.n	80033ac <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	7819      	ldrb	r1, [r3, #0]
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	3334      	adds	r3, #52	; 0x34
 8003396:	460a      	mov	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	d9e9      	bls.n	8003386 <prvInitialiseNewTask+0x4c>
 80033b2:	e000      	b.n	80033b6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80033b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d901      	bls.n	80033c8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033c4:	2306      	movs	r3, #6
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	3304      	adds	r3, #4
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fe7d 	bl	80030de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	3318      	adds	r3, #24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fe78 	bl	80030de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	f1c3 0207 	rsb	r2, r3, #7
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	2200      	movs	r2, #0
 8003408:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	69b8      	ldr	r0, [r7, #24]
 8003418:	f000 fc06 	bl	8003c28 <pxPortInitialiseStack>
 800341c:	4602      	mov	r2, r0
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800342e:	bf00      	nop
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003440:	f000 fcda 	bl	8003df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 800344c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003456:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <prvAddNewTaskToReadyList+0xb8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d110      	bne.n	8003486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003464:	f000 fabc 	bl	80039e0 <prvInitialiseTaskLists>
 8003468:	e00d      	b.n	8003486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <prvAddNewTaskToReadyList+0xc0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	429a      	cmp	r2, r3
 800347e:	d802      	bhi.n	8003486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <prvAddNewTaskToReadyList+0xc4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <prvAddNewTaskToReadyList+0xc4>)
 800348e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <prvAddNewTaskToReadyList+0xc8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <prvAddNewTaskToReadyList+0xc8>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <prvAddNewTaskToReadyList+0xcc>)
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7ff fe1c 	bl	80030f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034be:	f000 fcc9 	bl	8003e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <prvAddNewTaskToReadyList+0xc0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <prvAddNewTaskToReadyList+0xbc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <prvAddNewTaskToReadyList+0xd0>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	200007f8 	.word	0x200007f8
 80034f4:	200006f8 	.word	0x200006f8
 80034f8:	20000804 	.word	0x20000804
 80034fc:	20000814 	.word	0x20000814
 8003500:	20000800 	.word	0x20000800
 8003504:	200006fc 	.word	0x200006fc
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <vTaskDelay+0x60>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <vTaskDelay+0x2e>
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	e7fe      	b.n	8003538 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800353a:	f000 f879 	bl	8003630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb0b 	bl	8003b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003546:	f000 f881 	bl	800364c <xTaskResumeAll>
 800354a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <vTaskDelay+0x64>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000820 	.word	0x20000820
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003582:	463a      	mov	r2, r7
 8003584:	1d39      	adds	r1, r7, #4
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc fdf2 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	460a      	mov	r2, r1
 80035a2:	491d      	ldr	r1, [pc, #116]	; (8003618 <vTaskStartScheduler+0xa4>)
 80035a4:	481d      	ldr	r0, [pc, #116]	; (800361c <vTaskStartScheduler+0xa8>)
 80035a6:	f7ff fe2a 	bl	80031fe <xTaskCreateStatic>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <vTaskStartScheduler+0xac>)
 80035ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <vTaskStartScheduler+0xac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035b8:	2301      	movs	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e001      	b.n	80035c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d115      	bne.n	80035f4 <vTaskStartScheduler+0x80>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <vTaskStartScheduler+0xb0>)
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <vTaskStartScheduler+0xb4>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <vTaskStartScheduler+0xb8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035ee:	f000 fb93 	bl	8003d18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035f2:	e00d      	b.n	8003610 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fa:	d109      	bne.n	8003610 <vTaskStartScheduler+0x9c>
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e7fe      	b.n	800360e <vTaskStartScheduler+0x9a>
}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	08004ed0 	.word	0x08004ed0
 800361c:	080039b1 	.word	0x080039b1
 8003620:	2000081c 	.word	0x2000081c
 8003624:	20000818 	.word	0x20000818
 8003628:	20000804 	.word	0x20000804
 800362c:	200007fc 	.word	0x200007fc

08003630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <vTaskSuspendAll+0x18>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a03      	ldr	r2, [pc, #12]	; (8003648 <vTaskSuspendAll+0x18>)
 800363c:	6013      	str	r3, [r2, #0]
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000820 	.word	0x20000820

0800364c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <xTaskResumeAll+0x114>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <xTaskResumeAll+0x2a>
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	e7fe      	b.n	8003674 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003676:	f000 fbbf 	bl	8003df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <xTaskResumeAll+0x114>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	4a37      	ldr	r2, [pc, #220]	; (8003760 <xTaskResumeAll+0x114>)
 8003682:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <xTaskResumeAll+0x114>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d161      	bne.n	8003750 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800368c:	4b35      	ldr	r3, [pc, #212]	; (8003764 <xTaskResumeAll+0x118>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05d      	beq.n	8003750 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003694:	e02e      	b.n	80036f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <xTaskResumeAll+0x11c>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3318      	adds	r3, #24
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fd82 	bl	80031ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fd7d 	bl	80031ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	4b2c      	ldr	r3, [pc, #176]	; (800376c <xTaskResumeAll+0x120>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <xTaskResumeAll+0x120>)
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <xTaskResumeAll+0x124>)
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7ff fd0b 	bl	80030f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <xTaskResumeAll+0x128>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <xTaskResumeAll+0x12c>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <xTaskResumeAll+0x11c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1cc      	bne.n	8003696 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003702:	f000 fa07 	bl	8003b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <xTaskResumeAll+0x130>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003712:	f000 f837 	bl	8003784 <xTaskIncrementTick>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <xTaskResumeAll+0x12c>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3b01      	subs	r3, #1
 8003726:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f1      	bne.n	8003712 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <xTaskResumeAll+0x130>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <xTaskResumeAll+0x12c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <xTaskResumeAll+0x134>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003750:	f000 fb80 	bl	8003e54 <vPortExitCritical>

	return xAlreadyYielded;
 8003754:	68bb      	ldr	r3, [r7, #8]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000820 	.word	0x20000820
 8003764:	200007f8 	.word	0x200007f8
 8003768:	200007b8 	.word	0x200007b8
 800376c:	20000800 	.word	0x20000800
 8003770:	200006fc 	.word	0x200006fc
 8003774:	200006f8 	.word	0x200006f8
 8003778:	2000080c 	.word	0x2000080c
 800377c:	20000808 	.word	0x20000808
 8003780:	e000ed04 	.word	0xe000ed04

08003784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378e:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <xTaskIncrementTick+0x14c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 808c 	bne.w	80038b0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003798:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <xTaskIncrementTick+0x150>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037a0:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <xTaskIncrementTick+0x150>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11f      	bne.n	80037ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <xTaskIncrementTick+0x154>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <xTaskIncrementTick+0x46>
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	e7fe      	b.n	80037c8 <xTaskIncrementTick+0x44>
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <xTaskIncrementTick+0x154>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b42      	ldr	r3, [pc, #264]	; (80038dc <xTaskIncrementTick+0x158>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <xTaskIncrementTick+0x154>)
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4a40      	ldr	r2, [pc, #256]	; (80038dc <xTaskIncrementTick+0x158>)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <xTaskIncrementTick+0x15c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a3e      	ldr	r2, [pc, #248]	; (80038e0 <xTaskIncrementTick+0x15c>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	f000 f994 	bl	8003b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ec:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <xTaskIncrementTick+0x160>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d34d      	bcc.n	8003892 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <xTaskIncrementTick+0x154>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <xTaskIncrementTick+0x80>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <xTaskIncrementTick+0x82>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <xTaskIncrementTick+0x160>)
 800380c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003810:	601a      	str	r2, [r3, #0]
					break;
 8003812:	e03e      	b.n	8003892 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <xTaskIncrementTick+0x154>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d203      	bcs.n	8003834 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800382c:	4a2d      	ldr	r2, [pc, #180]	; (80038e4 <xTaskIncrementTick+0x160>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
						break;
 8003832:	e02e      	b.n	8003892 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3304      	adds	r3, #4
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fcb7 	bl	80031ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3318      	adds	r3, #24
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fcae 	bl	80031ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <xTaskIncrementTick+0x164>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <xTaskIncrementTick+0x164>)
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <xTaskIncrementTick+0x168>)
 8003870:	441a      	add	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7ff fc3c 	bl	80030f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <xTaskIncrementTick+0x16c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d3b4      	bcc.n	80037f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003890:	e7b1      	b.n	80037f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <xTaskIncrementTick+0x16c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4914      	ldr	r1, [pc, #80]	; (80038ec <xTaskIncrementTick+0x168>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d907      	bls.n	80038ba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e004      	b.n	80038ba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <xTaskIncrementTick+0x170>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <xTaskIncrementTick+0x170>)
 80038b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <xTaskIncrementTick+0x174>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038c6:	697b      	ldr	r3, [r7, #20]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000820 	.word	0x20000820
 80038d4:	200007fc 	.word	0x200007fc
 80038d8:	200007b0 	.word	0x200007b0
 80038dc:	200007b4 	.word	0x200007b4
 80038e0:	20000810 	.word	0x20000810
 80038e4:	20000818 	.word	0x20000818
 80038e8:	20000800 	.word	0x20000800
 80038ec:	200006fc 	.word	0x200006fc
 80038f0:	200006f8 	.word	0x200006f8
 80038f4:	20000808 	.word	0x20000808
 80038f8:	2000080c 	.word	0x2000080c

080038fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <vTaskSwitchContext+0xa0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <vTaskSwitchContext+0xa4>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003910:	e03e      	b.n	8003990 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <vTaskSwitchContext+0xa4>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <vTaskSwitchContext+0xa8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	f1c3 031f 	rsb	r3, r3, #31
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <vTaskSwitchContext+0xac>)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	e7fe      	b.n	8003954 <vTaskSwitchContext+0x58>
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <vTaskSwitchContext+0xac>)
 8003962:	4413      	add	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	3308      	adds	r3, #8
 8003978:	429a      	cmp	r2, r3
 800397a:	d104      	bne.n	8003986 <vTaskSwitchContext+0x8a>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <vTaskSwitchContext+0xb0>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000820 	.word	0x20000820
 80039a0:	2000080c 	.word	0x2000080c
 80039a4:	20000800 	.word	0x20000800
 80039a8:	200006fc 	.word	0x200006fc
 80039ac:	200006f8 	.word	0x200006f8

080039b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039b8:	f000 f852 	bl	8003a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <prvIdleTask+0x28>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d9f9      	bls.n	80039b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <prvIdleTask+0x2c>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039d4:	e7f0      	b.n	80039b8 <prvIdleTask+0x8>
 80039d6:	bf00      	nop
 80039d8:	200006fc 	.word	0x200006fc
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	e00c      	b.n	8003a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <prvInitialiseTaskLists+0x60>)
 80039f8:	4413      	add	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fb50 	bl	80030a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3301      	adds	r3, #1
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d9ef      	bls.n	80039ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <prvInitialiseTaskLists+0x64>)
 8003a0e:	f7ff fb47 	bl	80030a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a12:	480d      	ldr	r0, [pc, #52]	; (8003a48 <prvInitialiseTaskLists+0x68>)
 8003a14:	f7ff fb44 	bl	80030a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <prvInitialiseTaskLists+0x6c>)
 8003a1a:	f7ff fb41 	bl	80030a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a1e:	480c      	ldr	r0, [pc, #48]	; (8003a50 <prvInitialiseTaskLists+0x70>)
 8003a20:	f7ff fb3e 	bl	80030a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <prvInitialiseTaskLists+0x74>)
 8003a26:	f7ff fb3b 	bl	80030a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <prvInitialiseTaskLists+0x78>)
 8003a2c:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <prvInitialiseTaskLists+0x64>)
 8003a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvInitialiseTaskLists+0x7c>)
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <prvInitialiseTaskLists+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200006fc 	.word	0x200006fc
 8003a44:	20000788 	.word	0x20000788
 8003a48:	2000079c 	.word	0x2000079c
 8003a4c:	200007b8 	.word	0x200007b8
 8003a50:	200007cc 	.word	0x200007cc
 8003a54:	200007e4 	.word	0x200007e4
 8003a58:	200007b0 	.word	0x200007b0
 8003a5c:	200007b4 	.word	0x200007b4

08003a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a66:	e019      	b.n	8003a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a68:	f000 f9c6 	bl	8003df8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <prvCheckTasksWaitingTermination+0x4c>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fb97 	bl	80031ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <prvCheckTasksWaitingTermination+0x50>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <prvCheckTasksWaitingTermination+0x50>)
 8003a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <prvCheckTasksWaitingTermination+0x54>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <prvCheckTasksWaitingTermination+0x54>)
 8003a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a92:	f000 f9df 	bl	8003e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f80e 	bl	8003ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <prvCheckTasksWaitingTermination+0x54>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e1      	bne.n	8003a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200007cc 	.word	0x200007cc
 8003ab0:	200007f8 	.word	0x200007f8
 8003ab4:	200007e0 	.word	0x200007e0

08003ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb0e 	bl	80040f0 <vPortFree>
				vPortFree( pxTCB );
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb0b 	bl	80040f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ada:	e017      	b.n	8003b0c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d103      	bne.n	8003aee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fb02 	bl	80040f0 <vPortFree>
	}
 8003aec:	e00e      	b.n	8003b0c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d009      	beq.n	8003b0c <prvDeleteTCB+0x54>
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e7fe      	b.n	8003b0a <prvDeleteTCB+0x52>
	}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <prvResetNextTaskUnblockTime+0x40>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <prvResetNextTaskUnblockTime+0x14>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <prvResetNextTaskUnblockTime+0x16>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvResetNextTaskUnblockTime+0x44>)
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b36:	e008      	b.n	8003b4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <prvResetNextTaskUnblockTime+0x40>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <prvResetNextTaskUnblockTime+0x44>)
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	200007b0 	.word	0x200007b0
 8003b58:	20000818 	.word	0x20000818

08003b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b6c:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fb1a 	bl	80031ac <uxListRemove>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	2201      	movs	r2, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4013      	ands	r3, r2
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9c:	d10a      	bne.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	481a      	ldr	r0, [pc, #104]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bae:	f7ff faa2 	bl	80030f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bb2:	e026      	b.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d209      	bcs.n	8003be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7ff faaf 	bl	800313c <vListInsert>
}
 8003bde:	e010      	b.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7ff faa5 	bl	800313c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d202      	bcs.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003bfc:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6013      	str	r3, [r2, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200007fc 	.word	0x200007fc
 8003c10:	200006f8 	.word	0x200006f8
 8003c14:	20000800 	.word	0x20000800
 8003c18:	200007e4 	.word	0x200007e4
 8003c1c:	200007b4 	.word	0x200007b4
 8003c20:	200007b0 	.word	0x200007b0
 8003c24:	20000818 	.word	0x20000818

08003c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <pxPortInitialiseStack+0x54>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b14      	subs	r3, #20
 8003c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b20      	subs	r3, #32
 8003c6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c70:	68fb      	ldr	r3, [r7, #12]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	08003c81 	.word	0x08003c81

08003c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <prvTaskExitError+0x4c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c92:	d009      	beq.n	8003ca8 <prvTaskExitError+0x28>
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e7fe      	b.n	8003ca6 <prvTaskExitError+0x26>
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cba:	bf00      	nop
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0fc      	beq.n	8003cbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <pxCurrentTCBConst2>)
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cda:	f380 8809 	msr	PSP, r0
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	f04e 0e0d 	orr.w	lr, lr, #13
 8003cee:	4770      	bx	lr

08003cf0 <pxCurrentTCBConst2>:
 8003cf0:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003cf8:	4806      	ldr	r0, [pc, #24]	; (8003d14 <prvPortStartFirstTask+0x1c>)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f380 8808 	msr	MSP, r0
 8003d02:	b662      	cpsie	i
 8003d04:	b661      	cpsie	f
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	df00      	svc	0
 8003d10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d12:	bf00      	nop
 8003d14:	e000ed08 	.word	0xe000ed08

08003d18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <xPortStartScheduler+0xcc>)
 8003d20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <xPortStartScheduler+0xd0>)
 8003d44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d4c:	e009      	b.n	8003d62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d4e:	4b27      	ldr	r3, [pc, #156]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4a25      	ldr	r2, [pc, #148]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d0ef      	beq.n	8003d4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d009      	beq.n	8003d8e <xPortStartScheduler+0x76>
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	e7fe      	b.n	8003d8c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <xPortStartScheduler+0xd4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da0:	4a12      	ldr	r2, [pc, #72]	; (8003dec <xPortStartScheduler+0xd4>)
 8003da2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <xPortStartScheduler+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <xPortStartScheduler+0xd8>)
 8003db2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <xPortStartScheduler+0xd8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <xPortStartScheduler+0xd8>)
 8003dbe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003dc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dc4:	f000 f8b0 	bl	8003f28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <xPortStartScheduler+0xdc>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dce:	f7ff ff93 	bl	8003cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003dd2:	f7ff fd93 	bl	80038fc <vTaskSwitchContext>
	prvTaskExitError();
 8003dd6:	f7ff ff53 	bl	8003c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	e000e400 	.word	0xe000e400
 8003de8:	20000824 	.word	0x20000824
 8003dec:	20000828 	.word	0x20000828
 8003df0:	e000ed20 	.word	0xe000ed20
 8003df4:	20000010 	.word	0x20000010

08003df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <vPortEnterCritical+0x54>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <vPortEnterCritical+0x54>)
 8003e18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <vPortEnterCritical+0x54>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <vPortEnterCritical+0x58>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <vPortEnterCritical+0x48>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	e7fe      	b.n	8003e3e <vPortEnterCritical+0x46>
	}
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <vPortExitCritical+0x48>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <vPortExitCritical+0x22>
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	e7fe      	b.n	8003e74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <vPortExitCritical+0x48>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <vPortExitCritical+0x48>)
 8003e7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <vPortExitCritical+0x48>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <vPortExitCritical+0x3e>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	20000010 	.word	0x20000010

08003ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ea0:	f3ef 8009 	mrs	r0, PSP
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <pxCurrentTCBConst>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003eb0:	6010      	str	r0, [r2, #0]
 8003eb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003eb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eba:	f380 8811 	msr	BASEPRI, r0
 8003ebe:	f7ff fd1d 	bl	80038fc <vTaskSwitchContext>
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8811 	msr	BASEPRI, r0
 8003eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ed6:	f380 8809 	msr	PSP, r0
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	4770      	bx	lr

08003ee0 <pxCurrentTCBConst>:
 8003ee0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f00:	f7ff fc40 	bl	8003784 <xTaskIncrementTick>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <SysTick_Handler+0x3c>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <vPortSetupTimerInterrupt+0x30>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <vPortSetupTimerInterrupt+0x34>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <vPortSetupTimerInterrupt+0x38>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <vPortSetupTimerInterrupt+0x3c>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <vPortSetupTimerInterrupt+0x40>)
 8003f46:	3b01      	subs	r3, #1
 8003f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <vPortSetupTimerInterrupt+0x30>)
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	601a      	str	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	e000e010 	.word	0xe000e010
 8003f5c:	e000e018 	.word	0xe000e018
 8003f60:	20000004 	.word	0x20000004
 8003f64:	10624dd3 	.word	0x10624dd3
 8003f68:	e000e014 	.word	0xe000e014

08003f6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f78:	f7ff fb5a 	bl	8003630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f7c:	4b57      	ldr	r3, [pc, #348]	; (80040dc <pvPortMalloc+0x170>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f84:	f000 f90c 	bl	80041a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f88:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <pvPortMalloc+0x174>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 808c 	bne.w	80040ae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01c      	beq.n	8003fd6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <pvPortMalloc+0x6a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e7fe      	b.n	8003fd4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d068      	beq.n	80040ae <pvPortMalloc+0x142>
 8003fdc:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <pvPortMalloc+0x178>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d863      	bhi.n	80040ae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fe6:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <pvPortMalloc+0x17c>)
 8003fe8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <pvPortMalloc+0x17c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff0:	e004      	b.n	8003ffc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d903      	bls.n	800400e <pvPortMalloc+0xa2>
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f1      	bne.n	8003ff2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800400e:	4b33      	ldr	r3, [pc, #204]	; (80040dc <pvPortMalloc+0x170>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	429a      	cmp	r2, r3
 8004016:	d04a      	beq.n	80040ae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	4413      	add	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	1ad2      	subs	r2, r2, r3
 8004032:	2308      	movs	r3, #8
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	429a      	cmp	r2, r3
 8004038:	d91e      	bls.n	8004078 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <pvPortMalloc+0xf4>
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e7fe      	b.n	800405e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004072:	69b8      	ldr	r0, [r7, #24]
 8004074:	f000 f8f6 	bl	8004264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <pvPortMalloc+0x178>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <pvPortMalloc+0x178>)
 8004084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <pvPortMalloc+0x178>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <pvPortMalloc+0x180>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d203      	bcs.n	800409a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <pvPortMalloc+0x178>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <pvPortMalloc+0x180>)
 8004098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <pvPortMalloc+0x174>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040ae:	f7ff facd 	bl	800364c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <pvPortMalloc+0x164>
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e7fe      	b.n	80040ce <pvPortMalloc+0x162>
	return pvReturn;
 80040d0:	69fb      	ldr	r3, [r7, #28]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20002834 	.word	0x20002834
 80040e0:	20002840 	.word	0x20002840
 80040e4:	20002838 	.word	0x20002838
 80040e8:	2000282c 	.word	0x2000282c
 80040ec:	2000283c 	.word	0x2000283c

080040f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d046      	beq.n	8004190 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004102:	2308      	movs	r3, #8
 8004104:	425b      	negs	r3, r3
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <vPortFree+0xa8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <vPortFree+0x42>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e7fe      	b.n	8004130 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <vPortFree+0x5e>
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	e7fe      	b.n	800414c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <vPortFree+0xa8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d115      	bne.n	8004190 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <vPortFree+0xa8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	43db      	mvns	r3, r3
 800416e:	401a      	ands	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004174:	f7ff fa5c 	bl	8003630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortFree+0xac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4413      	add	r3, r2
 8004182:	4a06      	ldr	r2, [pc, #24]	; (800419c <vPortFree+0xac>)
 8004184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004186:	6938      	ldr	r0, [r7, #16]
 8004188:	f000 f86c 	bl	8004264 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800418c:	f7ff fa5e 	bl	800364c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004190:	bf00      	nop
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20002840 	.word	0x20002840
 800419c:	20002838 	.word	0x20002838

080041a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <prvHeapInit+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <prvHeapInit+0xac>)
 80041d0:	4413      	add	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <prvHeapInit+0xb0>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <prvHeapInit+0xb0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041ec:	2208      	movs	r2, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <prvHeapInit+0xb4>)
 8004200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <prvHeapInit+0xb4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <prvHeapInit+0xb4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <prvHeapInit+0xb8>)
 800422e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <prvHeapInit+0xbc>)
 8004236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <prvHeapInit+0xc0>)
 800423a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000082c 	.word	0x2000082c
 8004250:	2000282c 	.word	0x2000282c
 8004254:	20002834 	.word	0x20002834
 8004258:	2000283c 	.word	0x2000283c
 800425c:	20002838 	.word	0x20002838
 8004260:	20002840 	.word	0x20002840

08004264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <prvInsertBlockIntoFreeList+0xa8>)
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e002      	b.n	8004278 <prvInsertBlockIntoFreeList+0x14>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d8f7      	bhi.n	8004272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d108      	bne.n	80042a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d118      	bne.n	80042ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <prvInsertBlockIntoFreeList+0xac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d00d      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e008      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvInsertBlockIntoFreeList+0xac>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e003      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d002      	beq.n	8004302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	2000282c 	.word	0x2000282c
 8004310:	20002834 	.word	0x20002834

08004314 <__errno>:
 8004314:	4b01      	ldr	r3, [pc, #4]	; (800431c <__errno+0x8>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000014 	.word	0x20000014

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2500      	movs	r5, #0
 8004324:	4e0c      	ldr	r6, [pc, #48]	; (8004358 <__libc_init_array+0x38>)
 8004326:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004328:	1ba4      	subs	r4, r4, r6
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	42a5      	cmp	r5, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	f000 fca8 	bl	8004c84 <_init>
 8004334:	2500      	movs	r5, #0
 8004336:	4e0a      	ldr	r6, [pc, #40]	; (8004360 <__libc_init_array+0x40>)
 8004338:	4c0a      	ldr	r4, [pc, #40]	; (8004364 <__libc_init_array+0x44>)
 800433a:	1ba4      	subs	r4, r4, r6
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	42a5      	cmp	r5, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004348:	4798      	blx	r3
 800434a:	3501      	adds	r5, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004352:	4798      	blx	r3
 8004354:	3501      	adds	r5, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	08004f24 	.word	0x08004f24
 800435c:	08004f24 	.word	0x08004f24
 8004360:	08004f24 	.word	0x08004f24
 8004364:	08004f28 	.word	0x08004f28

08004368 <memcpy>:
 8004368:	b510      	push	{r4, lr}
 800436a:	1e43      	subs	r3, r0, #1
 800436c:	440a      	add	r2, r1
 800436e:	4291      	cmp	r1, r2
 8004370:	d100      	bne.n	8004374 <memcpy+0xc>
 8004372:	bd10      	pop	{r4, pc}
 8004374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437c:	e7f7      	b.n	800436e <memcpy+0x6>

0800437e <memset>:
 800437e:	4603      	mov	r3, r0
 8004380:	4402      	add	r2, r0
 8004382:	4293      	cmp	r3, r2
 8004384:	d100      	bne.n	8004388 <memset+0xa>
 8004386:	4770      	bx	lr
 8004388:	f803 1b01 	strb.w	r1, [r3], #1
 800438c:	e7f9      	b.n	8004382 <memset+0x4>
	...

08004390 <siprintf>:
 8004390:	b40e      	push	{r1, r2, r3}
 8004392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004396:	b500      	push	{lr}
 8004398:	b09c      	sub	sp, #112	; 0x70
 800439a:	ab1d      	add	r3, sp, #116	; 0x74
 800439c:	9002      	str	r0, [sp, #8]
 800439e:	9006      	str	r0, [sp, #24]
 80043a0:	9107      	str	r1, [sp, #28]
 80043a2:	9104      	str	r1, [sp, #16]
 80043a4:	4808      	ldr	r0, [pc, #32]	; (80043c8 <siprintf+0x38>)
 80043a6:	4909      	ldr	r1, [pc, #36]	; (80043cc <siprintf+0x3c>)
 80043a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ac:	9105      	str	r1, [sp, #20]
 80043ae:	6800      	ldr	r0, [r0, #0]
 80043b0:	a902      	add	r1, sp, #8
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	f000 f97e 	bl	80046b4 <_svfiprintf_r>
 80043b8:	2200      	movs	r2, #0
 80043ba:	9b02      	ldr	r3, [sp, #8]
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	b01c      	add	sp, #112	; 0x70
 80043c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043c4:	b003      	add	sp, #12
 80043c6:	4770      	bx	lr
 80043c8:	20000014 	.word	0x20000014
 80043cc:	ffff0208 	.word	0xffff0208

080043d0 <strchr>:
 80043d0:	b2c9      	uxtb	r1, r1
 80043d2:	4603      	mov	r3, r0
 80043d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d8:	b11a      	cbz	r2, 80043e2 <strchr+0x12>
 80043da:	428a      	cmp	r2, r1
 80043dc:	d1f9      	bne.n	80043d2 <strchr+0x2>
 80043de:	4618      	mov	r0, r3
 80043e0:	4770      	bx	lr
 80043e2:	2900      	cmp	r1, #0
 80043e4:	bf18      	it	ne
 80043e6:	2300      	movne	r3, #0
 80043e8:	e7f9      	b.n	80043de <strchr+0xe>

080043ea <strcpy>:
 80043ea:	4603      	mov	r3, r0
 80043ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f0:	f803 2b01 	strb.w	r2, [r3], #1
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	d1f9      	bne.n	80043ec <strcpy+0x2>
 80043f8:	4770      	bx	lr
	...

080043fc <strtok>:
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <strtok+0x50>)
 80043fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	681d      	ldr	r5, [r3, #0]
 8004404:	4606      	mov	r6, r0
 8004406:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004408:	460f      	mov	r7, r1
 800440a:	b9b4      	cbnz	r4, 800443a <strtok+0x3e>
 800440c:	2050      	movs	r0, #80	; 0x50
 800440e:	f000 f849 	bl	80044a4 <malloc>
 8004412:	65a8      	str	r0, [r5, #88]	; 0x58
 8004414:	e9c0 4400 	strd	r4, r4, [r0]
 8004418:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800441c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004420:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004424:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004428:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800442c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004430:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004434:	6184      	str	r4, [r0, #24]
 8004436:	7704      	strb	r4, [r0, #28]
 8004438:	6244      	str	r4, [r0, #36]	; 0x24
 800443a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800443c:	4639      	mov	r1, r7
 800443e:	4630      	mov	r0, r6
 8004440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	2301      	movs	r3, #1
 8004446:	f000 b803 	b.w	8004450 <__strtok_r>
 800444a:	bf00      	nop
 800444c:	20000014 	.word	0x20000014

08004450 <__strtok_r>:
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b918      	cbnz	r0, 800445c <__strtok_r+0xc>
 8004454:	6810      	ldr	r0, [r2, #0]
 8004456:	b908      	cbnz	r0, 800445c <__strtok_r+0xc>
 8004458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445a:	4620      	mov	r0, r4
 800445c:	4604      	mov	r4, r0
 800445e:	460f      	mov	r7, r1
 8004460:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004464:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004468:	b91e      	cbnz	r6, 8004472 <__strtok_r+0x22>
 800446a:	b96d      	cbnz	r5, 8004488 <__strtok_r+0x38>
 800446c:	6015      	str	r5, [r2, #0]
 800446e:	4628      	mov	r0, r5
 8004470:	e7f2      	b.n	8004458 <__strtok_r+0x8>
 8004472:	42b5      	cmp	r5, r6
 8004474:	d1f6      	bne.n	8004464 <__strtok_r+0x14>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ef      	bne.n	800445a <__strtok_r+0xa>
 800447a:	6014      	str	r4, [r2, #0]
 800447c:	7003      	strb	r3, [r0, #0]
 800447e:	e7eb      	b.n	8004458 <__strtok_r+0x8>
 8004480:	462b      	mov	r3, r5
 8004482:	e00d      	b.n	80044a0 <__strtok_r+0x50>
 8004484:	b926      	cbnz	r6, 8004490 <__strtok_r+0x40>
 8004486:	461c      	mov	r4, r3
 8004488:	4623      	mov	r3, r4
 800448a:	460f      	mov	r7, r1
 800448c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004490:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004494:	42b5      	cmp	r5, r6
 8004496:	d1f5      	bne.n	8004484 <__strtok_r+0x34>
 8004498:	2d00      	cmp	r5, #0
 800449a:	d0f1      	beq.n	8004480 <__strtok_r+0x30>
 800449c:	2100      	movs	r1, #0
 800449e:	7021      	strb	r1, [r4, #0]
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e7d9      	b.n	8004458 <__strtok_r+0x8>

080044a4 <malloc>:
 80044a4:	4b02      	ldr	r3, [pc, #8]	; (80044b0 <malloc+0xc>)
 80044a6:	4601      	mov	r1, r0
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	f000 b84f 	b.w	800454c <_malloc_r>
 80044ae:	bf00      	nop
 80044b0:	20000014 	.word	0x20000014

080044b4 <_free_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d043      	beq.n	8004544 <_free_r+0x90>
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f0c      	subs	r4, r1, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	18e4      	addlt	r4, r4, r3
 80044c8:	f000 fbab 	bl	8004c22 <__malloc_lock>
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <_free_r+0x94>)
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	4610      	mov	r0, r2
 80044d2:	b933      	cbnz	r3, 80044e2 <_free_r+0x2e>
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6014      	str	r4, [r2, #0]
 80044d8:	4628      	mov	r0, r5
 80044da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044de:	f000 bba1 	b.w	8004c24 <__malloc_unlock>
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	d90b      	bls.n	80044fe <_free_r+0x4a>
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	1862      	adds	r2, r4, r1
 80044ea:	4293      	cmp	r3, r2
 80044ec:	bf01      	itttt	eq
 80044ee:	681a      	ldreq	r2, [r3, #0]
 80044f0:	685b      	ldreq	r3, [r3, #4]
 80044f2:	1852      	addeq	r2, r2, r1
 80044f4:	6022      	streq	r2, [r4, #0]
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	6004      	str	r4, [r0, #0]
 80044fa:	e7ed      	b.n	80044d8 <_free_r+0x24>
 80044fc:	4613      	mov	r3, r2
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	b10a      	cbz	r2, 8004506 <_free_r+0x52>
 8004502:	42a2      	cmp	r2, r4
 8004504:	d9fa      	bls.n	80044fc <_free_r+0x48>
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	1858      	adds	r0, r3, r1
 800450a:	42a0      	cmp	r0, r4
 800450c:	d10b      	bne.n	8004526 <_free_r+0x72>
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	4401      	add	r1, r0
 8004512:	1858      	adds	r0, r3, r1
 8004514:	4282      	cmp	r2, r0
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	d1de      	bne.n	80044d8 <_free_r+0x24>
 800451a:	6810      	ldr	r0, [r2, #0]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	4401      	add	r1, r0
 8004520:	6019      	str	r1, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	e7d8      	b.n	80044d8 <_free_r+0x24>
 8004526:	d902      	bls.n	800452e <_free_r+0x7a>
 8004528:	230c      	movs	r3, #12
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	e7d4      	b.n	80044d8 <_free_r+0x24>
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1821      	adds	r1, r4, r0
 8004532:	428a      	cmp	r2, r1
 8004534:	bf01      	itttt	eq
 8004536:	6811      	ldreq	r1, [r2, #0]
 8004538:	6852      	ldreq	r2, [r2, #4]
 800453a:	1809      	addeq	r1, r1, r0
 800453c:	6021      	streq	r1, [r4, #0]
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	605c      	str	r4, [r3, #4]
 8004542:	e7c9      	b.n	80044d8 <_free_r+0x24>
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	20002844 	.word	0x20002844

0800454c <_malloc_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	1ccd      	adds	r5, r1, #3
 8004550:	f025 0503 	bic.w	r5, r5, #3
 8004554:	3508      	adds	r5, #8
 8004556:	2d0c      	cmp	r5, #12
 8004558:	bf38      	it	cc
 800455a:	250c      	movcc	r5, #12
 800455c:	2d00      	cmp	r5, #0
 800455e:	4606      	mov	r6, r0
 8004560:	db01      	blt.n	8004566 <_malloc_r+0x1a>
 8004562:	42a9      	cmp	r1, r5
 8004564:	d903      	bls.n	800456e <_malloc_r+0x22>
 8004566:	230c      	movs	r3, #12
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	f000 fb58 	bl	8004c22 <__malloc_lock>
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <_malloc_r+0xac>)
 8004574:	6814      	ldr	r4, [r2, #0]
 8004576:	4621      	mov	r1, r4
 8004578:	b991      	cbnz	r1, 80045a0 <_malloc_r+0x54>
 800457a:	4c20      	ldr	r4, [pc, #128]	; (80045fc <_malloc_r+0xb0>)
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	b91b      	cbnz	r3, 8004588 <_malloc_r+0x3c>
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fb17 	bl	8004bb4 <_sbrk_r>
 8004586:	6020      	str	r0, [r4, #0]
 8004588:	4629      	mov	r1, r5
 800458a:	4630      	mov	r0, r6
 800458c:	f000 fb12 	bl	8004bb4 <_sbrk_r>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d124      	bne.n	80045de <_malloc_r+0x92>
 8004594:	230c      	movs	r3, #12
 8004596:	4630      	mov	r0, r6
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	f000 fb43 	bl	8004c24 <__malloc_unlock>
 800459e:	e7e4      	b.n	800456a <_malloc_r+0x1e>
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	1b5b      	subs	r3, r3, r5
 80045a4:	d418      	bmi.n	80045d8 <_malloc_r+0x8c>
 80045a6:	2b0b      	cmp	r3, #11
 80045a8:	d90f      	bls.n	80045ca <_malloc_r+0x7e>
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	18cc      	adds	r4, r1, r3
 80045ae:	50cd      	str	r5, [r1, r3]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 fb37 	bl	8004c24 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac3      	subs	r3, r0, r3
 80045c2:	d0d3      	beq.n	800456c <_malloc_r+0x20>
 80045c4:	425a      	negs	r2, r3
 80045c6:	50e2      	str	r2, [r4, r3]
 80045c8:	e7d0      	b.n	800456c <_malloc_r+0x20>
 80045ca:	684b      	ldr	r3, [r1, #4]
 80045cc:	428c      	cmp	r4, r1
 80045ce:	bf16      	itet	ne
 80045d0:	6063      	strne	r3, [r4, #4]
 80045d2:	6013      	streq	r3, [r2, #0]
 80045d4:	460c      	movne	r4, r1
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0x64>
 80045d8:	460c      	mov	r4, r1
 80045da:	6849      	ldr	r1, [r1, #4]
 80045dc:	e7cc      	b.n	8004578 <_malloc_r+0x2c>
 80045de:	1cc4      	adds	r4, r0, #3
 80045e0:	f024 0403 	bic.w	r4, r4, #3
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d005      	beq.n	80045f4 <_malloc_r+0xa8>
 80045e8:	1a21      	subs	r1, r4, r0
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 fae2 	bl	8004bb4 <_sbrk_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d0cf      	beq.n	8004594 <_malloc_r+0x48>
 80045f4:	6025      	str	r5, [r4, #0]
 80045f6:	e7db      	b.n	80045b0 <_malloc_r+0x64>
 80045f8:	20002844 	.word	0x20002844
 80045fc:	20002848 	.word	0x20002848

08004600 <__ssputs_r>:
 8004600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	688e      	ldr	r6, [r1, #8]
 8004606:	4682      	mov	sl, r0
 8004608:	429e      	cmp	r6, r3
 800460a:	460c      	mov	r4, r1
 800460c:	4690      	mov	r8, r2
 800460e:	4699      	mov	r9, r3
 8004610:	d837      	bhi.n	8004682 <__ssputs_r+0x82>
 8004612:	898a      	ldrh	r2, [r1, #12]
 8004614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004618:	d031      	beq.n	800467e <__ssputs_r+0x7e>
 800461a:	2302      	movs	r3, #2
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	6909      	ldr	r1, [r1, #16]
 8004620:	1a6f      	subs	r7, r5, r1
 8004622:	6965      	ldr	r5, [r4, #20]
 8004624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004628:	fb95 f5f3 	sdiv	r5, r5, r3
 800462c:	f109 0301 	add.w	r3, r9, #1
 8004630:	443b      	add	r3, r7
 8004632:	429d      	cmp	r5, r3
 8004634:	bf38      	it	cc
 8004636:	461d      	movcc	r5, r3
 8004638:	0553      	lsls	r3, r2, #21
 800463a:	d530      	bpl.n	800469e <__ssputs_r+0x9e>
 800463c:	4629      	mov	r1, r5
 800463e:	f7ff ff85 	bl	800454c <_malloc_r>
 8004642:	4606      	mov	r6, r0
 8004644:	b950      	cbnz	r0, 800465c <__ssputs_r+0x5c>
 8004646:	230c      	movs	r3, #12
 8004648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464c:	f8ca 3000 	str.w	r3, [sl]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465c:	463a      	mov	r2, r7
 800465e:	6921      	ldr	r1, [r4, #16]
 8004660:	f7ff fe82 	bl	8004368 <memcpy>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	6126      	str	r6, [r4, #16]
 8004672:	443e      	add	r6, r7
 8004674:	6026      	str	r6, [r4, #0]
 8004676:	464e      	mov	r6, r9
 8004678:	6165      	str	r5, [r4, #20]
 800467a:	1bed      	subs	r5, r5, r7
 800467c:	60a5      	str	r5, [r4, #8]
 800467e:	454e      	cmp	r6, r9
 8004680:	d900      	bls.n	8004684 <__ssputs_r+0x84>
 8004682:	464e      	mov	r6, r9
 8004684:	4632      	mov	r2, r6
 8004686:	4641      	mov	r1, r8
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	f000 fab1 	bl	8004bf0 <memmove>
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	2000      	movs	r0, #0
 8004692:	1b9b      	subs	r3, r3, r6
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	441e      	add	r6, r3
 800469a:	6026      	str	r6, [r4, #0]
 800469c:	e7dc      	b.n	8004658 <__ssputs_r+0x58>
 800469e:	462a      	mov	r2, r5
 80046a0:	f000 fac1 	bl	8004c26 <_realloc_r>
 80046a4:	4606      	mov	r6, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1e2      	bne.n	8004670 <__ssputs_r+0x70>
 80046aa:	6921      	ldr	r1, [r4, #16]
 80046ac:	4650      	mov	r0, sl
 80046ae:	f7ff ff01 	bl	80044b4 <_free_r>
 80046b2:	e7c8      	b.n	8004646 <__ssputs_r+0x46>

080046b4 <_svfiprintf_r>:
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	461d      	mov	r5, r3
 80046ba:	898b      	ldrh	r3, [r1, #12]
 80046bc:	b09d      	sub	sp, #116	; 0x74
 80046be:	061f      	lsls	r7, r3, #24
 80046c0:	4680      	mov	r8, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4616      	mov	r6, r2
 80046c6:	d50f      	bpl.n	80046e8 <_svfiprintf_r+0x34>
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	b96b      	cbnz	r3, 80046e8 <_svfiprintf_r+0x34>
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	f7ff ff3d 	bl	800454c <_malloc_r>
 80046d2:	6020      	str	r0, [r4, #0]
 80046d4:	6120      	str	r0, [r4, #16]
 80046d6:	b928      	cbnz	r0, 80046e4 <_svfiprintf_r+0x30>
 80046d8:	230c      	movs	r3, #12
 80046da:	f8c8 3000 	str.w	r3, [r8]
 80046de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e2:	e0c8      	b.n	8004876 <_svfiprintf_r+0x1c2>
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	6163      	str	r3, [r4, #20]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9309      	str	r3, [sp, #36]	; 0x24
 80046ec:	2320      	movs	r3, #32
 80046ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f2:	2330      	movs	r3, #48	; 0x30
 80046f4:	f04f 0b01 	mov.w	fp, #1
 80046f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046fc:	9503      	str	r5, [sp, #12]
 80046fe:	4637      	mov	r7, r6
 8004700:	463d      	mov	r5, r7
 8004702:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004706:	b10b      	cbz	r3, 800470c <_svfiprintf_r+0x58>
 8004708:	2b25      	cmp	r3, #37	; 0x25
 800470a:	d13e      	bne.n	800478a <_svfiprintf_r+0xd6>
 800470c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004710:	d00b      	beq.n	800472a <_svfiprintf_r+0x76>
 8004712:	4653      	mov	r3, sl
 8004714:	4632      	mov	r2, r6
 8004716:	4621      	mov	r1, r4
 8004718:	4640      	mov	r0, r8
 800471a:	f7ff ff71 	bl	8004600 <__ssputs_r>
 800471e:	3001      	adds	r0, #1
 8004720:	f000 80a4 	beq.w	800486c <_svfiprintf_r+0x1b8>
 8004724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004726:	4453      	add	r3, sl
 8004728:	9309      	str	r3, [sp, #36]	; 0x24
 800472a:	783b      	ldrb	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 809d 	beq.w	800486c <_svfiprintf_r+0x1b8>
 8004732:	2300      	movs	r3, #0
 8004734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004744:	931a      	str	r3, [sp, #104]	; 0x68
 8004746:	462f      	mov	r7, r5
 8004748:	2205      	movs	r2, #5
 800474a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800474e:	4850      	ldr	r0, [pc, #320]	; (8004890 <_svfiprintf_r+0x1dc>)
 8004750:	f000 fa40 	bl	8004bd4 <memchr>
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	b9d0      	cbnz	r0, 800478e <_svfiprintf_r+0xda>
 8004758:	06d9      	lsls	r1, r3, #27
 800475a:	bf44      	itt	mi
 800475c:	2220      	movmi	r2, #32
 800475e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004762:	071a      	lsls	r2, r3, #28
 8004764:	bf44      	itt	mi
 8004766:	222b      	movmi	r2, #43	; 0x2b
 8004768:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800476c:	782a      	ldrb	r2, [r5, #0]
 800476e:	2a2a      	cmp	r2, #42	; 0x2a
 8004770:	d015      	beq.n	800479e <_svfiprintf_r+0xea>
 8004772:	462f      	mov	r7, r5
 8004774:	2000      	movs	r0, #0
 8004776:	250a      	movs	r5, #10
 8004778:	9a07      	ldr	r2, [sp, #28]
 800477a:	4639      	mov	r1, r7
 800477c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004780:	3b30      	subs	r3, #48	; 0x30
 8004782:	2b09      	cmp	r3, #9
 8004784:	d94d      	bls.n	8004822 <_svfiprintf_r+0x16e>
 8004786:	b1b8      	cbz	r0, 80047b8 <_svfiprintf_r+0x104>
 8004788:	e00f      	b.n	80047aa <_svfiprintf_r+0xf6>
 800478a:	462f      	mov	r7, r5
 800478c:	e7b8      	b.n	8004700 <_svfiprintf_r+0x4c>
 800478e:	4a40      	ldr	r2, [pc, #256]	; (8004890 <_svfiprintf_r+0x1dc>)
 8004790:	463d      	mov	r5, r7
 8004792:	1a80      	subs	r0, r0, r2
 8004794:	fa0b f000 	lsl.w	r0, fp, r0
 8004798:	4318      	orrs	r0, r3
 800479a:	9004      	str	r0, [sp, #16]
 800479c:	e7d3      	b.n	8004746 <_svfiprintf_r+0x92>
 800479e:	9a03      	ldr	r2, [sp, #12]
 80047a0:	1d11      	adds	r1, r2, #4
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	9103      	str	r1, [sp, #12]
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	db01      	blt.n	80047ae <_svfiprintf_r+0xfa>
 80047aa:	9207      	str	r2, [sp, #28]
 80047ac:	e004      	b.n	80047b8 <_svfiprintf_r+0x104>
 80047ae:	4252      	negs	r2, r2
 80047b0:	f043 0302 	orr.w	r3, r3, #2
 80047b4:	9207      	str	r2, [sp, #28]
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	783b      	ldrb	r3, [r7, #0]
 80047ba:	2b2e      	cmp	r3, #46	; 0x2e
 80047bc:	d10c      	bne.n	80047d8 <_svfiprintf_r+0x124>
 80047be:	787b      	ldrb	r3, [r7, #1]
 80047c0:	2b2a      	cmp	r3, #42	; 0x2a
 80047c2:	d133      	bne.n	800482c <_svfiprintf_r+0x178>
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	3702      	adds	r7, #2
 80047c8:	1d1a      	adds	r2, r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9203      	str	r2, [sp, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfb8      	it	lt
 80047d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	4d2e      	ldr	r5, [pc, #184]	; (8004894 <_svfiprintf_r+0x1e0>)
 80047da:	2203      	movs	r2, #3
 80047dc:	7839      	ldrb	r1, [r7, #0]
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f9f8 	bl	8004bd4 <memchr>
 80047e4:	b138      	cbz	r0, 80047f6 <_svfiprintf_r+0x142>
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	1b40      	subs	r0, r0, r5
 80047ea:	fa03 f000 	lsl.w	r0, r3, r0
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	3701      	adds	r7, #1
 80047f2:	4303      	orrs	r3, r0
 80047f4:	9304      	str	r3, [sp, #16]
 80047f6:	7839      	ldrb	r1, [r7, #0]
 80047f8:	2206      	movs	r2, #6
 80047fa:	4827      	ldr	r0, [pc, #156]	; (8004898 <_svfiprintf_r+0x1e4>)
 80047fc:	1c7e      	adds	r6, r7, #1
 80047fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004802:	f000 f9e7 	bl	8004bd4 <memchr>
 8004806:	2800      	cmp	r0, #0
 8004808:	d038      	beq.n	800487c <_svfiprintf_r+0x1c8>
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <_svfiprintf_r+0x1e8>)
 800480c:	bb13      	cbnz	r3, 8004854 <_svfiprintf_r+0x1a0>
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	3307      	adds	r3, #7
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	3308      	adds	r3, #8
 8004818:	9303      	str	r3, [sp, #12]
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	444b      	add	r3, r9
 800481e:	9309      	str	r3, [sp, #36]	; 0x24
 8004820:	e76d      	b.n	80046fe <_svfiprintf_r+0x4a>
 8004822:	fb05 3202 	mla	r2, r5, r2, r3
 8004826:	2001      	movs	r0, #1
 8004828:	460f      	mov	r7, r1
 800482a:	e7a6      	b.n	800477a <_svfiprintf_r+0xc6>
 800482c:	2300      	movs	r3, #0
 800482e:	250a      	movs	r5, #10
 8004830:	4619      	mov	r1, r3
 8004832:	3701      	adds	r7, #1
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	4638      	mov	r0, r7
 8004838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800483c:	3a30      	subs	r2, #48	; 0x30
 800483e:	2a09      	cmp	r2, #9
 8004840:	d903      	bls.n	800484a <_svfiprintf_r+0x196>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0c8      	beq.n	80047d8 <_svfiprintf_r+0x124>
 8004846:	9105      	str	r1, [sp, #20]
 8004848:	e7c6      	b.n	80047d8 <_svfiprintf_r+0x124>
 800484a:	fb05 2101 	mla	r1, r5, r1, r2
 800484e:	2301      	movs	r3, #1
 8004850:	4607      	mov	r7, r0
 8004852:	e7f0      	b.n	8004836 <_svfiprintf_r+0x182>
 8004854:	ab03      	add	r3, sp, #12
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	4622      	mov	r2, r4
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <_svfiprintf_r+0x1ec>)
 800485c:	a904      	add	r1, sp, #16
 800485e:	4640      	mov	r0, r8
 8004860:	f3af 8000 	nop.w
 8004864:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004868:	4681      	mov	r9, r0
 800486a:	d1d6      	bne.n	800481a <_svfiprintf_r+0x166>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	065b      	lsls	r3, r3, #25
 8004870:	f53f af35 	bmi.w	80046de <_svfiprintf_r+0x2a>
 8004874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004876:	b01d      	add	sp, #116	; 0x74
 8004878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487c:	ab03      	add	r3, sp, #12
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4622      	mov	r2, r4
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <_svfiprintf_r+0x1ec>)
 8004884:	a904      	add	r1, sp, #16
 8004886:	4640      	mov	r0, r8
 8004888:	f000 f882 	bl	8004990 <_printf_i>
 800488c:	e7ea      	b.n	8004864 <_svfiprintf_r+0x1b0>
 800488e:	bf00      	nop
 8004890:	08004ef0 	.word	0x08004ef0
 8004894:	08004ef6 	.word	0x08004ef6
 8004898:	08004efa 	.word	0x08004efa
 800489c:	00000000 	.word	0x00000000
 80048a0:	08004601 	.word	0x08004601

080048a4 <_printf_common>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	4691      	mov	r9, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	688a      	ldr	r2, [r1, #8]
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	4606      	mov	r6, r0
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bfb8      	it	lt
 80048b6:	4613      	movlt	r3, r2
 80048b8:	f8c9 3000 	str.w	r3, [r9]
 80048bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c0:	460c      	mov	r4, r1
 80048c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c6:	b112      	cbz	r2, 80048ce <_printf_common+0x2a>
 80048c8:	3301      	adds	r3, #1
 80048ca:	f8c9 3000 	str.w	r3, [r9]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d8:	3302      	addmi	r3, #2
 80048da:	f8c9 3000 	strmi.w	r3, [r9]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	f015 0506 	ands.w	r5, r5, #6
 80048e4:	d107      	bne.n	80048f6 <_printf_common+0x52>
 80048e6:	f104 0a19 	add.w	sl, r4, #25
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	f8d9 2000 	ldr.w	r2, [r9]
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	42ab      	cmp	r3, r5
 80048f4:	dc29      	bgt.n	800494a <_printf_common+0xa6>
 80048f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	3300      	adds	r3, #0
 80048fe:	bf18      	it	ne
 8004900:	2301      	movne	r3, #1
 8004902:	0692      	lsls	r2, r2, #26
 8004904:	d42e      	bmi.n	8004964 <_printf_common+0xc0>
 8004906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800490a:	4639      	mov	r1, r7
 800490c:	4630      	mov	r0, r6
 800490e:	47c0      	blx	r8
 8004910:	3001      	adds	r0, #1
 8004912:	d021      	beq.n	8004958 <_printf_common+0xb4>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	68e5      	ldr	r5, [r4, #12]
 8004918:	f003 0306 	and.w	r3, r3, #6
 800491c:	2b04      	cmp	r3, #4
 800491e:	bf18      	it	ne
 8004920:	2500      	movne	r5, #0
 8004922:	f8d9 2000 	ldr.w	r2, [r9]
 8004926:	f04f 0900 	mov.w	r9, #0
 800492a:	bf08      	it	eq
 800492c:	1aad      	subeq	r5, r5, r2
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	bf08      	it	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	4293      	cmp	r3, r2
 800493a:	bfc4      	itt	gt
 800493c:	1a9b      	subgt	r3, r3, r2
 800493e:	18ed      	addgt	r5, r5, r3
 8004940:	341a      	adds	r4, #26
 8004942:	454d      	cmp	r5, r9
 8004944:	d11a      	bne.n	800497c <_printf_common+0xd8>
 8004946:	2000      	movs	r0, #0
 8004948:	e008      	b.n	800495c <_printf_common+0xb8>
 800494a:	2301      	movs	r3, #1
 800494c:	4652      	mov	r2, sl
 800494e:	4639      	mov	r1, r7
 8004950:	4630      	mov	r0, r6
 8004952:	47c0      	blx	r8
 8004954:	3001      	adds	r0, #1
 8004956:	d103      	bne.n	8004960 <_printf_common+0xbc>
 8004958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004960:	3501      	adds	r5, #1
 8004962:	e7c2      	b.n	80048ea <_printf_common+0x46>
 8004964:	2030      	movs	r0, #48	; 0x30
 8004966:	18e1      	adds	r1, r4, r3
 8004968:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004972:	4422      	add	r2, r4
 8004974:	3302      	adds	r3, #2
 8004976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497a:	e7c4      	b.n	8004906 <_printf_common+0x62>
 800497c:	2301      	movs	r3, #1
 800497e:	4622      	mov	r2, r4
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	47c0      	blx	r8
 8004986:	3001      	adds	r0, #1
 8004988:	d0e6      	beq.n	8004958 <_printf_common+0xb4>
 800498a:	f109 0901 	add.w	r9, r9, #1
 800498e:	e7d8      	b.n	8004942 <_printf_common+0x9e>

08004990 <_printf_i>:
 8004990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004994:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004998:	460c      	mov	r4, r1
 800499a:	7e09      	ldrb	r1, [r1, #24]
 800499c:	b085      	sub	sp, #20
 800499e:	296e      	cmp	r1, #110	; 0x6e
 80049a0:	4617      	mov	r7, r2
 80049a2:	4606      	mov	r6, r0
 80049a4:	4698      	mov	r8, r3
 80049a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049a8:	f000 80b3 	beq.w	8004b12 <_printf_i+0x182>
 80049ac:	d822      	bhi.n	80049f4 <_printf_i+0x64>
 80049ae:	2963      	cmp	r1, #99	; 0x63
 80049b0:	d036      	beq.n	8004a20 <_printf_i+0x90>
 80049b2:	d80a      	bhi.n	80049ca <_printf_i+0x3a>
 80049b4:	2900      	cmp	r1, #0
 80049b6:	f000 80b9 	beq.w	8004b2c <_printf_i+0x19c>
 80049ba:	2958      	cmp	r1, #88	; 0x58
 80049bc:	f000 8083 	beq.w	8004ac6 <_printf_i+0x136>
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049c8:	e032      	b.n	8004a30 <_printf_i+0xa0>
 80049ca:	2964      	cmp	r1, #100	; 0x64
 80049cc:	d001      	beq.n	80049d2 <_printf_i+0x42>
 80049ce:	2969      	cmp	r1, #105	; 0x69
 80049d0:	d1f6      	bne.n	80049c0 <_printf_i+0x30>
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	0605      	lsls	r5, r0, #24
 80049d8:	f103 0104 	add.w	r1, r3, #4
 80049dc:	d52a      	bpl.n	8004a34 <_printf_i+0xa4>
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da03      	bge.n	80049ee <_printf_i+0x5e>
 80049e6:	222d      	movs	r2, #45	; 0x2d
 80049e8:	425b      	negs	r3, r3
 80049ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049ee:	486f      	ldr	r0, [pc, #444]	; (8004bac <_printf_i+0x21c>)
 80049f0:	220a      	movs	r2, #10
 80049f2:	e039      	b.n	8004a68 <_printf_i+0xd8>
 80049f4:	2973      	cmp	r1, #115	; 0x73
 80049f6:	f000 809d 	beq.w	8004b34 <_printf_i+0x1a4>
 80049fa:	d808      	bhi.n	8004a0e <_printf_i+0x7e>
 80049fc:	296f      	cmp	r1, #111	; 0x6f
 80049fe:	d020      	beq.n	8004a42 <_printf_i+0xb2>
 8004a00:	2970      	cmp	r1, #112	; 0x70
 8004a02:	d1dd      	bne.n	80049c0 <_printf_i+0x30>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	f043 0320 	orr.w	r3, r3, #32
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	e003      	b.n	8004a16 <_printf_i+0x86>
 8004a0e:	2975      	cmp	r1, #117	; 0x75
 8004a10:	d017      	beq.n	8004a42 <_printf_i+0xb2>
 8004a12:	2978      	cmp	r1, #120	; 0x78
 8004a14:	d1d4      	bne.n	80049c0 <_printf_i+0x30>
 8004a16:	2378      	movs	r3, #120	; 0x78
 8004a18:	4865      	ldr	r0, [pc, #404]	; (8004bb0 <_printf_i+0x220>)
 8004a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a1e:	e055      	b.n	8004acc <_printf_i+0x13c>
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a26:	1d19      	adds	r1, r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6011      	str	r1, [r2, #0]
 8004a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a30:	2301      	movs	r3, #1
 8004a32:	e08c      	b.n	8004b4e <_printf_i+0x1be>
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a3a:	6011      	str	r1, [r2, #0]
 8004a3c:	bf18      	it	ne
 8004a3e:	b21b      	sxthne	r3, r3
 8004a40:	e7cf      	b.n	80049e2 <_printf_i+0x52>
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	6825      	ldr	r5, [r4, #0]
 8004a46:	1d18      	adds	r0, r3, #4
 8004a48:	6010      	str	r0, [r2, #0]
 8004a4a:	0628      	lsls	r0, r5, #24
 8004a4c:	d501      	bpl.n	8004a52 <_printf_i+0xc2>
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	e002      	b.n	8004a58 <_printf_i+0xc8>
 8004a52:	0668      	lsls	r0, r5, #25
 8004a54:	d5fb      	bpl.n	8004a4e <_printf_i+0xbe>
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	296f      	cmp	r1, #111	; 0x6f
 8004a5a:	bf14      	ite	ne
 8004a5c:	220a      	movne	r2, #10
 8004a5e:	2208      	moveq	r2, #8
 8004a60:	4852      	ldr	r0, [pc, #328]	; (8004bac <_printf_i+0x21c>)
 8004a62:	2100      	movs	r1, #0
 8004a64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a68:	6865      	ldr	r5, [r4, #4]
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	60a5      	str	r5, [r4, #8]
 8004a6e:	f2c0 8095 	blt.w	8004b9c <_printf_i+0x20c>
 8004a72:	6821      	ldr	r1, [r4, #0]
 8004a74:	f021 0104 	bic.w	r1, r1, #4
 8004a78:	6021      	str	r1, [r4, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d13d      	bne.n	8004afa <_printf_i+0x16a>
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	f040 808e 	bne.w	8004ba0 <_printf_i+0x210>
 8004a84:	4665      	mov	r5, ip
 8004a86:	2a08      	cmp	r2, #8
 8004a88:	d10b      	bne.n	8004aa2 <_printf_i+0x112>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	07db      	lsls	r3, r3, #31
 8004a8e:	d508      	bpl.n	8004aa2 <_printf_i+0x112>
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bfde      	ittt	le
 8004a98:	2330      	movle	r3, #48	; 0x30
 8004a9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004aa2:	ebac 0305 	sub.w	r3, ip, r5
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	f8cd 8000 	str.w	r8, [sp]
 8004aac:	463b      	mov	r3, r7
 8004aae:	aa03      	add	r2, sp, #12
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7ff fef6 	bl	80048a4 <_printf_common>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d14d      	bne.n	8004b58 <_printf_i+0x1c8>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac0:	b005      	add	sp, #20
 8004ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	4839      	ldr	r0, [pc, #228]	; (8004bac <_printf_i+0x21c>)
 8004ac8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	1d1d      	adds	r5, r3, #4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6015      	str	r5, [r2, #0]
 8004ad6:	060a      	lsls	r2, r1, #24
 8004ad8:	d50b      	bpl.n	8004af2 <_printf_i+0x162>
 8004ada:	07ca      	lsls	r2, r1, #31
 8004adc:	bf44      	itt	mi
 8004ade:	f041 0120 	orrmi.w	r1, r1, #32
 8004ae2:	6021      	strmi	r1, [r4, #0]
 8004ae4:	b91b      	cbnz	r3, 8004aee <_printf_i+0x15e>
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	f022 0220 	bic.w	r2, r2, #32
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	e7b7      	b.n	8004a62 <_printf_i+0xd2>
 8004af2:	064d      	lsls	r5, r1, #25
 8004af4:	bf48      	it	mi
 8004af6:	b29b      	uxthmi	r3, r3
 8004af8:	e7ef      	b.n	8004ada <_printf_i+0x14a>
 8004afa:	4665      	mov	r5, ip
 8004afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b00:	fb02 3311 	mls	r3, r2, r1, r3
 8004b04:	5cc3      	ldrb	r3, [r0, r3]
 8004b06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d1f5      	bne.n	8004afc <_printf_i+0x16c>
 8004b10:	e7b9      	b.n	8004a86 <_printf_i+0xf6>
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	1d18      	adds	r0, r3, #4
 8004b18:	6961      	ldr	r1, [r4, #20]
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	0628      	lsls	r0, r5, #24
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	d501      	bpl.n	8004b26 <_printf_i+0x196>
 8004b22:	6019      	str	r1, [r3, #0]
 8004b24:	e002      	b.n	8004b2c <_printf_i+0x19c>
 8004b26:	066a      	lsls	r2, r5, #25
 8004b28:	d5fb      	bpl.n	8004b22 <_printf_i+0x192>
 8004b2a:	8019      	strh	r1, [r3, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4665      	mov	r5, ip
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	e7b9      	b.n	8004aa8 <_printf_i+0x118>
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	1d19      	adds	r1, r3, #4
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	681d      	ldr	r5, [r3, #0]
 8004b3c:	6862      	ldr	r2, [r4, #4]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 f847 	bl	8004bd4 <memchr>
 8004b46:	b108      	cbz	r0, 8004b4c <_printf_i+0x1bc>
 8004b48:	1b40      	subs	r0, r0, r5
 8004b4a:	6060      	str	r0, [r4, #4]
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	6123      	str	r3, [r4, #16]
 8004b50:	2300      	movs	r3, #0
 8004b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b56:	e7a7      	b.n	8004aa8 <_printf_i+0x118>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	4630      	mov	r0, r6
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0aa      	beq.n	8004abc <_printf_i+0x12c>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	079b      	lsls	r3, r3, #30
 8004b6a:	d413      	bmi.n	8004b94 <_printf_i+0x204>
 8004b6c:	68e0      	ldr	r0, [r4, #12]
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	4298      	cmp	r0, r3
 8004b72:	bfb8      	it	lt
 8004b74:	4618      	movlt	r0, r3
 8004b76:	e7a3      	b.n	8004ac0 <_printf_i+0x130>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	464a      	mov	r2, r9
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	4630      	mov	r0, r6
 8004b80:	47c0      	blx	r8
 8004b82:	3001      	adds	r0, #1
 8004b84:	d09a      	beq.n	8004abc <_printf_i+0x12c>
 8004b86:	3501      	adds	r5, #1
 8004b88:	68e3      	ldr	r3, [r4, #12]
 8004b8a:	9a03      	ldr	r2, [sp, #12]
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	42ab      	cmp	r3, r5
 8004b90:	dcf2      	bgt.n	8004b78 <_printf_i+0x1e8>
 8004b92:	e7eb      	b.n	8004b6c <_printf_i+0x1dc>
 8004b94:	2500      	movs	r5, #0
 8004b96:	f104 0919 	add.w	r9, r4, #25
 8004b9a:	e7f5      	b.n	8004b88 <_printf_i+0x1f8>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ac      	bne.n	8004afa <_printf_i+0x16a>
 8004ba0:	7803      	ldrb	r3, [r0, #0]
 8004ba2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004baa:	e76c      	b.n	8004a86 <_printf_i+0xf6>
 8004bac:	08004f01 	.word	0x08004f01
 8004bb0:	08004f12 	.word	0x08004f12

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4c05      	ldr	r4, [pc, #20]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bba:	4605      	mov	r5, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	f7fc fb9e 	bl	8001300 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20002c4c 	.word	0x20002c4c

08004bd4 <memchr>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	b2c9      	uxtb	r1, r1
 8004bd8:	4402      	add	r2, r0
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	4603      	mov	r3, r0
 8004bde:	d101      	bne.n	8004be4 <memchr+0x10>
 8004be0:	2300      	movs	r3, #0
 8004be2:	e003      	b.n	8004bec <memchr+0x18>
 8004be4:	781c      	ldrb	r4, [r3, #0]
 8004be6:	3001      	adds	r0, #1
 8004be8:	428c      	cmp	r4, r1
 8004bea:	d1f6      	bne.n	8004bda <memchr+0x6>
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd10      	pop	{r4, pc}

08004bf0 <memmove>:
 8004bf0:	4288      	cmp	r0, r1
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	eb01 0302 	add.w	r3, r1, r2
 8004bf8:	d807      	bhi.n	8004c0a <memmove+0x1a>
 8004bfa:	1e42      	subs	r2, r0, #1
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d00a      	beq.n	8004c16 <memmove+0x26>
 8004c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c08:	e7f8      	b.n	8004bfc <memmove+0xc>
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	d9f5      	bls.n	8004bfa <memmove+0xa>
 8004c0e:	1881      	adds	r1, r0, r2
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	42d3      	cmn	r3, r2
 8004c14:	d100      	bne.n	8004c18 <memmove+0x28>
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c20:	e7f7      	b.n	8004c12 <memmove+0x22>

08004c22 <__malloc_lock>:
 8004c22:	4770      	bx	lr

08004c24 <__malloc_unlock>:
 8004c24:	4770      	bx	lr

08004c26 <_realloc_r>:
 8004c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c28:	4607      	mov	r7, r0
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	460e      	mov	r6, r1
 8004c2e:	b921      	cbnz	r1, 8004c3a <_realloc_r+0x14>
 8004c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c34:	4611      	mov	r1, r2
 8004c36:	f7ff bc89 	b.w	800454c <_malloc_r>
 8004c3a:	b922      	cbnz	r2, 8004c46 <_realloc_r+0x20>
 8004c3c:	f7ff fc3a 	bl	80044b4 <_free_r>
 8004c40:	4625      	mov	r5, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c46:	f000 f814 	bl	8004c72 <_malloc_usable_size_r>
 8004c4a:	42a0      	cmp	r0, r4
 8004c4c:	d20f      	bcs.n	8004c6e <_realloc_r+0x48>
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff fc7b 	bl	800454c <_malloc_r>
 8004c56:	4605      	mov	r5, r0
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d0f2      	beq.n	8004c42 <_realloc_r+0x1c>
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4622      	mov	r2, r4
 8004c60:	f7ff fb82 	bl	8004368 <memcpy>
 8004c64:	4631      	mov	r1, r6
 8004c66:	4638      	mov	r0, r7
 8004c68:	f7ff fc24 	bl	80044b4 <_free_r>
 8004c6c:	e7e9      	b.n	8004c42 <_realloc_r+0x1c>
 8004c6e:	4635      	mov	r5, r6
 8004c70:	e7e7      	b.n	8004c42 <_realloc_r+0x1c>

08004c72 <_malloc_usable_size_r>:
 8004c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c76:	1f18      	subs	r0, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfbc      	itt	lt
 8004c7c:	580b      	ldrlt	r3, [r1, r0]
 8004c7e:	18c0      	addlt	r0, r0, r3
 8004c80:	4770      	bx	lr
	...

08004c84 <_init>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr

08004c90 <_fini>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr
