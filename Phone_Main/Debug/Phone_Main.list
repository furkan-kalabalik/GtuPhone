
Phone_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b2c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ecc  08004ecc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ecc  08004ecc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bdc  20000078  08004f4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20002c54  08004f4c  00022c54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbe9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002663  00000000  00000000  0002fc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001925c  00000000  00000000  00033f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd39  00000000  00000000  0004d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000919a8  00000000  00000000  00059efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb8a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f8  00000000  00000000  000eb920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c24 	.word	0x08004c24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004c24 	.word	0x08004c24

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	; 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000094 	.word	0x20000094
 80001a0:	200000e8 	.word	0x200000e8

080001a4 <HAL_UART_RxCpltCallback>:
te_phone_state PHONE_STATE = IDLE;
te_sms_state SMS_STATE = NO_SMS;
ts_phonebook_entry phonebook[25];
int phonebook_index = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(display_rx[display_rx_index] == '\n')
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b0a      	cmp	r3, #10
 80001b6:	d10f      	bne.n	80001d8 <HAL_UART_RxCpltCallback+0x34>
	{
		display_rec_flag = TRUE;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <HAL_UART_RxCpltCallback+0x60>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
		display_rx_index = 0;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001ca:	4413      	add	r3, r2
 80001cc:	2201      	movs	r2, #1
 80001ce:	4619      	mov	r1, r3
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001d2:	f002 fbdb 	bl	800298c <HAL_UART_Receive_IT>
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
 80001d6:	e00d      	b.n	80001f4 <HAL_UART_RxCpltCallback+0x50>
		display_rx_index++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x5c>)
 80001e8:	4413      	add	r3, r2
 80001ea:	2201      	movs	r2, #1
 80001ec:	4619      	mov	r1, r3
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x64>)
 80001f0:	f002 fbcc 	bl	800298c <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200003ec 	.word	0x200003ec
 8000200:	200002ec 	.word	0x200002ec
 8000204:	200006f0 	.word	0x200006f0
 8000208:	20002bbc 	.word	0x20002bbc

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b0a8      	sub	sp, #160	; 0xa0
 8000210:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000212:	f001 f8c5 	bl	80013a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000216:	f000 f95b 	bl	80004d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800021a:	f000 f9f1 	bl	8000600 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800021e:	f000 f99b 	bl	8000558 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000222:	f000 f9c3 	bl	80005ac <MX_USART2_UART_Init>


	char close_echo[] = "ATE0\r\n";
 8000226:	4a99      	ldr	r2, [pc, #612]	; (800048c <main+0x280>)
 8000228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800022c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000230:	6018      	str	r0, [r3, #0]
 8000232:	3304      	adds	r3, #4
 8000234:	8019      	strh	r1, [r3, #0]
 8000236:	3302      	adds	r3, #2
 8000238:	0c0a      	lsrs	r2, r1, #16
 800023a:	701a      	strb	r2, [r3, #0]
	char response[64] = {0};
 800023c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000240:	2240      	movs	r2, #64	; 0x40
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f004 f86a 	bl	800431e <memset>
	char get_entry[64] = {0};
 800024a:	463b      	mov	r3, r7
 800024c:	2240      	movs	r2, #64	; 0x40
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f004 f864 	bl	800431e <memset>
	char *p1;
	char *p2;
	int index = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
 800025c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff7f 	bl	8000164 <strlen>
 8000266:	4603      	mov	r3, r0
 8000268:	b29a      	uxth	r2, r3
 800026a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800026e:	23c8      	movs	r3, #200	; 0xc8
 8000270:	4887      	ldr	r0, [pc, #540]	; (8000490 <main+0x284>)
 8000272:	f002 fa5a 	bl	800272a <HAL_UART_Transmit>
	HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 8000276:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800027a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	4883      	ldr	r0, [pc, #524]	; (8000490 <main+0x284>)
 8000282:	f002 fae4 	bl	800284e <HAL_UART_Receive>
	memset(response, 0, sizeof(response));
 8000286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 f845 	bl	800431e <memset>
	for(int i = 1; i < 251; i++)
 8000294:	2301      	movs	r3, #1
 8000296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800029a:	e0ac      	b.n	80003f6 <main+0x1ea>
	{
		sprintf(get_entry, "AT+CPBR=%d\r\n", i);
 800029c:	463b      	mov	r3, r7
 800029e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80002a2:	497c      	ldr	r1, [pc, #496]	; (8000494 <main+0x288>)
 80002a4:	4618      	mov	r0, r3
 80002a6:	f004 f843 	bl	8004330 <siprintf>
		HAL_UART_Transmit(GSM_UART, (uint8_t*)&get_entry[0], strlen(get_entry), 200);
 80002aa:	463b      	mov	r3, r7
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff59 	bl	8000164 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4639      	mov	r1, r7
 80002b8:	23c8      	movs	r3, #200	; 0xc8
 80002ba:	4875      	ldr	r0, [pc, #468]	; (8000490 <main+0x284>)
 80002bc:	f002 fa35 	bl	800272a <HAL_UART_Transmit>
		HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
 80002c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80002c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	4871      	ldr	r0, [pc, #452]	; (8000490 <main+0x284>)
 80002cc:	f002 fabf 	bl	800284e <HAL_UART_Receive>
		if(response[3] == 'C' && response[4] == 'M' && response[5] == 'E')
 80002d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80002d4:	2b43      	cmp	r3, #67	; 0x43
 80002d6:	d108      	bne.n	80002ea <main+0xde>
 80002d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80002dc:	2b4d      	cmp	r3, #77	; 0x4d
 80002de:	d104      	bne.n	80002ea <main+0xde>
 80002e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80002e4:	2b45      	cmp	r3, #69	; 0x45
 80002e6:	f000 808c 	beq.w	8000402 <main+0x1f6>
			break;
		p1 = strstr(response, "\"");
 80002ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002ee:	2122      	movs	r1, #34	; 0x22
 80002f0:	4618      	mov	r0, r3
 80002f2:	f004 f83d 	bl	8004370 <strchr>
 80002f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		p1++;
 80002fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80002fe:	3301      	adds	r3, #1
 8000300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if(p1)
 8000304:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000308:	2b00      	cmp	r3, #0
 800030a:	d01e      	beq.n	800034a <main+0x13e>
		  p2 = strstr(p1,"\"");
 800030c:	2122      	movs	r1, #34	; 0x22
 800030e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000312:	f004 f82d 	bl	8004370 <strchr>
 8000316:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		while(p1 != p2)
 800031a:	e016      	b.n	800034a <main+0x13e>
		{
		  phonebook[i-1].number[index++] = *p1;
 800031c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000320:	1e5a      	subs	r2, r3, #1
 8000322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000326:	1c59      	adds	r1, r3, #1
 8000328:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800032c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000330:	7808      	ldrb	r0, [r1, #0]
 8000332:	4959      	ldr	r1, [pc, #356]	; (8000498 <main+0x28c>)
 8000334:	0152      	lsls	r2, r2, #5
 8000336:	440a      	add	r2, r1
 8000338:	4413      	add	r3, r2
 800033a:	3310      	adds	r3, #16
 800033c:	4602      	mov	r2, r0
 800033e:	701a      	strb	r2, [r3, #0]
		  p1++;
 8000340:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000344:	3301      	adds	r3, #1
 8000346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(p1 != p2)
 800034a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800034e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000352:	429a      	cmp	r2, r3
 8000354:	d1e2      	bne.n	800031c <main+0x110>
		}
		p2++;
 8000356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800035a:	3301      	adds	r3, #1
 800035c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		p1 = strstr(p2, "\"");
 8000360:	2122      	movs	r1, #34	; 0x22
 8000362:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000366:	f004 f803 	bl	8004370 <strchr>
 800036a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		p1++;
 800036e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000372:	3301      	adds	r3, #1
 8000374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if(p1)
 8000378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800037c:	2b00      	cmp	r3, #0
 800037e:	d006      	beq.n	800038e <main+0x182>
		  p2 = strstr(p1,"\"");
 8000380:	2122      	movs	r1, #34	; 0x22
 8000382:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000386:	f003 fff3 	bl	8004370 <strchr>
 800038a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		index = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while(p1 != p2)
 8000394:	e015      	b.n	80003c2 <main+0x1b6>
		{
		  phonebook[i-1].name[index++] = *p1;
 8000396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800039a:	1e5a      	subs	r2, r3, #1
 800039c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80003a0:	1c59      	adds	r1, r3, #1
 80003a2:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 80003a6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80003aa:	7808      	ldrb	r0, [r1, #0]
 80003ac:	493a      	ldr	r1, [pc, #232]	; (8000498 <main+0x28c>)
 80003ae:	0152      	lsls	r2, r2, #5
 80003b0:	440a      	add	r2, r1
 80003b2:	4413      	add	r3, r2
 80003b4:	4602      	mov	r2, r0
 80003b6:	701a      	strb	r2, [r3, #0]
		  p1++;
 80003b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003bc:	3301      	adds	r3, #1
 80003be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(p1 != p2)
 80003c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80003c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d1e3      	bne.n	8000396 <main+0x18a>
		}
		memset(response, 0, sizeof(response));
 80003ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003d2:	2240      	movs	r2, #64	; 0x40
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 ffa1 	bl	800431e <memset>
		index = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		phonebook_index++;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <main+0x290>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	4a2c      	ldr	r2, [pc, #176]	; (800049c <main+0x290>)
 80003ea:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < 251; i++)
 80003ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80003f0:	3301      	adds	r3, #1
 80003f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80003f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80003fa:	2bfa      	cmp	r3, #250	; 0xfa
 80003fc:	f77f af4e 	ble.w	800029c <main+0x90>
 8000400:	e000      	b.n	8000404 <main+0x1f8>
			break;
 8000402:	bf00      	nop
	}

	if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <main+0x294>)
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	2303      	movs	r3, #3
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000412:	4924      	ldr	r1, [pc, #144]	; (80004a4 <main+0x298>)
 8000414:	4824      	ldr	r0, [pc, #144]	; (80004a8 <main+0x29c>)
 8000416:	f002 ff17 	bl	8003248 <xTaskCreate>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d000      	beq.n	8000422 <main+0x216>
	{
		__NOP();
 8000420:	bf00      	nop
	}
	if(xTaskCreate(message_task_func, "sms_task", 256, NULL, 3, &sms_task) != pdPASS)
 8000422:	4b22      	ldr	r3, [pc, #136]	; (80004ac <main+0x2a0>)
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	2303      	movs	r3, #3
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000430:	491f      	ldr	r1, [pc, #124]	; (80004b0 <main+0x2a4>)
 8000432:	4820      	ldr	r0, [pc, #128]	; (80004b4 <main+0x2a8>)
 8000434:	f002 ff08 	bl	8003248 <xTaskCreate>
 8000438:	4603      	mov	r3, r0
 800043a:	2b01      	cmp	r3, #1
 800043c:	d000      	beq.n	8000440 <main+0x234>
	{
		__NOP();
 800043e:	bf00      	nop
	}

	if(xTaskCreate(call_task_func, "call_task", 512, NULL, 7, &call_task) != pdPASS)
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <main+0x2ac>)
 8000442:	9301      	str	r3, [sp, #4]
 8000444:	2307      	movs	r3, #7
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	2300      	movs	r3, #0
 800044a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800044e:	491b      	ldr	r1, [pc, #108]	; (80004bc <main+0x2b0>)
 8000450:	481b      	ldr	r0, [pc, #108]	; (80004c0 <main+0x2b4>)
 8000452:	f002 fef9 	bl	8003248 <xTaskCreate>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	d000      	beq.n	800045e <main+0x252>
	{
		__NOP();
 800045c:	bf00      	nop
	}

	if(xTaskCreate(listen_module_task_func, "listen_module", 512, NULL, 3, &listen_module_task) != pdPASS)
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <main+0x2b8>)
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	2303      	movs	r3, #3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2300      	movs	r3, #0
 8000468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046c:	4916      	ldr	r1, [pc, #88]	; (80004c8 <main+0x2bc>)
 800046e:	4817      	ldr	r0, [pc, #92]	; (80004cc <main+0x2c0>)
 8000470:	f002 feea 	bl	8003248 <xTaskCreate>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	d000      	beq.n	800047c <main+0x270>
	{
		__NOP();
 800047a:	bf00      	nop
	}
	vTaskStartScheduler();
 800047c:	f003 f846 	bl	800350c <vTaskStartScheduler>
 8000480:	2300      	movs	r3, #0

}
 8000482:	4618      	mov	r0, r3
 8000484:	3798      	adds	r7, #152	; 0x98
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	08004c84 	.word	0x08004c84
 8000490:	20002b78 	.word	0x20002b78
 8000494:	08004c3c 	.word	0x08004c3c
 8000498:	20002850 	.word	0x20002850
 800049c:	200006f4 	.word	0x200006f4
 80004a0:	20002bfc 	.word	0x20002bfc
 80004a4:	08004c4c 	.word	0x08004c4c
 80004a8:	08000935 	.word	0x08000935
 80004ac:	20002bb8 	.word	0x20002bb8
 80004b0:	08004c5c 	.word	0x08004c5c
 80004b4:	08000975 	.word	0x08000975
 80004b8:	20002b70 	.word	0x20002b70
 80004bc:	08004c68 	.word	0x08004c68
 80004c0:	08000add 	.word	0x08000add
 80004c4:	20002b74 	.word	0x20002b74
 80004c8:	08004c74 	.word	0x08004c74
 80004cc:	08000f39 	.word	0x08000f39

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0318 	add.w	r3, r7, #24
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 ff1d 	bl	800431e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000504:	2302      	movs	r3, #2
 8000506:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800050e:	2300      	movs	r3, #0
 8000510:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fa24 	bl	8001964 <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000522:	f000 fd93 	bl	800104c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fc8f 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800054c:	f000 fd7e 	bl	800104c <Error_Handler>
  }
}
 8000550:	bf00      	nop
 8000552:	3740      	adds	r7, #64	; 0x40
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <MX_USART1_UART_Init+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_USART1_UART_Init+0x4c>)
 8000590:	f002 f87e 	bl	8002690 <HAL_UART_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059a:	f000 fd57 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20002b78 	.word	0x20002b78
 80005a8:	40013800 	.word	0x40013800

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_USART2_UART_Init+0x50>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x4c>)
 80005e4:	f002 f854 	bl	8002690 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ee:	f000 fd2d 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20002bbc 	.word	0x20002bbc
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_GPIO_Init+0x40>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <MX_GPIO_Init+0x40>)
 800060c:	f043 0320 	orr.w	r3, r3, #32
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_GPIO_Init+0x40>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0320 	and.w	r3, r3, #32
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_GPIO_Init+0x40>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <MX_GPIO_Init+0x40>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MX_GPIO_Init+0x40>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40021000 	.word	0x40021000

08000644 <show_subscriber_with_index>:

void show_subscriber_with_index(int index)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0a8      	sub	sp, #160	; 0xa0
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	char name[64] = {0};
 800064c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fe62 	bl	800431e <memset>
	char number[64] = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2240      	movs	r2, #64	; 0x40
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fe5b 	bl	800431e <memset>
	char active_button1[] = "vis b2,1\xFF\xFF\xFF";
 8000668:	4a36      	ldr	r2, [pc, #216]	; (8000744 <show_subscriber_with_index+0x100>)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char active_button2[] = "vis b3,1\xFF\xFF\xFF";
 8000674:	4a34      	ldr	r2, [pc, #208]	; (8000748 <show_subscriber_with_index+0x104>)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	ca07      	ldmia	r2, {r0, r1, r2}
 800067c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(index < phonebook_index)
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <show_subscriber_with_index+0x108>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	da15      	bge.n	80006b6 <show_subscriber_with_index+0x72>
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].name);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	015b      	lsls	r3, r3, #5
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <show_subscriber_with_index+0x10c>)
 8000690:	441a      	add	r2, r3
 8000692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000696:	492f      	ldr	r1, [pc, #188]	; (8000754 <show_subscriber_with_index+0x110>)
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fe49 	bl	8004330 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF", phonebook[index].number);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	015b      	lsls	r3, r3, #5
 80006a2:	3310      	adds	r3, #16
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <show_subscriber_with_index+0x10c>)
 80006a6:	441a      	add	r2, r3
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	492a      	ldr	r1, [pc, #168]	; (8000758 <show_subscriber_with_index+0x114>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fe3e 	bl	8004330 <siprintf>
 80006b4:	e00d      	b.n	80006d2 <show_subscriber_with_index+0x8e>
	}
	else
	{
		sprintf(name, "call_main_page.t0.txt=\"%s\"\xFF\xFF\xFF", "empty");
 80006b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006ba:	4a28      	ldr	r2, [pc, #160]	; (800075c <show_subscriber_with_index+0x118>)
 80006bc:	4925      	ldr	r1, [pc, #148]	; (8000754 <show_subscriber_with_index+0x110>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fe36 	bl	8004330 <siprintf>
		sprintf(number, "call_main_page.t1.txt=\"%s\"\xFF\xFF\xFF",  "empty");
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4a24      	ldr	r2, [pc, #144]	; (800075c <show_subscriber_with_index+0x118>)
 80006ca:	4923      	ldr	r1, [pc, #140]	; (8000758 <show_subscriber_with_index+0x114>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fe2f 	bl	8004330 <siprintf>
	}
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)name, strlen(name), 200);
 80006d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd44 	bl	8000164 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006e4:	23c8      	movs	r3, #200	; 0xc8
 80006e6:	481e      	ldr	r0, [pc, #120]	; (8000760 <show_subscriber_with_index+0x11c>)
 80006e8:	f002 f81f 	bl	800272a <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)number, strlen(number), 200);
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd37 	bl	8000164 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0120 	add.w	r1, r7, #32
 80006fe:	23c8      	movs	r3, #200	; 0xc8
 8000700:	4817      	ldr	r0, [pc, #92]	; (8000760 <show_subscriber_with_index+0x11c>)
 8000702:	f002 f812 	bl	800272a <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button1, strlen(active_button1), 100);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd2a 	bl	8000164 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f107 0114 	add.w	r1, r7, #20
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <show_subscriber_with_index+0x11c>)
 800071c:	f002 f805 	bl	800272a <HAL_UART_Transmit>
	HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)active_button2, strlen(active_button2), 100);
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd1d 	bl	8000164 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f107 0108 	add.w	r1, r7, #8
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <show_subscriber_with_index+0x11c>)
 8000736:	f001 fff8 	bl	800272a <HAL_UART_Transmit>
}
 800073a:	bf00      	nop
 800073c:	37a0      	adds	r7, #160	; 0xa0
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	08004cd4 	.word	0x08004cd4
 8000748:	08004ce0 	.word	0x08004ce0
 800074c:	200006f4 	.word	0x200006f4
 8000750:	20002850 	.word	0x20002850
 8000754:	08004c8c 	.word	0x08004c8c
 8000758:	08004cac 	.word	0x08004cac
 800075c:	08004ccc 	.word	0x08004ccc
 8000760:	20002bbc 	.word	0x20002bbc

08000764 <add_subscriber>:

void add_subscriber(char *data)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	char *name = strtok(data, ">");
 800076c:	4925      	ldr	r1, [pc, #148]	; (8000804 <add_subscriber+0xa0>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f003 fe14 	bl	800439c <strtok>
 8000774:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *number = strtok(NULL, ">");
 8000776:	4923      	ldr	r1, [pc, #140]	; (8000804 <add_subscriber+0xa0>)
 8000778:	2000      	movs	r0, #0
 800077a:	f003 fe0f 	bl	800439c <strtok>
 800077e:	64b8      	str	r0, [r7, #72]	; 0x48
	number[strlen(number)-1] = '\0';
 8000780:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000782:	f7ff fcef 	bl	8000164 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	3b01      	subs	r3, #1
 800078a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800078c:	4413      	add	r3, r2
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
	char sim_write_command[64] = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2240      	movs	r2, #64	; 0x40
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fdbf 	bl	800431e <memset>
	sprintf(sim_write_command, "AT+CPBW=,\"%s\",145,\"%s\"", number, name);
 80007a0:	f107 0008 	add.w	r0, r7, #8
 80007a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007a8:	4917      	ldr	r1, [pc, #92]	; (8000808 <add_subscriber+0xa4>)
 80007aa:	f003 fdc1 	bl	8004330 <siprintf>
	strcpy(phonebook[phonebook_index].name, name);
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <add_subscriber+0xa8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	015b      	lsls	r3, r3, #5
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <add_subscriber+0xac>)
 80007b6:	4413      	add	r3, r2
 80007b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fde5 	bl	800438a <strcpy>
	strcpy(phonebook[phonebook_index].number, number);
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <add_subscriber+0xa8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	015b      	lsls	r3, r3, #5
 80007c6:	3310      	adds	r3, #16
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <add_subscriber+0xac>)
 80007ca:	4413      	add	r3, r2
 80007cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fddb 	bl	800438a <strcpy>
	HAL_UART_Transmit(GSM_UART, (uint8_t*)sim_write_command, strlen(sim_write_command), 300);
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fcc3 	bl	8000164 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f107 0108 	add.w	r1, r7, #8
 80007e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <add_subscriber+0xb0>)
 80007ec:	f001 ff9d 	bl	800272a <HAL_UART_Transmit>
	phonebook_index++;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <add_subscriber+0xa8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <add_subscriber+0xa8>)
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08004cec 	.word	0x08004cec
 8000808:	08004cf0 	.word	0x08004cf0
 800080c:	200006f4 	.word	0x200006f4
 8000810:	20002850 	.word	0x20002850
 8000814:	20002b78 	.word	0x20002b78

08000818 <parse_display_request>:

void parse_display_request()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	if((display_rx[1] == 0x01 && display_rx[2] == 0x10) || (display_rx[1] == 0x05 && display_rx[2] == 0x05)) //call
 800081c:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <parse_display_request+0xf8>)
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d103      	bne.n	800082c <parse_display_request+0x14>
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <parse_display_request+0xf8>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	2b10      	cmp	r3, #16
 800082a:	d007      	beq.n	800083c <parse_display_request+0x24>
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <parse_display_request+0xf8>)
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d11b      	bne.n	800086c <parse_display_request+0x54>
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <parse_display_request+0xf8>)
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b05      	cmp	r3, #5
 800083a:	d117      	bne.n	800086c <parse_display_request+0x54>
	{
		memcpy(call_task_data, display_rx, RX_SIZE);
 800083c:	4a35      	ldr	r2, [pc, #212]	; (8000914 <parse_display_request+0xfc>)
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <parse_display_request+0xf8>)
 8000840:	4610      	mov	r0, r2
 8000842:	4619      	mov	r1, r3
 8000844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000848:	461a      	mov	r2, r3
 800084a:	f003 fd5d 	bl	8004308 <memcpy>
		PHONE_STATE = BUSY;
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <parse_display_request+0x100>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
		while(!release);
 8000854:	bf00      	nop
 8000856:	4b31      	ldr	r3, [pc, #196]	; (800091c <parse_display_request+0x104>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0fb      	beq.n	8000856 <parse_display_request+0x3e>
		CALL_TYPE = MO;
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <parse_display_request+0x108>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
		CALL_STATE = INITIATE_CALL;
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <parse_display_request+0x10c>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e049      	b.n	8000900 <parse_display_request+0xe8>
	}
	else if(display_rx[1] == 0x03 && display_rx[2] == 0x02) //Terminate call by user
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <parse_display_request+0xf8>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d107      	bne.n	8000884 <parse_display_request+0x6c>
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <parse_display_request+0xf8>)
 8000876:	789b      	ldrb	r3, [r3, #2]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d103      	bne.n	8000884 <parse_display_request+0x6c>
	{
		CALL_STATE = TERMINATE_CALL;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <parse_display_request+0x10c>)
 800087e:	2206      	movs	r2, #6
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e03d      	b.n	8000900 <parse_display_request+0xe8>
	}
	else if((display_rx[1] == 0x06 && display_rx[2] == 0x05)) //Add subscriber to phone book
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <parse_display_request+0xf8>)
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	2b06      	cmp	r3, #6
 800088a:	d107      	bne.n	800089c <parse_display_request+0x84>
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <parse_display_request+0xf8>)
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	2b05      	cmp	r3, #5
 8000892:	d103      	bne.n	800089c <parse_display_request+0x84>
	{
		add_subscriber(&display_rx[7]);
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <parse_display_request+0x110>)
 8000896:	f7ff ff65 	bl	8000764 <add_subscriber>
 800089a:	e031      	b.n	8000900 <parse_display_request+0xe8>
	}
	else if((display_rx[1] == 0x05 && display_rx[2] == 0x06) || (display_rx[1] == 0x05 && display_rx[2] == 0x03) //Get phonebook entry
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <parse_display_request+0xf8>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d103      	bne.n	80008ac <parse_display_request+0x94>
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <parse_display_request+0xf8>)
 80008a6:	789b      	ldrb	r3, [r3, #2]
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	d00f      	beq.n	80008cc <parse_display_request+0xb4>
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <parse_display_request+0xf8>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d103      	bne.n	80008bc <parse_display_request+0xa4>
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <parse_display_request+0xf8>)
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d007      	beq.n	80008cc <parse_display_request+0xb4>
			|| (display_rx[1] == 0x05 && display_rx[2] == 0x07))
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <parse_display_request+0xf8>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d109      	bne.n	80008d8 <parse_display_request+0xc0>
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <parse_display_request+0xf8>)
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d105      	bne.n	80008d8 <parse_display_request+0xc0>
	{
		show_subscriber_with_index(display_rx[7]);
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <parse_display_request+0xf8>)
 80008ce:	79db      	ldrb	r3, [r3, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff feb7 	bl	8000644 <show_subscriber_with_index>
 80008d6:	e013      	b.n	8000900 <parse_display_request+0xe8>
	}
	else if(display_rx[1] == 0x02 && display_rx[2] == 0x39)//Send sms
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <parse_display_request+0xf8>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d10f      	bne.n	8000900 <parse_display_request+0xe8>
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <parse_display_request+0xf8>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	2b39      	cmp	r3, #57	; 0x39
 80008e6:	d10b      	bne.n	8000900 <parse_display_request+0xe8>
	{
		memcpy(sms_task_data, display_rx, RX_SIZE);
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <parse_display_request+0x114>)
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <parse_display_request+0xf8>)
 80008ec:	4610      	mov	r0, r2
 80008ee:	4619      	mov	r1, r3
 80008f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f4:	461a      	mov	r2, r3
 80008f6:	f003 fd07 	bl	8004308 <memcpy>
		SMS_STATE = SEND_SMS;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <parse_display_request+0x118>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
	}
	memset(display_rx, 0, RX_SIZE);
 8000900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000904:	2100      	movs	r1, #0
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <parse_display_request+0xf8>)
 8000908:	f003 fd09 	bl	800431e <memset>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200002ec 	.word	0x200002ec
 8000914:	200004f0 	.word	0x200004f0
 8000918:	20000000 	.word	0x20000000
 800091c:	200002e8 	.word	0x200002e8
 8000920:	20002c00 	.word	0x20002c00
 8000924:	200006f1 	.word	0x200006f1
 8000928:	200002f3 	.word	0x200002f3
 800092c:	200003f0 	.word	0x200003f0
 8000930:	200006f2 	.word	0x200006f2

08000934 <display_uart_task_func>:

void display_uart_task_func(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <display_uart_task_func+0x30>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <display_uart_task_func+0x34>)
 8000942:	4413      	add	r3, r2
 8000944:	2201      	movs	r2, #1
 8000946:	4619      	mov	r1, r3
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <display_uart_task_func+0x38>)
 800094a:	f002 f81f 	bl	800298c <HAL_UART_Receive_IT>
	while(1)
	{
		if(display_rec_flag)
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <display_uart_task_func+0x3c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0fb      	beq.n	800094e <display_uart_task_func+0x1a>
		{
			display_rec_flag = FALSE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <display_uart_task_func+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
			parse_display_request();
 800095c:	f7ff ff5c 	bl	8000818 <parse_display_request>
		if(display_rec_flag)
 8000960:	e7f5      	b.n	800094e <display_uart_task_func+0x1a>
 8000962:	bf00      	nop
 8000964:	200003ec 	.word	0x200003ec
 8000968:	200002ec 	.word	0x200002ec
 800096c:	20002bbc 	.word	0x20002bbc
 8000970:	200006f0 	.word	0x200006f0

08000974 <message_task_func>:
		}
	}
}

void message_task_func(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0c0      	sub	sp, #256	; 0x100
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	char text_mod[] = "AT+CMGF=1\r\n";
 800097c:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <message_task_func+0x148>)
 800097e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000982:	ca07      	ldmia	r2, {r0, r1, r2}
 8000984:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char sender_command[64] = {0};
 8000988:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fcc4 	bl	800431e <memset>
	char message_command[160] = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	22a0      	movs	r2, #160	; 0xa0
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fcbd 	bl	800431e <memset>
	char *number;
	char *message;
	while(1)
	{
		switch (SMS_STATE) {
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <message_task_func+0x14c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d002      	beq.n	80009b2 <message_task_func+0x3e>
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d074      	beq.n	8000a9a <message_task_func+0x126>
 80009b0:	e07d      	b.n	8000aae <message_task_func+0x13a>
			case SEND_SMS:
				memset(at_response, 0, RX_SIZE);
 80009b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b6:	2100      	movs	r1, #0
 80009b8:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <message_task_func+0x150>)
 80009ba:	f003 fcb0 	bl	800431e <memset>
				number = strtok(&sms_task_data[7], ">");
 80009be:	4942      	ldr	r1, [pc, #264]	; (8000ac8 <message_task_func+0x154>)
 80009c0:	4842      	ldr	r0, [pc, #264]	; (8000acc <message_task_func+0x158>)
 80009c2:	f003 fceb 	bl	800439c <strtok>
 80009c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				message = strtok(NULL, ">");
 80009ca:	493f      	ldr	r1, [pc, #252]	; (8000ac8 <message_task_func+0x154>)
 80009cc:	2000      	movs	r0, #0
 80009ce:	f003 fce5 	bl	800439c <strtok>
 80009d2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
 80009d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009da:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80009de:	493c      	ldr	r1, [pc, #240]	; (8000ad0 <message_task_func+0x15c>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fca5 	bl	8004330 <siprintf>
				sprintf(&message_command[0], "%s", message);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fccb 	bl	800438a <strcpy>
				message_command[strlen(message_command)-1] = 26;
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbb3 	bl	8000164 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	3b01      	subs	r3, #1
 8000a02:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000a06:	4413      	add	r3, r2
 8000a08:	221a      	movs	r2, #26
 8000a0a:	f803 2cf4 	strb.w	r2, [r3, #-244]
				HAL_UART_Transmit(GSM_UART, (uint8_t*)text_mod, strlen(text_mod), 300);
 8000a0e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fba6 	bl	8000164 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000a20:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a24:	482b      	ldr	r0, [pc, #172]	; (8000ad4 <message_task_func+0x160>)
 8000a26:	f001 fe80 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000a2a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a32:	4924      	ldr	r1, [pc, #144]	; (8000ac4 <message_task_func+0x150>)
 8000a34:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <message_task_func+0x160>)
 8000a36:	f001 ff0a 	bl	800284e <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)sender_command, strlen(sender_command), 300);
 8000a3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fb90 	bl	8000164 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000a4c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <message_task_func+0x160>)
 8000a52:	f001 fe6a 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000a56:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5e:	4919      	ldr	r1, [pc, #100]	; (8000ac4 <message_task_func+0x150>)
 8000a60:	481c      	ldr	r0, [pc, #112]	; (8000ad4 <message_task_func+0x160>)
 8000a62:	f001 fef4 	bl	800284e <HAL_UART_Receive>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)message_command, strlen(sender_command), 300);
 8000a66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fb7a 	bl	8000164 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f107 010c 	add.w	r1, r7, #12
 8000a78:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a7c:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <message_task_func+0x160>)
 8000a7e:	f001 fe54 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 300);
 8000a82:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <message_task_func+0x150>)
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <message_task_func+0x160>)
 8000a8e:	f001 fede 	bl	800284e <HAL_UART_Receive>
				SMS_STATE = COMPLETED_SMS;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <message_task_func+0x14c>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	701a      	strb	r2, [r3, #0]
			break;
 8000a98:	e00e      	b.n	8000ab8 <message_task_func+0x144>
			case COMPLETED_SMS:
				memset(sms_task_data, 0, RX_SIZE);
 8000a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <message_task_func+0x164>)
 8000aa2:	f003 fc3c 	bl	800431e <memset>
				SMS_STATE = NO_SMS;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <message_task_func+0x14c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
			break;
 8000aac:	e004      	b.n	8000ab8 <message_task_func+0x144>
			default:
				vTaskDelay(500 / portTICK_PERIOD_MS);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f002 fcf7 	bl	80034a4 <vTaskDelay>
			break;
 8000ab6:	bf00      	nop
		switch (SMS_STATE) {
 8000ab8:	e774      	b.n	80009a4 <message_task_func+0x30>
 8000aba:	bf00      	nop
 8000abc:	08004d18 	.word	0x08004d18
 8000ac0:	200006f2 	.word	0x200006f2
 8000ac4:	200005f0 	.word	0x200005f0
 8000ac8:	08004cec 	.word	0x08004cec
 8000acc:	200003f7 	.word	0x200003f7
 8000ad0:	08004d08 	.word	0x08004d08
 8000ad4:	20002b78 	.word	0x20002b78
 8000ad8:	200003f0 	.word	0x200003f0

08000adc <call_task_func>:
		}
	}
}

void call_task_func(void *argument)
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b0d6      	sub	sp, #344	; 0x158
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	6018      	str	r0, [r3, #0]
	char custom_command[64] = {0};
 8000ae6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fc15 	bl	800431e <memset>
	char check_status[] = "AT+CLCC\r\n";
 8000af4:	4aba      	ldr	r2, [pc, #744]	; (8000de0 <call_task_func+0x304>)
 8000af6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000afc:	c303      	stmia	r3!, {r0, r1}
 8000afe:	801a      	strh	r2, [r3, #0]
	char terminate_call[] = "ATH0\r\n";
 8000b00:	4ab8      	ldr	r2, [pc, #736]	; (8000de4 <call_task_func+0x308>)
 8000b02:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	8019      	strh	r1, [r3, #0]
 8000b10:	3302      	adds	r3, #2
 8000b12:	0c0a      	lsrs	r2, r1, #16
 8000b14:	701a      	strb	r2, [r3, #0]
	char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000b16:	4bb4      	ldr	r3, [pc, #720]	; (8000de8 <call_task_func+0x30c>)
 8000b18:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000b1c:	461d      	mov	r5, r3
 8000b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b2a:	6020      	str	r0, [r4, #0]
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	8021      	strh	r1, [r4, #0]
	char send_call_start[] = "call_progress.t1.txt=\"Call Active!!\"\xFF\xFF\xFF";
 8000b30:	4bae      	ldr	r3, [pc, #696]	; (8000dec <call_task_func+0x310>)
 8000b32:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000b36:	461d      	mov	r5, r3
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b44:	e884 0003 	stmia.w	r4, {r0, r1}
	char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
 8000b48:	4ba9      	ldr	r3, [pc, #676]	; (8000df0 <call_task_func+0x314>)
 8000b4a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b58:	c403      	stmia	r4!, {r0, r1}
 8000b5a:	8022      	strh	r2, [r4, #0]
	char send_call_start_incoming[] = "incoming_call.t2.txt=\"Call Active!\"\xFF\xFF\xFF";
 8000b5c:	4ba5      	ldr	r3, [pc, #660]	; (8000df4 <call_task_func+0x318>)
 8000b5e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b62:	461d      	mov	r5, r3
 8000b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b70:	6020      	str	r0, [r4, #0]
 8000b72:	3404      	adds	r4, #4
 8000b74:	8021      	strh	r1, [r4, #0]
 8000b76:	3402      	adds	r4, #2
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	7023      	strb	r3, [r4, #0]
	char send_call_end_incoming[] = "incoming_call.t2.txt=\"Call Ended!\"\xFF\xFF\xFF";
 8000b7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b80:	4a9d      	ldr	r2, [pc, #628]	; (8000df8 <call_task_func+0x31c>)
 8000b82:	461c      	mov	r4, r3
 8000b84:	4615      	mov	r5, r2
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b92:	6020      	str	r0, [r4, #0]
 8000b94:	3404      	adds	r4, #4
 8000b96:	8021      	strh	r1, [r4, #0]
	char answer_call[] = "ATA\r\n";
 8000b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b9c:	4a97      	ldr	r2, [pc, #604]	; (8000dfc <call_task_func+0x320>)
 8000b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba2:	6018      	str	r0, [r3, #0]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	8019      	strh	r1, [r3, #0]
	char incoming_page[] = "page incoming_call\xFF\xFF\xFF";
 8000ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bac:	4a94      	ldr	r2, [pc, #592]	; (8000e00 <call_task_func+0x324>)
 8000bae:	461c      	mov	r4, r3
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	6020      	str	r0, [r4, #0]
 8000bbc:	3404      	adds	r4, #4
 8000bbe:	8021      	strh	r1, [r4, #0]
	char start_page_timer_incoming[] = "incoming_call.tm0.en=1\xFF\xFF\xFF";
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4a8f      	ldr	r2, [pc, #572]	; (8000e04 <call_task_func+0x328>)
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	4615      	mov	r5, r2
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd2:	c403      	stmia	r4!, {r0, r1}
 8000bd4:	8022      	strh	r2, [r4, #0]
	while(1)
	{
		switch(CALL_STATE)
 8000bd6:	4b8c      	ldr	r3, [pc, #560]	; (8000e08 <call_task_func+0x32c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	f200 8190 	bhi.w	8000f02 <call_task_func+0x426>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <call_task_func+0x10c>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c05 	.word	0x08000c05
 8000bec:	08000f03 	.word	0x08000f03
 8000bf0:	08000f03 	.word	0x08000f03
 8000bf4:	08000cd9 	.word	0x08000cd9
 8000bf8:	08000d93 	.word	0x08000d93
 8000bfc:	08000e31 	.word	0x08000e31
 8000c00:	08000d53 	.word	0x08000d53
		{
			case INITIATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8000c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4880      	ldr	r0, [pc, #512]	; (8000e0c <call_task_func+0x330>)
 8000c0c:	f003 fb87 	bl	800431e <memset>
				call_task_data[strlen(call_task_data)-1] = '\0';
 8000c10:	487f      	ldr	r0, [pc, #508]	; (8000e10 <call_task_func+0x334>)
 8000c12:	f7ff faa7 	bl	8000164 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a7d      	ldr	r2, [pc, #500]	; (8000e10 <call_task_func+0x334>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	54d1      	strb	r1, [r2, r3]
				if(CALL_TYPE == MO)
 8000c20:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <call_task_func+0x338>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d12b      	bne.n	8000c80 <call_task_func+0x1a4>
				{
					sprintf(&custom_command[0], "ATD+%si;\r\n", &call_task_data[8]);
 8000c28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c2c:	4a7a      	ldr	r2, [pc, #488]	; (8000e18 <call_task_func+0x33c>)
 8000c2e:	497b      	ldr	r1, [pc, #492]	; (8000e1c <call_task_func+0x340>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fb7d 	bl	8004330 <siprintf>
					HAL_UART_Transmit(GSM_UART, (uint8_t*)&custom_command[0], strlen(custom_command), 500);
 8000c36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fa92 	bl	8000164 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000c48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c4c:	4874      	ldr	r0, [pc, #464]	; (8000e20 <call_task_func+0x344>)
 8000c4e:	f001 fd6c 	bl	800272a <HAL_UART_Transmit>
					HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 5000);
 8000c52:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5a:	496c      	ldr	r1, [pc, #432]	; (8000e0c <call_task_func+0x330>)
 8000c5c:	4870      	ldr	r0, [pc, #448]	; (8000e20 <call_task_func+0x344>)
 8000c5e:	f001 fdf6 	bl	800284e <HAL_UART_Receive>
					if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000c62:	4970      	ldr	r1, [pc, #448]	; (8000e24 <call_task_func+0x348>)
 8000c64:	4869      	ldr	r0, [pc, #420]	; (8000e0c <call_task_func+0x330>)
 8000c66:	f7ff fa73 	bl	8000150 <strcmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d103      	bne.n	8000c78 <call_task_func+0x19c>
						CALL_STATE = DIALING;
 8000c70:	4b65      	ldr	r3, [pc, #404]	; (8000e08 <call_task_func+0x32c>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
					CALL_STATE = CHECK_CALL_STATE;
				}
			break;
 8000c76:	e146      	b.n	8000f06 <call_task_func+0x42a>
						CALL_STATE = TERMINATE_CALL;
 8000c78:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <call_task_func+0x32c>)
 8000c7a:	2206      	movs	r2, #6
 8000c7c:	701a      	strb	r2, [r3, #0]
			break;
 8000c7e:	e142      	b.n	8000f06 <call_task_func+0x42a>
				else if(CALL_TYPE == MT)
 8000c80:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <call_task_func+0x338>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	f040 813e 	bne.w	8000f06 <call_task_func+0x42a>
					sprintf(custom_command, "incoming_call.t0.txt=\"%s\"\xFF\xFF\xFF", call_task_data);
 8000c8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c8e:	4a60      	ldr	r2, [pc, #384]	; (8000e10 <call_task_func+0x334>)
 8000c90:	4965      	ldr	r1, [pc, #404]	; (8000e28 <call_task_func+0x34c>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fb4c 	bl	8004330 <siprintf>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)incoming_page, strlen(incoming_page), 300);
 8000c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fa61 	bl	8000164 <strlen>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000caa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cae:	485f      	ldr	r0, [pc, #380]	; (8000e2c <call_task_func+0x350>)
 8000cb0:	f001 fd3b 	bl	800272a <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)custom_command, strlen(custom_command), 300);
 8000cb4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fa53 	bl	8000164 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000cc6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <call_task_func+0x350>)
 8000ccc:	f001 fd2d 	bl	800272a <HAL_UART_Transmit>
					CALL_STATE = CHECK_CALL_STATE;
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <call_task_func+0x32c>)
 8000cd2:	2205      	movs	r2, #5
 8000cd4:	701a      	strb	r2, [r3, #0]
			break;
 8000cd6:	e116      	b.n	8000f06 <call_task_func+0x42a>
			case DIALING:
				memset(at_response, 0, RX_SIZE);
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	2100      	movs	r1, #0
 8000cde:	484b      	ldr	r0, [pc, #300]	; (8000e0c <call_task_func+0x330>)
 8000ce0:	f003 fb1d 	bl	800431e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8000ce4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa3b 	bl	8000164 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000cf6:	23c8      	movs	r3, #200	; 0xc8
 8000cf8:	4849      	ldr	r0, [pc, #292]	; (8000e20 <call_task_func+0x344>)
 8000cfa:	f001 fd16 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000cfe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d06:	4941      	ldr	r1, [pc, #260]	; (8000e0c <call_task_func+0x330>)
 8000d08:	4845      	ldr	r0, [pc, #276]	; (8000e20 <call_task_func+0x344>)
 8000d0a:	f001 fda0 	bl	800284e <HAL_UART_Receive>
				if(at_response[13] == '0')
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <call_task_func+0x330>)
 8000d10:	7b5b      	ldrb	r3, [r3, #13]
 8000d12:	2b30      	cmp	r3, #48	; 0x30
 8000d14:	d111      	bne.n	8000d3a <call_task_func+0x25e>
				{
					CALL_STATE = CHECK_CALL_STATE;
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <call_task_func+0x32c>)
 8000d18:	2205      	movs	r2, #5
 8000d1a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start, strlen(send_call_start), 300);
 8000d1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa1f 	bl	8000164 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000d2e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d32:	483e      	ldr	r0, [pc, #248]	; (8000e2c <call_task_func+0x350>)
 8000d34:	f001 fcf9 	bl	800272a <HAL_UART_Transmit>
				}
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
					CALL_STATE = TERMINATE_CALL;
			break;
 8000d38:	e0e7      	b.n	8000f0a <call_task_func+0x42e>
				else if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000d3a:	493a      	ldr	r1, [pc, #232]	; (8000e24 <call_task_func+0x348>)
 8000d3c:	4833      	ldr	r0, [pc, #204]	; (8000e0c <call_task_func+0x330>)
 8000d3e:	f7ff fa07 	bl	8000150 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 80e0 	bne.w	8000f0a <call_task_func+0x42e>
					CALL_STATE = TERMINATE_CALL;
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <call_task_func+0x32c>)
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	701a      	strb	r2, [r3, #0]
			break;
 8000d50:	e0db      	b.n	8000f0a <call_task_func+0x42e>
			case ACCEPT_CALL:
				HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_start_incoming, strlen(send_call_start_incoming), 300);
 8000d52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fa04 	bl	8000164 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000d64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d68:	4830      	ldr	r0, [pc, #192]	; (8000e2c <call_task_func+0x350>)
 8000d6a:	f001 fcde 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)answer_call, strlen(answer_call), 300);
 8000d6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff f9f6 	bl	8000164 <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d80:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d84:	4826      	ldr	r0, [pc, #152]	; (8000e20 <call_task_func+0x344>)
 8000d86:	f001 fcd0 	bl	800272a <HAL_UART_Transmit>
				CALL_STATE = CHECK_CALL_STATE;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <call_task_func+0x32c>)
 8000d8c:	2205      	movs	r2, #5
 8000d8e:	701a      	strb	r2, [r3, #0]
			break;
 8000d90:	e0be      	b.n	8000f10 <call_task_func+0x434>
			case CHECK_CALL_STATE:
				memset(at_response, 0, RX_SIZE);
 8000d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d96:	2100      	movs	r1, #0
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <call_task_func+0x330>)
 8000d9a:	f003 fac0 	bl	800431e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)check_status, strlen(check_status), 200);
 8000d9e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff f9de 	bl	8000164 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000db0:	23c8      	movs	r3, #200	; 0xc8
 8000db2:	481b      	ldr	r0, [pc, #108]	; (8000e20 <call_task_func+0x344>)
 8000db4:	f001 fcb9 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000db8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc0:	4912      	ldr	r1, [pc, #72]	; (8000e0c <call_task_func+0x330>)
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <call_task_func+0x344>)
 8000dc4:	f001 fd43 	bl	800284e <HAL_UART_Receive>
				if(strcmp(at_response,"\r\nOK\r\n") == 0)
 8000dc8:	4916      	ldr	r1, [pc, #88]	; (8000e24 <call_task_func+0x348>)
 8000dca:	4810      	ldr	r0, [pc, #64]	; (8000e0c <call_task_func+0x330>)
 8000dcc:	f7ff f9c0 	bl	8000150 <strcmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 809b 	bne.w	8000f0e <call_task_func+0x432>
					CALL_STATE = TERMINATE_CALL;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <call_task_func+0x32c>)
 8000dda:	2206      	movs	r2, #6
 8000ddc:	701a      	strb	r2, [r3, #0]
			break;
 8000dde:	e096      	b.n	8000f0e <call_task_func+0x432>
 8000de0:	08004d58 	.word	0x08004d58
 8000de4:	08004d64 	.word	0x08004d64
 8000de8:	08004d6c 	.word	0x08004d6c
 8000dec:	08004d94 	.word	0x08004d94
 8000df0:	08004dbc 	.word	0x08004dbc
 8000df4:	08004dd8 	.word	0x08004dd8
 8000df8:	08004e00 	.word	0x08004e00
 8000dfc:	08004e28 	.word	0x08004e28
 8000e00:	08004e30 	.word	0x08004e30
 8000e04:	08004e48 	.word	0x08004e48
 8000e08:	200006f1 	.word	0x200006f1
 8000e0c:	200005f0 	.word	0x200005f0
 8000e10:	200004f0 	.word	0x200004f0
 8000e14:	20002c00 	.word	0x20002c00
 8000e18:	200004f8 	.word	0x200004f8
 8000e1c:	08004d24 	.word	0x08004d24
 8000e20:	20002b78 	.word	0x20002b78
 8000e24:	08004d30 	.word	0x08004d30
 8000e28:	08004d38 	.word	0x08004d38
 8000e2c:	20002bbc 	.word	0x20002bbc
			case TERMINATE_CALL:
				memset(at_response, 0, RX_SIZE);
 8000e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e34:	2100      	movs	r1, #0
 8000e36:	4839      	ldr	r0, [pc, #228]	; (8000f1c <call_task_func+0x440>)
 8000e38:	f003 fa71 	bl	800431e <memset>
				HAL_UART_Transmit(GSM_UART, (uint8_t*)terminate_call, strlen(terminate_call), 200);
 8000e3c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff f98f 	bl	8000164 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000e4e:	23c8      	movs	r3, #200	; 0xc8
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <call_task_func+0x444>)
 8000e52:	f001 fc6a 	bl	800272a <HAL_UART_Transmit>
				HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 400);
 8000e56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5e:	492f      	ldr	r1, [pc, #188]	; (8000f1c <call_task_func+0x440>)
 8000e60:	482f      	ldr	r0, [pc, #188]	; (8000f20 <call_task_func+0x444>)
 8000e62:	f001 fcf4 	bl	800284e <HAL_UART_Receive>
				if(CALL_TYPE == MO)
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <call_task_func+0x448>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11c      	bne.n	8000ea8 <call_task_func+0x3cc>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end, strlen(send_call_end), 300);
 8000e6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f976 	bl	8000164 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000e80:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <call_task_func+0x44c>)
 8000e86:	f001 fc50 	bl	800272a <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer, strlen(start_page_timer), 300);
 8000e8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f968 	bl	8000164 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000e9c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <call_task_func+0x44c>)
 8000ea2:	f001 fc42 	bl	800272a <HAL_UART_Transmit>
 8000ea6:	e01f      	b.n	8000ee8 <call_task_func+0x40c>
				}
				else if(CALL_TYPE == MT)
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <call_task_func+0x448>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d11b      	bne.n	8000ee8 <call_task_func+0x40c>
				{
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)send_call_end_incoming, strlen(send_call_end_incoming), 300);
 8000eb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f955 	bl	8000164 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ec2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <call_task_func+0x44c>)
 8000ec8:	f001 fc2f 	bl	800272a <HAL_UART_Transmit>
					HAL_UART_Transmit(DISPLAY_UART, (uint8_t*)start_page_timer_incoming, strlen(start_page_timer_incoming), 300);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f947 	bl	8000164 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 010c 	add.w	r1, r7, #12
 8000ede:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <call_task_func+0x44c>)
 8000ee4:	f001 fc21 	bl	800272a <HAL_UART_Transmit>
				}
				memset(call_task_data, 0, RX_SIZE);
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	2100      	movs	r1, #0
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <call_task_func+0x450>)
 8000ef0:	f003 fa15 	bl	800431e <memset>
				PHONE_STATE = IDLE;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <call_task_func+0x454>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
				CALL_STATE = NO_CALL;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <call_task_func+0x458>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			break;
 8000f00:	e006      	b.n	8000f10 <call_task_func+0x434>
			default:
			break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <call_task_func+0x434>
			break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <call_task_func+0x434>
			break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <call_task_func+0x434>
			break;
 8000f0e:	bf00      	nop
		}
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f002 fac6 	bl	80034a4 <vTaskDelay>
		switch(CALL_STATE)
 8000f18:	e65d      	b.n	8000bd6 <call_task_func+0xfa>
 8000f1a:	bf00      	nop
 8000f1c:	200005f0 	.word	0x200005f0
 8000f20:	20002b78 	.word	0x20002b78
 8000f24:	20002c00 	.word	0x20002c00
 8000f28:	20002bbc 	.word	0x20002bbc
 8000f2c:	200004f0 	.word	0x200004f0
 8000f30:	20000000 	.word	0x20000000
 8000f34:	200006f1 	.word	0x200006f1

08000f38 <listen_module_task_func>:
	}
}

void listen_module_task_func(void *arg)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	char check_call[] = "AT+CLCC\r\n";
 8000f40:	4a31      	ldr	r2, [pc, #196]	; (8001008 <listen_module_task_func+0xd0>)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f48:	c303      	stmia	r3!, {r0, r1}
 8000f4a:	801a      	strh	r2, [r3, #0]
	int index;
	char *p1, *p2;
	while(1)
	{
		if(PHONE_STATE == IDLE)
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <listen_module_task_func+0xd4>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d14b      	bne.n	8000fec <listen_module_task_func+0xb4>
		{
			release = 0;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <listen_module_task_func+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(GSM_UART, (uint8_t*)check_call, strlen(check_call), 200);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f900 	bl	8000164 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f107 0108 	add.w	r1, r7, #8
 8000f6c:	23c8      	movs	r3, #200	; 0xc8
 8000f6e:	4829      	ldr	r0, [pc, #164]	; (8001014 <listen_module_task_func+0xdc>)
 8000f70:	f001 fbdb 	bl	800272a <HAL_UART_Transmit>
			HAL_UART_Receive(GSM_UART, (uint8_t*)&at_response[0], sizeof(at_response), 500);
 8000f74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7c:	4926      	ldr	r1, [pc, #152]	; (8001018 <listen_module_task_func+0xe0>)
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <listen_module_task_func+0xdc>)
 8000f80:	f001 fc65 	bl	800284e <HAL_UART_Receive>
			if(at_response[13] == '3')
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <listen_module_task_func+0xe0>)
 8000f86:	7b5b      	ldrb	r3, [r3, #13]
 8000f88:	2b33      	cmp	r3, #51	; 0x33
 8000f8a:	d132      	bne.n	8000ff2 <listen_module_task_func+0xba>
			{
				index = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
				p1 = strstr(at_response, "\"");
 8000f90:	2122      	movs	r1, #34	; 0x22
 8000f92:	4821      	ldr	r0, [pc, #132]	; (8001018 <listen_module_task_func+0xe0>)
 8000f94:	f003 f9ec 	bl	8004370 <strchr>
 8000f98:	61b8      	str	r0, [r7, #24]
				p1++;
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61bb      	str	r3, [r7, #24]
				if(p1)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00f      	beq.n	8000fc6 <listen_module_task_func+0x8e>
					p2 = strstr(p1,"\"");
 8000fa6:	2122      	movs	r1, #34	; 0x22
 8000fa8:	69b8      	ldr	r0, [r7, #24]
 8000faa:	f003 f9e1 	bl	8004370 <strchr>
 8000fae:	6178      	str	r0, [r7, #20]
				while(p1 != p2)
 8000fb0:	e009      	b.n	8000fc6 <listen_module_task_func+0x8e>
				{
					call_task_data[index++] = *p1;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	61fa      	str	r2, [r7, #28]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	7811      	ldrb	r1, [r2, #0]
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <listen_module_task_func+0xe4>)
 8000fbe:	54d1      	strb	r1, [r2, r3]
					p1++;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
				while(p1 != p2)
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d1f1      	bne.n	8000fb2 <listen_module_task_func+0x7a>
				}
				call_task_data[index] = '\n';
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <listen_module_task_func+0xe4>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	701a      	strb	r2, [r3, #0]
				PHONE_STATE = BUSY;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <listen_module_task_func+0xd4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
				CALL_TYPE = MT;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <listen_module_task_func+0xe8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
				CALL_STATE = INITIATE_CALL;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <listen_module_task_func+0xec>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e002      	b.n	8000ff2 <listen_module_task_func+0xba>
			}
		}
		else
		{
			release = 1;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <listen_module_task_func+0xd8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
		}
		memset(at_response, 0, RX_SIZE);
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <listen_module_task_func+0xe0>)
 8000ffa:	f003 f990 	bl	800431e <memset>
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f002 fa4f 	bl	80034a4 <vTaskDelay>
		if(PHONE_STATE == IDLE)
 8001006:	e7a1      	b.n	8000f4c <listen_module_task_func+0x14>
 8001008:	08004d58 	.word	0x08004d58
 800100c:	20000000 	.word	0x20000000
 8001010:	200002e8 	.word	0x200002e8
 8001014:	20002b78 	.word	0x20002b78
 8001018:	200005f0 	.word	0x200005f0
 800101c:	200004f0 	.word	0x200004f0
 8001020:	20002c00 	.word	0x20002c00
 8001024:	200006f1 	.word	0x200006f1

08001028 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800103a:	f000 f9c7 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012c00 	.word	0x40012c00

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001052:	e7fe      	b.n	8001052 <Error_Handler+0x6>

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_MspInit+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_MspInit+0x68>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_MspInit+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_MspInit+0x68>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_MspInit+0x68>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x68>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	210f      	movs	r1, #15
 800108e:	f06f 0001 	mvn.w	r0, #1
 8001092:	f000 fa6c 	bl	800156e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_MspInit+0x6c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_MspInit+0x6c>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <HAL_UART_MspInit+0x108>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d132      	bne.n	800114a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a39      	ldr	r2, [pc, #228]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4619      	mov	r1, r3
 8001128:	482a      	ldr	r0, [pc, #168]	; (80011d4 <HAL_UART_MspInit+0x110>)
 800112a:	f000 fac1 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4619      	mov	r1, r3
 8001142:	4824      	ldr	r0, [pc, #144]	; (80011d4 <HAL_UART_MspInit+0x110>)
 8001144:	f000 fab4 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	e03c      	b.n	80011c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_UART_MspInit+0x114>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d137      	bne.n	80011c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	61d3      	str	r3, [r2, #28]
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x10c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001184:	2304      	movs	r3, #4
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <HAL_UART_MspInit+0x110>)
 8001198:	f000 fa8a 	bl	80016b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800119c:	2308      	movs	r3, #8
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_UART_MspInit+0x110>)
 80011b0:	f000 fa7e 	bl	80016b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	2026      	movs	r0, #38	; 0x26
 80011ba:	f000 f9d8 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011be:	2026      	movs	r0, #38	; 0x26
 80011c0:	f000 f9f1 	bl	80015a6 <HAL_NVIC_EnableIRQ>
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	40004400 	.word	0x40004400

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2019      	movs	r0, #25
 80011f2:	f000 f9bc 	bl	800156e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011f6:	2019      	movs	r0, #25
 80011f8:	f000 f9d5 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_InitTick+0x9c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_InitTick+0x9c>)
 8001202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_InitTick+0x9c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff9e 	bl	8002160 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001224:	f000 ff88 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8001228:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_InitTick+0xa0>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3b01      	subs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0xa4>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_InitTick+0xa8>)
 800123c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_InitTick+0xa4>)
 8001240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001244:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_InitTick+0xa4>)
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_InitTick+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_InitTick+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_InitTick+0xa4>)
 800125a:	f000 ffcf 	bl	80021fc <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <HAL_InitTick+0xa4>)
 8001266:	f001 f821 	bl	80022ac <HAL_TIM_Base_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	431bde83 	.word	0x431bde83
 8001280:	20002c04 	.word	0x20002c04
 8001284:	40012c00 	.word	0x40012c00

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM1_UP_IRQHandler+0x10>)
 80012ba:	f001 f849 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20002c04 	.word	0x20002c04

080012c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <USART2_IRQHandler+0x10>)
 80012ce:	f001 fbb1 	bl	8002a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20002bbc 	.word	0x20002bbc

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f002 ffd2 	bl	80042b4 <__errno>
 8001310:	4602      	mov	r2, r0
 8001312:	230c      	movs	r3, #12
 8001314:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20005000 	.word	0x20005000
 800133c:	00000400 	.word	0x00000400
 8001340:	200006f8 	.word	0x200006f8
 8001344:	20002c58 	.word	0x20002c58

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001354:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ffe5 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f002 ff9f 	bl	80042c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7fe ff43 	bl	800020c <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r3, =_sidata
 8001388:	08004ed4 	.word	0x08004ed4
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001390:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001394:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001398:	20002c54 	.word	0x20002c54

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f8d1 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff10 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fe4a 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x20>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	20002c4c 	.word	0x20002c4c

080013f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_GetTick+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20002c4c 	.word	0x20002c4c

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <__NVIC_EnableIRQ+0x34>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff4f 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff64 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ffb2 	bl	80014f4 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff81 	bl	80014a0 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff57 	bl	8001468 <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d005      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2204      	movs	r2, #4
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e051      	b.n	800168a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020e 	bic.w	r2, r2, #14
 80015f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_DMA_Abort_IT+0xd0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d029      	beq.n	8001664 <HAL_DMA_Abort_IT+0xa0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a20      	ldr	r2, [pc, #128]	; (8001698 <HAL_DMA_Abort_IT+0xd4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d022      	beq.n	8001660 <HAL_DMA_Abort_IT+0x9c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_DMA_Abort_IT+0xd8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d01a      	beq.n	800165a <HAL_DMA_Abort_IT+0x96>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_DMA_Abort_IT+0xdc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d012      	beq.n	8001654 <HAL_DMA_Abort_IT+0x90>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_DMA_Abort_IT+0xe0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00a      	beq.n	800164e <HAL_DMA_Abort_IT+0x8a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_DMA_Abort_IT+0xe4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <HAL_DMA_Abort_IT+0x84>
 8001642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001646:	e00e      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 8001648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800164c:	e00b      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 800164e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001652:	e008      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	e005      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	e002      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 8001660:	2310      	movs	r3, #16
 8001662:	e000      	b.n	8001666 <HAL_DMA_Abort_IT+0xa2>
 8001664:	2301      	movs	r3, #1
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_DMA_Abort_IT+0xe8>)
 8001668:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
    } 
  }
  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020008 	.word	0x40020008
 8001698:	4002001c 	.word	0x4002001c
 800169c:	40020030 	.word	0x40020030
 80016a0:	40020044 	.word	0x40020044
 80016a4:	40020058 	.word	0x40020058
 80016a8:	4002006c 	.word	0x4002006c
 80016ac:	40020000 	.word	0x40020000

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	; 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e127      	b.n	8001914 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8116 	bne.w	800190e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d034      	beq.n	8001754 <HAL_GPIO_Init+0xa4>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d80d      	bhi.n	800170a <HAL_GPIO_Init+0x5a>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x9a>
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d804      	bhi.n	8001700 <HAL_GPIO_Init+0x50>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d031      	beq.n	800175e <HAL_GPIO_Init+0xae>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d01c      	beq.n	8001738 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e048      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d043      	beq.n	800178c <HAL_GPIO_Init+0xdc>
 8001704:	2b11      	cmp	r3, #17
 8001706:	d01b      	beq.n	8001740 <HAL_GPIO_Init+0x90>
          break;
 8001708:	e043      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <HAL_GPIO_Init+0x280>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d026      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001710:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_GPIO_Init+0x280>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d806      	bhi.n	8001724 <HAL_GPIO_Init+0x74>
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_GPIO_Init+0x284>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d020      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800171c:	4a86      	ldr	r2, [pc, #536]	; (8001938 <HAL_GPIO_Init+0x288>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001722:	e036      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	4a85      	ldr	r2, [pc, #532]	; (800193c <HAL_GPIO_Init+0x28c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800172a:	4a85      	ldr	r2, [pc, #532]	; (8001940 <HAL_GPIO_Init+0x290>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d016      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001730:	4a84      	ldr	r2, [pc, #528]	; (8001944 <HAL_GPIO_Init+0x294>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e028      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e023      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01e      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e019      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e012      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d801      	bhi.n	800179c <HAL_GPIO_Init+0xec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e001      	b.n	80017a0 <HAL_GPIO_Init+0xf0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d802      	bhi.n	80017ae <HAL_GPIO_Init+0xfe>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x104>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3b08      	subs	r3, #8
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	210f      	movs	r1, #15
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8096 	beq.w	800190e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fa:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x29c>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x19e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x19a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x196>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2ac>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x192>
 800183e:	2303      	movs	r3, #3
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001842:	2304      	movs	r3, #4
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184e:	2300      	movs	r3, #0
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <HAL_GPIO_Init+0x29c>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4929      	ldr	r1, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4915      	ldr	r1, [pc, #84]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f aed0 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	372c      	adds	r7, #44	; 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	10210000 	.word	0x10210000
 8001934:	10110000 	.word	0x10110000
 8001938:	10120000 	.word	0x10120000
 800193c:	10310000 	.word	0x10310000
 8001940:	10320000 	.word	0x10320000
 8001944:	10220000 	.word	0x10220000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e26c      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001990:	4b8f      	ldr	r3, [pc, #572]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x12c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d168      	bne.n	8001a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e246      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x76>
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x98>
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xbc>
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a71      	ldr	r2, [pc, #452]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fcd6 	bl	80013f0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fcd2 	bl	80013f0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1fa      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe4>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fcc2 	bl	80013f0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fcbe 	bl	80013f0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1e6      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x10c>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1ba      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fc77 	bl	80013f0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc73 	bl	80013f0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e19b      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4927      	ldr	r1, [pc, #156]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc56 	bl	80013f0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc52 	bl	80013f0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e17a      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03a      	beq.n	8001be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fc36 	bl	80013f0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc32 	bl	80013f0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e15a      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fb0a 	bl	80021c0 <RCC_Delay>
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fc1c 	bl	80013f0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc18 	bl	80013f0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e140      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	42420000 	.word	0x42420000
 8001bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e9      	bne.n	8001bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a6 	beq.w	8001d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b97      	ldr	r3, [pc, #604]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10d      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b94      	ldr	r3, [pc, #592]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a93      	ldr	r2, [pc, #588]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b91      	ldr	r3, [pc, #580]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8a      	ldr	r2, [pc, #552]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fbd9 	bl	80013f0 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff fbd5 	bl	80013f0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0fd      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x312>
 8001c68:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e02d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x334>
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b73      	ldr	r3, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a72      	ldr	r2, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	e01c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x356>
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a6c      	ldr	r2, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a69      	ldr	r2, [pc, #420]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d015      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb89 	bl	80013f0 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fb85 	bl	80013f0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0ab      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
 8001d04:	e014      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fb73 	bl	80013f0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fb6f 	bl	80013f0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e095      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8081 	beq.w	8001e4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d061      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d146      	bne.n	8001dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb43 	bl	80013f0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb3f 	bl	80013f0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e067      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	492d      	ldr	r1, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a19      	ldr	r1, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	430b      	orrs	r3, r1
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb13 	bl	80013f0 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff fb0f 	bl	80013f0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e037      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x46a>
 8001dec:	e02f      	b.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fafc 	bl	80013f0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff faf8 	bl	80013f0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e020      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x498>
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42420060 	.word	0x42420060

08001e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4965      	ldr	r1, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e073      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4936      	ldr	r1, [pc, #216]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7ff fa4c 	bl	80013f0 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff fa48 	bl	80013f0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e053      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d210      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	fa21 f303 	lsr.w	r3, r1, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f8e2 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	08004e80 	.word	0x08004e80
 8002030:	20000004 	.word	0x20000004
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b490      	push	{r4, r7}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002040:	1d3c      	adds	r4, r7, #4
 8002042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002048:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x46>
 8002076:	e02d      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e02d      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208a:	4413      	add	r3, r2
 800208c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002090:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c5b      	lsrs	r3, r3, #17
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020aa:	4413      	add	r3, r2
 80020ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b6:	fb02 f203 	mul.w	r2, r2, r3
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e004      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	623b      	str	r3, [r7, #32]
      break;
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d6:	623b      	str	r3, [r7, #32]
      break;
 80020d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020da:	6a3b      	ldr	r3, [r7, #32]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc90      	pop	{r4, r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	08004e64 	.word	0x08004e64
 80020ec:	08004e74 	.word	0x08004e74
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	003d0900 	.word	0x003d0900

080020fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <HAL_RCC_GetHCLKFreq+0x10>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002114:	f7ff fff2 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002118:	4601      	mov	r1, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	08004e90 	.word	0x08004e90

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800213c:	f7ff ffde 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002140:	4601      	mov	r1, r0
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	0adb      	lsrs	r3, r3, #11
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	08004e90 	.word	0x08004e90

08002160 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	220f      	movs	r2, #15
 800216e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_GetClockConfig+0x58>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_RCC_GetClockConfig+0x58>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_GetClockConfig+0x58>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_GetClockConfig+0x58>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetClockConfig+0x5c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0207 	and.w	r2, r3, #7
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40022000 	.word	0x40022000

080021c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <RCC_Delay+0x34>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <RCC_Delay+0x38>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0a5b      	lsrs	r3, r3, #9
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021dc:	bf00      	nop
  }
  while (Delay --);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <RCC_Delay+0x1c>
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000004 	.word	0x20000004
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e041      	b.n	8002292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f839 	bl	800229a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 f9b4 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e03a      	b.n	800233a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_TIM_Base_Start_IT+0x98>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00e      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d009      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_TIM_Base_Start_IT+0xa0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d111      	bne.n	8002328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d010      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	e007      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800

08002350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0202 	mvn.w	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8ed 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8e0 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8ef 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0204 	mvn.w	r2, #4
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8c3 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8b6 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8c5 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b08      	cmp	r3, #8
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0208 	mvn.w	r2, #8
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2204      	movs	r2, #4
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f899 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f88c 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f89b 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b10      	cmp	r3, #16
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0210 	mvn.w	r2, #16
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2208      	movs	r2, #8
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f86f 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f862 	bl	8002560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f871 	bl	8002584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0201 	mvn.w	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fdaa 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8bf 	bl	800267e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f835 	bl	8002596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0220 	mvn.w	r2, #32
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f88a 	bl	800266c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a26      	ldr	r2, [pc, #152]	; (8002664 <TIM_Base_SetConfig+0xbc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <TIM_Base_SetConfig+0xbc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <TIM_Base_SetConfig+0xb8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800

0800266c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e03f      	b.n	8002722 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fd04 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fc21 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b08a      	sub	sp, #40	; 0x28
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d17c      	bne.n	8002844 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Transmit+0x2c>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e075      	b.n	8002846 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x3e>
 8002764:	2302      	movs	r3, #2
 8002766:	e06e      	b.n	8002846 <HAL_UART_Transmit+0x11c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2221      	movs	r2, #33	; 0x21
 800277a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800277e:	f7fe fe37 	bl	80013f0 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d108      	bne.n	80027ac <HAL_UART_Transmit+0x82>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e003      	b.n	80027b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80027bc:	e02a      	b.n	8002814 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fa45 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e036      	b.n	8002846 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	3302      	adds	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e007      	b.n	8002806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3301      	adds	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1cf      	bne.n	80027be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa15 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b08a      	sub	sp, #40	; 0x28
 8002852:	af02      	add	r7, sp, #8
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 8089 	bne.w	8002982 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Receive+0x2e>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e081      	b.n	8002984 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Receive+0x40>
 800288a:	2302      	movs	r3, #2
 800288c:	e07a      	b.n	8002984 <HAL_UART_Receive+0x136>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2222      	movs	r2, #34	; 0x22
 80028a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fda4 	bl	80013f0 <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	d108      	bne.n	80028d2 <HAL_UART_Receive+0x84>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e003      	b.n	80028da <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028e2:	e043      	b.n	800296c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2120      	movs	r1, #32
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9b2 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e042      	b.n	8002984 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	b29a      	uxth	r2, r3
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3302      	adds	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e01f      	b.n	800295e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d007      	beq.n	8002938 <HAL_UART_Receive+0xea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_UART_Receive+0xf8>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e008      	b.n	8002958 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002952:	b2da      	uxtb	r2, r3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	3301      	adds	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1b6      	bne.n	80028e4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d140      	bne.n	8002a28 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_UART_Receive_IT+0x26>
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e039      	b.n	8002a2a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Receive_IT+0x38>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e032      	b.n	8002a2a <HAL_UART_Receive_IT+0x9e>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	; 0x22
 80029e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a02:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9cc 	bl	8002e1c <UART_Receive_IT>
      return;
 8002a84:	e0d1      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b0 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x70>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a5 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	f043 0202 	orr.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00f      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_UART_IRQHandler+0xee>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	f043 0208 	orr.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d078      	beq.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f966 	bl	8002e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_UART_IRQHandler+0x144>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d031      	beq.n	8002bdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8b7 	bl	8002cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_UART_IRQHandler+0x1fc>)
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fd07 	bl	80015c4 <HAL_DMA_Abort_IT>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d016      	beq.n	8002bea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bca:	e00e      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f83a 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	e00a      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f836 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	e006      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f832 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002be8:	e01e      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	bf00      	nop
    return;
 8002bec:	e01c      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8a3 	bl	8002d4e <UART_Transmit_IT>
    return;
 8002c08:	e00f      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8e4 	bl	8002dec <UART_EndTransmit_IT>
    return;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c28:	bf00      	nop
  }
}
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08002d27 	.word	0x08002d27

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	e02c      	b.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d028      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c78:	f7fe fbba 	bl	80013f0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d21d      	bcs.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e00f      	b.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0c3      	beq.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ff80 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b21      	cmp	r3, #33	; 0x21
 8002d60:	d13e      	bne.n	8002de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d114      	bne.n	8002d96 <UART_Transmit_IT+0x48>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	621a      	str	r2, [r3, #32]
 8002d94:	e008      	b.n	8002da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6211      	str	r1, [r2, #32]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff11 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b22      	cmp	r3, #34	; 0x22
 8002e2e:	d170      	bne.n	8002f12 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d117      	bne.n	8002e6a <UART_Receive_IT+0x4e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d113      	bne.n	8002e6a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
 8002e68:	e026      	b.n	8002eb8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d007      	beq.n	8002e8e <UART_Receive_IT+0x72>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <UART_Receive_IT+0x80>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e008      	b.n	8002eae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d120      	bne.n	8002f0e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0220 	bic.w	r2, r2, #32
 8002eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd f94d 	bl	80001a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e002      	b.n	8002f14 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f56:	f023 030c 	bic.w	r3, r3, #12
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <UART_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff f8d8 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	e002      	b.n	8002f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff f8c0 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <UART_SetConfig+0x118>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	0119      	lsls	r1, r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <UART_SetConfig+0x118>)
 8002fca:	fba3 0302 	umull	r0, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2064      	movs	r0, #100	; 0x64
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	; 0x32
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe8:	4419      	add	r1, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <UART_SetConfig+0x118>)
 8003002:	fba3 0302 	umull	r0, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <UART_SetConfig+0x118>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	440a      	add	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013800 	.word	0x40013800
 8003034:	51eb851f 	.word	0x51eb851f

08003038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f103 0208 	add.w	r2, r3, #8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f103 0208 	add.w	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f103 0208 	add.w	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ea:	d103      	bne.n	80030f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e00c      	b.n	800310e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3308      	adds	r3, #8
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e002      	b.n	8003102 <vListInsert+0x2e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d2f6      	bcs.n	80030fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6852      	ldr	r2, [r2, #4]
 8003164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d103      	bne.n	8003178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08e      	sub	sp, #56	; 0x38
 800319a:	af04      	add	r7, sp, #16
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	e7fe      	b.n	80031bc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <xTaskCreateStatic+0x42>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e7fe      	b.n	80031d6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031d8:	2354      	movs	r3, #84	; 0x54
 80031da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b54      	cmp	r3, #84	; 0x54
 80031e0:	d009      	beq.n	80031f6 <xTaskCreateStatic+0x60>
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	e7fe      	b.n	80031f4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01e      	beq.n	800323a <xTaskCreateStatic+0xa4>
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01b      	beq.n	800323a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003214:	2300      	movs	r3, #0
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	9302      	str	r3, [sp, #8]
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f850 	bl	80032d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003234:	f000 f8cc 	bl	80033d0 <prvAddNewTaskToReadyList>
 8003238:	e001      	b.n	800323e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800323e:	697b      	ldr	r3, [r7, #20]
	}
 8003240:	4618      	mov	r0, r3
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af04      	add	r7, sp, #16
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fe55 	bl	8003f0c <pvPortMalloc>
 8003262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800326a:	2054      	movs	r0, #84	; 0x54
 800326c:	f000 fe4e 	bl	8003f0c <pvPortMalloc>
 8003270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
 800327e:	e005      	b.n	800328c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003280:	6978      	ldr	r0, [r7, #20]
 8003282:	f000 ff05 	bl	8004090 <vPortFree>
 8003286:	e001      	b.n	800328c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d017      	beq.n	80032c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	2300      	movs	r3, #0
 800329e:	9303      	str	r3, [sp, #12]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	9302      	str	r3, [sp, #8]
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f80e 	bl	80032d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b6:	69f8      	ldr	r0, [r7, #28]
 80032b8:	f000 f88a 	bl	80033d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e002      	b.n	80032c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032c8:	69bb      	ldr	r3, [r7, #24]
	}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b088      	sub	sp, #32
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032ea:	3b01      	subs	r3, #1
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f023 0307 	bic.w	r3, r3, #7
 80032f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <prvInitialiseNewTask+0x46>
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e7fe      	b.n	8003316 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e012      	b.n	8003344 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	7819      	ldrb	r1, [r3, #0]
 8003326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	3334      	adds	r3, #52	; 0x34
 800332e:	460a      	mov	r2, r1
 8003330:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3301      	adds	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	d9e9      	bls.n	800331e <prvInitialiseNewTask+0x4c>
 800334a:	e000      	b.n	800334e <prvInitialiseNewTask+0x7c>
		{
			break;
 800334c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	2b06      	cmp	r3, #6
 800335a:	d901      	bls.n	8003360 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800335c:	2306      	movs	r3, #6
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	2200      	movs	r2, #0
 8003370:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	3304      	adds	r3, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fe7d 	bl	8003076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	3318      	adds	r3, #24
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fe78 	bl	8003076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f1c3 0207 	rsb	r2, r3, #7
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2200      	movs	r2, #0
 80033a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	69b8      	ldr	r0, [r7, #24]
 80033b0:	f000 fc06 	bl	8003bc0 <pxPortInitialiseStack>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033d8:	f000 fcde 	bl	8003d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d110      	bne.n	800341e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033fc:	f000 fabc 	bl	8003978 <prvInitialiseTaskLists>
 8003400:	e00d      	b.n	800341e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <prvAddNewTaskToReadyList+0xc0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d802      	bhi.n	800341e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <prvAddNewTaskToReadyList+0xc4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <prvAddNewTaskToReadyList+0xc4>)
 8003426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <prvAddNewTaskToReadyList+0xc8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <prvAddNewTaskToReadyList+0xc8>)
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <prvAddNewTaskToReadyList+0xcc>)
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f7ff fe1c 	bl	800308e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003456:	f000 fccd 	bl	8003df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <prvAddNewTaskToReadyList+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	429a      	cmp	r2, r3
 800346e:	d207      	bcs.n	8003480 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <prvAddNewTaskToReadyList+0xd0>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200007fc 	.word	0x200007fc
 800348c:	200006fc 	.word	0x200006fc
 8003490:	20000808 	.word	0x20000808
 8003494:	20000818 	.word	0x20000818
 8003498:	20000804 	.word	0x20000804
 800349c:	20000700 	.word	0x20000700
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <vTaskDelay+0x60>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <vTaskDelay+0x2e>
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	e7fe      	b.n	80034d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80034d2:	f000 f879 	bl	80035c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034d6:	2100      	movs	r1, #0
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb0b 	bl	8003af4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034de:	f000 f881 	bl	80035e4 <xTaskResumeAll>
 80034e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <vTaskDelay+0x64>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000824 	.word	0x20000824
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800351a:	463a      	mov	r2, r7
 800351c:	1d39      	adds	r1, r7, #4
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4618      	mov	r0, r3
 8003524:	f7fc fe26 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	9202      	str	r2, [sp, #8]
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2300      	movs	r3, #0
 8003538:	460a      	mov	r2, r1
 800353a:	491d      	ldr	r1, [pc, #116]	; (80035b0 <vTaskStartScheduler+0xa4>)
 800353c:	481d      	ldr	r0, [pc, #116]	; (80035b4 <vTaskStartScheduler+0xa8>)
 800353e:	f7ff fe2a 	bl	8003196 <xTaskCreateStatic>
 8003542:	4602      	mov	r2, r0
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <vTaskStartScheduler+0xac>)
 8003546:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <vTaskStartScheduler+0xac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e001      	b.n	800355a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d115      	bne.n	800358c <vTaskStartScheduler+0x80>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <vTaskStartScheduler+0xb0>)
 8003574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <vTaskStartScheduler+0xb4>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <vTaskStartScheduler+0xb8>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003586:	f000 fb97 	bl	8003cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800358a:	e00d      	b.n	80035a8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003592:	d109      	bne.n	80035a8 <vTaskStartScheduler+0x9c>
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e7fe      	b.n	80035a6 <vTaskStartScheduler+0x9a>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08004e78 	.word	0x08004e78
 80035b4:	08003949 	.word	0x08003949
 80035b8:	20000820 	.word	0x20000820
 80035bc:	2000081c 	.word	0x2000081c
 80035c0:	20000808 	.word	0x20000808
 80035c4:	20000800 	.word	0x20000800

080035c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <vTaskSuspendAll+0x18>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <vTaskSuspendAll+0x18>)
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000824 	.word	0x20000824

080035e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <xTaskResumeAll+0x114>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xTaskResumeAll+0x2a>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	e7fe      	b.n	800360c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800360e:	f000 fbc3 	bl	8003d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <xTaskResumeAll+0x114>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	4a37      	ldr	r2, [pc, #220]	; (80036f8 <xTaskResumeAll+0x114>)
 800361a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800361c:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <xTaskResumeAll+0x114>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d161      	bne.n	80036e8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <xTaskResumeAll+0x118>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05d      	beq.n	80036e8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800362c:	e02e      	b.n	800368c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <xTaskResumeAll+0x11c>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3318      	adds	r3, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fd82 	bl	8003144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fd7d 	bl	8003144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	2201      	movs	r2, #1
 8003650:	409a      	lsls	r2, r3
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <xTaskResumeAll+0x120>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <xTaskResumeAll+0x120>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <xTaskResumeAll+0x124>)
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff fd0b 	bl	800308e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <xTaskResumeAll+0x128>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <xTaskResumeAll+0x12c>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <xTaskResumeAll+0x11c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1cc      	bne.n	800362e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800369a:	f000 fa07 	bl	8003aac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <xTaskResumeAll+0x130>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036aa:	f000 f837 	bl	800371c <xTaskIncrementTick>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <xTaskResumeAll+0x12c>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3b01      	subs	r3, #1
 80036be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f1      	bne.n	80036aa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <xTaskResumeAll+0x130>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <xTaskResumeAll+0x12c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <xTaskResumeAll+0x134>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036e8:	f000 fb84 	bl	8003df4 <vPortExitCritical>

	return xAlreadyYielded;
 80036ec:	68bb      	ldr	r3, [r7, #8]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000824 	.word	0x20000824
 80036fc:	200007fc 	.word	0x200007fc
 8003700:	200007bc 	.word	0x200007bc
 8003704:	20000804 	.word	0x20000804
 8003708:	20000700 	.word	0x20000700
 800370c:	200006fc 	.word	0x200006fc
 8003710:	20000810 	.word	0x20000810
 8003714:	2000080c 	.word	0x2000080c
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003726:	4b50      	ldr	r3, [pc, #320]	; (8003868 <xTaskIncrementTick+0x14c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 808c 	bne.w	8003848 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003730:	4b4e      	ldr	r3, [pc, #312]	; (800386c <xTaskIncrementTick+0x150>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003738:	4a4c      	ldr	r2, [pc, #304]	; (800386c <xTaskIncrementTick+0x150>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11f      	bne.n	8003784 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <xTaskIncrementTick+0x154>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <xTaskIncrementTick+0x46>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	e7fe      	b.n	8003760 <xTaskIncrementTick+0x44>
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <xTaskIncrementTick+0x154>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <xTaskIncrementTick+0x158>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a40      	ldr	r2, [pc, #256]	; (8003870 <xTaskIncrementTick+0x154>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <xTaskIncrementTick+0x158>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b40      	ldr	r3, [pc, #256]	; (8003878 <xTaskIncrementTick+0x15c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <xTaskIncrementTick+0x15c>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	f000 f994 	bl	8003aac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003784:	4b3d      	ldr	r3, [pc, #244]	; (800387c <xTaskIncrementTick+0x160>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d34d      	bcc.n	800382a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <xTaskIncrementTick+0x154>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <xTaskIncrementTick+0x80>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <xTaskIncrementTick+0x82>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <xTaskIncrementTick+0x160>)
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a8:	601a      	str	r2, [r3, #0]
					break;
 80037aa:	e03e      	b.n	800382a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <xTaskIncrementTick+0x154>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d203      	bcs.n	80037cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <xTaskIncrementTick+0x160>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6013      	str	r3, [r2, #0]
						break;
 80037ca:	e02e      	b.n	800382a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fcb7 	bl	8003144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3318      	adds	r3, #24
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fcae 	bl	8003144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <xTaskIncrementTick+0x164>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a22      	ldr	r2, [pc, #136]	; (8003880 <xTaskIncrementTick+0x164>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <xTaskIncrementTick+0x168>)
 8003808:	441a      	add	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fc3c 	bl	800308e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <xTaskIncrementTick+0x16c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d3b4      	bcc.n	800378e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003828:	e7b1      	b.n	800378e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800382a:	4b17      	ldr	r3, [pc, #92]	; (8003888 <xTaskIncrementTick+0x16c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	4914      	ldr	r1, [pc, #80]	; (8003884 <xTaskIncrementTick+0x168>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d907      	bls.n	8003852 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e004      	b.n	8003852 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003848:	4b10      	ldr	r3, [pc, #64]	; (800388c <xTaskIncrementTick+0x170>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a0f      	ldr	r2, [pc, #60]	; (800388c <xTaskIncrementTick+0x170>)
 8003850:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <xTaskIncrementTick+0x174>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800385e:	697b      	ldr	r3, [r7, #20]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000824 	.word	0x20000824
 800386c:	20000800 	.word	0x20000800
 8003870:	200007b4 	.word	0x200007b4
 8003874:	200007b8 	.word	0x200007b8
 8003878:	20000814 	.word	0x20000814
 800387c:	2000081c 	.word	0x2000081c
 8003880:	20000804 	.word	0x20000804
 8003884:	20000700 	.word	0x20000700
 8003888:	200006fc 	.word	0x200006fc
 800388c:	2000080c 	.word	0x2000080c
 8003890:	20000810 	.word	0x20000810

08003894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <vTaskSwitchContext+0xa0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038a2:	4b25      	ldr	r3, [pc, #148]	; (8003938 <vTaskSwitchContext+0xa4>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038a8:	e03e      	b.n	8003928 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <vTaskSwitchContext+0xa4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <vTaskSwitchContext+0xa8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	f1c3 031f 	rsb	r3, r3, #31
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	491e      	ldr	r1, [pc, #120]	; (8003940 <vTaskSwitchContext+0xac>)
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <vTaskSwitchContext+0x5a>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e7fe      	b.n	80038ec <vTaskSwitchContext+0x58>
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <vTaskSwitchContext+0xac>)
 80038fa:	4413      	add	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	3308      	adds	r3, #8
 8003910:	429a      	cmp	r2, r3
 8003912:	d104      	bne.n	800391e <vTaskSwitchContext+0x8a>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <vTaskSwitchContext+0xb0>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000824 	.word	0x20000824
 8003938:	20000810 	.word	0x20000810
 800393c:	20000804 	.word	0x20000804
 8003940:	20000700 	.word	0x20000700
 8003944:	200006fc 	.word	0x200006fc

08003948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003950:	f000 f852 	bl	80039f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <prvIdleTask+0x28>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d9f9      	bls.n	8003950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <prvIdleTask+0x2c>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800396c:	e7f0      	b.n	8003950 <prvIdleTask+0x8>
 800396e:	bf00      	nop
 8003970:	20000700 	.word	0x20000700
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	e00c      	b.n	800399e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <prvInitialiseTaskLists+0x60>)
 8003990:	4413      	add	r3, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fb50 	bl	8003038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3301      	adds	r3, #1
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b06      	cmp	r3, #6
 80039a2:	d9ef      	bls.n	8003984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039a4:	480d      	ldr	r0, [pc, #52]	; (80039dc <prvInitialiseTaskLists+0x64>)
 80039a6:	f7ff fb47 	bl	8003038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039aa:	480d      	ldr	r0, [pc, #52]	; (80039e0 <prvInitialiseTaskLists+0x68>)
 80039ac:	f7ff fb44 	bl	8003038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <prvInitialiseTaskLists+0x6c>)
 80039b2:	f7ff fb41 	bl	8003038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039b6:	480c      	ldr	r0, [pc, #48]	; (80039e8 <prvInitialiseTaskLists+0x70>)
 80039b8:	f7ff fb3e 	bl	8003038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039bc:	480b      	ldr	r0, [pc, #44]	; (80039ec <prvInitialiseTaskLists+0x74>)
 80039be:	f7ff fb3b 	bl	8003038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <prvInitialiseTaskLists+0x78>)
 80039c4:	4a05      	ldr	r2, [pc, #20]	; (80039dc <prvInitialiseTaskLists+0x64>)
 80039c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <prvInitialiseTaskLists+0x7c>)
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <prvInitialiseTaskLists+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000700 	.word	0x20000700
 80039dc:	2000078c 	.word	0x2000078c
 80039e0:	200007a0 	.word	0x200007a0
 80039e4:	200007bc 	.word	0x200007bc
 80039e8:	200007d0 	.word	0x200007d0
 80039ec:	200007e8 	.word	0x200007e8
 80039f0:	200007b4 	.word	0x200007b4
 80039f4:	200007b8 	.word	0x200007b8

080039f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039fe:	e019      	b.n	8003a34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a00:	f000 f9ca 	bl	8003d98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <prvCheckTasksWaitingTermination+0x4c>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fb97 	bl	8003144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <prvCheckTasksWaitingTermination+0x50>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <prvCheckTasksWaitingTermination+0x50>)
 8003a1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvCheckTasksWaitingTermination+0x54>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <prvCheckTasksWaitingTermination+0x54>)
 8003a28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a2a:	f000 f9e3 	bl	8003df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f80e 	bl	8003a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <prvCheckTasksWaitingTermination+0x54>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e1      	bne.n	8003a00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200007d0 	.word	0x200007d0
 8003a48:	200007fc 	.word	0x200007fc
 8003a4c:	200007e4 	.word	0x200007e4

08003a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb12 	bl	8004090 <vPortFree>
				vPortFree( pxTCB );
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb0f 	bl	8004090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a72:	e017      	b.n	8003aa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d103      	bne.n	8003a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fb06 	bl	8004090 <vPortFree>
	}
 8003a84:	e00e      	b.n	8003aa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d009      	beq.n	8003aa4 <prvDeleteTCB+0x54>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e7fe      	b.n	8003aa2 <prvDeleteTCB+0x52>
	}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <prvResetNextTaskUnblockTime+0x40>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <prvResetNextTaskUnblockTime+0x14>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <prvResetNextTaskUnblockTime+0x16>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <prvResetNextTaskUnblockTime+0x44>)
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003acc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ace:	e008      	b.n	8003ae2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <prvResetNextTaskUnblockTime+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvResetNextTaskUnblockTime+0x44>)
 8003ae0:	6013      	str	r3, [r2, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	200007b4 	.word	0x200007b4
 8003af0:	2000081c 	.word	0x2000081c

08003af4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fb1a 	bl	8003144 <uxListRemove>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	4a20      	ldr	r2, [pc, #128]	; (8003bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d10a      	bne.n	8003b4c <prvAddCurrentTaskToDelayedList+0x58>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	481a      	ldr	r0, [pc, #104]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b46:	f7ff faa2 	bl	800308e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b4a:	e026      	b.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d209      	bcs.n	8003b78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b64:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7ff faaf 	bl	80030d4 <vListInsert>
}
 8003b76:	e010      	b.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7ff faa5 	bl	80030d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d202      	bcs.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b94:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000800 	.word	0x20000800
 8003ba8:	200006fc 	.word	0x200006fc
 8003bac:	20000804 	.word	0x20000804
 8003bb0:	200007e8 	.word	0x200007e8
 8003bb4:	200007b8 	.word	0x200007b8
 8003bb8:	200007b4 	.word	0x200007b4
 8003bbc:	2000081c 	.word	0x2000081c

08003bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b04      	subs	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bf0:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <pxPortInitialiseStack+0x54>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b14      	subs	r3, #20
 8003bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b20      	subs	r3, #32
 8003c06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c08:	68fb      	ldr	r3, [r7, #12]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	08003c19 	.word	0x08003c19

08003c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <prvTaskExitError+0x4c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2a:	d009      	beq.n	8003c40 <prvTaskExitError+0x28>
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e7fe      	b.n	8003c3e <prvTaskExitError+0x26>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c52:	bf00      	nop
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0fc      	beq.n	8003c54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	20000010 	.word	0x20000010
	...

08003c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <pxCurrentTCBConst2>)
 8003c72:	6819      	ldr	r1, [r3, #0]
 8003c74:	6808      	ldr	r0, [r1, #0]
 8003c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c7a:	f380 8809 	msr	PSP, r0
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8811 	msr	BASEPRI, r0
 8003c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c8e:	4770      	bx	lr

08003c90 <pxCurrentTCBConst2>:
 8003c90:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <prvPortStartFirstTask+0x1c>)
 8003c9a:	6800      	ldr	r0, [r0, #0]
 8003c9c:	6800      	ldr	r0, [r0, #0]
 8003c9e:	f380 8808 	msr	MSP, r0
 8003ca2:	b662      	cpsie	i
 8003ca4:	b661      	cpsie	f
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	df00      	svc	0
 8003cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed08 	.word	0xe000ed08

08003cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <xPortStartScheduler+0xcc>)
 8003cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <xPortStartScheduler+0xd0>)
 8003ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cec:	e009      	b.n	8003d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d0ef      	beq.n	8003cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1c3 0307 	rsb	r3, r3, #7
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d009      	beq.n	8003d2e <xPortStartScheduler+0x76>
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	e7fe      	b.n	8003d2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <xPortStartScheduler+0xd4>)
 8003d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <xPortStartScheduler+0xd8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <xPortStartScheduler+0xd8>)
 8003d52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <xPortStartScheduler+0xd8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <xPortStartScheduler+0xd8>)
 8003d5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d64:	f000 f8b0 	bl	8003ec8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <xPortStartScheduler+0xdc>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d6e:	f7ff ff93 	bl	8003c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d72:	f7ff fd8f 	bl	8003894 <vTaskSwitchContext>
	prvTaskExitError();
 8003d76:	f7ff ff4f 	bl	8003c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	e000e400 	.word	0xe000e400
 8003d88:	20000828 	.word	0x20000828
 8003d8c:	2000082c 	.word	0x2000082c
 8003d90:	e000ed20 	.word	0xe000ed20
 8003d94:	20000010 	.word	0x20000010

08003d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <vPortEnterCritical+0x54>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <vPortEnterCritical+0x54>)
 8003db8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <vPortEnterCritical+0x54>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10e      	bne.n	8003de0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <vPortEnterCritical+0x58>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <vPortEnterCritical+0x48>
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	e7fe      	b.n	8003dde <vPortEnterCritical+0x46>
	}
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000010 	.word	0x20000010
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <vPortExitCritical+0x48>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <vPortExitCritical+0x22>
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	e7fe      	b.n	8003e14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <vPortExitCritical+0x48>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <vPortExitCritical+0x48>)
 8003e1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <vPortExitCritical+0x48>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <vPortExitCritical+0x3e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000010 	.word	0x20000010

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e50:	6010      	str	r0, [r2, #0]
 8003e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e5a:	f380 8811 	msr	BASEPRI, r0
 8003e5e:	f7ff fd19 	bl	8003894 <vTaskSwitchContext>
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	6808      	ldr	r0, [r1, #0]
 8003e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e76:	f380 8809 	msr	PSP, r0
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	4770      	bx	lr

08003e80 <pxCurrentTCBConst>:
 8003e80:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ea0:	f7ff fc3c 	bl	800371c <xTaskIncrementTick>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <SysTick_Handler+0x3c>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <vPortSetupTimerInterrupt+0x30>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <vPortSetupTimerInterrupt+0x34>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <vPortSetupTimerInterrupt+0x38>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <vPortSetupTimerInterrupt+0x3c>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <vPortSetupTimerInterrupt+0x40>)
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eea:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <vPortSetupTimerInterrupt+0x30>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	e000e010 	.word	0xe000e010
 8003efc:	e000e018 	.word	0xe000e018
 8003f00:	20000004 	.word	0x20000004
 8003f04:	10624dd3 	.word	0x10624dd3
 8003f08:	e000e014 	.word	0xe000e014

08003f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f18:	f7ff fb56 	bl	80035c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f1c:	4b57      	ldr	r3, [pc, #348]	; (800407c <pvPortMalloc+0x170>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f24:	f000 f90c 	bl	8004140 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <pvPortMalloc+0x174>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 808c 	bne.w	800404e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01c      	beq.n	8003f76 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f023 0307 	bic.w	r3, r3, #7
 8003f54:	3308      	adds	r3, #8
 8003f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <pvPortMalloc+0x6a>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e7fe      	b.n	8003f74 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d068      	beq.n	800404e <pvPortMalloc+0x142>
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <pvPortMalloc+0x178>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d863      	bhi.n	800404e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f86:	4b40      	ldr	r3, [pc, #256]	; (8004088 <pvPortMalloc+0x17c>)
 8003f88:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <pvPortMalloc+0x17c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f90:	e004      	b.n	8003f9c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d903      	bls.n	8003fae <pvPortMalloc+0xa2>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f1      	bne.n	8003f92 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <pvPortMalloc+0x170>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d04a      	beq.n	800404e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4413      	add	r3, r2
 8003fc0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1ad2      	subs	r2, r2, r3
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d91e      	bls.n	8004018 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <pvPortMalloc+0xf4>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e7fe      	b.n	8003ffe <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004012:	69b8      	ldr	r0, [r7, #24]
 8004014:	f000 f8f6 	bl	8004204 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <pvPortMalloc+0x178>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <pvPortMalloc+0x178>)
 8004024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <pvPortMalloc+0x178>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <pvPortMalloc+0x180>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d203      	bcs.n	800403a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <pvPortMalloc+0x178>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a15      	ldr	r2, [pc, #84]	; (800408c <pvPortMalloc+0x180>)
 8004038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <pvPortMalloc+0x174>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	431a      	orrs	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800404e:	f7ff fac9 	bl	80035e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <pvPortMalloc+0x164>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e7fe      	b.n	800406e <pvPortMalloc+0x162>
	return pvReturn;
 8004070:	69fb      	ldr	r3, [r7, #28]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20002838 	.word	0x20002838
 8004080:	20002844 	.word	0x20002844
 8004084:	2000283c 	.word	0x2000283c
 8004088:	20002830 	.word	0x20002830
 800408c:	20002840 	.word	0x20002840

08004090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d046      	beq.n	8004130 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040a2:	2308      	movs	r3, #8
 80040a4:	425b      	negs	r3, r3
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <vPortFree+0xa8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <vPortFree+0x42>
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e7fe      	b.n	80040d0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <vPortFree+0x5e>
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	e7fe      	b.n	80040ec <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <vPortFree+0xa8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d115      	bne.n	8004130 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <vPortFree+0xa8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	43db      	mvns	r3, r3
 800410e:	401a      	ands	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004114:	f7ff fa58 	bl	80035c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <vPortFree+0xac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4413      	add	r3, r2
 8004122:	4a06      	ldr	r2, [pc, #24]	; (800413c <vPortFree+0xac>)
 8004124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004126:	6938      	ldr	r0, [r7, #16]
 8004128:	f000 f86c 	bl	8004204 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800412c:	f7ff fa5a 	bl	80035e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20002844 	.word	0x20002844
 800413c:	2000283c 	.word	0x2000283c

08004140 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800414a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <prvHeapInit+0xac>)
 800414e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3307      	adds	r3, #7
 800415e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0307 	bic.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <prvHeapInit+0xac>)
 8004170:	4413      	add	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <prvHeapInit+0xb0>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <prvHeapInit+0xb0>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4413      	add	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800418c:	2208      	movs	r2, #8
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <prvHeapInit+0xb4>)
 80041a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <prvHeapInit+0xb4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <prvHeapInit+0xb4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <prvHeapInit+0xb4>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <prvHeapInit+0xb8>)
 80041ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <prvHeapInit+0xbc>)
 80041d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <prvHeapInit+0xc0>)
 80041da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000830 	.word	0x20000830
 80041f0:	20002830 	.word	0x20002830
 80041f4:	20002838 	.word	0x20002838
 80041f8:	20002840 	.word	0x20002840
 80041fc:	2000283c 	.word	0x2000283c
 8004200:	20002844 	.word	0x20002844

08004204 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <prvInsertBlockIntoFreeList+0xa8>)
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e002      	b.n	8004218 <prvInsertBlockIntoFreeList+0x14>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d8f7      	bhi.n	8004212 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d108      	bne.n	8004246 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	441a      	add	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	441a      	add	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d118      	bne.n	800428c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <prvInsertBlockIntoFreeList+0xac>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d00d      	beq.n	8004282 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e008      	b.n	8004294 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <prvInsertBlockIntoFreeList+0xac>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e003      	b.n	8004294 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d002      	beq.n	80042a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20002830 	.word	0x20002830
 80042b0:	20002838 	.word	0x20002838

080042b4 <__errno>:
 80042b4:	4b01      	ldr	r3, [pc, #4]	; (80042bc <__errno+0x8>)
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000014 	.word	0x20000014

080042c0 <__libc_init_array>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	2500      	movs	r5, #0
 80042c4:	4e0c      	ldr	r6, [pc, #48]	; (80042f8 <__libc_init_array+0x38>)
 80042c6:	4c0d      	ldr	r4, [pc, #52]	; (80042fc <__libc_init_array+0x3c>)
 80042c8:	1ba4      	subs	r4, r4, r6
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	42a5      	cmp	r5, r4
 80042ce:	d109      	bne.n	80042e4 <__libc_init_array+0x24>
 80042d0:	f000 fca8 	bl	8004c24 <_init>
 80042d4:	2500      	movs	r5, #0
 80042d6:	4e0a      	ldr	r6, [pc, #40]	; (8004300 <__libc_init_array+0x40>)
 80042d8:	4c0a      	ldr	r4, [pc, #40]	; (8004304 <__libc_init_array+0x44>)
 80042da:	1ba4      	subs	r4, r4, r6
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	42a5      	cmp	r5, r4
 80042e0:	d105      	bne.n	80042ee <__libc_init_array+0x2e>
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e8:	4798      	blx	r3
 80042ea:	3501      	adds	r5, #1
 80042ec:	e7ee      	b.n	80042cc <__libc_init_array+0xc>
 80042ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f2:	4798      	blx	r3
 80042f4:	3501      	adds	r5, #1
 80042f6:	e7f2      	b.n	80042de <__libc_init_array+0x1e>
 80042f8:	08004ecc 	.word	0x08004ecc
 80042fc:	08004ecc 	.word	0x08004ecc
 8004300:	08004ecc 	.word	0x08004ecc
 8004304:	08004ed0 	.word	0x08004ed0

08004308 <memcpy>:
 8004308:	b510      	push	{r4, lr}
 800430a:	1e43      	subs	r3, r0, #1
 800430c:	440a      	add	r2, r1
 800430e:	4291      	cmp	r1, r2
 8004310:	d100      	bne.n	8004314 <memcpy+0xc>
 8004312:	bd10      	pop	{r4, pc}
 8004314:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800431c:	e7f7      	b.n	800430e <memcpy+0x6>

0800431e <memset>:
 800431e:	4603      	mov	r3, r0
 8004320:	4402      	add	r2, r0
 8004322:	4293      	cmp	r3, r2
 8004324:	d100      	bne.n	8004328 <memset+0xa>
 8004326:	4770      	bx	lr
 8004328:	f803 1b01 	strb.w	r1, [r3], #1
 800432c:	e7f9      	b.n	8004322 <memset+0x4>
	...

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004336:	b500      	push	{lr}
 8004338:	b09c      	sub	sp, #112	; 0x70
 800433a:	ab1d      	add	r3, sp, #116	; 0x74
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	9107      	str	r1, [sp, #28]
 8004342:	9104      	str	r1, [sp, #16]
 8004344:	4808      	ldr	r0, [pc, #32]	; (8004368 <siprintf+0x38>)
 8004346:	4909      	ldr	r1, [pc, #36]	; (800436c <siprintf+0x3c>)
 8004348:	f853 2b04 	ldr.w	r2, [r3], #4
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	a902      	add	r1, sp, #8
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	f000 f97e 	bl	8004654 <_svfiprintf_r>
 8004358:	2200      	movs	r2, #0
 800435a:	9b02      	ldr	r3, [sp, #8]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	b01c      	add	sp, #112	; 0x70
 8004360:	f85d eb04 	ldr.w	lr, [sp], #4
 8004364:	b003      	add	sp, #12
 8004366:	4770      	bx	lr
 8004368:	20000014 	.word	0x20000014
 800436c:	ffff0208 	.word	0xffff0208

08004370 <strchr>:
 8004370:	b2c9      	uxtb	r1, r1
 8004372:	4603      	mov	r3, r0
 8004374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004378:	b11a      	cbz	r2, 8004382 <strchr+0x12>
 800437a:	428a      	cmp	r2, r1
 800437c:	d1f9      	bne.n	8004372 <strchr+0x2>
 800437e:	4618      	mov	r0, r3
 8004380:	4770      	bx	lr
 8004382:	2900      	cmp	r1, #0
 8004384:	bf18      	it	ne
 8004386:	2300      	movne	r3, #0
 8004388:	e7f9      	b.n	800437e <strchr+0xe>

0800438a <strcpy>:
 800438a:	4603      	mov	r3, r0
 800438c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004390:	f803 2b01 	strb.w	r2, [r3], #1
 8004394:	2a00      	cmp	r2, #0
 8004396:	d1f9      	bne.n	800438c <strcpy+0x2>
 8004398:	4770      	bx	lr
	...

0800439c <strtok>:
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <strtok+0x50>)
 800439e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	681d      	ldr	r5, [r3, #0]
 80043a4:	4606      	mov	r6, r0
 80043a6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80043a8:	460f      	mov	r7, r1
 80043aa:	b9b4      	cbnz	r4, 80043da <strtok+0x3e>
 80043ac:	2050      	movs	r0, #80	; 0x50
 80043ae:	f000 f849 	bl	8004444 <malloc>
 80043b2:	65a8      	str	r0, [r5, #88]	; 0x58
 80043b4:	e9c0 4400 	strd	r4, r4, [r0]
 80043b8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80043bc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80043c0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80043c4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80043c8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80043cc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80043d0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80043d4:	6184      	str	r4, [r0, #24]
 80043d6:	7704      	strb	r4, [r0, #28]
 80043d8:	6244      	str	r4, [r0, #36]	; 0x24
 80043da:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80043dc:	4639      	mov	r1, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e4:	2301      	movs	r3, #1
 80043e6:	f000 b803 	b.w	80043f0 <__strtok_r>
 80043ea:	bf00      	nop
 80043ec:	20000014 	.word	0x20000014

080043f0 <__strtok_r>:
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b918      	cbnz	r0, 80043fc <__strtok_r+0xc>
 80043f4:	6810      	ldr	r0, [r2, #0]
 80043f6:	b908      	cbnz	r0, 80043fc <__strtok_r+0xc>
 80043f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043fa:	4620      	mov	r0, r4
 80043fc:	4604      	mov	r4, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004404:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004408:	b91e      	cbnz	r6, 8004412 <__strtok_r+0x22>
 800440a:	b96d      	cbnz	r5, 8004428 <__strtok_r+0x38>
 800440c:	6015      	str	r5, [r2, #0]
 800440e:	4628      	mov	r0, r5
 8004410:	e7f2      	b.n	80043f8 <__strtok_r+0x8>
 8004412:	42b5      	cmp	r5, r6
 8004414:	d1f6      	bne.n	8004404 <__strtok_r+0x14>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ef      	bne.n	80043fa <__strtok_r+0xa>
 800441a:	6014      	str	r4, [r2, #0]
 800441c:	7003      	strb	r3, [r0, #0]
 800441e:	e7eb      	b.n	80043f8 <__strtok_r+0x8>
 8004420:	462b      	mov	r3, r5
 8004422:	e00d      	b.n	8004440 <__strtok_r+0x50>
 8004424:	b926      	cbnz	r6, 8004430 <__strtok_r+0x40>
 8004426:	461c      	mov	r4, r3
 8004428:	4623      	mov	r3, r4
 800442a:	460f      	mov	r7, r1
 800442c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004430:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004434:	42b5      	cmp	r5, r6
 8004436:	d1f5      	bne.n	8004424 <__strtok_r+0x34>
 8004438:	2d00      	cmp	r5, #0
 800443a:	d0f1      	beq.n	8004420 <__strtok_r+0x30>
 800443c:	2100      	movs	r1, #0
 800443e:	7021      	strb	r1, [r4, #0]
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e7d9      	b.n	80043f8 <__strtok_r+0x8>

08004444 <malloc>:
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <malloc+0xc>)
 8004446:	4601      	mov	r1, r0
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	f000 b84f 	b.w	80044ec <_malloc_r>
 800444e:	bf00      	nop
 8004450:	20000014 	.word	0x20000014

08004454 <_free_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	2900      	cmp	r1, #0
 800445a:	d043      	beq.n	80044e4 <_free_r+0x90>
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f0c      	subs	r4, r1, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	18e4      	addlt	r4, r4, r3
 8004468:	f000 fbab 	bl	8004bc2 <__malloc_lock>
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <_free_r+0x94>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	4610      	mov	r0, r2
 8004472:	b933      	cbnz	r3, 8004482 <_free_r+0x2e>
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	6014      	str	r4, [r2, #0]
 8004478:	4628      	mov	r0, r5
 800447a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800447e:	f000 bba1 	b.w	8004bc4 <__malloc_unlock>
 8004482:	42a3      	cmp	r3, r4
 8004484:	d90b      	bls.n	800449e <_free_r+0x4a>
 8004486:	6821      	ldr	r1, [r4, #0]
 8004488:	1862      	adds	r2, r4, r1
 800448a:	4293      	cmp	r3, r2
 800448c:	bf01      	itttt	eq
 800448e:	681a      	ldreq	r2, [r3, #0]
 8004490:	685b      	ldreq	r3, [r3, #4]
 8004492:	1852      	addeq	r2, r2, r1
 8004494:	6022      	streq	r2, [r4, #0]
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	6004      	str	r4, [r0, #0]
 800449a:	e7ed      	b.n	8004478 <_free_r+0x24>
 800449c:	4613      	mov	r3, r2
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	b10a      	cbz	r2, 80044a6 <_free_r+0x52>
 80044a2:	42a2      	cmp	r2, r4
 80044a4:	d9fa      	bls.n	800449c <_free_r+0x48>
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	1858      	adds	r0, r3, r1
 80044aa:	42a0      	cmp	r0, r4
 80044ac:	d10b      	bne.n	80044c6 <_free_r+0x72>
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	4401      	add	r1, r0
 80044b2:	1858      	adds	r0, r3, r1
 80044b4:	4282      	cmp	r2, r0
 80044b6:	6019      	str	r1, [r3, #0]
 80044b8:	d1de      	bne.n	8004478 <_free_r+0x24>
 80044ba:	6810      	ldr	r0, [r2, #0]
 80044bc:	6852      	ldr	r2, [r2, #4]
 80044be:	4401      	add	r1, r0
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	e7d8      	b.n	8004478 <_free_r+0x24>
 80044c6:	d902      	bls.n	80044ce <_free_r+0x7a>
 80044c8:	230c      	movs	r3, #12
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	e7d4      	b.n	8004478 <_free_r+0x24>
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	1821      	adds	r1, r4, r0
 80044d2:	428a      	cmp	r2, r1
 80044d4:	bf01      	itttt	eq
 80044d6:	6811      	ldreq	r1, [r2, #0]
 80044d8:	6852      	ldreq	r2, [r2, #4]
 80044da:	1809      	addeq	r1, r1, r0
 80044dc:	6021      	streq	r1, [r4, #0]
 80044de:	6062      	str	r2, [r4, #4]
 80044e0:	605c      	str	r4, [r3, #4]
 80044e2:	e7c9      	b.n	8004478 <_free_r+0x24>
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	bf00      	nop
 80044e8:	20002848 	.word	0x20002848

080044ec <_malloc_r>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	1ccd      	adds	r5, r1, #3
 80044f0:	f025 0503 	bic.w	r5, r5, #3
 80044f4:	3508      	adds	r5, #8
 80044f6:	2d0c      	cmp	r5, #12
 80044f8:	bf38      	it	cc
 80044fa:	250c      	movcc	r5, #12
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	4606      	mov	r6, r0
 8004500:	db01      	blt.n	8004506 <_malloc_r+0x1a>
 8004502:	42a9      	cmp	r1, r5
 8004504:	d903      	bls.n	800450e <_malloc_r+0x22>
 8004506:	230c      	movs	r3, #12
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	2000      	movs	r0, #0
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	f000 fb58 	bl	8004bc2 <__malloc_lock>
 8004512:	4a21      	ldr	r2, [pc, #132]	; (8004598 <_malloc_r+0xac>)
 8004514:	6814      	ldr	r4, [r2, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	b991      	cbnz	r1, 8004540 <_malloc_r+0x54>
 800451a:	4c20      	ldr	r4, [pc, #128]	; (800459c <_malloc_r+0xb0>)
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	b91b      	cbnz	r3, 8004528 <_malloc_r+0x3c>
 8004520:	4630      	mov	r0, r6
 8004522:	f000 fb17 	bl	8004b54 <_sbrk_r>
 8004526:	6020      	str	r0, [r4, #0]
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f000 fb12 	bl	8004b54 <_sbrk_r>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d124      	bne.n	800457e <_malloc_r+0x92>
 8004534:	230c      	movs	r3, #12
 8004536:	4630      	mov	r0, r6
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	f000 fb43 	bl	8004bc4 <__malloc_unlock>
 800453e:	e7e4      	b.n	800450a <_malloc_r+0x1e>
 8004540:	680b      	ldr	r3, [r1, #0]
 8004542:	1b5b      	subs	r3, r3, r5
 8004544:	d418      	bmi.n	8004578 <_malloc_r+0x8c>
 8004546:	2b0b      	cmp	r3, #11
 8004548:	d90f      	bls.n	800456a <_malloc_r+0x7e>
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	18cc      	adds	r4, r1, r3
 800454e:	50cd      	str	r5, [r1, r3]
 8004550:	4630      	mov	r0, r6
 8004552:	f000 fb37 	bl	8004bc4 <__malloc_unlock>
 8004556:	f104 000b 	add.w	r0, r4, #11
 800455a:	1d23      	adds	r3, r4, #4
 800455c:	f020 0007 	bic.w	r0, r0, #7
 8004560:	1ac3      	subs	r3, r0, r3
 8004562:	d0d3      	beq.n	800450c <_malloc_r+0x20>
 8004564:	425a      	negs	r2, r3
 8004566:	50e2      	str	r2, [r4, r3]
 8004568:	e7d0      	b.n	800450c <_malloc_r+0x20>
 800456a:	684b      	ldr	r3, [r1, #4]
 800456c:	428c      	cmp	r4, r1
 800456e:	bf16      	itet	ne
 8004570:	6063      	strne	r3, [r4, #4]
 8004572:	6013      	streq	r3, [r2, #0]
 8004574:	460c      	movne	r4, r1
 8004576:	e7eb      	b.n	8004550 <_malloc_r+0x64>
 8004578:	460c      	mov	r4, r1
 800457a:	6849      	ldr	r1, [r1, #4]
 800457c:	e7cc      	b.n	8004518 <_malloc_r+0x2c>
 800457e:	1cc4      	adds	r4, r0, #3
 8004580:	f024 0403 	bic.w	r4, r4, #3
 8004584:	42a0      	cmp	r0, r4
 8004586:	d005      	beq.n	8004594 <_malloc_r+0xa8>
 8004588:	1a21      	subs	r1, r4, r0
 800458a:	4630      	mov	r0, r6
 800458c:	f000 fae2 	bl	8004b54 <_sbrk_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d0cf      	beq.n	8004534 <_malloc_r+0x48>
 8004594:	6025      	str	r5, [r4, #0]
 8004596:	e7db      	b.n	8004550 <_malloc_r+0x64>
 8004598:	20002848 	.word	0x20002848
 800459c:	2000284c 	.word	0x2000284c

080045a0 <__ssputs_r>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	4682      	mov	sl, r0
 80045a8:	429e      	cmp	r6, r3
 80045aa:	460c      	mov	r4, r1
 80045ac:	4690      	mov	r8, r2
 80045ae:	4699      	mov	r9, r3
 80045b0:	d837      	bhi.n	8004622 <__ssputs_r+0x82>
 80045b2:	898a      	ldrh	r2, [r1, #12]
 80045b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045b8:	d031      	beq.n	800461e <__ssputs_r+0x7e>
 80045ba:	2302      	movs	r3, #2
 80045bc:	6825      	ldr	r5, [r4, #0]
 80045be:	6909      	ldr	r1, [r1, #16]
 80045c0:	1a6f      	subs	r7, r5, r1
 80045c2:	6965      	ldr	r5, [r4, #20]
 80045c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80045cc:	f109 0301 	add.w	r3, r9, #1
 80045d0:	443b      	add	r3, r7
 80045d2:	429d      	cmp	r5, r3
 80045d4:	bf38      	it	cc
 80045d6:	461d      	movcc	r5, r3
 80045d8:	0553      	lsls	r3, r2, #21
 80045da:	d530      	bpl.n	800463e <__ssputs_r+0x9e>
 80045dc:	4629      	mov	r1, r5
 80045de:	f7ff ff85 	bl	80044ec <_malloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	b950      	cbnz	r0, 80045fc <__ssputs_r+0x5c>
 80045e6:	230c      	movs	r3, #12
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ec:	f8ca 3000 	str.w	r3, [sl]
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	463a      	mov	r2, r7
 80045fe:	6921      	ldr	r1, [r4, #16]
 8004600:	f7ff fe82 	bl	8004308 <memcpy>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	6126      	str	r6, [r4, #16]
 8004612:	443e      	add	r6, r7
 8004614:	6026      	str	r6, [r4, #0]
 8004616:	464e      	mov	r6, r9
 8004618:	6165      	str	r5, [r4, #20]
 800461a:	1bed      	subs	r5, r5, r7
 800461c:	60a5      	str	r5, [r4, #8]
 800461e:	454e      	cmp	r6, r9
 8004620:	d900      	bls.n	8004624 <__ssputs_r+0x84>
 8004622:	464e      	mov	r6, r9
 8004624:	4632      	mov	r2, r6
 8004626:	4641      	mov	r1, r8
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	f000 fab1 	bl	8004b90 <memmove>
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	2000      	movs	r0, #0
 8004632:	1b9b      	subs	r3, r3, r6
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	441e      	add	r6, r3
 800463a:	6026      	str	r6, [r4, #0]
 800463c:	e7dc      	b.n	80045f8 <__ssputs_r+0x58>
 800463e:	462a      	mov	r2, r5
 8004640:	f000 fac1 	bl	8004bc6 <_realloc_r>
 8004644:	4606      	mov	r6, r0
 8004646:	2800      	cmp	r0, #0
 8004648:	d1e2      	bne.n	8004610 <__ssputs_r+0x70>
 800464a:	6921      	ldr	r1, [r4, #16]
 800464c:	4650      	mov	r0, sl
 800464e:	f7ff ff01 	bl	8004454 <_free_r>
 8004652:	e7c8      	b.n	80045e6 <__ssputs_r+0x46>

08004654 <_svfiprintf_r>:
 8004654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004658:	461d      	mov	r5, r3
 800465a:	898b      	ldrh	r3, [r1, #12]
 800465c:	b09d      	sub	sp, #116	; 0x74
 800465e:	061f      	lsls	r7, r3, #24
 8004660:	4680      	mov	r8, r0
 8004662:	460c      	mov	r4, r1
 8004664:	4616      	mov	r6, r2
 8004666:	d50f      	bpl.n	8004688 <_svfiprintf_r+0x34>
 8004668:	690b      	ldr	r3, [r1, #16]
 800466a:	b96b      	cbnz	r3, 8004688 <_svfiprintf_r+0x34>
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	f7ff ff3d 	bl	80044ec <_malloc_r>
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	6120      	str	r0, [r4, #16]
 8004676:	b928      	cbnz	r0, 8004684 <_svfiprintf_r+0x30>
 8004678:	230c      	movs	r3, #12
 800467a:	f8c8 3000 	str.w	r3, [r8]
 800467e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004682:	e0c8      	b.n	8004816 <_svfiprintf_r+0x1c2>
 8004684:	2340      	movs	r3, #64	; 0x40
 8004686:	6163      	str	r3, [r4, #20]
 8004688:	2300      	movs	r3, #0
 800468a:	9309      	str	r3, [sp, #36]	; 0x24
 800468c:	2320      	movs	r3, #32
 800468e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004692:	2330      	movs	r3, #48	; 0x30
 8004694:	f04f 0b01 	mov.w	fp, #1
 8004698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469c:	9503      	str	r5, [sp, #12]
 800469e:	4637      	mov	r7, r6
 80046a0:	463d      	mov	r5, r7
 80046a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046a6:	b10b      	cbz	r3, 80046ac <_svfiprintf_r+0x58>
 80046a8:	2b25      	cmp	r3, #37	; 0x25
 80046aa:	d13e      	bne.n	800472a <_svfiprintf_r+0xd6>
 80046ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80046b0:	d00b      	beq.n	80046ca <_svfiprintf_r+0x76>
 80046b2:	4653      	mov	r3, sl
 80046b4:	4632      	mov	r2, r6
 80046b6:	4621      	mov	r1, r4
 80046b8:	4640      	mov	r0, r8
 80046ba:	f7ff ff71 	bl	80045a0 <__ssputs_r>
 80046be:	3001      	adds	r0, #1
 80046c0:	f000 80a4 	beq.w	800480c <_svfiprintf_r+0x1b8>
 80046c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c6:	4453      	add	r3, sl
 80046c8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ca:	783b      	ldrb	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 809d 	beq.w	800480c <_svfiprintf_r+0x1b8>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	9307      	str	r3, [sp, #28]
 80046e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046e4:	931a      	str	r3, [sp, #104]	; 0x68
 80046e6:	462f      	mov	r7, r5
 80046e8:	2205      	movs	r2, #5
 80046ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80046ee:	4850      	ldr	r0, [pc, #320]	; (8004830 <_svfiprintf_r+0x1dc>)
 80046f0:	f000 fa40 	bl	8004b74 <memchr>
 80046f4:	9b04      	ldr	r3, [sp, #16]
 80046f6:	b9d0      	cbnz	r0, 800472e <_svfiprintf_r+0xda>
 80046f8:	06d9      	lsls	r1, r3, #27
 80046fa:	bf44      	itt	mi
 80046fc:	2220      	movmi	r2, #32
 80046fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004702:	071a      	lsls	r2, r3, #28
 8004704:	bf44      	itt	mi
 8004706:	222b      	movmi	r2, #43	; 0x2b
 8004708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800470c:	782a      	ldrb	r2, [r5, #0]
 800470e:	2a2a      	cmp	r2, #42	; 0x2a
 8004710:	d015      	beq.n	800473e <_svfiprintf_r+0xea>
 8004712:	462f      	mov	r7, r5
 8004714:	2000      	movs	r0, #0
 8004716:	250a      	movs	r5, #10
 8004718:	9a07      	ldr	r2, [sp, #28]
 800471a:	4639      	mov	r1, r7
 800471c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004720:	3b30      	subs	r3, #48	; 0x30
 8004722:	2b09      	cmp	r3, #9
 8004724:	d94d      	bls.n	80047c2 <_svfiprintf_r+0x16e>
 8004726:	b1b8      	cbz	r0, 8004758 <_svfiprintf_r+0x104>
 8004728:	e00f      	b.n	800474a <_svfiprintf_r+0xf6>
 800472a:	462f      	mov	r7, r5
 800472c:	e7b8      	b.n	80046a0 <_svfiprintf_r+0x4c>
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <_svfiprintf_r+0x1dc>)
 8004730:	463d      	mov	r5, r7
 8004732:	1a80      	subs	r0, r0, r2
 8004734:	fa0b f000 	lsl.w	r0, fp, r0
 8004738:	4318      	orrs	r0, r3
 800473a:	9004      	str	r0, [sp, #16]
 800473c:	e7d3      	b.n	80046e6 <_svfiprintf_r+0x92>
 800473e:	9a03      	ldr	r2, [sp, #12]
 8004740:	1d11      	adds	r1, r2, #4
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	9103      	str	r1, [sp, #12]
 8004746:	2a00      	cmp	r2, #0
 8004748:	db01      	blt.n	800474e <_svfiprintf_r+0xfa>
 800474a:	9207      	str	r2, [sp, #28]
 800474c:	e004      	b.n	8004758 <_svfiprintf_r+0x104>
 800474e:	4252      	negs	r2, r2
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	9207      	str	r2, [sp, #28]
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	783b      	ldrb	r3, [r7, #0]
 800475a:	2b2e      	cmp	r3, #46	; 0x2e
 800475c:	d10c      	bne.n	8004778 <_svfiprintf_r+0x124>
 800475e:	787b      	ldrb	r3, [r7, #1]
 8004760:	2b2a      	cmp	r3, #42	; 0x2a
 8004762:	d133      	bne.n	80047cc <_svfiprintf_r+0x178>
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	3702      	adds	r7, #2
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	9203      	str	r2, [sp, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	bfb8      	it	lt
 8004772:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	4d2e      	ldr	r5, [pc, #184]	; (8004834 <_svfiprintf_r+0x1e0>)
 800477a:	2203      	movs	r2, #3
 800477c:	7839      	ldrb	r1, [r7, #0]
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f9f8 	bl	8004b74 <memchr>
 8004784:	b138      	cbz	r0, 8004796 <_svfiprintf_r+0x142>
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	1b40      	subs	r0, r0, r5
 800478a:	fa03 f000 	lsl.w	r0, r3, r0
 800478e:	9b04      	ldr	r3, [sp, #16]
 8004790:	3701      	adds	r7, #1
 8004792:	4303      	orrs	r3, r0
 8004794:	9304      	str	r3, [sp, #16]
 8004796:	7839      	ldrb	r1, [r7, #0]
 8004798:	2206      	movs	r2, #6
 800479a:	4827      	ldr	r0, [pc, #156]	; (8004838 <_svfiprintf_r+0x1e4>)
 800479c:	1c7e      	adds	r6, r7, #1
 800479e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047a2:	f000 f9e7 	bl	8004b74 <memchr>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d038      	beq.n	800481c <_svfiprintf_r+0x1c8>
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <_svfiprintf_r+0x1e8>)
 80047ac:	bb13      	cbnz	r3, 80047f4 <_svfiprintf_r+0x1a0>
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	3307      	adds	r3, #7
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	3308      	adds	r3, #8
 80047b8:	9303      	str	r3, [sp, #12]
 80047ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047bc:	444b      	add	r3, r9
 80047be:	9309      	str	r3, [sp, #36]	; 0x24
 80047c0:	e76d      	b.n	800469e <_svfiprintf_r+0x4a>
 80047c2:	fb05 3202 	mla	r2, r5, r2, r3
 80047c6:	2001      	movs	r0, #1
 80047c8:	460f      	mov	r7, r1
 80047ca:	e7a6      	b.n	800471a <_svfiprintf_r+0xc6>
 80047cc:	2300      	movs	r3, #0
 80047ce:	250a      	movs	r5, #10
 80047d0:	4619      	mov	r1, r3
 80047d2:	3701      	adds	r7, #1
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	4638      	mov	r0, r7
 80047d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047dc:	3a30      	subs	r2, #48	; 0x30
 80047de:	2a09      	cmp	r2, #9
 80047e0:	d903      	bls.n	80047ea <_svfiprintf_r+0x196>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0c8      	beq.n	8004778 <_svfiprintf_r+0x124>
 80047e6:	9105      	str	r1, [sp, #20]
 80047e8:	e7c6      	b.n	8004778 <_svfiprintf_r+0x124>
 80047ea:	fb05 2101 	mla	r1, r5, r1, r2
 80047ee:	2301      	movs	r3, #1
 80047f0:	4607      	mov	r7, r0
 80047f2:	e7f0      	b.n	80047d6 <_svfiprintf_r+0x182>
 80047f4:	ab03      	add	r3, sp, #12
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4622      	mov	r2, r4
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <_svfiprintf_r+0x1ec>)
 80047fc:	a904      	add	r1, sp, #16
 80047fe:	4640      	mov	r0, r8
 8004800:	f3af 8000 	nop.w
 8004804:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004808:	4681      	mov	r9, r0
 800480a:	d1d6      	bne.n	80047ba <_svfiprintf_r+0x166>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	065b      	lsls	r3, r3, #25
 8004810:	f53f af35 	bmi.w	800467e <_svfiprintf_r+0x2a>
 8004814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004816:	b01d      	add	sp, #116	; 0x74
 8004818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481c:	ab03      	add	r3, sp, #12
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4622      	mov	r2, r4
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <_svfiprintf_r+0x1ec>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	4640      	mov	r0, r8
 8004828:	f000 f882 	bl	8004930 <_printf_i>
 800482c:	e7ea      	b.n	8004804 <_svfiprintf_r+0x1b0>
 800482e:	bf00      	nop
 8004830:	08004e98 	.word	0x08004e98
 8004834:	08004e9e 	.word	0x08004e9e
 8004838:	08004ea2 	.word	0x08004ea2
 800483c:	00000000 	.word	0x00000000
 8004840:	080045a1 	.word	0x080045a1

08004844 <_printf_common>:
 8004844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	4691      	mov	r9, r2
 800484a:	461f      	mov	r7, r3
 800484c:	688a      	ldr	r2, [r1, #8]
 800484e:	690b      	ldr	r3, [r1, #16]
 8004850:	4606      	mov	r6, r0
 8004852:	4293      	cmp	r3, r2
 8004854:	bfb8      	it	lt
 8004856:	4613      	movlt	r3, r2
 8004858:	f8c9 3000 	str.w	r3, [r9]
 800485c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004860:	460c      	mov	r4, r1
 8004862:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004866:	b112      	cbz	r2, 800486e <_printf_common+0x2a>
 8004868:	3301      	adds	r3, #1
 800486a:	f8c9 3000 	str.w	r3, [r9]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004878:	3302      	addmi	r3, #2
 800487a:	f8c9 3000 	strmi.w	r3, [r9]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d107      	bne.n	8004896 <_printf_common+0x52>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	f8d9 2000 	ldr.w	r2, [r9]
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	42ab      	cmp	r3, r5
 8004894:	dc29      	bgt.n	80048ea <_printf_common+0xa6>
 8004896:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	3300      	adds	r3, #0
 800489e:	bf18      	it	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	0692      	lsls	r2, r2, #26
 80048a4:	d42e      	bmi.n	8004904 <_printf_common+0xc0>
 80048a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048aa:	4639      	mov	r1, r7
 80048ac:	4630      	mov	r0, r6
 80048ae:	47c0      	blx	r8
 80048b0:	3001      	adds	r0, #1
 80048b2:	d021      	beq.n	80048f8 <_printf_common+0xb4>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	68e5      	ldr	r5, [r4, #12]
 80048b8:	f003 0306 	and.w	r3, r3, #6
 80048bc:	2b04      	cmp	r3, #4
 80048be:	bf18      	it	ne
 80048c0:	2500      	movne	r5, #0
 80048c2:	f8d9 2000 	ldr.w	r2, [r9]
 80048c6:	f04f 0900 	mov.w	r9, #0
 80048ca:	bf08      	it	eq
 80048cc:	1aad      	subeq	r5, r5, r2
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	bf08      	it	eq
 80048d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d8:	4293      	cmp	r3, r2
 80048da:	bfc4      	itt	gt
 80048dc:	1a9b      	subgt	r3, r3, r2
 80048de:	18ed      	addgt	r5, r5, r3
 80048e0:	341a      	adds	r4, #26
 80048e2:	454d      	cmp	r5, r9
 80048e4:	d11a      	bne.n	800491c <_printf_common+0xd8>
 80048e6:	2000      	movs	r0, #0
 80048e8:	e008      	b.n	80048fc <_printf_common+0xb8>
 80048ea:	2301      	movs	r3, #1
 80048ec:	4652      	mov	r2, sl
 80048ee:	4639      	mov	r1, r7
 80048f0:	4630      	mov	r0, r6
 80048f2:	47c0      	blx	r8
 80048f4:	3001      	adds	r0, #1
 80048f6:	d103      	bne.n	8004900 <_printf_common+0xbc>
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	3501      	adds	r5, #1
 8004902:	e7c2      	b.n	800488a <_printf_common+0x46>
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	18e1      	adds	r1, r4, r3
 8004908:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004912:	4422      	add	r2, r4
 8004914:	3302      	adds	r3, #2
 8004916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800491a:	e7c4      	b.n	80048a6 <_printf_common+0x62>
 800491c:	2301      	movs	r3, #1
 800491e:	4622      	mov	r2, r4
 8004920:	4639      	mov	r1, r7
 8004922:	4630      	mov	r0, r6
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d0e6      	beq.n	80048f8 <_printf_common+0xb4>
 800492a:	f109 0901 	add.w	r9, r9, #1
 800492e:	e7d8      	b.n	80048e2 <_printf_common+0x9e>

08004930 <_printf_i>:
 8004930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004934:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004938:	460c      	mov	r4, r1
 800493a:	7e09      	ldrb	r1, [r1, #24]
 800493c:	b085      	sub	sp, #20
 800493e:	296e      	cmp	r1, #110	; 0x6e
 8004940:	4617      	mov	r7, r2
 8004942:	4606      	mov	r6, r0
 8004944:	4698      	mov	r8, r3
 8004946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004948:	f000 80b3 	beq.w	8004ab2 <_printf_i+0x182>
 800494c:	d822      	bhi.n	8004994 <_printf_i+0x64>
 800494e:	2963      	cmp	r1, #99	; 0x63
 8004950:	d036      	beq.n	80049c0 <_printf_i+0x90>
 8004952:	d80a      	bhi.n	800496a <_printf_i+0x3a>
 8004954:	2900      	cmp	r1, #0
 8004956:	f000 80b9 	beq.w	8004acc <_printf_i+0x19c>
 800495a:	2958      	cmp	r1, #88	; 0x58
 800495c:	f000 8083 	beq.w	8004a66 <_printf_i+0x136>
 8004960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004964:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004968:	e032      	b.n	80049d0 <_printf_i+0xa0>
 800496a:	2964      	cmp	r1, #100	; 0x64
 800496c:	d001      	beq.n	8004972 <_printf_i+0x42>
 800496e:	2969      	cmp	r1, #105	; 0x69
 8004970:	d1f6      	bne.n	8004960 <_printf_i+0x30>
 8004972:	6820      	ldr	r0, [r4, #0]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	0605      	lsls	r5, r0, #24
 8004978:	f103 0104 	add.w	r1, r3, #4
 800497c:	d52a      	bpl.n	80049d4 <_printf_i+0xa4>
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	da03      	bge.n	800498e <_printf_i+0x5e>
 8004986:	222d      	movs	r2, #45	; 0x2d
 8004988:	425b      	negs	r3, r3
 800498a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800498e:	486f      	ldr	r0, [pc, #444]	; (8004b4c <_printf_i+0x21c>)
 8004990:	220a      	movs	r2, #10
 8004992:	e039      	b.n	8004a08 <_printf_i+0xd8>
 8004994:	2973      	cmp	r1, #115	; 0x73
 8004996:	f000 809d 	beq.w	8004ad4 <_printf_i+0x1a4>
 800499a:	d808      	bhi.n	80049ae <_printf_i+0x7e>
 800499c:	296f      	cmp	r1, #111	; 0x6f
 800499e:	d020      	beq.n	80049e2 <_printf_i+0xb2>
 80049a0:	2970      	cmp	r1, #112	; 0x70
 80049a2:	d1dd      	bne.n	8004960 <_printf_i+0x30>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f043 0320 	orr.w	r3, r3, #32
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	e003      	b.n	80049b6 <_printf_i+0x86>
 80049ae:	2975      	cmp	r1, #117	; 0x75
 80049b0:	d017      	beq.n	80049e2 <_printf_i+0xb2>
 80049b2:	2978      	cmp	r1, #120	; 0x78
 80049b4:	d1d4      	bne.n	8004960 <_printf_i+0x30>
 80049b6:	2378      	movs	r3, #120	; 0x78
 80049b8:	4865      	ldr	r0, [pc, #404]	; (8004b50 <_printf_i+0x220>)
 80049ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049be:	e055      	b.n	8004a6c <_printf_i+0x13c>
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c6:	1d19      	adds	r1, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6011      	str	r1, [r2, #0]
 80049cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d0:	2301      	movs	r3, #1
 80049d2:	e08c      	b.n	8004aee <_printf_i+0x1be>
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049da:	6011      	str	r1, [r2, #0]
 80049dc:	bf18      	it	ne
 80049de:	b21b      	sxthne	r3, r3
 80049e0:	e7cf      	b.n	8004982 <_printf_i+0x52>
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	1d18      	adds	r0, r3, #4
 80049e8:	6010      	str	r0, [r2, #0]
 80049ea:	0628      	lsls	r0, r5, #24
 80049ec:	d501      	bpl.n	80049f2 <_printf_i+0xc2>
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	e002      	b.n	80049f8 <_printf_i+0xc8>
 80049f2:	0668      	lsls	r0, r5, #25
 80049f4:	d5fb      	bpl.n	80049ee <_printf_i+0xbe>
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	296f      	cmp	r1, #111	; 0x6f
 80049fa:	bf14      	ite	ne
 80049fc:	220a      	movne	r2, #10
 80049fe:	2208      	moveq	r2, #8
 8004a00:	4852      	ldr	r0, [pc, #328]	; (8004b4c <_printf_i+0x21c>)
 8004a02:	2100      	movs	r1, #0
 8004a04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a08:	6865      	ldr	r5, [r4, #4]
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	60a5      	str	r5, [r4, #8]
 8004a0e:	f2c0 8095 	blt.w	8004b3c <_printf_i+0x20c>
 8004a12:	6821      	ldr	r1, [r4, #0]
 8004a14:	f021 0104 	bic.w	r1, r1, #4
 8004a18:	6021      	str	r1, [r4, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d13d      	bne.n	8004a9a <_printf_i+0x16a>
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	f040 808e 	bne.w	8004b40 <_printf_i+0x210>
 8004a24:	4665      	mov	r5, ip
 8004a26:	2a08      	cmp	r2, #8
 8004a28:	d10b      	bne.n	8004a42 <_printf_i+0x112>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	07db      	lsls	r3, r3, #31
 8004a2e:	d508      	bpl.n	8004a42 <_printf_i+0x112>
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	bfde      	ittt	le
 8004a38:	2330      	movle	r3, #48	; 0x30
 8004a3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a42:	ebac 0305 	sub.w	r3, ip, r5
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	f8cd 8000 	str.w	r8, [sp]
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	aa03      	add	r2, sp, #12
 8004a50:	4621      	mov	r1, r4
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff fef6 	bl	8004844 <_printf_common>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d14d      	bne.n	8004af8 <_printf_i+0x1c8>
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a60:	b005      	add	sp, #20
 8004a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a66:	4839      	ldr	r0, [pc, #228]	; (8004b4c <_printf_i+0x21c>)
 8004a68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a6c:	6813      	ldr	r3, [r2, #0]
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	1d1d      	adds	r5, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6015      	str	r5, [r2, #0]
 8004a76:	060a      	lsls	r2, r1, #24
 8004a78:	d50b      	bpl.n	8004a92 <_printf_i+0x162>
 8004a7a:	07ca      	lsls	r2, r1, #31
 8004a7c:	bf44      	itt	mi
 8004a7e:	f041 0120 	orrmi.w	r1, r1, #32
 8004a82:	6021      	strmi	r1, [r4, #0]
 8004a84:	b91b      	cbnz	r3, 8004a8e <_printf_i+0x15e>
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	f022 0220 	bic.w	r2, r2, #32
 8004a8c:	6022      	str	r2, [r4, #0]
 8004a8e:	2210      	movs	r2, #16
 8004a90:	e7b7      	b.n	8004a02 <_printf_i+0xd2>
 8004a92:	064d      	lsls	r5, r1, #25
 8004a94:	bf48      	it	mi
 8004a96:	b29b      	uxthmi	r3, r3
 8004a98:	e7ef      	b.n	8004a7a <_printf_i+0x14a>
 8004a9a:	4665      	mov	r5, ip
 8004a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aa0:	fb02 3311 	mls	r3, r2, r1, r3
 8004aa4:	5cc3      	ldrb	r3, [r0, r3]
 8004aa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004aaa:	460b      	mov	r3, r1
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d1f5      	bne.n	8004a9c <_printf_i+0x16c>
 8004ab0:	e7b9      	b.n	8004a26 <_printf_i+0xf6>
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	6825      	ldr	r5, [r4, #0]
 8004ab6:	1d18      	adds	r0, r3, #4
 8004ab8:	6961      	ldr	r1, [r4, #20]
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	0628      	lsls	r0, r5, #24
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	d501      	bpl.n	8004ac6 <_printf_i+0x196>
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	e002      	b.n	8004acc <_printf_i+0x19c>
 8004ac6:	066a      	lsls	r2, r5, #25
 8004ac8:	d5fb      	bpl.n	8004ac2 <_printf_i+0x192>
 8004aca:	8019      	strh	r1, [r3, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	4665      	mov	r5, ip
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	e7b9      	b.n	8004a48 <_printf_i+0x118>
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	1d19      	adds	r1, r3, #4
 8004ad8:	6011      	str	r1, [r2, #0]
 8004ada:	681d      	ldr	r5, [r3, #0]
 8004adc:	6862      	ldr	r2, [r4, #4]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f847 	bl	8004b74 <memchr>
 8004ae6:	b108      	cbz	r0, 8004aec <_printf_i+0x1bc>
 8004ae8:	1b40      	subs	r0, r0, r5
 8004aea:	6060      	str	r0, [r4, #4]
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	2300      	movs	r3, #0
 8004af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af6:	e7a7      	b.n	8004a48 <_printf_i+0x118>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	462a      	mov	r2, r5
 8004afc:	4639      	mov	r1, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0aa      	beq.n	8004a5c <_printf_i+0x12c>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	079b      	lsls	r3, r3, #30
 8004b0a:	d413      	bmi.n	8004b34 <_printf_i+0x204>
 8004b0c:	68e0      	ldr	r0, [r4, #12]
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	4298      	cmp	r0, r3
 8004b12:	bfb8      	it	lt
 8004b14:	4618      	movlt	r0, r3
 8004b16:	e7a3      	b.n	8004a60 <_printf_i+0x130>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d09a      	beq.n	8004a5c <_printf_i+0x12c>
 8004b26:	3501      	adds	r5, #1
 8004b28:	68e3      	ldr	r3, [r4, #12]
 8004b2a:	9a03      	ldr	r2, [sp, #12]
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	42ab      	cmp	r3, r5
 8004b30:	dcf2      	bgt.n	8004b18 <_printf_i+0x1e8>
 8004b32:	e7eb      	b.n	8004b0c <_printf_i+0x1dc>
 8004b34:	2500      	movs	r5, #0
 8004b36:	f104 0919 	add.w	r9, r4, #25
 8004b3a:	e7f5      	b.n	8004b28 <_printf_i+0x1f8>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ac      	bne.n	8004a9a <_printf_i+0x16a>
 8004b40:	7803      	ldrb	r3, [r0, #0]
 8004b42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b4a:	e76c      	b.n	8004a26 <_printf_i+0xf6>
 8004b4c:	08004ea9 	.word	0x08004ea9
 8004b50:	08004eba 	.word	0x08004eba

08004b54 <_sbrk_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	2300      	movs	r3, #0
 8004b58:	4c05      	ldr	r4, [pc, #20]	; (8004b70 <_sbrk_r+0x1c>)
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	f7fc fbbc 	bl	80012dc <_sbrk>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_sbrk_r+0x1a>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_sbrk_r+0x1a>
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	20002c50 	.word	0x20002c50

08004b74 <memchr>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	b2c9      	uxtb	r1, r1
 8004b78:	4402      	add	r2, r0
 8004b7a:	4290      	cmp	r0, r2
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	d101      	bne.n	8004b84 <memchr+0x10>
 8004b80:	2300      	movs	r3, #0
 8004b82:	e003      	b.n	8004b8c <memchr+0x18>
 8004b84:	781c      	ldrb	r4, [r3, #0]
 8004b86:	3001      	adds	r0, #1
 8004b88:	428c      	cmp	r4, r1
 8004b8a:	d1f6      	bne.n	8004b7a <memchr+0x6>
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0302 	add.w	r3, r1, r2
 8004b98:	d807      	bhi.n	8004baa <memmove+0x1a>
 8004b9a:	1e42      	subs	r2, r0, #1
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d00a      	beq.n	8004bb6 <memmove+0x26>
 8004ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ba8:	e7f8      	b.n	8004b9c <memmove+0xc>
 8004baa:	4283      	cmp	r3, r0
 8004bac:	d9f5      	bls.n	8004b9a <memmove+0xa>
 8004bae:	1881      	adds	r1, r0, r2
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	42d3      	cmn	r3, r2
 8004bb4:	d100      	bne.n	8004bb8 <memmove+0x28>
 8004bb6:	bd10      	pop	{r4, pc}
 8004bb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bc0:	e7f7      	b.n	8004bb2 <memmove+0x22>

08004bc2 <__malloc_lock>:
 8004bc2:	4770      	bx	lr

08004bc4 <__malloc_unlock>:
 8004bc4:	4770      	bx	lr

08004bc6 <_realloc_r>:
 8004bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc8:	4607      	mov	r7, r0
 8004bca:	4614      	mov	r4, r2
 8004bcc:	460e      	mov	r6, r1
 8004bce:	b921      	cbnz	r1, 8004bda <_realloc_r+0x14>
 8004bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f7ff bc89 	b.w	80044ec <_malloc_r>
 8004bda:	b922      	cbnz	r2, 8004be6 <_realloc_r+0x20>
 8004bdc:	f7ff fc3a 	bl	8004454 <_free_r>
 8004be0:	4625      	mov	r5, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be6:	f000 f814 	bl	8004c12 <_malloc_usable_size_r>
 8004bea:	42a0      	cmp	r0, r4
 8004bec:	d20f      	bcs.n	8004c0e <_realloc_r+0x48>
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f7ff fc7b 	bl	80044ec <_malloc_r>
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d0f2      	beq.n	8004be2 <_realloc_r+0x1c>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4622      	mov	r2, r4
 8004c00:	f7ff fb82 	bl	8004308 <memcpy>
 8004c04:	4631      	mov	r1, r6
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff fc24 	bl	8004454 <_free_r>
 8004c0c:	e7e9      	b.n	8004be2 <_realloc_r+0x1c>
 8004c0e:	4635      	mov	r5, r6
 8004c10:	e7e7      	b.n	8004be2 <_realloc_r+0x1c>

08004c12 <_malloc_usable_size_r>:
 8004c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c16:	1f18      	subs	r0, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bfbc      	itt	lt
 8004c1c:	580b      	ldrlt	r3, [r1, r0]
 8004c1e:	18c0      	addlt	r0, r0, r3
 8004c20:	4770      	bx	lr
	...

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
