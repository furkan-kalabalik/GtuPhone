/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "queue.h"
#include "semphr.h"
#include "event_groups.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "call_process.h"
#include "phone_state.h"
#include "sms_process.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

xTaskHandle display_uart_task;
xTaskHandle display_task;
xTaskHandle call_task;
xTaskHandle message_task;
xQueueHandle GSM_TO_DISPLAY_Q;
xQueueHandle DISPLAY_TO_GSM_Q;
/* USER CODE BEGIN PV */
#define GSM_UART		&huart1
#define DISPLAY_UART	&huart2
typedef uint8_t			bool;
#define TRUE			1
#define FALSE			0
#define RX_SIZE			256

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void display_uart_task_func(void *arg);
void display_task_func(void *arg);
void call_task_func(void *arg);
void message_task_func(void *arg);
void parse_display_request(char *data);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char display_rx[RX_SIZE];
int display_rx_index = 0;
bool display_rec_flag = FALSE;
te_call_state CALL_STATE = NO_CALL;
te_phone_state PHONE_STATE = IDLE;
te_sms_state SMS_STATE = NO_SMS;
char data_buffer[RX_SIZE] = {0};
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(display_rx[display_rx_index] == '\n')
	{
		display_rec_flag = TRUE;
		display_rx_index = 0;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}
	else
	{
		display_rx_index++;
		HAL_UART_Receive_IT(DISPLAY_UART, (uint8_t*)&display_rx[display_rx_index], 1);
	}

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  //pSendAtCommand("ATE0", 400);
  /* USER CODE END 2 */
  char close_echo[] = "ATE0\r\n";
//  char call_command[] = "ATD+905383674319i;\r\n";
//  char call_status[] = "AT+CPAS\r\n";
//  char baud_rate[] = "AT+IPR?\r\n";
  char response[64] = {0};
  HAL_UART_Transmit(GSM_UART, (uint8_t*)&close_echo[0], strlen(close_echo), 200);
  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
  memset(response, 0, sizeof(response));

//  HAL_UART_Transmit(GSM_UART, (uint8_t*)&call_command[0], strlen(call_command), 200);
//  HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 5000);
//  memset(response, 0, sizeof(response));
//
//  while(1)
//  {
//    HAL_UART_Transmit(GSM_UART, (uint8_t*)&call_status[0], strlen(call_status), 200);
//    HAL_UART_Receive(GSM_UART, (uint8_t*)&response[0], sizeof(response), 400);
//    memset(response, 0, sizeof(response));
//    HAL_Delay(1000);
//  }

//  GSM_TO_DISPLAY_Q = xQueueCreate( 5, sizeof( ts_to_display ) );
//  if(GSM_TO_DISPLAY_Q == NULL)
//  {
//	  __NOP();
//  }
//  DISPLAY_TO_GSM_Q = xQueueCreate( 5, sizeof( ts_to_gsm) );
////  if(DISPLAY_TO_GSM_Q == NULL)
//  {
//	  __NOP();
//  }

  if(xTaskCreate(display_uart_task_func, "display_uart", 256, NULL, 3, &display_uart_task) != pdPASS)
  {
	  __NOP();
  }
  if(xTaskCreate(call_task_func, "call_task", 1024, NULL, 3, &call_task) != pdPASS)
  {
	  __NOP();
  }
  if(xTaskCreate(message_task_func, "call_task", 1024, NULL, 3, &message_task) != pdPASS)
  {
	  __NOP();
  }
  vTaskStartScheduler();

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */
void parse_display_request(char *data)
{
	if(data[1] == 0x01 && data[2] == 0x10) //call
	{
		CALL_STATE = INITIATE_CALL;
//		request.op = MAKE_CALL;
//		memcpy(request.data, data, RX_SIZE);
	}
	else if(data[1] == 0x03 && data[2] == 0x02)
	{
		CALL_STATE = TERMINATE_CALL;

	}
	else if(data[1] == 0x02 && data[2] == 0x39)//Send sms
	{
		SMS_STATE = SEND_SMS;
	}
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_display_task_func */
/**
  * @brief  Function implementing the display_task thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_display_task_func */
void display_uart_task_func(void *argument)
{
  /* USER CODE BEGIN 5 */
	HAL_UART_Receive_IT(DISPLAY_UART, &display_rx[display_rx_index], 1);
  /* Infinite loop */
  for(;;)
  {
	  if(display_rec_flag)
	  {
		  memcpy(&data_buffer[0], &display_rx[0], RX_SIZE);
		  memset(&display_rx[0], 0, RX_SIZE);
		  display_rec_flag = FALSE;
		  parse_display_request(&data_buffer[0]);
	  }
  }
  /* USER CODE END 5 */
}

void display_task_func(void *argument)
{
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  for(;;)
  {

  }
  /* USER CODE END gsm_task_func */
}

void message_task_func(void *argument)
{
	char data[RX_SIZE] = {0};
	char response[128] = {0};
	char text_mod[] = "AT+CMGF=1\r\n";
	char sender_command[64] = {0};
	char message_command[160] = {0};
	const TickType_t delay = 500 / portTICK_PERIOD_MS;
	while(1)
	{
		switch (SMS_STATE) {
			case SEND_SMS:
				memcpy(&data[0], (char*)&data_buffer[0], RX_SIZE);
				memset(&data_buffer[0], 0, RX_SIZE);
				char *number = strtok(&data[7], ">");
				char *message = strtok(NULL, ">");
				sprintf(&sender_command[0], "AT+CMGS=\"%s\"\r\n", number);
				sprintf(&message_command[0], "%s", message);
				message_command[strlen(message_command)-1] = 26;
				HAL_UART_Transmit(GSM_UART, &text_mod, strlen(text_mod), 300);
				HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
				HAL_UART_Transmit(GSM_UART, &sender_command, strlen(sender_command), 300);
				HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
				HAL_UART_Transmit(GSM_UART, &message_command, strlen(message_command), 300);
				HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 300);
				SMS_STATE = COMPLETED_SMS;
			break;
			case COMPLETED_SMS:
				SMS_STATE = NO_SMS;
				memset(sender_command, 0, sizeof(sender_command));
				memset(message_command, 0, sizeof(message_command));
				memset(response, 0, sizeof(response));
			break;
			default:
			break;
		}
		vTaskDelay(delay);
	}
}

void call_task_func(void *argument)
{
  /* USER CODE BEGIN gsm_task_func */
  /* Infinite loop */
  char data[RX_SIZE] = {0};
  char response[128] = {0};
  char custom_command[64] = {0};
  char check_status[] = "AT+CPAS\r\n";
  char terminate_call[] = "ATH0\r\n";
  char send_call_end[] = "call_progress.t1.txt=\"Call Ended!\"\xFF\xFF\xFF";
  char start_page_timer[] = "call_progress.tm0.en=1\xFF\xFF\xFF";
  const TickType_t delay = 500 / portTICK_PERIOD_MS;
  while(1)
  {
	  switch(CALL_STATE)
	  {
	  case INITIATE_CALL:
		  memcpy(&data[0], (char*)&data_buffer[0], RX_SIZE);
		  memset(&data_buffer[0], 0, RX_SIZE);
		  data[strlen(data)-1] = '\0';
		  sprintf(&custom_command[0], "ATD+%si;\r\n", &data[8]);
		  HAL_UART_Transmit(GSM_UART, &custom_command, strlen(custom_command), 500);
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 5000);
		  CALL_STATE = CHECK_CALL_STATE;
		  break;
	  case CHECK_CALL_STATE:
		  HAL_UART_Transmit(GSM_UART, &check_status, strlen(check_status), 200);
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
		  if(response[9] == '0')
			  CALL_STATE = TERMINATE_CALL;
		  break;
	  case TERMINATE_CALL:
		  HAL_UART_Transmit(GSM_UART, &terminate_call, strlen(terminate_call), 200);
		  HAL_UART_Receive(GSM_UART, &response[0], sizeof(response), 400);
		  HAL_UART_Transmit(DISPLAY_UART, send_call_end, strlen(send_call_end), 300);
		  HAL_UART_Transmit(DISPLAY_UART, start_page_timer, strlen(start_page_timer), 300);
		  memset(custom_command, 0, sizeof(custom_command));
		  memset(response, 0, sizeof(response));
		  CALL_STATE = NO_CALL;
		  break;
	  default:
		  break;
	  }
	  vTaskDelay(delay);
  }
  /* USER CODE END gsm_task_func */
}

 /**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
